;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/autoscaling/api
  (:use)
  (:nicknames #:aws/autoscaling)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/autoscaling/api)
(common-lisp:progn
 (common-lisp:defclass autoscaling-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "autoscaling" :protocol
                        :query))
 (common-lisp:export 'autoscaling-request))
(common-lisp:progn
 (common-lisp:define-condition autoscaling-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'autoscaling-error))
(common-lisp:defvar *error-map*
  '(("ActiveInstanceRefreshNotFoundFault"
     . active-instance-refresh-not-found-fault)
    ("AlreadyExistsFault" . already-exists-fault)
    ("InstanceRefreshInProgressFault" . instance-refresh-in-progress-fault)
    ("InvalidNextToken" . invalid-next-token)
    ("IrreversibleInstanceRefreshFault" . irreversible-instance-refresh-fault)
    ("LimitExceededFault" . limit-exceeded-fault)
    ("ResourceContentionFault" . resource-contention-fault)
    ("ResourceInUseFault" . resource-in-use-fault)
    ("ScalingActivityInProgressFault" . scaling-activity-in-progress-fault)
    ("ServiceLinkedRoleFailure" . service-linked-role-failure)))
(common-lisp:progn
 (common-lisp:defclass accelerator-count-request common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %accelerator-count-request-max :initform
                         common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %accelerator-count-request-min :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accelerator-count-request
                    'make-accelerator-count-request))
 (common-lisp:defun make-accelerator-count-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance 'accelerator-count-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-count-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-count-request))
   common-lisp:nil))
(common-lisp:deftype accelerator-manufacturer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accelerator-manufacturers ()
   '(trivial-types:proper-list accelerator-manufacturer))
 (common-lisp:defun |make-accelerator-manufacturers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            accelerator-manufacturer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype accelerator-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accelerator-names ()
   '(trivial-types:proper-list accelerator-name))
 (common-lisp:defun |make-accelerator-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accelerator-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass accelerator-total-memory-mi-brequest common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %accelerator-total-memory-mi-brequest-max
                         :initform common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %accelerator-total-memory-mi-brequest-min
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accelerator-total-memory-mi-brequest
                    'make-accelerator-total-memory-mi-brequest))
 (common-lisp:defun make-accelerator-total-memory-mi-brequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance
                      'accelerator-total-memory-mi-brequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-total-memory-mi-brequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-total-memory-mi-brequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-total-memory-mi-brequest))
   common-lisp:nil))
(common-lisp:deftype accelerator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accelerator-types ()
   '(trivial-types:proper-list accelerator-type))
 (common-lisp:defun |make-accelerator-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accelerator-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition active-instance-refresh-not-found-fault
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       active-instance-refresh-not-found-fault-message)))
 (common-lisp:export
  (common-lisp:list 'active-instance-refresh-not-found-fault
                    'active-instance-refresh-not-found-fault-message)))
(common-lisp:progn
 (common-lisp:deftype activities () '(trivial-types:proper-list activity))
 (common-lisp:defun |make-activities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass activities-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %activities-type-next-token :initform common-lisp:nil)
                        (activities :initarg :activities :type
                         (common-lisp:or activities common-lisp:null) :accessor
                         %activities-type-activities :initform
                         (common-lisp:error ":activities is required"))))
 (common-lisp:export (common-lisp:list 'activities-type 'make-activities-type))
 (common-lisp:defun make-activities-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token activities)
   (common-lisp:apply #'common-lisp:make-instance 'activities-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activities-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activities-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activities-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activity common-lisp:nil
                       ((auto-scaling-group-arn :initarg
                         :auto-scaling-group-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %activity-auto-scaling-group-arn :initform
                         common-lisp:nil)
                        (auto-scaling-group-state :initarg
                         :auto-scaling-group-state :type
                         (common-lisp:or auto-scaling-group-state
                                         common-lisp:null)
                         :accessor %activity-auto-scaling-group-state :initform
                         common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %activity-details :initform common-lisp:nil)
                        (progress :initarg :progress :type
                         (common-lisp:or progress common-lisp:null) :accessor
                         %activity-progress :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %activity-status-message :initform
                         common-lisp:nil)
                        (status-code :initarg :status-code :type
                         (common-lisp:or scaling-activity-status-code
                                         common-lisp:null)
                         :accessor %activity-status-code :initform
                         (common-lisp:error ":status-code is required"))
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %activity-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %activity-start-time :initform
                         (common-lisp:error ":start-time is required"))
                        (cause :initarg :cause :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor %activity-cause :initform
                         (common-lisp:error ":cause is required"))
                        (description :initarg :description :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %activity-description :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %activity-auto-scaling-group-name :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (activity-id :initarg :activity-id :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %activity-activity-id :initform
                         (common-lisp:error ":activity-id is required"))))
 (common-lisp:export (common-lisp:list 'activity 'make-activity))
 (common-lisp:defun make-activity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-group-arn
                     auto-scaling-group-state details progress status-message
                     status-code end-time start-time cause description
                     auto-scaling-group-name activity-id)
   (common-lisp:apply #'common-lisp:make-instance 'activity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "ActivityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "Cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-state))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype activity-ids () '(trivial-types:proper-list xml-string))
 (common-lisp:defun |make-activity-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass activity-type common-lisp:nil
                       ((activity :initarg :activity :type
                         (common-lisp:or activity common-lisp:null) :accessor
                         %activity-type-activity :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'activity-type 'make-activity-type))
 (common-lisp:defun make-activity-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activity)
   (common-lisp:apply #'common-lisp:make-instance 'activity-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity))
      (common-lisp:list
       (common-lisp:cons "Activity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass adjustment-type common-lisp:nil
                       ((adjustment-type :initarg :adjustment-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %adjustment-type-adjustment-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'adjustment-type 'make-adjustment-type))
 (common-lisp:defun make-adjustment-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key adjustment-type)
   (common-lisp:apply #'common-lisp:make-instance 'adjustment-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input adjustment-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input adjustment-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-type))
      (common-lisp:list
       (common-lisp:cons "AdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input adjustment-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype adjustment-types ()
   '(trivial-types:proper-list adjustment-type))
 (common-lisp:defun |make-adjustment-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list adjustment-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass alarm common-lisp:nil
                       ((alarm-arn :initarg :alarm-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %alarm-alarm-arn :initform common-lisp:nil)
                        (alarm-name :initarg :alarm-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %alarm-alarm-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defun make-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-arn alarm-name)
   (common-lisp:apply #'common-lisp:make-instance 'alarm
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "AlarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-arn))
      (common-lisp:list
       (common-lisp:cons "AlarmARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarms () '(trivial-types:proper-list alarm))
 (common-lisp:defun |make-alarms|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-instance-types ()
   '(trivial-types:proper-list allowed-instance-type))
 (common-lisp:defun |make-allowed-instance-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition already-exists-fault
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       already-exists-fault-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-fault 'already-exists-fault-message)))
(common-lisp:deftype ascii-string-max-len255 () 'common-lisp:string)
(common-lisp:deftype associate-public-ip-address () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass attach-instances-query common-lisp:nil
                       ((auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %attach-instances-query-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-ids common-lisp:null)
                         :accessor %attach-instances-query-instance-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'attach-instances-query 'make-attach-instances-query))
 (common-lisp:defun make-attach-instances-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-group-name instance-ids)
   (common-lisp:apply #'common-lisp:make-instance 'attach-instances-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-load-balancer-target-groups-result-type
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-target-groups-result-type
                    'make-attach-load-balancer-target-groups-result-type))
 (common-lisp:defun make-attach-load-balancer-target-groups-result-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-load-balancer-target-groups-result-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-load-balancer-target-groups-type common-lisp:nil
                       ((target-group-arns :initarg :target-group-arns :type
                         (common-lisp:or target-group-arns common-lisp:null)
                         :accessor
                         %attach-load-balancer-target-groups-type-target-group-arns
                         :initform
                         (common-lisp:error ":target-group-arns is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %attach-load-balancer-target-groups-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-target-groups-type
                    'make-attach-load-balancer-target-groups-type))
 (common-lisp:defun make-attach-load-balancer-target-groups-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-group-arns
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-load-balancer-target-groups-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-load-balancers-result-type common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'attach-load-balancers-result-type
                    'make-attach-load-balancers-result-type))
 (common-lisp:defun make-attach-load-balancers-result-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-load-balancers-result-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-load-balancers-type common-lisp:nil
                       ((load-balancer-names :initarg :load-balancer-names
                         :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor
                         %attach-load-balancers-type-load-balancer-names
                         :initform
                         (common-lisp:error
                          ":load-balancer-names is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %attach-load-balancers-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancers-type
                    'make-attach-load-balancers-type))
 (common-lisp:defun make-attach-load-balancers-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-names
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'attach-load-balancers-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-traffic-sources-result-type common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'attach-traffic-sources-result-type
                    'make-attach-traffic-sources-result-type))
 (common-lisp:defun make-attach-traffic-sources-result-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-traffic-sources-result-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-traffic-sources-type common-lisp:nil
                       ((traffic-sources :initarg :traffic-sources :type
                         (common-lisp:or traffic-sources common-lisp:null)
                         :accessor %attach-traffic-sources-type-traffic-sources
                         :initform
                         (common-lisp:error ":traffic-sources is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %attach-traffic-sources-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'attach-traffic-sources-type
                    'make-attach-traffic-sources-type))
 (common-lisp:defun make-attach-traffic-sources-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key traffic-sources auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'attach-traffic-sources-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-type))
   common-lisp:nil))
(common-lisp:deftype auto-rollback () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group common-lisp:nil
                       ((traffic-sources :initarg :traffic-sources :type
                         (common-lisp:or traffic-sources common-lisp:null)
                         :accessor %auto-scaling-group-traffic-sources
                         :initform common-lisp:nil)
                        (default-instance-warmup :initarg
                         :default-instance-warmup :type
                         (common-lisp:or default-instance-warmup
                                         common-lisp:null)
                         :accessor %auto-scaling-group-default-instance-warmup
                         :initform common-lisp:nil)
                        (desired-capacity-type :initarg :desired-capacity-type
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %auto-scaling-group-desired-capacity-type
                         :initform common-lisp:nil)
                        (context :initarg :context :type
                         (common-lisp:or context common-lisp:null) :accessor
                         %auto-scaling-group-context :initform common-lisp:nil)
                        (warm-pool-size :initarg :warm-pool-size :type
                         (common-lisp:or warm-pool-size common-lisp:null)
                         :accessor %auto-scaling-group-warm-pool-size :initform
                         common-lisp:nil)
                        (warm-pool-configuration :initarg
                         :warm-pool-configuration :type
                         (common-lisp:or warm-pool-configuration
                                         common-lisp:null)
                         :accessor %auto-scaling-group-warm-pool-configuration
                         :initform common-lisp:nil)
                        (capacity-rebalance :initarg :capacity-rebalance :type
                         (common-lisp:or capacity-rebalance-enabled
                                         common-lisp:null)
                         :accessor %auto-scaling-group-capacity-rebalance
                         :initform common-lisp:nil)
                        (max-instance-lifetime :initarg :max-instance-lifetime
                         :type
                         (common-lisp:or max-instance-lifetime
                                         common-lisp:null)
                         :accessor %auto-scaling-group-max-instance-lifetime
                         :initform common-lisp:nil)
                        (service-linked-role-arn :initarg
                         :service-linked-role-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %auto-scaling-group-service-linked-role-arn
                         :initform common-lisp:nil)
                        (new-instances-protected-from-scale-in :initarg
                         :new-instances-protected-from-scale-in :type
                         (common-lisp:or instance-protected common-lisp:null)
                         :accessor
                         %auto-scaling-group-new-instances-protected-from-scale-in
                         :initform common-lisp:nil)
                        (termination-policies :initarg :termination-policies
                         :type
                         (common-lisp:or termination-policies common-lisp:null)
                         :accessor %auto-scaling-group-termination-policies
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-description-list common-lisp:null)
                         :accessor %auto-scaling-group-tags :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %auto-scaling-group-status :initform
                         common-lisp:nil)
                        (enabled-metrics :initarg :enabled-metrics :type
                         (common-lisp:or enabled-metrics common-lisp:null)
                         :accessor %auto-scaling-group-enabled-metrics
                         :initform common-lisp:nil)
                        (vpczone-identifier :initarg :vpczone-identifier :type
                         (common-lisp:or xml-string-max-len2047
                                         common-lisp:null)
                         :accessor %auto-scaling-group-vpczone-identifier
                         :initform common-lisp:nil)
                        (placement-group :initarg :placement-group :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %auto-scaling-group-placement-group
                         :initform common-lisp:nil)
                        (suspended-processes :initarg :suspended-processes
                         :type
                         (common-lisp:or suspended-processes common-lisp:null)
                         :accessor %auto-scaling-group-suspended-processes
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %auto-scaling-group-created-time :initform
                         (common-lisp:error ":created-time is required"))
                        (instances :initarg :instances :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         %auto-scaling-group-instances :initform
                         common-lisp:nil)
                        (health-check-grace-period :initarg
                         :health-check-grace-period :type
                         (common-lisp:or health-check-grace-period
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-group-health-check-grace-period
                         :initform common-lisp:nil)
                        (health-check-type :initarg :health-check-type :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor %auto-scaling-group-health-check-type
                         :initform
                         (common-lisp:error ":health-check-type is required"))
                        (target-group-arns :initarg :target-group-arns :type
                         (common-lisp:or target-group-arns common-lisp:null)
                         :accessor %auto-scaling-group-target-group-arns
                         :initform common-lisp:nil)
                        (load-balancer-names :initarg :load-balancer-names
                         :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor %auto-scaling-group-load-balancer-names
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor %auto-scaling-group-availability-zones
                         :initform
                         (common-lisp:error ":availability-zones is required"))
                        (default-cooldown :initarg :default-cooldown :type
                         (common-lisp:or cooldown common-lisp:null) :accessor
                         %auto-scaling-group-default-cooldown :initform
                         (common-lisp:error ":default-cooldown is required"))
                        (predicted-capacity :initarg :predicted-capacity :type
                         (common-lisp:or auto-scaling-group-predicted-capacity
                                         common-lisp:null)
                         :accessor %auto-scaling-group-predicted-capacity
                         :initform common-lisp:nil)
                        (desired-capacity :initarg :desired-capacity :type
                         (common-lisp:or auto-scaling-group-desired-capacity
                                         common-lisp:null)
                         :accessor %auto-scaling-group-desired-capacity
                         :initform
                         (common-lisp:error ":desired-capacity is required"))
                        (max-size :initarg :max-size :type
                         (common-lisp:or auto-scaling-group-max-size
                                         common-lisp:null)
                         :accessor %auto-scaling-group-max-size :initform
                         (common-lisp:error ":max-size is required"))
                        (min-size :initarg :min-size :type
                         (common-lisp:or auto-scaling-group-min-size
                                         common-lisp:null)
                         :accessor %auto-scaling-group-min-size :initform
                         (common-lisp:error ":min-size is required"))
                        (mixed-instances-policy :initarg
                         :mixed-instances-policy :type
                         (common-lisp:or mixed-instances-policy
                                         common-lisp:null)
                         :accessor %auto-scaling-group-mixed-instances-policy
                         :initform common-lisp:nil)
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor %auto-scaling-group-launch-template
                         :initform common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-group-launch-configuration-name
                         :initform common-lisp:nil)
                        (auto-scaling-group-arn :initarg
                         :auto-scaling-group-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %auto-scaling-group-auto-scaling-group-arn
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %auto-scaling-group-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defun make-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key traffic-sources default-instance-warmup
                     desired-capacity-type context warm-pool-size
                     warm-pool-configuration capacity-rebalance
                     max-instance-lifetime service-linked-role-arn
                     new-instances-protected-from-scale-in termination-policies
                     tags status enabled-metrics vpczone-identifier
                     placement-group suspended-processes created-time instances
                     health-check-grace-period health-check-type
                     target-group-arns load-balancer-names availability-zones
                     default-cooldown predicted-capacity desired-capacity
                     max-size min-size mixed-instances-policy launch-template
                     launch-configuration-name auto-scaling-group-arn
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicted-capacity))
      (common-lisp:list
       (common-lisp:cons "PredictedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-cooldown))
      (common-lisp:list
       (common-lisp:cons "DefaultCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-type))
      (common-lisp:list
       (common-lisp:cons "HealthCheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-processes))
      (common-lisp:list
       (common-lisp:cons "SuspendedProcesses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-group))
      (common-lisp:list
       (common-lisp:cons "PlacementGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpczone-identifier))
      (common-lisp:list
       (common-lisp:cons "VPCZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-metrics))
      (common-lisp:list
       (common-lisp:cons "EnabledMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-policies))
      (common-lisp:list
       (common-lisp:cons "TerminationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-instances-protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "NewInstancesProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-linked-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceLinkedRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-instance-lifetime))
      (common-lisp:list
       (common-lisp:cons "MaxInstanceLifetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-rebalance))
      (common-lisp:list
       (common-lisp:cons "CapacityRebalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'warm-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "WarmPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-pool-size))
      (common-lisp:list
       (common-lisp:cons "WarmPoolSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-capacity-type))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-group-desired-capacity ()
  'common-lisp:integer)
(common-lisp:deftype auto-scaling-group-max-size () 'common-lisp:integer)
(common-lisp:deftype auto-scaling-group-min-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-auto-scaling-group-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group-names-type common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %auto-scaling-group-names-type-filters :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %auto-scaling-group-names-type-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %auto-scaling-group-names-type-next-token :initform
                         common-lisp:nil)
                        (auto-scaling-group-names :initarg
                         :auto-scaling-group-names :type
                         (common-lisp:or auto-scaling-group-names
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-group-names-type-auto-scaling-group-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group-names-type
                    'make-auto-scaling-group-names-type))
 (common-lisp:defun make-auto-scaling-group-names-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-records next-token
                     auto-scaling-group-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-scaling-group-names-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-names-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-names-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-names))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-names-type))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-group-predicted-capacity ()
  'common-lisp:integer)
(common-lisp:deftype auto-scaling-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-groups ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun |make-auto-scaling-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-groups-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %auto-scaling-groups-type-next-token :initform
                         common-lisp:nil)
                        (auto-scaling-groups :initarg :auto-scaling-groups
                         :type
                         (common-lisp:or auto-scaling-groups common-lisp:null)
                         :accessor
                         %auto-scaling-groups-type-auto-scaling-groups
                         :initform
                         (common-lisp:error
                          ":auto-scaling-groups is required"))))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-groups-type 'make-auto-scaling-groups-type))
 (common-lisp:defun make-auto-scaling-groups-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token auto-scaling-groups)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-groups-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-groups-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-groups-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-groups-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-instance-details common-lisp:nil
                       ((weighted-capacity :initarg :weighted-capacity :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor
                         %auto-scaling-instance-details-weighted-capacity
                         :initform common-lisp:nil)
                        (protected-from-scale-in :initarg
                         :protected-from-scale-in :type
                         (common-lisp:or instance-protected common-lisp:null)
                         :accessor
                         %auto-scaling-instance-details-protected-from-scale-in
                         :initform
                         (common-lisp:error
                          ":protected-from-scale-in is required"))
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-instance-details-launch-template
                         :initform common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-instance-details-launch-configuration-name
                         :initform common-lisp:nil)
                        (health-status :initarg :health-status :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor %auto-scaling-instance-details-health-status
                         :initform
                         (common-lisp:error ":health-status is required"))
                        (lifecycle-state :initarg :lifecycle-state :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor
                         %auto-scaling-instance-details-lifecycle-state
                         :initform
                         (common-lisp:error ":lifecycle-state is required"))
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-instance-details-availability-zone
                         :initform
                         (common-lisp:error ":availability-zone is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-instance-details-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %auto-scaling-instance-details-instance-type
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or xml-string-max-len19 common-lisp:null)
                         :accessor %auto-scaling-instance-details-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-instance-details
                    'make-auto-scaling-instance-details))
 (common-lisp:defun make-auto-scaling-instance-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weighted-capacity protected-from-scale-in
                     launch-template launch-configuration-name health-status
                     lifecycle-state availability-zone auto-scaling-group-name
                     instance-type instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-scaling-instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "LifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "ProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-instances ()
   '(trivial-types:proper-list auto-scaling-instance-details))
 (common-lisp:defun |make-auto-scaling-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-scaling-instance-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-instances-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %auto-scaling-instances-type-next-token :initform
                         common-lisp:nil)
                        (auto-scaling-instances :initarg
                         :auto-scaling-instances :type
                         (common-lisp:or auto-scaling-instances
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-instances-type-auto-scaling-instances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-instances-type
                    'make-auto-scaling-instances-type))
 (common-lisp:defun make-auto-scaling-instances-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token auto-scaling-instances)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-instances-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instances-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instances-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-instances))
      (common-lisp:list
       (common-lisp:cons "AutoScalingInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instances-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-notification-types ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-auto-scaling-notification-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bare-metal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass baseline-ebs-bandwidth-mbps-request common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %baseline-ebs-bandwidth-mbps-request-max
                         :initform common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %baseline-ebs-bandwidth-mbps-request-min
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'baseline-ebs-bandwidth-mbps-request
                    'make-baseline-ebs-bandwidth-mbps-request))
 (common-lisp:defun make-baseline-ebs-bandwidth-mbps-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance
                      'baseline-ebs-bandwidth-mbps-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          baseline-ebs-bandwidth-mbps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          baseline-ebs-bandwidth-mbps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          baseline-ebs-bandwidth-mbps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-scheduled-action-answer common-lisp:nil
                       ((failed-scheduled-actions :initarg
                         :failed-scheduled-actions :type
                         (common-lisp:or
                          failed-scheduled-update-group-action-requests
                          common-lisp:null)
                         :accessor
                         %batch-delete-scheduled-action-answer-failed-scheduled-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-scheduled-action-answer
                    'make-batch-delete-scheduled-action-answer))
 (common-lisp:defun make-batch-delete-scheduled-action-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-scheduled-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-scheduled-action-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-scheduled-actions))
      (common-lisp:list
       (common-lisp:cons "FailedScheduledActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-scheduled-action-type common-lisp:nil
                       ((scheduled-action-names :initarg
                         :scheduled-action-names :type
                         (common-lisp:or scheduled-action-names
                                         common-lisp:null)
                         :accessor
                         %batch-delete-scheduled-action-type-scheduled-action-names
                         :initform
                         (common-lisp:error
                          ":scheduled-action-names is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %batch-delete-scheduled-action-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-delete-scheduled-action-type
                    'make-batch-delete-scheduled-action-type))
 (common-lisp:defun make-batch-delete-scheduled-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduled-action-names
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-scheduled-action-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-names))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-scheduled-update-group-action-answer
                       common-lisp:nil
                       ((failed-scheduled-update-group-actions :initarg
                         :failed-scheduled-update-group-actions :type
                         (common-lisp:or
                          failed-scheduled-update-group-action-requests
                          common-lisp:null)
                         :accessor
                         %batch-put-scheduled-update-group-action-answer-failed-scheduled-update-group-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-put-scheduled-update-group-action-answer
                    'make-batch-put-scheduled-update-group-action-answer))
 (common-lisp:defun make-batch-put-scheduled-update-group-action-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-scheduled-update-group-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-scheduled-update-group-action-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-scheduled-update-group-actions))
      (common-lisp:list
       (common-lisp:cons "FailedScheduledUpdateGroupActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-scheduled-update-group-action-type
                       common-lisp:nil
                       ((scheduled-update-group-actions :initarg
                         :scheduled-update-group-actions :type
                         (common-lisp:or scheduled-update-group-action-requests
                                         common-lisp:null)
                         :accessor
                         %batch-put-scheduled-update-group-action-type-scheduled-update-group-actions
                         :initform
                         (common-lisp:error
                          ":scheduled-update-group-actions is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %batch-put-scheduled-update-group-action-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-put-scheduled-update-group-action-type
                    'make-batch-put-scheduled-update-group-action-type))
 (common-lisp:defun make-batch-put-scheduled-update-group-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduled-update-group-actions
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-scheduled-update-group-action-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-update-group-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduledUpdateGroupActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-type))
   common-lisp:nil))
(common-lisp:deftype block-device-ebs-delete-on-termination ()
  'common-lisp:boolean)
(common-lisp:deftype block-device-ebs-encrypted () 'common-lisp:boolean)
(common-lisp:deftype block-device-ebs-iops () 'common-lisp:integer)
(common-lisp:deftype block-device-ebs-throughput () 'common-lisp:integer)
(common-lisp:deftype block-device-ebs-volume-size () 'common-lisp:integer)
(common-lisp:deftype block-device-ebs-volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass block-device-mapping common-lisp:nil
                       ((no-device :initarg :no-device :type
                         (common-lisp:or no-device common-lisp:null) :accessor
                         %block-device-mapping-no-device :initform
                         common-lisp:nil)
                        (ebs :initarg :ebs :type
                         (common-lisp:or ebs common-lisp:null) :accessor
                         %block-device-mapping-ebs :initform common-lisp:nil)
                        (device-name :initarg :device-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %block-device-mapping-device-name :initform
                         (common-lisp:error ":device-name is required"))
                        (virtual-name :initarg :virtual-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %block-device-mapping-virtual-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'block-device-mapping 'make-block-device-mapping))
 (common-lisp:defun make-block-device-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key no-device ebs device-name virtual-name)
   (common-lisp:apply #'common-lisp:make-instance 'block-device-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype block-device-mappings ()
   '(trivial-types:proper-list block-device-mapping))
 (common-lisp:defun |make-block-device-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype burstable-performance () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-instance-refresh-answer common-lisp:nil
                       ((instance-refresh-id :initarg :instance-refresh-id
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %cancel-instance-refresh-answer-instance-refresh-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-instance-refresh-answer
                    'make-cancel-instance-refresh-answer))
 (common-lisp:defun make-cancel-instance-refresh-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-refresh-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-instance-refresh-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refresh-id))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-instance-refresh-type common-lisp:nil
                       ((auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %cancel-instance-refresh-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-instance-refresh-type
                    'make-cancel-instance-refresh-type))
 (common-lisp:defun make-cancel-instance-refresh-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-instance-refresh-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass capacity-forecast common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or predictive-scaling-forecast-values
                                         common-lisp:null)
                         :accessor %capacity-forecast-values :initform
                         (common-lisp:error ":values is required"))
                        (timestamps :initarg :timestamps :type
                         (common-lisp:or predictive-scaling-forecast-timestamps
                                         common-lisp:null)
                         :accessor %capacity-forecast-timestamps :initform
                         (common-lisp:error ":timestamps is required"))))
 (common-lisp:export
  (common-lisp:list 'capacity-forecast 'make-capacity-forecast))
 (common-lisp:defun make-capacity-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values timestamps)
   (common-lisp:apply #'common-lisp:make-instance 'capacity-forecast
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-forecast))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-forecast))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamps))
      (common-lisp:list
       (common-lisp:cons "Timestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-forecast))
   common-lisp:nil))
(common-lisp:deftype capacity-rebalance-enabled () 'common-lisp:boolean)
(common-lisp:deftype checkpoint-delay () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype checkpoint-percentages ()
   '(trivial-types:proper-list non-zero-int-percent))
 (common-lisp:defun |make-checkpoint-percentages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-zero-int-percent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype classic-link-vpcsecurity-groups ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-classic-link-vpcsecurity-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass complete-lifecycle-action-answer common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'complete-lifecycle-action-answer
                    'make-complete-lifecycle-action-answer))
 (common-lisp:defun make-complete-lifecycle-action-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-lifecycle-action-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass complete-lifecycle-action-type common-lisp:nil
                       ((instance-id :initarg :instance-id :type
                         (common-lisp:or xml-string-max-len19 common-lisp:null)
                         :accessor %complete-lifecycle-action-type-instance-id
                         :initform common-lisp:nil)
                        (lifecycle-action-result :initarg
                         :lifecycle-action-result :type
                         (common-lisp:or lifecycle-action-result
                                         common-lisp:null)
                         :accessor
                         %complete-lifecycle-action-type-lifecycle-action-result
                         :initform
                         (common-lisp:error
                          ":lifecycle-action-result is required"))
                        (lifecycle-action-token :initarg
                         :lifecycle-action-token :type
                         (common-lisp:or lifecycle-action-token
                                         common-lisp:null)
                         :accessor
                         %complete-lifecycle-action-type-lifecycle-action-token
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %complete-lifecycle-action-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (lifecycle-hook-name :initarg :lifecycle-hook-name
                         :type
                         (common-lisp:or ascii-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %complete-lifecycle-action-type-lifecycle-hook-name
                         :initform
                         (common-lisp:error
                          ":lifecycle-hook-name is required"))))
 (common-lisp:export
  (common-lisp:list 'complete-lifecycle-action-type
                    'make-complete-lifecycle-action-type))
 (common-lisp:defun make-complete-lifecycle-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-id lifecycle-action-result
                     lifecycle-action-token auto-scaling-group-name
                     lifecycle-hook-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-lifecycle-action-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-action-token))
      (common-lisp:list
       (common-lisp:cons "LifecycleActionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-action-result))
      (common-lisp:list
       (common-lisp:cons "LifecycleActionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-type))
   common-lisp:nil))
(common-lisp:deftype context () 'common-lisp:string)
(common-lisp:deftype cooldown () 'common-lisp:integer)
(common-lisp:deftype cpu-manufacturer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cpu-manufacturers ()
   '(trivial-types:proper-list cpu-manufacturer))
 (common-lisp:defun |make-cpu-manufacturers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cpu-manufacturer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-auto-scaling-group-type common-lisp:nil
                       ((traffic-sources :initarg :traffic-sources :type
                         (common-lisp:or traffic-sources common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-traffic-sources
                         :initform common-lisp:nil)
                        (default-instance-warmup :initarg
                         :default-instance-warmup :type
                         (common-lisp:or default-instance-warmup
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-default-instance-warmup
                         :initform common-lisp:nil)
                        (desired-capacity-type :initarg :desired-capacity-type
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-desired-capacity-type
                         :initform common-lisp:nil)
                        (context :initarg :context :type
                         (common-lisp:or context common-lisp:null) :accessor
                         %create-auto-scaling-group-type-context :initform
                         common-lisp:nil)
                        (max-instance-lifetime :initarg :max-instance-lifetime
                         :type
                         (common-lisp:or max-instance-lifetime
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-max-instance-lifetime
                         :initform common-lisp:nil)
                        (service-linked-role-arn :initarg
                         :service-linked-role-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-service-linked-role-arn
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-auto-scaling-group-type-tags :initform
                         common-lisp:nil)
                        (lifecycle-hook-specification-list :initarg
                         :lifecycle-hook-specification-list :type
                         (common-lisp:or lifecycle-hook-specifications
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-lifecycle-hook-specification-list
                         :initform common-lisp:nil)
                        (capacity-rebalance :initarg :capacity-rebalance :type
                         (common-lisp:or capacity-rebalance-enabled
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-capacity-rebalance
                         :initform common-lisp:nil)
                        (new-instances-protected-from-scale-in :initarg
                         :new-instances-protected-from-scale-in :type
                         (common-lisp:or instance-protected common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-new-instances-protected-from-scale-in
                         :initform common-lisp:nil)
                        (termination-policies :initarg :termination-policies
                         :type
                         (common-lisp:or termination-policies common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-termination-policies
                         :initform common-lisp:nil)
                        (vpczone-identifier :initarg :vpczone-identifier :type
                         (common-lisp:or xml-string-max-len2047
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-vpczone-identifier
                         :initform common-lisp:nil)
                        (placement-group :initarg :placement-group :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-placement-group
                         :initform common-lisp:nil)
                        (health-check-grace-period :initarg
                         :health-check-grace-period :type
                         (common-lisp:or health-check-grace-period
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-health-check-grace-period
                         :initform common-lisp:nil)
                        (health-check-type :initarg :health-check-type :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-health-check-type
                         :initform common-lisp:nil)
                        (target-group-arns :initarg :target-group-arns :type
                         (common-lisp:or target-group-arns common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-target-group-arns
                         :initform common-lisp:nil)
                        (load-balancer-names :initarg :load-balancer-names
                         :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-load-balancer-names
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-availability-zones
                         :initform common-lisp:nil)
                        (default-cooldown :initarg :default-cooldown :type
                         (common-lisp:or cooldown common-lisp:null) :accessor
                         %create-auto-scaling-group-type-default-cooldown
                         :initform common-lisp:nil)
                        (desired-capacity :initarg :desired-capacity :type
                         (common-lisp:or auto-scaling-group-desired-capacity
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-desired-capacity
                         :initform common-lisp:nil)
                        (max-size :initarg :max-size :type
                         (common-lisp:or auto-scaling-group-max-size
                                         common-lisp:null)
                         :accessor %create-auto-scaling-group-type-max-size
                         :initform (common-lisp:error ":max-size is required"))
                        (min-size :initarg :min-size :type
                         (common-lisp:or auto-scaling-group-min-size
                                         common-lisp:null)
                         :accessor %create-auto-scaling-group-type-min-size
                         :initform (common-lisp:error ":min-size is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or xml-string-max-len19 common-lisp:null)
                         :accessor %create-auto-scaling-group-type-instance-id
                         :initform common-lisp:nil)
                        (mixed-instances-policy :initarg
                         :mixed-instances-policy :type
                         (common-lisp:or mixed-instances-policy
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-mixed-instances-policy
                         :initform common-lisp:nil)
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-launch-template
                         :initform common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-launch-configuration-name
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-group-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-auto-scaling-group-type
                    'make-create-auto-scaling-group-type))
 (common-lisp:defun make-create-auto-scaling-group-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key traffic-sources default-instance-warmup
                     desired-capacity-type context max-instance-lifetime
                     service-linked-role-arn tags
                     lifecycle-hook-specification-list capacity-rebalance
                     new-instances-protected-from-scale-in termination-policies
                     vpczone-identifier placement-group
                     health-check-grace-period health-check-type
                     target-group-arns load-balancer-names availability-zones
                     default-cooldown desired-capacity max-size min-size
                     instance-id mixed-instances-policy launch-template
                     launch-configuration-name auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-auto-scaling-group-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-cooldown))
      (common-lisp:list
       (common-lisp:cons "DefaultCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-type))
      (common-lisp:list
       (common-lisp:cons "HealthCheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-group))
      (common-lisp:list
       (common-lisp:cons "PlacementGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpczone-identifier))
      (common-lisp:list
       (common-lisp:cons "VPCZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-policies))
      (common-lisp:list
       (common-lisp:cons "TerminationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-instances-protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "NewInstancesProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-rebalance))
      (common-lisp:list
       (common-lisp:cons "CapacityRebalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-hook-specification-list))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookSpecificationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-linked-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceLinkedRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-instance-lifetime))
      (common-lisp:list
       (common-lisp:cons "MaxInstanceLifetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-capacity-type))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-group-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-launch-configuration-type common-lisp:nil
                       ((metadata-options :initarg :metadata-options :type
                         (common-lisp:or instance-metadata-options
                                         common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-metadata-options
                         :initform common-lisp:nil)
                        (placement-tenancy :initarg :placement-tenancy :type
                         (common-lisp:or xml-string-max-len64 common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-placement-tenancy
                         :initform common-lisp:nil)
                        (associate-public-ip-address :initarg
                         :associate-public-ip-address :type
                         (common-lisp:or associate-public-ip-address
                                         common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-associate-public-ip-address
                         :initform common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :type
                         (common-lisp:or ebs-optimized common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-ebs-optimized
                         :initform common-lisp:nil)
                        (iam-instance-profile :initarg :iam-instance-profile
                         :type
                         (common-lisp:or xml-string-max-len1600
                                         common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-iam-instance-profile
                         :initform common-lisp:nil)
                        (spot-price :initarg :spot-price :type
                         (common-lisp:or spot-price common-lisp:null) :accessor
                         %create-launch-configuration-type-spot-price :initform
                         common-lisp:nil)
                        (instance-monitoring :initarg :instance-monitoring
                         :type
                         (common-lisp:or instance-monitoring common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-instance-monitoring
                         :initform common-lisp:nil)
                        (block-device-mappings :initarg :block-device-mappings
                         :type
                         (common-lisp:or block-device-mappings
                                         common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-block-device-mappings
                         :initform common-lisp:nil)
                        (ramdisk-id :initarg :ramdisk-id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %create-launch-configuration-type-ramdisk-id
                         :initform common-lisp:nil)
                        (kernel-id :initarg :kernel-id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %create-launch-configuration-type-kernel-id
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-instance-type
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or xml-string-max-len19 common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-instance-id
                         :initform common-lisp:nil)
                        (user-data :initarg :user-data :type
                         (common-lisp:or xml-string-user-data common-lisp:null)
                         :accessor %create-launch-configuration-type-user-data
                         :initform common-lisp:nil)
                        (classic-link-vpcsecurity-groups :initarg
                         :classic-link-vpcsecurity-groups :type
                         (common-lisp:or classic-link-vpcsecurity-groups
                                         common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-classic-link-vpcsecurity-groups
                         :initform common-lisp:nil)
                        (classic-link-vpcid :initarg :classic-link-vpcid :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-classic-link-vpcid
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-security-groups
                         :initform common-lisp:nil)
                        (key-name :initarg :key-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %create-launch-configuration-type-key-name
                         :initform common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %create-launch-configuration-type-image-id
                         :initform common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %create-launch-configuration-type-launch-configuration-name
                         :initform
                         (common-lisp:error
                          ":launch-configuration-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-launch-configuration-type
                    'make-create-launch-configuration-type))
 (common-lisp:defun make-create-launch-configuration-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata-options placement-tenancy
                     associate-public-ip-address ebs-optimized
                     iam-instance-profile spot-price instance-monitoring
                     block-device-mappings ramdisk-id kernel-id instance-type
                     instance-id user-data classic-link-vpcsecurity-groups
                     classic-link-vpcid security-groups key-name image-id
                     launch-configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-launch-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classic-link-vpcid))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classic-link-vpcsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVPCSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-monitoring))
      (common-lisp:list
       (common-lisp:cons "InstanceMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-tenancy))
      (common-lisp:list
       (common-lisp:cons "PlacementTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-or-update-tags-type common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-or-update-tags-type-tags :initform
                         (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'create-or-update-tags-type
                    'make-create-or-update-tags-type))
 (common-lisp:defun make-create-or-update-tags-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance 'create-or-update-tags-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-or-update-tags-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-or-update-tags-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-or-update-tags-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customized-metric-specification common-lisp:nil
                       ((metrics :initarg :metrics :type
                         (common-lisp:or target-tracking-metric-data-queries
                                         common-lisp:null)
                         :accessor %customized-metric-specification-metrics
                         :initform common-lisp:nil)
                        (unit :initarg :unit :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor %customized-metric-specification-unit
                         :initform common-lisp:nil)
                        (statistic :initarg :statistic :type
                         (common-lisp:or metric-statistic common-lisp:null)
                         :accessor %customized-metric-specification-statistic
                         :initform common-lisp:nil)
                        (dimensions :initarg :dimensions :type
                         (common-lisp:or metric-dimensions common-lisp:null)
                         :accessor %customized-metric-specification-dimensions
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or metric-namespace common-lisp:null)
                         :accessor %customized-metric-specification-namespace
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %customized-metric-specification-metric-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'customized-metric-specification
                    'make-customized-metric-specification))
 (common-lisp:defun make-customized-metric-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metrics unit statistic dimensions
                     namespace metric-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'customized-metric-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   common-lisp:nil))
(common-lisp:deftype default-instance-warmup () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass delete-auto-scaling-group-type common-lisp:nil
                       ((force-delete :initarg :force-delete :type
                         (common-lisp:or force-delete common-lisp:null)
                         :accessor %delete-auto-scaling-group-type-force-delete
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %delete-auto-scaling-group-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-auto-scaling-group-type
                    'make-delete-auto-scaling-group-type))
 (common-lisp:defun make-delete-auto-scaling-group-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-delete auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-auto-scaling-group-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "ForceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-group-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lifecycle-hook-answer common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-hook-answer
                    'make-delete-lifecycle-hook-answer))
 (common-lisp:defun make-delete-lifecycle-hook-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lifecycle-hook-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lifecycle-hook-type common-lisp:nil
                       ((auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %delete-lifecycle-hook-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (lifecycle-hook-name :initarg :lifecycle-hook-name
                         :type
                         (common-lisp:or ascii-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %delete-lifecycle-hook-type-lifecycle-hook-name
                         :initform
                         (common-lisp:error
                          ":lifecycle-hook-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-hook-type
                    'make-delete-lifecycle-hook-type))
 (common-lisp:defun make-delete-lifecycle-hook-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-group-name
                     lifecycle-hook-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-lifecycle-hook-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-notification-configuration-type common-lisp:nil
                       ((topic-arn :initarg :topic-arn :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %delete-notification-configuration-type-topic-arn
                         :initform
                         (common-lisp:error ":topic-arn is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %delete-notification-configuration-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-notification-configuration-type
                    'make-delete-notification-configuration-type))
 (common-lisp:defun make-delete-notification-configuration-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-arn auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-notification-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-type common-lisp:nil
                       ((policy-name :initarg :policy-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-policy-type-policy-name :initform
                         (common-lisp:error ":policy-name is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %delete-policy-type-auto-scaling-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-type 'make-delete-policy-type))
 (common-lisp:defun make-delete-policy-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-name auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-policy-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-policy-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-policy-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-policy-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scheduled-action-type common-lisp:nil
                       ((scheduled-action-name :initarg :scheduled-action-name
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %delete-scheduled-action-type-scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %delete-scheduled-action-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-action-type
                    'make-delete-scheduled-action-type))
 (common-lisp:defun make-delete-scheduled-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduled-action-name
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-scheduled-action-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-type common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-tags-type-tags :initform
                         (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-tags-type 'make-delete-tags-type))
 (common-lisp:defun make-delete-tags-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-warm-pool-answer common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-warm-pool-answer 'make-delete-warm-pool-answer))
 (common-lisp:defun make-delete-warm-pool-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-warm-pool-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-warm-pool-type common-lisp:nil
                       ((force-delete :initarg :force-delete :type
                         (common-lisp:or force-delete common-lisp:null)
                         :accessor %delete-warm-pool-type-force-delete
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %delete-warm-pool-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-warm-pool-type 'make-delete-warm-pool-type))
 (common-lisp:defun make-delete-warm-pool-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-delete auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-warm-pool-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "ForceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-answer common-lisp:nil
                       ((number-of-launch-configurations :initarg
                         :number-of-launch-configurations :type
                         (common-lisp:or number-of-launch-configurations
                                         common-lisp:null)
                         :accessor
                         %describe-account-limits-answer-number-of-launch-configurations
                         :initform common-lisp:nil)
                        (number-of-auto-scaling-groups :initarg
                         :number-of-auto-scaling-groups :type
                         (common-lisp:or number-of-auto-scaling-groups
                                         common-lisp:null)
                         :accessor
                         %describe-account-limits-answer-number-of-auto-scaling-groups
                         :initform common-lisp:nil)
                        (max-number-of-launch-configurations :initarg
                         :max-number-of-launch-configurations :type
                         (common-lisp:or max-number-of-launch-configurations
                                         common-lisp:null)
                         :accessor
                         %describe-account-limits-answer-max-number-of-launch-configurations
                         :initform common-lisp:nil)
                        (max-number-of-auto-scaling-groups :initarg
                         :max-number-of-auto-scaling-groups :type
                         (common-lisp:or max-number-of-auto-scaling-groups
                                         common-lisp:null)
                         :accessor
                         %describe-account-limits-answer-max-number-of-auto-scaling-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-answer
                    'make-describe-account-limits-answer))
 (common-lisp:defun make-describe-account-limits-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key number-of-launch-configurations
                     number-of-auto-scaling-groups
                     max-number-of-launch-configurations
                     max-number-of-auto-scaling-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-number-of-auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "MaxNumberOfAutoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-number-of-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "MaxNumberOfLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "NumberOfAutoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "NumberOfLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-adjustment-types-answer common-lisp:nil
                       ((adjustment-types :initarg :adjustment-types :type
                         (common-lisp:or adjustment-types common-lisp:null)
                         :accessor
                         %describe-adjustment-types-answer-adjustment-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-adjustment-types-answer
                    'make-describe-adjustment-types-answer))
 (common-lisp:defun make-describe-adjustment-types-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key adjustment-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-adjustment-types-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-adjustment-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-adjustment-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-types))
      (common-lisp:list
       (common-lisp:cons "AdjustmentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-adjustment-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-auto-scaling-instances-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-auto-scaling-instances-type-next-token
                         :initform common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         %describe-auto-scaling-instances-type-max-records
                         :initform common-lisp:nil)
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-ids common-lisp:null)
                         :accessor
                         %describe-auto-scaling-instances-type-instance-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-scaling-instances-type
                    'make-describe-auto-scaling-instances-type))
 (common-lisp:defun make-describe-auto-scaling-instances-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-records instance-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-auto-scaling-instances-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-instances-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-instances-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-instances-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-auto-scaling-notification-types-answer
                       common-lisp:nil
                       ((auto-scaling-notification-types :initarg
                         :auto-scaling-notification-types :type
                         (common-lisp:or auto-scaling-notification-types
                                         common-lisp:null)
                         :accessor
                         %describe-auto-scaling-notification-types-answer-auto-scaling-notification-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-scaling-notification-types-answer
                    'make-describe-auto-scaling-notification-types-answer))
 (common-lisp:defun make-describe-auto-scaling-notification-types-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-notification-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-auto-scaling-notification-types-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-notification-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-notification-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-notification-types))
      (common-lisp:list
       (common-lisp:cons "AutoScalingNotificationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-notification-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-refreshes-answer common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-instance-refreshes-answer-next-token
                         :initform common-lisp:nil)
                        (instance-refreshes :initarg :instance-refreshes :type
                         (common-lisp:or instance-refreshes common-lisp:null)
                         :accessor
                         %describe-instance-refreshes-answer-instance-refreshes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-refreshes-answer
                    'make-describe-instance-refreshes-answer))
 (common-lisp:defun make-describe-instance-refreshes-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instance-refreshes)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-refreshes-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refreshes))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-refreshes-type common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         %describe-instance-refreshes-type-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-instance-refreshes-type-next-token :initform
                         common-lisp:nil)
                        (instance-refresh-ids :initarg :instance-refresh-ids
                         :type
                         (common-lisp:or instance-refresh-ids common-lisp:null)
                         :accessor
                         %describe-instance-refreshes-type-instance-refresh-ids
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-instance-refreshes-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-instance-refreshes-type
                    'make-describe-instance-refreshes-type))
 (common-lisp:defun make-describe-instance-refreshes-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token
                     instance-refresh-ids auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-refreshes-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-refresh-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-lifecycle-hook-types-answer common-lisp:nil
                       ((lifecycle-hook-types :initarg :lifecycle-hook-types
                         :type
                         (common-lisp:or auto-scaling-notification-types
                                         common-lisp:null)
                         :accessor
                         %describe-lifecycle-hook-types-answer-lifecycle-hook-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-lifecycle-hook-types-answer
                    'make-describe-lifecycle-hook-types-answer))
 (common-lisp:defun make-describe-lifecycle-hook-types-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle-hook-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-lifecycle-hook-types-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hook-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hook-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-hook-types))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hook-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-lifecycle-hooks-answer common-lisp:nil
                       ((lifecycle-hooks :initarg :lifecycle-hooks :type
                         (common-lisp:or lifecycle-hooks common-lisp:null)
                         :accessor
                         %describe-lifecycle-hooks-answer-lifecycle-hooks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-lifecycle-hooks-answer
                    'make-describe-lifecycle-hooks-answer))
 (common-lisp:defun make-describe-lifecycle-hooks-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle-hooks)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-lifecycle-hooks-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hooks))
      (common-lisp:list
       (common-lisp:cons "LifecycleHooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-lifecycle-hooks-type common-lisp:nil
                       ((lifecycle-hook-names :initarg :lifecycle-hook-names
                         :type
                         (common-lisp:or lifecycle-hook-names common-lisp:null)
                         :accessor
                         %describe-lifecycle-hooks-type-lifecycle-hook-names
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-lifecycle-hooks-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-lifecycle-hooks-type
                    'make-describe-lifecycle-hooks-type))
 (common-lisp:defun make-describe-lifecycle-hooks-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle-hook-names
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-lifecycle-hooks-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-hook-names))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-target-groups-request
                       common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         %describe-load-balancer-target-groups-request-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-load-balancer-target-groups-request-next-token
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-load-balancer-target-groups-request-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-target-groups-request
                    'make-describe-load-balancer-target-groups-request))
 (common-lisp:defun make-describe-load-balancer-target-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-target-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-target-groups-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-load-balancer-target-groups-response-next-token
                         :initform common-lisp:nil)
                        (load-balancer-target-groups :initarg
                         :load-balancer-target-groups :type
                         (common-lisp:or load-balancer-target-group-states
                                         common-lisp:null)
                         :accessor
                         %describe-load-balancer-target-groups-response-load-balancer-target-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-target-groups-response
                    'make-describe-load-balancer-target-groups-response))
 (common-lisp:defun make-describe-load-balancer-target-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token load-balancer-target-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-target-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-target-groups))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerTargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancers-request common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %describe-load-balancers-request-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-load-balancers-request-next-token :initform
                         common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-load-balancers-request-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancers-request
                    'make-describe-load-balancers-request))
 (common-lisp:defun make-describe-load-balancers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancers-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-load-balancers-response-next-token :initform
                         common-lisp:nil)
                        (load-balancers :initarg :load-balancers :type
                         (common-lisp:or load-balancer-states common-lisp:null)
                         :accessor
                         %describe-load-balancers-response-load-balancers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancers-response
                    'make-describe-load-balancers-response))
 (common-lisp:defun make-describe-load-balancers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token load-balancers)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metric-collection-types-answer common-lisp:nil
                       ((granularities :initarg :granularities :type
                         (common-lisp:or metric-granularity-types
                                         common-lisp:null)
                         :accessor
                         %describe-metric-collection-types-answer-granularities
                         :initform common-lisp:nil)
                        (metrics :initarg :metrics :type
                         (common-lisp:or metric-collection-types
                                         common-lisp:null)
                         :accessor
                         %describe-metric-collection-types-answer-metrics
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-metric-collection-types-answer
                    'make-describe-metric-collection-types-answer))
 (common-lisp:defun make-describe-metric-collection-types-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key granularities metrics)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metric-collection-types-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-collection-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-collection-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularities))
      (common-lisp:list
       (common-lisp:cons "Granularities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-collection-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-notification-configurations-answer
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-notification-configurations-answer-next-token
                         :initform common-lisp:nil)
                        (notification-configurations :initarg
                         :notification-configurations :type
                         (common-lisp:or notification-configurations
                                         common-lisp:null)
                         :accessor
                         %describe-notification-configurations-answer-notification-configurations
                         :initform
                         (common-lisp:error
                          ":notification-configurations is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-notification-configurations-answer
                    'make-describe-notification-configurations-answer))
 (common-lisp:defun make-describe-notification-configurations-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token notification-configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-notification-configurations-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configurations))
      (common-lisp:list
       (common-lisp:cons "NotificationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-notification-configurations-type
                       common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         %describe-notification-configurations-type-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-notification-configurations-type-next-token
                         :initform common-lisp:nil)
                        (auto-scaling-group-names :initarg
                         :auto-scaling-group-names :type
                         (common-lisp:or auto-scaling-group-names
                                         common-lisp:null)
                         :accessor
                         %describe-notification-configurations-type-auto-scaling-group-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-notification-configurations-type
                    'make-describe-notification-configurations-type))
 (common-lisp:defun make-describe-notification-configurations-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token
                     auto-scaling-group-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-notification-configurations-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-names))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-policies-type common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %describe-policies-type-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-policies-type-next-token :initform
                         common-lisp:nil)
                        (policy-types :initarg :policy-types :type
                         (common-lisp:or policy-types common-lisp:null)
                         :accessor %describe-policies-type-policy-types
                         :initform common-lisp:nil)
                        (policy-names :initarg :policy-names :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor %describe-policies-type-policy-names
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-policies-type-auto-scaling-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-policies-type 'make-describe-policies-type))
 (common-lisp:defun make-describe-policies-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token policy-types
                     policy-names auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-policies-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-policies-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-policies-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-types))
      (common-lisp:list
       (common-lisp:cons "PolicyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-policies-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-activities-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-scaling-activities-type-next-token :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         %describe-scaling-activities-type-max-records
                         :initform common-lisp:nil)
                        (include-deleted-groups :initarg
                         :include-deleted-groups :type
                         (common-lisp:or include-deleted-groups
                                         common-lisp:null)
                         :accessor
                         %describe-scaling-activities-type-include-deleted-groups
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-scaling-activities-type-auto-scaling-group-name
                         :initform common-lisp:nil)
                        (activity-ids :initarg :activity-ids :type
                         (common-lisp:or activity-ids common-lisp:null)
                         :accessor
                         %describe-scaling-activities-type-activity-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-activities-type
                    'make-describe-scaling-activities-type))
 (common-lisp:defun make-describe-scaling-activities-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-records
                     include-deleted-groups auto-scaling-group-name
                     activity-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-activities-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-ids))
      (common-lisp:list
       (common-lisp:cons "ActivityIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-deleted-groups))
      (common-lisp:list
       (common-lisp:cons "IncludeDeletedGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scheduled-actions-type common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %describe-scheduled-actions-type-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-scheduled-actions-type-next-token :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %describe-scheduled-actions-type-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %describe-scheduled-actions-type-start-time
                         :initform common-lisp:nil)
                        (scheduled-action-names :initarg
                         :scheduled-action-names :type
                         (common-lisp:or scheduled-action-names
                                         common-lisp:null)
                         :accessor
                         %describe-scheduled-actions-type-scheduled-action-names
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-scheduled-actions-type-auto-scaling-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-actions-type
                    'make-describe-scheduled-actions-type))
 (common-lisp:defun make-describe-scheduled-actions-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token end-time
                     start-time scheduled-action-names auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scheduled-actions-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-names))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-type common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %describe-tags-type-max-records :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-tags-type-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %describe-tags-type-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-type 'make-describe-tags-type))
 (common-lisp:defun make-describe-tags-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token filters)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-termination-policy-types-answer common-lisp:nil
                       ((termination-policy-types :initarg
                         :termination-policy-types :type
                         (common-lisp:or termination-policies common-lisp:null)
                         :accessor
                         %describe-termination-policy-types-answer-termination-policy-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-termination-policy-types-answer
                    'make-describe-termination-policy-types-answer))
 (common-lisp:defun make-describe-termination-policy-types-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key termination-policy-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-termination-policy-types-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-termination-policy-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-termination-policy-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-policy-types))
      (common-lisp:list
       (common-lisp:cons "TerminationPolicyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-termination-policy-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-traffic-sources-request common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         %describe-traffic-sources-request-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-traffic-sources-request-next-token :initform
                         common-lisp:nil)
                        (traffic-source-type :initarg :traffic-source-type
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-traffic-sources-request-traffic-source-type
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-traffic-sources-request-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-traffic-sources-request
                    'make-describe-traffic-sources-request))
 (common-lisp:defun make-describe-traffic-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token
                     traffic-source-type auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-traffic-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-source-type))
      (common-lisp:list
       (common-lisp:cons "TrafficSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-traffic-sources-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-traffic-sources-response-next-token
                         :initform common-lisp:nil)
                        (traffic-sources :initarg :traffic-sources :type
                         (common-lisp:or traffic-source-states
                                         common-lisp:null)
                         :accessor
                         %describe-traffic-sources-response-traffic-sources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-traffic-sources-response
                    'make-describe-traffic-sources-response))
 (common-lisp:defun make-describe-traffic-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token traffic-sources)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-traffic-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-warm-pool-answer common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-warm-pool-answer-next-token :initform
                         common-lisp:nil)
                        (instances :initarg :instances :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         %describe-warm-pool-answer-instances :initform
                         common-lisp:nil)
                        (warm-pool-configuration :initarg
                         :warm-pool-configuration :type
                         (common-lisp:or warm-pool-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-warm-pool-answer-warm-pool-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-warm-pool-answer
                    'make-describe-warm-pool-answer))
 (common-lisp:defun make-describe-warm-pool-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instances
                     warm-pool-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'describe-warm-pool-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'warm-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "WarmPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-warm-pool-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %describe-warm-pool-type-next-token :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %describe-warm-pool-type-max-records
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %describe-warm-pool-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-warm-pool-type 'make-describe-warm-pool-type))
 (common-lisp:defun make-describe-warm-pool-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-records
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-warm-pool-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass desired-configuration common-lisp:nil
                       ((mixed-instances-policy :initarg
                         :mixed-instances-policy :type
                         (common-lisp:or mixed-instances-policy
                                         common-lisp:null)
                         :accessor
                         %desired-configuration-mixed-instances-policy
                         :initform common-lisp:nil)
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor %desired-configuration-launch-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'desired-configuration 'make-desired-configuration))
 (common-lisp:defun make-desired-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mixed-instances-policy launch-template)
   (common-lisp:apply #'common-lisp:make-instance 'desired-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          desired-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          desired-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          desired-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-instances-answer common-lisp:nil
                       ((activities :initarg :activities :type
                         (common-lisp:or activities common-lisp:null) :accessor
                         %detach-instances-answer-activities :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detach-instances-answer 'make-detach-instances-answer))
 (common-lisp:defun make-detach-instances-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activities)
   (common-lisp:apply #'common-lisp:make-instance 'detach-instances-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-instances-query common-lisp:nil
                       ((should-decrement-desired-capacity :initarg
                         :should-decrement-desired-capacity :type
                         (common-lisp:or should-decrement-desired-capacity
                                         common-lisp:null)
                         :accessor
                         %detach-instances-query-should-decrement-desired-capacity
                         :initform
                         (common-lisp:error
                          ":should-decrement-desired-capacity is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %detach-instances-query-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-ids common-lisp:null)
                         :accessor %detach-instances-query-instance-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detach-instances-query 'make-detach-instances-query))
 (common-lisp:defun make-detach-instances-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key should-decrement-desired-capacity
                     auto-scaling-group-name instance-ids)
   (common-lisp:apply #'common-lisp:make-instance 'detach-instances-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'should-decrement-desired-capacity))
      (common-lisp:list
       (common-lisp:cons "ShouldDecrementDesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-load-balancer-target-groups-result-type
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'detach-load-balancer-target-groups-result-type
                    'make-detach-load-balancer-target-groups-result-type))
 (common-lisp:defun make-detach-load-balancer-target-groups-result-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-load-balancer-target-groups-result-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-load-balancer-target-groups-type common-lisp:nil
                       ((target-group-arns :initarg :target-group-arns :type
                         (common-lisp:or target-group-arns common-lisp:null)
                         :accessor
                         %detach-load-balancer-target-groups-type-target-group-arns
                         :initform
                         (common-lisp:error ":target-group-arns is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %detach-load-balancer-target-groups-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancer-target-groups-type
                    'make-detach-load-balancer-target-groups-type))
 (common-lisp:defun make-detach-load-balancer-target-groups-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-group-arns
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-load-balancer-target-groups-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-load-balancers-result-type common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'detach-load-balancers-result-type
                    'make-detach-load-balancers-result-type))
 (common-lisp:defun make-detach-load-balancers-result-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-load-balancers-result-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-load-balancers-type common-lisp:nil
                       ((load-balancer-names :initarg :load-balancer-names
                         :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor
                         %detach-load-balancers-type-load-balancer-names
                         :initform
                         (common-lisp:error
                          ":load-balancer-names is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %detach-load-balancers-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancers-type
                    'make-detach-load-balancers-type))
 (common-lisp:defun make-detach-load-balancers-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-names
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'detach-load-balancers-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-traffic-sources-result-type common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'detach-traffic-sources-result-type
                    'make-detach-traffic-sources-result-type))
 (common-lisp:defun make-detach-traffic-sources-result-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-traffic-sources-result-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-traffic-sources-type common-lisp:nil
                       ((traffic-sources :initarg :traffic-sources :type
                         (common-lisp:or traffic-sources common-lisp:null)
                         :accessor %detach-traffic-sources-type-traffic-sources
                         :initform
                         (common-lisp:error ":traffic-sources is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %detach-traffic-sources-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'detach-traffic-sources-type
                    'make-detach-traffic-sources-type))
 (common-lisp:defun make-detach-traffic-sources-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key traffic-sources auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'detach-traffic-sources-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-metrics-collection-query common-lisp:nil
                       ((metrics :initarg :metrics :type
                         (common-lisp:or metrics common-lisp:null) :accessor
                         %disable-metrics-collection-query-metrics :initform
                         common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %disable-metrics-collection-query-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-metrics-collection-query
                    'make-disable-metrics-collection-query))
 (common-lisp:defun make-disable-metrics-collection-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metrics auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-metrics-collection-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-metrics-collection-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-metrics-collection-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-metrics-collection-query))
   common-lisp:nil))
(common-lisp:deftype disable-scale-in () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass ebs common-lisp:nil
                       ((throughput :initarg :throughput :type
                         (common-lisp:or block-device-ebs-throughput
                                         common-lisp:null)
                         :accessor %ebs-throughput :initform common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or block-device-ebs-encrypted
                                         common-lisp:null)
                         :accessor %ebs-encrypted :initform common-lisp:nil)
                        (iops :initarg :iops :type
                         (common-lisp:or block-device-ebs-iops
                                         common-lisp:null)
                         :accessor %ebs-iops :initform common-lisp:nil)
                        (delete-on-termination :initarg :delete-on-termination
                         :type
                         (common-lisp:or block-device-ebs-delete-on-termination
                                         common-lisp:null)
                         :accessor %ebs-delete-on-termination :initform
                         common-lisp:nil)
                        (volume-type :initarg :volume-type :type
                         (common-lisp:or block-device-ebs-volume-type
                                         common-lisp:null)
                         :accessor %ebs-volume-type :initform common-lisp:nil)
                        (volume-size :initarg :volume-size :type
                         (common-lisp:or block-device-ebs-volume-size
                                         common-lisp:null)
                         :accessor %ebs-volume-size :initform common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %ebs-snapshot-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ebs 'make-ebs))
 (common-lisp:defun make-ebs
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key throughput encrypted iops
                     delete-on-termination volume-type volume-size snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'ebs
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "Throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs))
   common-lisp:nil))
(common-lisp:deftype ebs-optimized () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass enable-metrics-collection-query common-lisp:nil
                       ((granularity :initarg :granularity :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %enable-metrics-collection-query-granularity
                         :initform
                         (common-lisp:error ":granularity is required"))
                        (metrics :initarg :metrics :type
                         (common-lisp:or metrics common-lisp:null) :accessor
                         %enable-metrics-collection-query-metrics :initform
                         common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %enable-metrics-collection-query-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-metrics-collection-query
                    'make-enable-metrics-collection-query))
 (common-lisp:defun make-enable-metrics-collection-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key granularity metrics
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-metrics-collection-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-metrics-collection-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-metrics-collection-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-metrics-collection-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enabled-metric common-lisp:nil
                       ((granularity :initarg :granularity :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %enabled-metric-granularity :initform
                         common-lisp:nil)
                        (metric :initarg :metric :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %enabled-metric-metric :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'enabled-metric 'make-enabled-metric))
 (common-lisp:defun make-enabled-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key granularity metric)
   (common-lisp:apply #'common-lisp:make-instance 'enabled-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enabled-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enabled-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enabled-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enabled-metrics ()
   '(trivial-types:proper-list enabled-metric))
 (common-lisp:defun |make-enabled-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list enabled-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass enter-standby-answer common-lisp:nil
                       ((activities :initarg :activities :type
                         (common-lisp:or activities common-lisp:null) :accessor
                         %enter-standby-answer-activities :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enter-standby-answer 'make-enter-standby-answer))
 (common-lisp:defun make-enter-standby-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activities)
   (common-lisp:apply #'common-lisp:make-instance 'enter-standby-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enter-standby-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enter-standby-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enter-standby-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enter-standby-query common-lisp:nil
                       ((should-decrement-desired-capacity :initarg
                         :should-decrement-desired-capacity :type
                         (common-lisp:or should-decrement-desired-capacity
                                         common-lisp:null)
                         :accessor
                         %enter-standby-query-should-decrement-desired-capacity
                         :initform
                         (common-lisp:error
                          ":should-decrement-desired-capacity is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %enter-standby-query-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-ids common-lisp:null)
                         :accessor %enter-standby-query-instance-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enter-standby-query 'make-enter-standby-query))
 (common-lisp:defun make-enter-standby-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key should-decrement-desired-capacity
                     auto-scaling-group-name instance-ids)
   (common-lisp:apply #'common-lisp:make-instance 'enter-standby-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enter-standby-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enter-standby-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'should-decrement-desired-capacity))
      (common-lisp:list
       (common-lisp:cons "ShouldDecrementDesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enter-standby-query))
   common-lisp:nil))
(common-lisp:deftype estimated-instance-warmup () 'common-lisp:integer)
(common-lisp:deftype excluded-instance () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype excluded-instance-types ()
   '(trivial-types:proper-list excluded-instance))
 (common-lisp:defun |make-excluded-instance-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list excluded-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass execute-policy-type common-lisp:nil
                       ((breach-threshold :initarg :breach-threshold :type
                         (common-lisp:or metric-scale common-lisp:null)
                         :accessor %execute-policy-type-breach-threshold
                         :initform common-lisp:nil)
                        (metric-value :initarg :metric-value :type
                         (common-lisp:or metric-scale common-lisp:null)
                         :accessor %execute-policy-type-metric-value :initform
                         common-lisp:nil)
                        (honor-cooldown :initarg :honor-cooldown :type
                         (common-lisp:or honor-cooldown common-lisp:null)
                         :accessor %execute-policy-type-honor-cooldown
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %execute-policy-type-policy-name :initform
                         (common-lisp:error ":policy-name is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %execute-policy-type-auto-scaling-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-policy-type 'make-execute-policy-type))
 (common-lisp:defun make-execute-policy-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key breach-threshold metric-value
                     honor-cooldown policy-name auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'execute-policy-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execute-policy-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execute-policy-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honor-cooldown))
      (common-lisp:list
       (common-lisp:cons "HonorCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "MetricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breach-threshold))
      (common-lisp:list
       (common-lisp:cons "BreachThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execute-policy-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass exit-standby-answer common-lisp:nil
                       ((activities :initarg :activities :type
                         (common-lisp:or activities common-lisp:null) :accessor
                         %exit-standby-answer-activities :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'exit-standby-answer 'make-exit-standby-answer))
 (common-lisp:defun make-exit-standby-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activities)
   (common-lisp:apply #'common-lisp:make-instance 'exit-standby-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exit-standby-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exit-standby-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exit-standby-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass exit-standby-query common-lisp:nil
                       ((auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %exit-standby-query-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-ids common-lisp:null)
                         :accessor %exit-standby-query-instance-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'exit-standby-query 'make-exit-standby-query))
 (common-lisp:defun make-exit-standby-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-group-name instance-ids)
   (common-lisp:apply #'common-lisp:make-instance 'exit-standby-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exit-standby-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exit-standby-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exit-standby-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failed-scheduled-update-group-action-request
                       common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %failed-scheduled-update-group-action-request-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or xml-string-max-len64 common-lisp:null)
                         :accessor
                         %failed-scheduled-update-group-action-request-error-code
                         :initform common-lisp:nil)
                        (scheduled-action-name :initarg :scheduled-action-name
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %failed-scheduled-update-group-action-request-scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required"))))
 (common-lisp:export
  (common-lisp:list 'failed-scheduled-update-group-action-request
                    'make-failed-scheduled-update-group-action-request))
 (common-lisp:defun make-failed-scheduled-update-group-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code
                     scheduled-action-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-scheduled-update-group-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-scheduled-update-group-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-scheduled-update-group-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-scheduled-update-group-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-scheduled-update-group-action-requests ()
   '(trivial-types:proper-list failed-scheduled-update-group-action-request))
 (common-lisp:defun |make-failed-scheduled-update-group-action-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-scheduled-update-group-action-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or values common-lisp:null) :accessor
                         %filter-values :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %filter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype force-delete () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass get-predictive-scaling-forecast-answer common-lisp:nil
                       ((update-time :initarg :update-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %get-predictive-scaling-forecast-answer-update-time
                         :initform
                         (common-lisp:error ":update-time is required"))
                        (capacity-forecast :initarg :capacity-forecast :type
                         (common-lisp:or capacity-forecast common-lisp:null)
                         :accessor
                         %get-predictive-scaling-forecast-answer-capacity-forecast
                         :initform
                         (common-lisp:error ":capacity-forecast is required"))
                        (load-forecast :initarg :load-forecast :type
                         (common-lisp:or load-forecasts common-lisp:null)
                         :accessor
                         %get-predictive-scaling-forecast-answer-load-forecast
                         :initform
                         (common-lisp:error ":load-forecast is required"))))
 (common-lisp:export
  (common-lisp:list 'get-predictive-scaling-forecast-answer
                    'make-get-predictive-scaling-forecast-answer))
 (common-lisp:defun make-get-predictive-scaling-forecast-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time capacity-forecast
                     load-forecast)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-predictive-scaling-forecast-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-forecast))
      (common-lisp:list
       (common-lisp:cons "LoadForecast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-forecast))
      (common-lisp:list
       (common-lisp:cons "CapacityForecast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-predictive-scaling-forecast-type common-lisp:nil
                       ((end-time :initarg :end-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %get-predictive-scaling-forecast-type-end-time
                         :initform (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %get-predictive-scaling-forecast-type-start-time
                         :initform
                         (common-lisp:error ":start-time is required"))
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %get-predictive-scaling-forecast-type-policy-name
                         :initform
                         (common-lisp:error ":policy-name is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %get-predictive-scaling-forecast-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-predictive-scaling-forecast-type
                    'make-get-predictive-scaling-forecast-type))
 (common-lisp:defun make-get-predictive-scaling-forecast-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time policy-name
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-predictive-scaling-forecast-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-type))
   common-lisp:nil))
(common-lisp:deftype global-timeout () 'common-lisp:integer)
(common-lisp:deftype health-check-grace-period () 'common-lisp:integer)
(common-lisp:deftype heartbeat-timeout () 'common-lisp:integer)
(common-lisp:deftype honor-cooldown () 'common-lisp:boolean)
(common-lisp:deftype include-deleted-groups () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass instance common-lisp:nil
                       ((weighted-capacity :initarg :weighted-capacity :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor %instance-weighted-capacity :initform
                         common-lisp:nil)
                        (protected-from-scale-in :initarg
                         :protected-from-scale-in :type
                         (common-lisp:or instance-protected common-lisp:null)
                         :accessor %instance-protected-from-scale-in :initform
                         (common-lisp:error
                          ":protected-from-scale-in is required"))
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor %instance-launch-template :initform
                         common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %instance-launch-configuration-name
                         :initform common-lisp:nil)
                        (health-status :initarg :health-status :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor %instance-health-status :initform
                         (common-lisp:error ":health-status is required"))
                        (lifecycle-state :initarg :lifecycle-state :type
                         (common-lisp:or lifecycle-state common-lisp:null)
                         :accessor %instance-lifecycle-state :initform
                         (common-lisp:error ":lifecycle-state is required"))
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %instance-availability-zone :initform
                         (common-lisp:error ":availability-zone is required"))
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %instance-instance-type :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or xml-string-max-len19 common-lisp:null)
                         :accessor %instance-instance-id :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defun make-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weighted-capacity protected-from-scale-in
                     launch-template launch-configuration-name health-status
                     lifecycle-state availability-zone instance-type
                     instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "LifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "ProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:deftype instance-generation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-generations ()
   '(trivial-types:proper-list instance-generation))
 (common-lisp:defun |make-instance-generations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-generation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-ids ()
   '(trivial-types:proper-list xml-string-max-len19))
 (common-lisp:defun |make-instance-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len19))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-metadata-endpoint-state () 'common-lisp:string)
(common-lisp:deftype instance-metadata-http-put-response-hop-limit ()
  'common-lisp:integer)
(common-lisp:deftype instance-metadata-http-tokens-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-metadata-options common-lisp:nil
                       ((http-endpoint :initarg :http-endpoint :type
                         (common-lisp:or instance-metadata-endpoint-state
                                         common-lisp:null)
                         :accessor %instance-metadata-options-http-endpoint
                         :initform common-lisp:nil)
                        (http-put-response-hop-limit :initarg
                         :http-put-response-hop-limit :type
                         (common-lisp:or
                          instance-metadata-http-put-response-hop-limit
                          common-lisp:null)
                         :accessor
                         %instance-metadata-options-http-put-response-hop-limit
                         :initform common-lisp:nil)
                        (http-tokens :initarg :http-tokens :type
                         (common-lisp:or instance-metadata-http-tokens-state
                                         common-lisp:null)
                         :accessor %instance-metadata-options-http-tokens
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-metadata-options
                    'make-instance-metadata-options))
 (common-lisp:defun make-instance-metadata-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key http-endpoint http-put-response-hop-limit
                     http-tokens)
   (common-lisp:apply #'common-lisp:make-instance 'instance-metadata-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "HttpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "HttpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-monitoring common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or monitoring-enabled common-lisp:null)
                         :accessor %instance-monitoring-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-monitoring 'make-instance-monitoring))
 (common-lisp:defun make-instance-monitoring
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'instance-monitoring
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-monitoring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-monitoring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-monitoring))
   common-lisp:nil))
(common-lisp:deftype instance-protected () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass instance-refresh common-lisp:nil
                       ((rollback-details :initarg :rollback-details :type
                         (common-lisp:or rollback-details common-lisp:null)
                         :accessor %instance-refresh-rollback-details :initform
                         common-lisp:nil)
                        (desired-configuration :initarg :desired-configuration
                         :type
                         (common-lisp:or desired-configuration
                                         common-lisp:null)
                         :accessor %instance-refresh-desired-configuration
                         :initform common-lisp:nil)
                        (preferences :initarg :preferences :type
                         (common-lisp:or refresh-preferences common-lisp:null)
                         :accessor %instance-refresh-preferences :initform
                         common-lisp:nil)
                        (progress-details :initarg :progress-details :type
                         (common-lisp:or instance-refresh-progress-details
                                         common-lisp:null)
                         :accessor %instance-refresh-progress-details :initform
                         common-lisp:nil)
                        (instances-to-update :initarg :instances-to-update
                         :type
                         (common-lisp:or instances-to-update common-lisp:null)
                         :accessor %instance-refresh-instances-to-update
                         :initform common-lisp:nil)
                        (percentage-complete :initarg :percentage-complete
                         :type (common-lisp:or int-percent common-lisp:null)
                         :accessor %instance-refresh-percentage-complete
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %instance-refresh-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %instance-refresh-start-time :initform
                         common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor %instance-refresh-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or instance-refresh-status
                                         common-lisp:null)
                         :accessor %instance-refresh-status :initform
                         common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %instance-refresh-auto-scaling-group-name
                         :initform common-lisp:nil)
                        (instance-refresh-id :initarg :instance-refresh-id
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %instance-refresh-instance-refresh-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh 'make-instance-refresh))
 (common-lisp:defun make-instance-refresh
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rollback-details desired-configuration
                     preferences progress-details instances-to-update
                     percentage-complete end-time start-time status-reason
                     status auto-scaling-group-name instance-refresh-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance-refresh
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-refresh))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-refresh))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refresh-id))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "PercentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-to-update))
      (common-lisp:list
       (common-lisp:cons "InstancesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-details))
      (common-lisp:list
       (common-lisp:cons "ProgressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferences))
      (common-lisp:list
       (common-lisp:cons "Preferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-configuration))
      (common-lisp:list
       (common-lisp:cons "DesiredConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-details))
      (common-lisp:list
       (common-lisp:cons "RollbackDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-refresh))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-refresh-ids ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-instance-refresh-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition instance-refresh-in-progress-fault
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       instance-refresh-in-progress-fault-message)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh-in-progress-fault
                    'instance-refresh-in-progress-fault-message)))
(common-lisp:progn
 (common-lisp:defclass instance-refresh-live-pool-progress common-lisp:nil
                       ((instances-to-update :initarg :instances-to-update
                         :type
                         (common-lisp:or instances-to-update common-lisp:null)
                         :accessor
                         %instance-refresh-live-pool-progress-instances-to-update
                         :initform common-lisp:nil)
                        (percentage-complete :initarg :percentage-complete
                         :type (common-lisp:or int-percent common-lisp:null)
                         :accessor
                         %instance-refresh-live-pool-progress-percentage-complete
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh-live-pool-progress
                    'make-instance-refresh-live-pool-progress))
 (common-lisp:defun make-instance-refresh-live-pool-progress
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instances-to-update percentage-complete)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-refresh-live-pool-progress
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-live-pool-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-live-pool-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "PercentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-to-update))
      (common-lisp:list
       (common-lisp:cons "InstancesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-live-pool-progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-refresh-progress-details common-lisp:nil
                       ((warm-pool-progress :initarg :warm-pool-progress :type
                         (common-lisp:or instance-refresh-warm-pool-progress
                                         common-lisp:null)
                         :accessor
                         %instance-refresh-progress-details-warm-pool-progress
                         :initform common-lisp:nil)
                        (live-pool-progress :initarg :live-pool-progress :type
                         (common-lisp:or instance-refresh-live-pool-progress
                                         common-lisp:null)
                         :accessor
                         %instance-refresh-progress-details-live-pool-progress
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh-progress-details
                    'make-instance-refresh-progress-details))
 (common-lisp:defun make-instance-refresh-progress-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warm-pool-progress live-pool-progress)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-refresh-progress-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-progress-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-progress-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'live-pool-progress))
      (common-lisp:list
       (common-lisp:cons "LivePoolProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-pool-progress))
      (common-lisp:list
       (common-lisp:cons "WarmPoolProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-progress-details))
   common-lisp:nil))
(common-lisp:deftype instance-refresh-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-refresh-warm-pool-progress common-lisp:nil
                       ((instances-to-update :initarg :instances-to-update
                         :type
                         (common-lisp:or instances-to-update common-lisp:null)
                         :accessor
                         %instance-refresh-warm-pool-progress-instances-to-update
                         :initform common-lisp:nil)
                        (percentage-complete :initarg :percentage-complete
                         :type (common-lisp:or int-percent common-lisp:null)
                         :accessor
                         %instance-refresh-warm-pool-progress-percentage-complete
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh-warm-pool-progress
                    'make-instance-refresh-warm-pool-progress))
 (common-lisp:defun make-instance-refresh-warm-pool-progress
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instances-to-update percentage-complete)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-refresh-warm-pool-progress
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-warm-pool-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-warm-pool-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "PercentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-to-update))
      (common-lisp:list
       (common-lisp:cons "InstancesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-warm-pool-progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-refreshes ()
   '(trivial-types:proper-list instance-refresh))
 (common-lisp:defun |make-instance-refreshes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-refresh))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-requirements common-lisp:nil
                       ((allowed-instance-types :initarg
                         :allowed-instance-types :type
                         (common-lisp:or allowed-instance-types
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-allowed-instance-types
                         :initform common-lisp:nil)
                        (network-bandwidth-gbps :initarg
                         :network-bandwidth-gbps :type
                         (common-lisp:or network-bandwidth-gbps-request
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-network-bandwidth-gbps
                         :initform common-lisp:nil)
                        (accelerator-total-memory-mi-b :initarg
                         :accelerator-total-memory-mi-b :type
                         (common-lisp:or accelerator-total-memory-mi-brequest
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-accelerator-total-memory-mi-b
                         :initform common-lisp:nil)
                        (accelerator-names :initarg :accelerator-names :type
                         (common-lisp:or accelerator-names common-lisp:null)
                         :accessor %instance-requirements-accelerator-names
                         :initform common-lisp:nil)
                        (accelerator-manufacturers :initarg
                         :accelerator-manufacturers :type
                         (common-lisp:or accelerator-manufacturers
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-accelerator-manufacturers
                         :initform common-lisp:nil)
                        (accelerator-count :initarg :accelerator-count :type
                         (common-lisp:or accelerator-count-request
                                         common-lisp:null)
                         :accessor %instance-requirements-accelerator-count
                         :initform common-lisp:nil)
                        (accelerator-types :initarg :accelerator-types :type
                         (common-lisp:or accelerator-types common-lisp:null)
                         :accessor %instance-requirements-accelerator-types
                         :initform common-lisp:nil)
                        (baseline-ebs-bandwidth-mbps :initarg
                         :baseline-ebs-bandwidth-mbps :type
                         (common-lisp:or baseline-ebs-bandwidth-mbps-request
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-baseline-ebs-bandwidth-mbps
                         :initform common-lisp:nil)
                        (total-local-storage-gb :initarg
                         :total-local-storage-gb :type
                         (common-lisp:or total-local-storage-gbrequest
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-total-local-storage-gb
                         :initform common-lisp:nil)
                        (local-storage-types :initarg :local-storage-types
                         :type
                         (common-lisp:or local-storage-types common-lisp:null)
                         :accessor %instance-requirements-local-storage-types
                         :initform common-lisp:nil)
                        (local-storage :initarg :local-storage :type
                         (common-lisp:or local-storage common-lisp:null)
                         :accessor %instance-requirements-local-storage
                         :initform common-lisp:nil)
                        (network-interface-count :initarg
                         :network-interface-count :type
                         (common-lisp:or network-interface-count-request
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-network-interface-count
                         :initform common-lisp:nil)
                        (require-hibernate-support :initarg
                         :require-hibernate-support :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %instance-requirements-require-hibernate-support
                         :initform common-lisp:nil)
                        (burstable-performance :initarg :burstable-performance
                         :type
                         (common-lisp:or burstable-performance
                                         common-lisp:null)
                         :accessor %instance-requirements-burstable-performance
                         :initform common-lisp:nil)
                        (bare-metal :initarg :bare-metal :type
                         (common-lisp:or bare-metal common-lisp:null) :accessor
                         %instance-requirements-bare-metal :initform
                         common-lisp:nil)
                        (on-demand-max-price-percentage-over-lowest-price
                         :initarg
                         :on-demand-max-price-percentage-over-lowest-price
                         :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-on-demand-max-price-percentage-over-lowest-price
                         :initform common-lisp:nil)
                        (spot-max-price-percentage-over-lowest-price :initarg
                         :spot-max-price-percentage-over-lowest-price :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-spot-max-price-percentage-over-lowest-price
                         :initform common-lisp:nil)
                        (instance-generations :initarg :instance-generations
                         :type
                         (common-lisp:or instance-generations common-lisp:null)
                         :accessor %instance-requirements-instance-generations
                         :initform common-lisp:nil)
                        (excluded-instance-types :initarg
                         :excluded-instance-types :type
                         (common-lisp:or excluded-instance-types
                                         common-lisp:null)
                         :accessor
                         %instance-requirements-excluded-instance-types
                         :initform common-lisp:nil)
                        (memory-gi-bper-vcpu :initarg :memory-gi-bper-vcpu
                         :type
                         (common-lisp:or memory-gi-bper-vcpu-request
                                         common-lisp:null)
                         :accessor %instance-requirements-memory-gi-bper-vcpu
                         :initform common-lisp:nil)
                        (cpu-manufacturers :initarg :cpu-manufacturers :type
                         (common-lisp:or cpu-manufacturers common-lisp:null)
                         :accessor %instance-requirements-cpu-manufacturers
                         :initform common-lisp:nil)
                        (memory-mi-b :initarg :memory-mi-b :type
                         (common-lisp:or memory-mi-brequest common-lisp:null)
                         :accessor %instance-requirements-memory-mi-b :initform
                         (common-lisp:error ":memory-mi-b is required"))
                        (vcpu-count :initarg :vcpu-count :type
                         (common-lisp:or vcpu-count-request common-lisp:null)
                         :accessor %instance-requirements-vcpu-count :initform
                         (common-lisp:error ":vcpu-count is required"))))
 (common-lisp:export
  (common-lisp:list 'instance-requirements 'make-instance-requirements))
 (common-lisp:defun make-instance-requirements
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allowed-instance-types
                     network-bandwidth-gbps accelerator-total-memory-mi-b
                     accelerator-names accelerator-manufacturers
                     accelerator-count accelerator-types
                     baseline-ebs-bandwidth-mbps total-local-storage-gb
                     local-storage-types local-storage network-interface-count
                     require-hibernate-support burstable-performance bare-metal
                     on-demand-max-price-percentage-over-lowest-price
                     spot-max-price-percentage-over-lowest-price
                     instance-generations excluded-instance-types
                     memory-gi-bper-vcpu cpu-manufacturers memory-mi-b
                     vcpu-count)
   (common-lisp:apply #'common-lisp:make-instance 'instance-requirements
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-requirements))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-requirements))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcpu-count))
      (common-lisp:list
       (common-lisp:cons "VCpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-mi-b))
      (common-lisp:list
       (common-lisp:cons "MemoryMiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-manufacturers))
      (common-lisp:list
       (common-lisp:cons "CpuManufacturers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gi-bper-vcpu))
      (common-lisp:list
       (common-lisp:cons "MemoryGiBPerVCpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-instance-types))
      (common-lisp:list
       (common-lisp:cons "ExcludedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-generations))
      (common-lisp:list
       (common-lisp:cons "InstanceGenerations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-max-price-percentage-over-lowest-price))
      (common-lisp:list
       (common-lisp:cons "SpotMaxPricePercentageOverLowestPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-max-price-percentage-over-lowest-price))
      (common-lisp:list
       (common-lisp:cons "OnDemandMaxPricePercentageOverLowestPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bare-metal))
      (common-lisp:list
       (common-lisp:cons "BareMetal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'burstable-performance))
      (common-lisp:list
       (common-lisp:cons "BurstablePerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-hibernate-support))
      (common-lisp:list
       (common-lisp:cons "RequireHibernateSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-count))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-storage))
      (common-lisp:list
       (common-lisp:cons "LocalStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-storage-types))
      (common-lisp:list
       (common-lisp:cons "LocalStorageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-local-storage-gb))
      (common-lisp:list
       (common-lisp:cons "TotalLocalStorageGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-ebs-bandwidth-mbps))
      (common-lisp:list
       (common-lisp:cons "BaselineEbsBandwidthMbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-count))
      (common-lisp:list
       (common-lisp:cons "AcceleratorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-manufacturers))
      (common-lisp:list
       (common-lisp:cons "AcceleratorManufacturers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-names))
      (common-lisp:list
       (common-lisp:cons "AcceleratorNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-total-memory-mi-b))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTotalMemoryMiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-bandwidth-gbps))
      (common-lisp:list
       (common-lisp:cons "NetworkBandwidthGbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-instance-types))
      (common-lisp:list
       (common-lisp:cons "AllowedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-requirements))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-reuse-policy common-lisp:nil
                       ((reuse-on-scale-in :initarg :reuse-on-scale-in :type
                         (common-lisp:or reuse-on-scale-in common-lisp:null)
                         :accessor %instance-reuse-policy-reuse-on-scale-in
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-reuse-policy 'make-instance-reuse-policy))
 (common-lisp:defun make-instance-reuse-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reuse-on-scale-in)
   (common-lisp:apply #'common-lisp:make-instance 'instance-reuse-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-reuse-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-reuse-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reuse-on-scale-in))
      (common-lisp:list
       (common-lisp:cons "ReuseOnScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-reuse-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instances () '(trivial-types:proper-list instance))
 (common-lisp:defun |make-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instances-distribution common-lisp:nil
                       ((spot-max-price :initarg :spot-max-price :type
                         (common-lisp:or mixed-instance-spot-price
                                         common-lisp:null)
                         :accessor %instances-distribution-spot-max-price
                         :initform common-lisp:nil)
                        (spot-instance-pools :initarg :spot-instance-pools
                         :type
                         (common-lisp:or spot-instance-pools common-lisp:null)
                         :accessor %instances-distribution-spot-instance-pools
                         :initform common-lisp:nil)
                        (spot-allocation-strategy :initarg
                         :spot-allocation-strategy :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %instances-distribution-spot-allocation-strategy
                         :initform common-lisp:nil)
                        (on-demand-percentage-above-base-capacity :initarg
                         :on-demand-percentage-above-base-capacity :type
                         (common-lisp:or
                          on-demand-percentage-above-base-capacity
                          common-lisp:null)
                         :accessor
                         %instances-distribution-on-demand-percentage-above-base-capacity
                         :initform common-lisp:nil)
                        (on-demand-base-capacity :initarg
                         :on-demand-base-capacity :type
                         (common-lisp:or on-demand-base-capacity
                                         common-lisp:null)
                         :accessor
                         %instances-distribution-on-demand-base-capacity
                         :initform common-lisp:nil)
                        (on-demand-allocation-strategy :initarg
                         :on-demand-allocation-strategy :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %instances-distribution-on-demand-allocation-strategy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instances-distribution 'make-instances-distribution))
 (common-lisp:defun make-instances-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key spot-max-price spot-instance-pools
                     spot-allocation-strategy
                     on-demand-percentage-above-base-capacity
                     on-demand-base-capacity on-demand-allocation-strategy)
   (common-lisp:apply #'common-lisp:make-instance 'instances-distribution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instances-distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instances-distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "OnDemandAllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-base-capacity))
      (common-lisp:list
       (common-lisp:cons "OnDemandBaseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-percentage-above-base-capacity))
      (common-lisp:list
       (common-lisp:cons "OnDemandPercentageAboveBaseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "SpotAllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-instance-pools))
      (common-lisp:list
       (common-lisp:cons "SpotInstancePools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-max-price))
      (common-lisp:list
       (common-lisp:cons "SpotMaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instances-distribution))
   common-lisp:nil))
(common-lisp:deftype instances-to-update () 'common-lisp:integer)
(common-lisp:deftype int-percent () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-next-token-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token 'invalid-next-token-message)))
(common-lisp:progn
 (common-lisp:define-condition irreversible-instance-refresh-fault
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       irreversible-instance-refresh-fault-message)))
 (common-lisp:export
  (common-lisp:list 'irreversible-instance-refresh-fault
                    'irreversible-instance-refresh-fault-message)))
(common-lisp:progn
 (common-lisp:defclass launch-configuration common-lisp:nil
                       ((metadata-options :initarg :metadata-options :type
                         (common-lisp:or instance-metadata-options
                                         common-lisp:null)
                         :accessor %launch-configuration-metadata-options
                         :initform common-lisp:nil)
                        (placement-tenancy :initarg :placement-tenancy :type
                         (common-lisp:or xml-string-max-len64 common-lisp:null)
                         :accessor %launch-configuration-placement-tenancy
                         :initform common-lisp:nil)
                        (associate-public-ip-address :initarg
                         :associate-public-ip-address :type
                         (common-lisp:or associate-public-ip-address
                                         common-lisp:null)
                         :accessor
                         %launch-configuration-associate-public-ip-address
                         :initform common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :type
                         (common-lisp:or ebs-optimized common-lisp:null)
                         :accessor %launch-configuration-ebs-optimized
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %launch-configuration-created-time :initform
                         (common-lisp:error ":created-time is required"))
                        (iam-instance-profile :initarg :iam-instance-profile
                         :type
                         (common-lisp:or xml-string-max-len1600
                                         common-lisp:null)
                         :accessor %launch-configuration-iam-instance-profile
                         :initform common-lisp:nil)
                        (spot-price :initarg :spot-price :type
                         (common-lisp:or spot-price common-lisp:null) :accessor
                         %launch-configuration-spot-price :initform
                         common-lisp:nil)
                        (instance-monitoring :initarg :instance-monitoring
                         :type
                         (common-lisp:or instance-monitoring common-lisp:null)
                         :accessor %launch-configuration-instance-monitoring
                         :initform common-lisp:nil)
                        (block-device-mappings :initarg :block-device-mappings
                         :type
                         (common-lisp:or block-device-mappings
                                         common-lisp:null)
                         :accessor %launch-configuration-block-device-mappings
                         :initform common-lisp:nil)
                        (ramdisk-id :initarg :ramdisk-id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %launch-configuration-ramdisk-id :initform
                         common-lisp:nil)
                        (kernel-id :initarg :kernel-id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %launch-configuration-kernel-id :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %launch-configuration-instance-type
                         :initform
                         (common-lisp:error ":instance-type is required"))
                        (user-data :initarg :user-data :type
                         (common-lisp:or xml-string-user-data common-lisp:null)
                         :accessor %launch-configuration-user-data :initform
                         common-lisp:nil)
                        (classic-link-vpcsecurity-groups :initarg
                         :classic-link-vpcsecurity-groups :type
                         (common-lisp:or classic-link-vpcsecurity-groups
                                         common-lisp:null)
                         :accessor
                         %launch-configuration-classic-link-vpcsecurity-groups
                         :initform common-lisp:nil)
                        (classic-link-vpcid :initarg :classic-link-vpcid :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %launch-configuration-classic-link-vpcid
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %launch-configuration-security-groups
                         :initform common-lisp:nil)
                        (key-name :initarg :key-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %launch-configuration-key-name :initform
                         common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %launch-configuration-image-id :initform
                         (common-lisp:error ":image-id is required"))
                        (launch-configuration-arn :initarg
                         :launch-configuration-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %launch-configuration-launch-configuration-arn
                         :initform common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %launch-configuration-launch-configuration-name
                         :initform
                         (common-lisp:error
                          ":launch-configuration-name is required"))))
 (common-lisp:export
  (common-lisp:list 'launch-configuration 'make-launch-configuration))
 (common-lisp:defun make-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata-options placement-tenancy
                     associate-public-ip-address ebs-optimized created-time
                     iam-instance-profile spot-price instance-monitoring
                     block-device-mappings ramdisk-id kernel-id instance-type
                     user-data classic-link-vpcsecurity-groups
                     classic-link-vpcid security-groups key-name image-id
                     launch-configuration-arn launch-configuration-name)
   (common-lisp:apply #'common-lisp:make-instance 'launch-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classic-link-vpcid))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classic-link-vpcsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVPCSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-monitoring))
      (common-lisp:list
       (common-lisp:cons "InstanceMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-tenancy))
      (common-lisp:list
       (common-lisp:cons "PlacementTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-configuration-name-type common-lisp:nil
                       ((launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %launch-configuration-name-type-launch-configuration-name
                         :initform
                         (common-lisp:error
                          ":launch-configuration-name is required"))))
 (common-lisp:export
  (common-lisp:list 'launch-configuration-name-type
                    'make-launch-configuration-name-type))
 (common-lisp:defun make-launch-configuration-name-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-configuration-name-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-name-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-name-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-name-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-configuration-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-launch-configuration-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass launch-configuration-names-type common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %launch-configuration-names-type-max-records
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %launch-configuration-names-type-next-token :initform
                         common-lisp:nil)
                        (launch-configuration-names :initarg
                         :launch-configuration-names :type
                         (common-lisp:or launch-configuration-names
                                         common-lisp:null)
                         :accessor
                         %launch-configuration-names-type-launch-configuration-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-configuration-names-type
                    'make-launch-configuration-names-type))
 (common-lisp:defun make-launch-configuration-names-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records next-token
                     launch-configuration-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-configuration-names-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-names-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-names-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-names))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-names-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-configurations ()
   '(trivial-types:proper-list launch-configuration))
 (common-lisp:defun |make-launch-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass launch-configurations-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %launch-configurations-type-next-token :initform
                         common-lisp:nil)
                        (launch-configurations :initarg :launch-configurations
                         :type
                         (common-lisp:or launch-configurations
                                         common-lisp:null)
                         :accessor
                         %launch-configurations-type-launch-configurations
                         :initform
                         (common-lisp:error
                          ":launch-configurations is required"))))
 (common-lisp:export
  (common-lisp:list 'launch-configurations-type
                    'make-launch-configurations-type))
 (common-lisp:defun make-launch-configurations-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token launch-configurations)
   (common-lisp:apply #'common-lisp:make-instance 'launch-configurations-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-configurations-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-configurations-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configurations))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-configurations-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-template common-lisp:nil
                       ((overrides :initarg :overrides :type
                         (common-lisp:or overrides common-lisp:null) :accessor
                         %launch-template-overrides :initform common-lisp:nil)
                        (launch-template-specification :initarg
                         :launch-template-specification :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         %launch-template-launch-template-specification
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'launch-template 'make-launch-template))
 (common-lisp:defun make-launch-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overrides launch-template-specification)
   (common-lisp:apply #'common-lisp:make-instance 'launch-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "Overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-template))
   common-lisp:nil))
(common-lisp:deftype launch-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-template-overrides common-lisp:nil
                       ((instance-requirements :initarg :instance-requirements
                         :type
                         (common-lisp:or instance-requirements
                                         common-lisp:null)
                         :accessor
                         %launch-template-overrides-instance-requirements
                         :initform common-lisp:nil)
                        (launch-template-specification :initarg
                         :launch-template-specification :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         %launch-template-overrides-launch-template-specification
                         :initform common-lisp:nil)
                        (weighted-capacity :initarg :weighted-capacity :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor %launch-template-overrides-weighted-capacity
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %launch-template-overrides-instance-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-template-overrides
                    'make-launch-template-overrides))
 (common-lisp:defun make-launch-template-overrides
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-requirements
                     launch-template-specification weighted-capacity
                     instance-type)
   (common-lisp:apply #'common-lisp:make-instance 'launch-template-overrides
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-overrides))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-overrides))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-requirements))
      (common-lisp:list
       (common-lisp:cons "InstanceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-overrides))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-template-specification common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %launch-template-specification-version
                         :initform common-lisp:nil)
                        (launch-template-name :initarg :launch-template-name
                         :type
                         (common-lisp:or launch-template-name common-lisp:null)
                         :accessor
                         %launch-template-specification-launch-template-name
                         :initform common-lisp:nil)
                        (launch-template-id :initarg :launch-template-id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %launch-template-specification-launch-template-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-template-specification
                    'make-launch-template-specification))
 (common-lisp:defun make-launch-template-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version launch-template-name
                     launch-template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-template-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   common-lisp:nil))
(common-lisp:deftype lifecycle-action-result () 'common-lisp:string)
(common-lisp:deftype lifecycle-action-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lifecycle-hook common-lisp:nil
                       ((default-result :initarg :default-result :type
                         (common-lisp:or lifecycle-action-result
                                         common-lisp:null)
                         :accessor %lifecycle-hook-default-result :initform
                         common-lisp:nil)
                        (global-timeout :initarg :global-timeout :type
                         (common-lisp:or global-timeout common-lisp:null)
                         :accessor %lifecycle-hook-global-timeout :initform
                         common-lisp:nil)
                        (heartbeat-timeout :initarg :heartbeat-timeout :type
                         (common-lisp:or heartbeat-timeout common-lisp:null)
                         :accessor %lifecycle-hook-heartbeat-timeout :initform
                         common-lisp:nil)
                        (notification-metadata :initarg :notification-metadata
                         :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor %lifecycle-hook-notification-metadata
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %lifecycle-hook-role-arn :initform
                         common-lisp:nil)
                        (notification-target-arn :initarg
                         :notification-target-arn :type
                         (common-lisp:or notification-target-resource-name
                                         common-lisp:null)
                         :accessor %lifecycle-hook-notification-target-arn
                         :initform common-lisp:nil)
                        (lifecycle-transition :initarg :lifecycle-transition
                         :type
                         (common-lisp:or lifecycle-transition common-lisp:null)
                         :accessor %lifecycle-hook-lifecycle-transition
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %lifecycle-hook-auto-scaling-group-name
                         :initform common-lisp:nil)
                        (lifecycle-hook-name :initarg :lifecycle-hook-name
                         :type
                         (common-lisp:or ascii-string-max-len255
                                         common-lisp:null)
                         :accessor %lifecycle-hook-lifecycle-hook-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lifecycle-hook 'make-lifecycle-hook))
 (common-lisp:defun make-lifecycle-hook
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-result global-timeout
                     heartbeat-timeout notification-metadata role-arn
                     notification-target-arn lifecycle-transition
                     auto-scaling-group-name lifecycle-hook-name)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-hook
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-target-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTargetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-metadata))
      (common-lisp:list
       (common-lisp:cons "NotificationMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "HeartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-timeout))
      (common-lisp:list
       (common-lisp:cons "GlobalTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-result))
      (common-lisp:list
       (common-lisp:cons "DefaultResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-hook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-hook-names ()
   '(trivial-types:proper-list ascii-string-max-len255))
 (common-lisp:defun |make-lifecycle-hook-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ascii-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lifecycle-hook-specification common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %lifecycle-hook-specification-role-arn
                         :initform common-lisp:nil)
                        (notification-target-arn :initarg
                         :notification-target-arn :type
                         (common-lisp:or notification-target-resource-name
                                         common-lisp:null)
                         :accessor
                         %lifecycle-hook-specification-notification-target-arn
                         :initform common-lisp:nil)
                        (default-result :initarg :default-result :type
                         (common-lisp:or lifecycle-action-result
                                         common-lisp:null)
                         :accessor %lifecycle-hook-specification-default-result
                         :initform common-lisp:nil)
                        (heartbeat-timeout :initarg :heartbeat-timeout :type
                         (common-lisp:or heartbeat-timeout common-lisp:null)
                         :accessor
                         %lifecycle-hook-specification-heartbeat-timeout
                         :initform common-lisp:nil)
                        (notification-metadata :initarg :notification-metadata
                         :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor
                         %lifecycle-hook-specification-notification-metadata
                         :initform common-lisp:nil)
                        (lifecycle-transition :initarg :lifecycle-transition
                         :type
                         (common-lisp:or lifecycle-transition common-lisp:null)
                         :accessor
                         %lifecycle-hook-specification-lifecycle-transition
                         :initform
                         (common-lisp:error
                          ":lifecycle-transition is required"))
                        (lifecycle-hook-name :initarg :lifecycle-hook-name
                         :type
                         (common-lisp:or ascii-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %lifecycle-hook-specification-lifecycle-hook-name
                         :initform
                         (common-lisp:error
                          ":lifecycle-hook-name is required"))))
 (common-lisp:export
  (common-lisp:list 'lifecycle-hook-specification
                    'make-lifecycle-hook-specification))
 (common-lisp:defun make-lifecycle-hook-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn notification-target-arn
                     default-result heartbeat-timeout notification-metadata
                     lifecycle-transition lifecycle-hook-name)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-hook-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-hook-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-hook-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-metadata))
      (common-lisp:list
       (common-lisp:cons "NotificationMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "HeartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-result))
      (common-lisp:list
       (common-lisp:cons "DefaultResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-target-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTargetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-hook-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-hook-specifications ()
   '(trivial-types:proper-list lifecycle-hook-specification))
 (common-lisp:defun |make-lifecycle-hook-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lifecycle-hook-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype lifecycle-hooks ()
   '(trivial-types:proper-list lifecycle-hook))
 (common-lisp:defun |make-lifecycle-hooks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-hook))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lifecycle-state () 'common-lisp:string)
(common-lisp:deftype lifecycle-transition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-fault
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-fault-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-fault 'limit-exceeded-fault-message)))
(common-lisp:progn
 (common-lisp:deftype load-balancer-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-load-balancer-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer-state common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %load-balancer-state-state :initform
                         common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %load-balancer-state-load-balancer-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-state 'make-load-balancer-state))
 (common-lisp:defun make-load-balancer-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-states ()
   '(trivial-types:proper-list load-balancer-state))
 (common-lisp:defun |make-load-balancer-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer-target-group-state common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %load-balancer-target-group-state-state
                         :initform common-lisp:nil)
                        (load-balancer-target-group-arn :initarg
                         :load-balancer-target-group-arn :type
                         (common-lisp:or xml-string-max-len511
                                         common-lisp:null)
                         :accessor
                         %load-balancer-target-group-state-load-balancer-target-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-target-group-state
                    'make-load-balancer-target-group-state))
 (common-lisp:defun make-load-balancer-target-group-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state load-balancer-target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'load-balancer-target-group-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-target-group-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-target-group-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-target-group-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerTargetGroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-target-group-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-target-group-states ()
   '(trivial-types:proper-list load-balancer-target-group-state))
 (common-lisp:defun |make-load-balancer-target-group-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-target-group-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-forecast common-lisp:nil
                       ((metric-specification :initarg :metric-specification
                         :type
                         (common-lisp:or
                          predictive-scaling-metric-specification
                          common-lisp:null)
                         :accessor %load-forecast-metric-specification
                         :initform
                         (common-lisp:error
                          ":metric-specification is required"))
                        (values :initarg :values :type
                         (common-lisp:or predictive-scaling-forecast-values
                                         common-lisp:null)
                         :accessor %load-forecast-values :initform
                         (common-lisp:error ":values is required"))
                        (timestamps :initarg :timestamps :type
                         (common-lisp:or predictive-scaling-forecast-timestamps
                                         common-lisp:null)
                         :accessor %load-forecast-timestamps :initform
                         (common-lisp:error ":timestamps is required"))))
 (common-lisp:export (common-lisp:list 'load-forecast 'make-load-forecast))
 (common-lisp:defun make-load-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-specification values timestamps)
   (common-lisp:apply #'common-lisp:make-instance 'load-forecast
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-forecast))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-forecast))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamps))
      (common-lisp:list
       (common-lisp:cons "Timestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-specification))
      (common-lisp:list
       (common-lisp:cons "MetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-forecast))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-forecasts ()
   '(trivial-types:proper-list load-forecast))
 (common-lisp:defun |make-load-forecasts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-forecast))
   aws-sdk/generator/shape::members))
(common-lisp:deftype local-storage () 'common-lisp:string)
(common-lisp:deftype local-storage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype local-storage-types ()
   '(trivial-types:proper-list local-storage-type))
 (common-lisp:defun |make-local-storage-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list local-storage-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-group-prepared-capacity () 'common-lisp:integer)
(common-lisp:deftype max-instance-lifetime () 'common-lisp:integer)
(common-lisp:deftype max-number-of-auto-scaling-groups () 'common-lisp:integer)
(common-lisp:deftype max-number-of-launch-configurations ()
  'common-lisp:integer)
(common-lisp:deftype max-records () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass memory-gi-bper-vcpu-request common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-double
                                         common-lisp:null)
                         :accessor %memory-gi-bper-vcpu-request-max :initform
                         common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-double
                                         common-lisp:null)
                         :accessor %memory-gi-bper-vcpu-request-min :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'memory-gi-bper-vcpu-request
                    'make-memory-gi-bper-vcpu-request))
 (common-lisp:defun make-memory-gi-bper-vcpu-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance 'memory-gi-bper-vcpu-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          memory-gi-bper-vcpu-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          memory-gi-bper-vcpu-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          memory-gi-bper-vcpu-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass memory-mi-brequest common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %memory-mi-brequest-max :initform
                         common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %memory-mi-brequest-min :initform
                         (common-lisp:error ":min is required"))))
 (common-lisp:export
  (common-lisp:list 'memory-mi-brequest 'make-memory-mi-brequest))
 (common-lisp:defun make-memory-mi-brequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance 'memory-mi-brequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input memory-mi-brequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input memory-mi-brequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input memory-mi-brequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric common-lisp:nil
                       ((dimensions :initarg :dimensions :type
                         (common-lisp:or metric-dimensions common-lisp:null)
                         :accessor %metric-dimensions :initform
                         common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %metric-metric-name :initform
                         (common-lisp:error ":metric-name is required"))
                        (namespace :initarg :namespace :type
                         (common-lisp:or metric-namespace common-lisp:null)
                         :accessor %metric-namespace :initform
                         (common-lisp:error ":namespace is required"))))
 (common-lisp:export (common-lisp:list 'metric 'make-metric))
 (common-lisp:defun make-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimensions metric-name namespace)
   (common-lisp:apply #'common-lisp:make-instance 'metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric-collection-type common-lisp:nil
                       ((metric :initarg :metric :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %metric-collection-type-metric :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-collection-type 'make-metric-collection-type))
 (common-lisp:defun make-metric-collection-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric)
   (common-lisp:apply #'common-lisp:make-instance 'metric-collection-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-collection-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-collection-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-collection-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-collection-types ()
   '(trivial-types:proper-list metric-collection-type))
 (common-lisp:defun |make-metric-collection-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-collection-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-data-queries ()
   '(trivial-types:proper-list metric-data-query))
 (common-lisp:defun |make-metric-data-queries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-data-query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-data-query common-lisp:nil
                       ((return-data :initarg :return-data :type
                         (common-lisp:or return-data common-lisp:null)
                         :accessor %metric-data-query-return-data :initform
                         common-lisp:nil)
                        (label :initarg :label :type
                         (common-lisp:or xml-string-metric-label
                                         common-lisp:null)
                         :accessor %metric-data-query-label :initform
                         common-lisp:nil)
                        (metric-stat :initarg :metric-stat :type
                         (common-lisp:or metric-stat common-lisp:null)
                         :accessor %metric-data-query-metric-stat :initform
                         common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor %metric-data-query-expression :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %metric-data-query-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'metric-data-query 'make-metric-data-query))
 (common-lisp:defun make-metric-data-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key return-data label metric-stat expression
                     id)
   (common-lisp:apply #'common-lisp:make-instance 'metric-data-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-data-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-data-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-stat))
      (common-lisp:list
       (common-lisp:cons "MetricStat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-data))
      (common-lisp:list
       (common-lisp:cons "ReturnData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-data-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric-dimension common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or metric-dimension-value
                                         common-lisp:null)
                         :accessor %metric-dimension-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or metric-dimension-name
                                         common-lisp:null)
                         :accessor %metric-dimension-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'metric-dimension 'make-metric-dimension))
 (common-lisp:defun make-metric-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'metric-dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-dimension))
   common-lisp:nil))
(common-lisp:deftype metric-dimension-name () 'common-lisp:string)
(common-lisp:deftype metric-dimension-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-dimensions ()
   '(trivial-types:proper-list metric-dimension))
 (common-lisp:defun |make-metric-dimensions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-granularity-type common-lisp:nil
                       ((granularity :initarg :granularity :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %metric-granularity-type-granularity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-granularity-type 'make-metric-granularity-type))
 (common-lisp:defun make-metric-granularity-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key granularity)
   (common-lisp:apply #'common-lisp:make-instance 'metric-granularity-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-granularity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-granularity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-granularity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-granularity-types ()
   '(trivial-types:proper-list metric-granularity-type))
 (common-lisp:defun |make-metric-granularity-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-granularity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:deftype metric-scale () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass metric-stat common-lisp:nil
                       ((unit :initarg :unit :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor %metric-stat-unit :initform common-lisp:nil)
                        (stat :initarg :stat :type
                         (common-lisp:or xml-string-metric-stat
                                         common-lisp:null)
                         :accessor %metric-stat-stat :initform
                         (common-lisp:error ":stat is required"))
                        (metric :initarg :metric :type
                         (common-lisp:or metric common-lisp:null) :accessor
                         %metric-stat-metric :initform
                         (common-lisp:error ":metric is required"))))
 (common-lisp:export (common-lisp:list 'metric-stat 'make-metric-stat))
 (common-lisp:defun make-metric-stat
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit stat metric)
   (common-lisp:apply #'common-lisp:make-instance 'metric-stat
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stat))
      (common-lisp:list
       (common-lisp:cons "Stat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-stat))
   common-lisp:nil))
(common-lisp:deftype metric-statistic () 'common-lisp:string)
(common-lisp:deftype metric-type () 'common-lisp:string)
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metrics ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:deftype min-adjustment-magnitude () 'common-lisp:integer)
(common-lisp:deftype min-adjustment-step () 'common-lisp:integer)
(common-lisp:deftype mixed-instance-spot-price () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mixed-instances-policy common-lisp:nil
                       ((instances-distribution :initarg
                         :instances-distribution :type
                         (common-lisp:or instances-distribution
                                         common-lisp:null)
                         :accessor
                         %mixed-instances-policy-instances-distribution
                         :initform common-lisp:nil)
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or launch-template common-lisp:null)
                         :accessor %mixed-instances-policy-launch-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mixed-instances-policy 'make-mixed-instances-policy))
 (common-lisp:defun make-mixed-instances-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instances-distribution launch-template)
   (common-lisp:apply #'common-lisp:make-instance 'mixed-instances-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mixed-instances-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mixed-instances-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-distribution))
      (common-lisp:list
       (common-lisp:cons "InstancesDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mixed-instances-policy))
   common-lisp:nil))
(common-lisp:deftype monitoring-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass network-bandwidth-gbps-request common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-double
                                         common-lisp:null)
                         :accessor %network-bandwidth-gbps-request-max
                         :initform common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-double
                                         common-lisp:null)
                         :accessor %network-bandwidth-gbps-request-min
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-bandwidth-gbps-request
                    'make-network-bandwidth-gbps-request))
 (common-lisp:defun make-network-bandwidth-gbps-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-bandwidth-gbps-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-bandwidth-gbps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-bandwidth-gbps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-bandwidth-gbps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-interface-count-request common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %network-interface-count-request-max
                         :initform common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %network-interface-count-request-min
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-interface-count-request
                    'make-network-interface-count-request))
 (common-lisp:defun make-network-interface-count-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-interface-count-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-count-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-count-request))
   common-lisp:nil))
(common-lisp:deftype no-device () 'common-lisp:boolean)
(common-lisp:deftype non-zero-int-percent () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((notification-type :initarg :notification-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-notification-type
                         :initform common-lisp:nil)
                        (topic-arn :initarg :topic-arn :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %notification-configuration-topic-arn
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-auto-scaling-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defun make-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-type topic-arn
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-type))
      (common-lisp:list
       (common-lisp:cons "NotificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notification-configurations ()
   '(trivial-types:proper-list notification-configuration))
 (common-lisp:defun |make-notification-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notification-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notification-target-resource-name () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype nullable-positive-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-positive-integer () 'common-lisp:integer)
(common-lisp:deftype number-of-auto-scaling-groups () 'common-lisp:integer)
(common-lisp:deftype number-of-launch-configurations () 'common-lisp:integer)
(common-lisp:deftype on-demand-base-capacity () 'common-lisp:integer)
(common-lisp:deftype on-demand-percentage-above-base-capacity ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype overrides ()
   '(trivial-types:proper-list launch-template-overrides))
 (common-lisp:defun |make-overrides|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-template-overrides))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policies-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %policies-type-next-token :initform common-lisp:nil)
                        (scaling-policies :initarg :scaling-policies :type
                         (common-lisp:or scaling-policies common-lisp:null)
                         :accessor %policies-type-scaling-policies :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policies-type 'make-policies-type))
 (common-lisp:defun make-policies-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token scaling-policies)
   (common-lisp:apply #'common-lisp:make-instance 'policies-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policies-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policies-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-policies))
      (common-lisp:list
       (common-lisp:cons "ScalingPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policies-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-arntype common-lisp:nil
                       ((alarms :initarg :alarms :type
                         (common-lisp:or alarms common-lisp:null) :accessor
                         %policy-arntype-alarms :initform common-lisp:nil)
                        (policy-arn :initarg :policy-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %policy-arntype-policy-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy-arntype 'make-policy-arntype))
 (common-lisp:defun make-policy-arntype
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarms policy-arn)
   (common-lisp:apply #'common-lisp:make-instance 'policy-arntype
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-arntype))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-arntype))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-arntype))
   common-lisp:nil))
(common-lisp:deftype policy-increment () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype policy-names ()
   '(trivial-types:proper-list resource-name))
 (common-lisp:defun |make-policy-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype policy-types ()
   '(trivial-types:proper-list xml-string-max-len64))
 (common-lisp:defun |make-policy-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len64))
   aws-sdk/generator/shape::members))
(common-lisp:deftype predefined-load-metric-type () 'common-lisp:string)
(common-lisp:deftype predefined-metric-pair-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass predefined-metric-specification common-lisp:nil
                       ((resource-label :initarg :resource-label :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor
                         %predefined-metric-specification-resource-label
                         :initform common-lisp:nil)
                        (predefined-metric-type :initarg
                         :predefined-metric-type :type
                         (common-lisp:or metric-type common-lisp:null)
                         :accessor
                         %predefined-metric-specification-predefined-metric-type
                         :initform
                         (common-lisp:error
                          ":predefined-metric-type is required"))))
 (common-lisp:export
  (common-lisp:list 'predefined-metric-specification
                    'make-predefined-metric-specification))
 (common-lisp:defun make-predefined-metric-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-label predefined-metric-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'predefined-metric-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   common-lisp:nil))
(common-lisp:deftype predefined-scaling-metric-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass predictive-scaling-configuration common-lisp:nil
                       ((max-capacity-buffer :initarg :max-capacity-buffer
                         :type
                         (common-lisp:or predictive-scaling-max-capacity-buffer
                                         common-lisp:null)
                         :accessor
                         %predictive-scaling-configuration-max-capacity-buffer
                         :initform common-lisp:nil)
                        (max-capacity-breach-behavior :initarg
                         :max-capacity-breach-behavior :type
                         (common-lisp:or
                          predictive-scaling-max-capacity-breach-behavior
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-configuration-max-capacity-breach-behavior
                         :initform common-lisp:nil)
                        (scheduling-buffer-time :initarg
                         :scheduling-buffer-time :type
                         (common-lisp:or
                          predictive-scaling-scheduling-buffer-time
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-configuration-scheduling-buffer-time
                         :initform common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or predictive-scaling-mode
                                         common-lisp:null)
                         :accessor %predictive-scaling-configuration-mode
                         :initform common-lisp:nil)
                        (metric-specifications :initarg :metric-specifications
                         :type
                         (common-lisp:or
                          predictive-scaling-metric-specifications
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-configuration-metric-specifications
                         :initform
                         (common-lisp:error
                          ":metric-specifications is required"))))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-configuration
                    'make-predictive-scaling-configuration))
 (common-lisp:defun make-predictive-scaling-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-capacity-buffer
                     max-capacity-breach-behavior scheduling-buffer-time mode
                     metric-specifications)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictive-scaling-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-specifications))
      (common-lisp:list
       (common-lisp:cons "MetricSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduling-buffer-time))
      (common-lisp:list
       (common-lisp:cons "SchedulingBufferTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-capacity-breach-behavior))
      (common-lisp:list
       (common-lisp:cons "MaxCapacityBreachBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity-buffer))
      (common-lisp:list
       (common-lisp:cons "MaxCapacityBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predictive-scaling-customized-capacity-metric
                       common-lisp:nil
                       ((metric-data-queries :initarg :metric-data-queries
                         :type
                         (common-lisp:or metric-data-queries common-lisp:null)
                         :accessor
                         %predictive-scaling-customized-capacity-metric-metric-data-queries
                         :initform
                         (common-lisp:error
                          ":metric-data-queries is required"))))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-customized-capacity-metric
                    'make-predictive-scaling-customized-capacity-metric))
 (common-lisp:defun make-predictive-scaling-customized-capacity-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-data-queries)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictive-scaling-customized-capacity-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-capacity-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-capacity-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-queries))
      (common-lisp:list
       (common-lisp:cons "MetricDataQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-capacity-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predictive-scaling-customized-load-metric
                       common-lisp:nil
                       ((metric-data-queries :initarg :metric-data-queries
                         :type
                         (common-lisp:or metric-data-queries common-lisp:null)
                         :accessor
                         %predictive-scaling-customized-load-metric-metric-data-queries
                         :initform
                         (common-lisp:error
                          ":metric-data-queries is required"))))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-customized-load-metric
                    'make-predictive-scaling-customized-load-metric))
 (common-lisp:defun make-predictive-scaling-customized-load-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-data-queries)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictive-scaling-customized-load-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-load-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-load-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-queries))
      (common-lisp:list
       (common-lisp:cons "MetricDataQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-load-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predictive-scaling-customized-scaling-metric
                       common-lisp:nil
                       ((metric-data-queries :initarg :metric-data-queries
                         :type
                         (common-lisp:or metric-data-queries common-lisp:null)
                         :accessor
                         %predictive-scaling-customized-scaling-metric-metric-data-queries
                         :initform
                         (common-lisp:error
                          ":metric-data-queries is required"))))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-customized-scaling-metric
                    'make-predictive-scaling-customized-scaling-metric))
 (common-lisp:defun make-predictive-scaling-customized-scaling-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-data-queries)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictive-scaling-customized-scaling-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-scaling-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-scaling-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-queries))
      (common-lisp:list
       (common-lisp:cons "MetricDataQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-scaling-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictive-scaling-forecast-timestamps ()
   '(trivial-types:proper-list timestamp-type))
 (common-lisp:defun |make-predictive-scaling-forecast-timestamps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype predictive-scaling-forecast-values ()
   '(trivial-types:proper-list metric-scale))
 (common-lisp:defun |make-predictive-scaling-forecast-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-scale))
   aws-sdk/generator/shape::members))
(common-lisp:deftype predictive-scaling-max-capacity-breach-behavior ()
  'common-lisp:string)
(common-lisp:deftype predictive-scaling-max-capacity-buffer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass predictive-scaling-metric-specification common-lisp:nil
                       ((customized-capacity-metric-specification :initarg
                         :customized-capacity-metric-specification :type
                         (common-lisp:or
                          predictive-scaling-customized-capacity-metric
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-metric-specification-customized-capacity-metric-specification
                         :initform common-lisp:nil)
                        (customized-load-metric-specification :initarg
                         :customized-load-metric-specification :type
                         (common-lisp:or
                          predictive-scaling-customized-load-metric
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-metric-specification-customized-load-metric-specification
                         :initform common-lisp:nil)
                        (customized-scaling-metric-specification :initarg
                         :customized-scaling-metric-specification :type
                         (common-lisp:or
                          predictive-scaling-customized-scaling-metric
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-metric-specification-customized-scaling-metric-specification
                         :initform common-lisp:nil)
                        (predefined-load-metric-specification :initarg
                         :predefined-load-metric-specification :type
                         (common-lisp:or
                          predictive-scaling-predefined-load-metric
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-metric-specification-predefined-load-metric-specification
                         :initform common-lisp:nil)
                        (predefined-scaling-metric-specification :initarg
                         :predefined-scaling-metric-specification :type
                         (common-lisp:or
                          predictive-scaling-predefined-scaling-metric
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-metric-specification-predefined-scaling-metric-specification
                         :initform common-lisp:nil)
                        (predefined-metric-pair-specification :initarg
                         :predefined-metric-pair-specification :type
                         (common-lisp:or
                          predictive-scaling-predefined-metric-pair
                          common-lisp:null)
                         :accessor
                         %predictive-scaling-metric-specification-predefined-metric-pair-specification
                         :initform common-lisp:nil)
                        (target-value :initarg :target-value :type
                         (common-lisp:or metric-scale common-lisp:null)
                         :accessor
                         %predictive-scaling-metric-specification-target-value
                         :initform
                         (common-lisp:error ":target-value is required"))))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-metric-specification
                    'make-predictive-scaling-metric-specification))
 (common-lisp:defun make-predictive-scaling-metric-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key customized-capacity-metric-specification
                     customized-load-metric-specification
                     customized-scaling-metric-specification
                     predefined-load-metric-specification
                     predefined-scaling-metric-specification
                     predefined-metric-pair-specification target-value)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictive-scaling-metric-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-pair-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricPairSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-scaling-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedScalingMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-load-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedLoadMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-scaling-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedScalingMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-load-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedLoadMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-capacity-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedCapacityMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-metric-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictive-scaling-metric-specifications ()
   '(trivial-types:proper-list predictive-scaling-metric-specification))
 (common-lisp:defun |make-predictive-scaling-metric-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            predictive-scaling-metric-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype predictive-scaling-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass predictive-scaling-predefined-load-metric
                       common-lisp:nil
                       ((resource-label :initarg :resource-label :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor
                         %predictive-scaling-predefined-load-metric-resource-label
                         :initform common-lisp:nil)
                        (predefined-metric-type :initarg
                         :predefined-metric-type :type
                         (common-lisp:or predefined-load-metric-type
                                         common-lisp:null)
                         :accessor
                         %predictive-scaling-predefined-load-metric-predefined-metric-type
                         :initform
                         (common-lisp:error
                          ":predefined-metric-type is required"))))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-predefined-load-metric
                    'make-predictive-scaling-predefined-load-metric))
 (common-lisp:defun make-predictive-scaling-predefined-load-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-label predefined-metric-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictive-scaling-predefined-load-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-load-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-load-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-load-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predictive-scaling-predefined-metric-pair
                       common-lisp:nil
                       ((resource-label :initarg :resource-label :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor
                         %predictive-scaling-predefined-metric-pair-resource-label
                         :initform common-lisp:nil)
                        (predefined-metric-type :initarg
                         :predefined-metric-type :type
                         (common-lisp:or predefined-metric-pair-type
                                         common-lisp:null)
                         :accessor
                         %predictive-scaling-predefined-metric-pair-predefined-metric-type
                         :initform
                         (common-lisp:error
                          ":predefined-metric-type is required"))))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-predefined-metric-pair
                    'make-predictive-scaling-predefined-metric-pair))
 (common-lisp:defun make-predictive-scaling-predefined-metric-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-label predefined-metric-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictive-scaling-predefined-metric-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-metric-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-metric-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-metric-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predictive-scaling-predefined-scaling-metric
                       common-lisp:nil
                       ((resource-label :initarg :resource-label :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor
                         %predictive-scaling-predefined-scaling-metric-resource-label
                         :initform common-lisp:nil)
                        (predefined-metric-type :initarg
                         :predefined-metric-type :type
                         (common-lisp:or predefined-scaling-metric-type
                                         common-lisp:null)
                         :accessor
                         %predictive-scaling-predefined-scaling-metric-predefined-metric-type
                         :initform
                         (common-lisp:error
                          ":predefined-metric-type is required"))))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-predefined-scaling-metric
                    'make-predictive-scaling-predefined-scaling-metric))
 (common-lisp:defun make-predictive-scaling-predefined-scaling-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-label predefined-metric-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictive-scaling-predefined-scaling-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-scaling-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-scaling-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-scaling-metric))
   common-lisp:nil))
(common-lisp:deftype predictive-scaling-scheduling-buffer-time ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype process-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-process-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass process-type common-lisp:nil
                       ((process-name :initarg :process-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %process-type-process-name :initform
                         (common-lisp:error ":process-name is required"))))
 (common-lisp:export (common-lisp:list 'process-type 'make-process-type))
 (common-lisp:defun make-process-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key process-name)
   (common-lisp:apply #'common-lisp:make-instance 'process-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input process-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input process-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-name))
      (common-lisp:list
       (common-lisp:cons "ProcessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input process-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processes () '(trivial-types:proper-list process-type))
 (common-lisp:defun |make-processes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list process-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass processes-type common-lisp:nil
                       ((processes :initarg :processes :type
                         (common-lisp:or processes common-lisp:null) :accessor
                         %processes-type-processes :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'processes-type 'make-processes-type))
 (common-lisp:defun make-processes-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key processes)
   (common-lisp:apply #'common-lisp:make-instance 'processes-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processes-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processes-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processes))
      (common-lisp:list
       (common-lisp:cons "Processes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processes-type))
   common-lisp:nil))
(common-lisp:deftype progress () 'common-lisp:integer)
(common-lisp:deftype propagate-at-launch () 'common-lisp:boolean)
(common-lisp:deftype protected-from-scale-in () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass put-lifecycle-hook-answer common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-hook-answer
                    'make-put-lifecycle-hook-answer))
 (common-lisp:defun make-put-lifecycle-hook-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-lifecycle-hook-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-lifecycle-hook-type common-lisp:nil
                       ((default-result :initarg :default-result :type
                         (common-lisp:or lifecycle-action-result
                                         common-lisp:null)
                         :accessor %put-lifecycle-hook-type-default-result
                         :initform common-lisp:nil)
                        (heartbeat-timeout :initarg :heartbeat-timeout :type
                         (common-lisp:or heartbeat-timeout common-lisp:null)
                         :accessor %put-lifecycle-hook-type-heartbeat-timeout
                         :initform common-lisp:nil)
                        (notification-metadata :initarg :notification-metadata
                         :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor
                         %put-lifecycle-hook-type-notification-metadata
                         :initform common-lisp:nil)
                        (notification-target-arn :initarg
                         :notification-target-arn :type
                         (common-lisp:or notification-target-resource-name
                                         common-lisp:null)
                         :accessor
                         %put-lifecycle-hook-type-notification-target-arn
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %put-lifecycle-hook-type-role-arn :initform
                         common-lisp:nil)
                        (lifecycle-transition :initarg :lifecycle-transition
                         :type
                         (common-lisp:or lifecycle-transition common-lisp:null)
                         :accessor
                         %put-lifecycle-hook-type-lifecycle-transition
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %put-lifecycle-hook-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (lifecycle-hook-name :initarg :lifecycle-hook-name
                         :type
                         (common-lisp:or ascii-string-max-len255
                                         common-lisp:null)
                         :accessor %put-lifecycle-hook-type-lifecycle-hook-name
                         :initform
                         (common-lisp:error
                          ":lifecycle-hook-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-hook-type 'make-put-lifecycle-hook-type))
 (common-lisp:defun make-put-lifecycle-hook-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-result heartbeat-timeout
                     notification-metadata notification-target-arn role-arn
                     lifecycle-transition auto-scaling-group-name
                     lifecycle-hook-name)
   (common-lisp:apply #'common-lisp:make-instance 'put-lifecycle-hook-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-target-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTargetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-metadata))
      (common-lisp:list
       (common-lisp:cons "NotificationMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "HeartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-result))
      (common-lisp:list
       (common-lisp:cons "DefaultResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-notification-configuration-type common-lisp:nil
                       ((notification-types :initarg :notification-types :type
                         (common-lisp:or auto-scaling-notification-types
                                         common-lisp:null)
                         :accessor
                         %put-notification-configuration-type-notification-types
                         :initform
                         (common-lisp:error ":notification-types is required"))
                        (topic-arn :initarg :topic-arn :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %put-notification-configuration-type-topic-arn
                         :initform
                         (common-lisp:error ":topic-arn is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %put-notification-configuration-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-notification-configuration-type
                    'make-put-notification-configuration-type))
 (common-lisp:defun make-put-notification-configuration-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-types topic-arn
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-notification-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-types))
      (common-lisp:list
       (common-lisp:cons "NotificationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-scaling-policy-type common-lisp:nil
                       ((predictive-scaling-configuration :initarg
                         :predictive-scaling-configuration :type
                         (common-lisp:or predictive-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         %put-scaling-policy-type-predictive-scaling-configuration
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or scaling-policy-enabled
                                         common-lisp:null)
                         :accessor %put-scaling-policy-type-enabled :initform
                         common-lisp:nil)
                        (target-tracking-configuration :initarg
                         :target-tracking-configuration :type
                         (common-lisp:or target-tracking-configuration
                                         common-lisp:null)
                         :accessor
                         %put-scaling-policy-type-target-tracking-configuration
                         :initform common-lisp:nil)
                        (estimated-instance-warmup :initarg
                         :estimated-instance-warmup :type
                         (common-lisp:or estimated-instance-warmup
                                         common-lisp:null)
                         :accessor
                         %put-scaling-policy-type-estimated-instance-warmup
                         :initform common-lisp:nil)
                        (step-adjustments :initarg :step-adjustments :type
                         (common-lisp:or step-adjustments common-lisp:null)
                         :accessor %put-scaling-policy-type-step-adjustments
                         :initform common-lisp:nil)
                        (metric-aggregation-type :initarg
                         :metric-aggregation-type :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor
                         %put-scaling-policy-type-metric-aggregation-type
                         :initform common-lisp:nil)
                        (cooldown :initarg :cooldown :type
                         (common-lisp:or cooldown common-lisp:null) :accessor
                         %put-scaling-policy-type-cooldown :initform
                         common-lisp:nil)
                        (scaling-adjustment :initarg :scaling-adjustment :type
                         (common-lisp:or policy-increment common-lisp:null)
                         :accessor %put-scaling-policy-type-scaling-adjustment
                         :initform common-lisp:nil)
                        (min-adjustment-magnitude :initarg
                         :min-adjustment-magnitude :type
                         (common-lisp:or min-adjustment-magnitude
                                         common-lisp:null)
                         :accessor
                         %put-scaling-policy-type-min-adjustment-magnitude
                         :initform common-lisp:nil)
                        (min-adjustment-step :initarg :min-adjustment-step
                         :type
                         (common-lisp:or min-adjustment-step common-lisp:null)
                         :accessor %put-scaling-policy-type-min-adjustment-step
                         :initform common-lisp:nil)
                        (adjustment-type :initarg :adjustment-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %put-scaling-policy-type-adjustment-type
                         :initform common-lisp:nil)
                        (policy-type :initarg :policy-type :type
                         (common-lisp:or xml-string-max-len64 common-lisp:null)
                         :accessor %put-scaling-policy-type-policy-type
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %put-scaling-policy-type-policy-name
                         :initform
                         (common-lisp:error ":policy-name is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %put-scaling-policy-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-scaling-policy-type 'make-put-scaling-policy-type))
 (common-lisp:defun make-put-scaling-policy-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key predictive-scaling-configuration enabled
                     target-tracking-configuration estimated-instance-warmup
                     step-adjustments metric-aggregation-type cooldown
                     scaling-adjustment min-adjustment-magnitude
                     min-adjustment-step adjustment-type policy-type
                     policy-name auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'put-scaling-policy-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-type))
      (common-lisp:list
       (common-lisp:cons "AdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-adjustment-step))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-adjustment-magnitude))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentMagnitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cooldown))
      (common-lisp:list
       (common-lisp:cons "Cooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-aggregation-type))
      (common-lisp:list
       (common-lisp:cons "MetricAggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-adjustments))
      (common-lisp:list
       (common-lisp:cons "StepAdjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "EstimatedInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictive-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "PredictiveScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-scheduled-update-group-action-type common-lisp:nil
                       ((time-zone :initarg :time-zone :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-time-zone
                         :initform common-lisp:nil)
                        (desired-capacity :initarg :desired-capacity :type
                         (common-lisp:or auto-scaling-group-desired-capacity
                                         common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-desired-capacity
                         :initform common-lisp:nil)
                        (max-size :initarg :max-size :type
                         (common-lisp:or auto-scaling-group-max-size
                                         common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-max-size
                         :initform common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or auto-scaling-group-min-size
                                         common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-min-size
                         :initform common-lisp:nil)
                        (recurrence :initarg :recurrence :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-recurrence
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-start-time
                         :initform common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %put-scheduled-update-group-action-type-time
                         :initform common-lisp:nil)
                        (scheduled-action-name :initarg :scheduled-action-name
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %put-scheduled-update-group-action-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-scheduled-update-group-action-type
                    'make-put-scheduled-update-group-action-type))
 (common-lisp:defun make-put-scheduled-update-group-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-zone desired-capacity max-size
                     min-size recurrence end-time start-time time
                     scheduled-action-name auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-scheduled-update-group-action-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-update-group-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-update-group-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-update-group-action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-warm-pool-answer common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-warm-pool-answer 'make-put-warm-pool-answer))
 (common-lisp:defun make-put-warm-pool-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-warm-pool-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-warm-pool-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-warm-pool-type common-lisp:nil
                       ((instance-reuse-policy :initarg :instance-reuse-policy
                         :type
                         (common-lisp:or instance-reuse-policy
                                         common-lisp:null)
                         :accessor %put-warm-pool-type-instance-reuse-policy
                         :initform common-lisp:nil)
                        (pool-state :initarg :pool-state :type
                         (common-lisp:or warm-pool-state common-lisp:null)
                         :accessor %put-warm-pool-type-pool-state :initform
                         common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or warm-pool-min-size common-lisp:null)
                         :accessor %put-warm-pool-type-min-size :initform
                         common-lisp:nil)
                        (max-group-prepared-capacity :initarg
                         :max-group-prepared-capacity :type
                         (common-lisp:or max-group-prepared-capacity
                                         common-lisp:null)
                         :accessor
                         %put-warm-pool-type-max-group-prepared-capacity
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %put-warm-pool-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-warm-pool-type 'make-put-warm-pool-type))
 (common-lisp:defun make-put-warm-pool-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-reuse-policy pool-state min-size
                     max-group-prepared-capacity auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'put-warm-pool-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-warm-pool-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-warm-pool-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-group-prepared-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxGroupPreparedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-state))
      (common-lisp:list
       (common-lisp:cons "PoolState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-reuse-policy))
      (common-lisp:list
       (common-lisp:cons "InstanceReusePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-warm-pool-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass record-lifecycle-action-heartbeat-answer common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'record-lifecycle-action-heartbeat-answer
                    'make-record-lifecycle-action-heartbeat-answer))
 (common-lisp:defun make-record-lifecycle-action-heartbeat-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'record-lifecycle-action-heartbeat-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass record-lifecycle-action-heartbeat-type common-lisp:nil
                       ((instance-id :initarg :instance-id :type
                         (common-lisp:or xml-string-max-len19 common-lisp:null)
                         :accessor
                         %record-lifecycle-action-heartbeat-type-instance-id
                         :initform common-lisp:nil)
                        (lifecycle-action-token :initarg
                         :lifecycle-action-token :type
                         (common-lisp:or lifecycle-action-token
                                         common-lisp:null)
                         :accessor
                         %record-lifecycle-action-heartbeat-type-lifecycle-action-token
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %record-lifecycle-action-heartbeat-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (lifecycle-hook-name :initarg :lifecycle-hook-name
                         :type
                         (common-lisp:or ascii-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %record-lifecycle-action-heartbeat-type-lifecycle-hook-name
                         :initform
                         (common-lisp:error
                          ":lifecycle-hook-name is required"))))
 (common-lisp:export
  (common-lisp:list 'record-lifecycle-action-heartbeat-type
                    'make-record-lifecycle-action-heartbeat-type))
 (common-lisp:defun make-record-lifecycle-action-heartbeat-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-id lifecycle-action-token
                     auto-scaling-group-name lifecycle-hook-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'record-lifecycle-action-heartbeat-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-action-token))
      (common-lisp:list
       (common-lisp:cons "LifecycleActionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-type))
   common-lisp:nil))
(common-lisp:deftype refresh-instance-warmup () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass refresh-preferences common-lisp:nil
                       ((standby-instances :initarg :standby-instances :type
                         (common-lisp:or standby-instances common-lisp:null)
                         :accessor %refresh-preferences-standby-instances
                         :initform common-lisp:nil)
                        (scale-in-protected-instances :initarg
                         :scale-in-protected-instances :type
                         (common-lisp:or scale-in-protected-instances
                                         common-lisp:null)
                         :accessor
                         %refresh-preferences-scale-in-protected-instances
                         :initform common-lisp:nil)
                        (auto-rollback :initarg :auto-rollback :type
                         (common-lisp:or auto-rollback common-lisp:null)
                         :accessor %refresh-preferences-auto-rollback :initform
                         common-lisp:nil)
                        (skip-matching :initarg :skip-matching :type
                         (common-lisp:or skip-matching common-lisp:null)
                         :accessor %refresh-preferences-skip-matching :initform
                         common-lisp:nil)
                        (checkpoint-delay :initarg :checkpoint-delay :type
                         (common-lisp:or checkpoint-delay common-lisp:null)
                         :accessor %refresh-preferences-checkpoint-delay
                         :initform common-lisp:nil)
                        (checkpoint-percentages :initarg
                         :checkpoint-percentages :type
                         (common-lisp:or checkpoint-percentages
                                         common-lisp:null)
                         :accessor %refresh-preferences-checkpoint-percentages
                         :initform common-lisp:nil)
                        (instance-warmup :initarg :instance-warmup :type
                         (common-lisp:or refresh-instance-warmup
                                         common-lisp:null)
                         :accessor %refresh-preferences-instance-warmup
                         :initform common-lisp:nil)
                        (min-healthy-percentage :initarg
                         :min-healthy-percentage :type
                         (common-lisp:or int-percent common-lisp:null)
                         :accessor %refresh-preferences-min-healthy-percentage
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'refresh-preferences 'make-refresh-preferences))
 (common-lisp:defun make-refresh-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standby-instances
                     scale-in-protected-instances auto-rollback skip-matching
                     checkpoint-delay checkpoint-percentages instance-warmup
                     min-healthy-percentage)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input refresh-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input refresh-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-healthy-percentage))
      (common-lisp:list
       (common-lisp:cons "MinHealthyPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-warmup))
      (common-lisp:list
       (common-lisp:cons "InstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpoint-percentages))
      (common-lisp:list
       (common-lisp:cons "CheckpointPercentages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-delay))
      (common-lisp:list
       (common-lisp:cons "CheckpointDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-matching))
      (common-lisp:list
       (common-lisp:cons "SkipMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-rollback))
      (common-lisp:list
       (common-lisp:cons "AutoRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-in-protected-instances))
      (common-lisp:list
       (common-lisp:cons "ScaleInProtectedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standby-instances))
      (common-lisp:list
       (common-lisp:cons "StandbyInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input refresh-preferences))
   common-lisp:nil))
(common-lisp:deftype refresh-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-contention-fault
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-contention-fault-message)))
 (common-lisp:export
  (common-lisp:list 'resource-contention-fault
                    'resource-contention-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-fault
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-in-use-fault-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-fault 'resource-in-use-fault-message)))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:deftype return-data () 'common-lisp:boolean)
(common-lisp:deftype reuse-on-scale-in () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass rollback-details common-lisp:nil
                       ((progress-details-on-rollback :initarg
                         :progress-details-on-rollback :type
                         (common-lisp:or instance-refresh-progress-details
                                         common-lisp:null)
                         :accessor
                         %rollback-details-progress-details-on-rollback
                         :initform common-lisp:nil)
                        (instances-to-update-on-rollback :initarg
                         :instances-to-update-on-rollback :type
                         (common-lisp:or instances-to-update common-lisp:null)
                         :accessor
                         %rollback-details-instances-to-update-on-rollback
                         :initform common-lisp:nil)
                        (percentage-complete-on-rollback :initarg
                         :percentage-complete-on-rollback :type
                         (common-lisp:or int-percent common-lisp:null)
                         :accessor
                         %rollback-details-percentage-complete-on-rollback
                         :initform common-lisp:nil)
                        (rollback-start-time :initarg :rollback-start-time
                         :type (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %rollback-details-rollback-start-time
                         :initform common-lisp:nil)
                        (rollback-reason :initarg :rollback-reason :type
                         (common-lisp:or xml-string-max-len1023
                                         common-lisp:null)
                         :accessor %rollback-details-rollback-reason :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rollback-details 'make-rollback-details))
 (common-lisp:defun make-rollback-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key progress-details-on-rollback
                     instances-to-update-on-rollback
                     percentage-complete-on-rollback rollback-start-time
                     rollback-reason)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rollback-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rollback-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-reason))
      (common-lisp:list
       (common-lisp:cons "RollbackReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-start-time))
      (common-lisp:list
       (common-lisp:cons "RollbackStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percentage-complete-on-rollback))
      (common-lisp:list
       (common-lisp:cons "PercentageCompleteOnRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-to-update-on-rollback))
      (common-lisp:list
       (common-lisp:cons "InstancesToUpdateOnRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-details-on-rollback))
      (common-lisp:list
       (common-lisp:cons "ProgressDetailsOnRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rollback-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-instance-refresh-answer common-lisp:nil
                       ((instance-refresh-id :initarg :instance-refresh-id
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %rollback-instance-refresh-answer-instance-refresh-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rollback-instance-refresh-answer
                    'make-rollback-instance-refresh-answer))
 (common-lisp:defun make-rollback-instance-refresh-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-refresh-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'rollback-instance-refresh-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refresh-id))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-instance-refresh-type common-lisp:nil
                       ((auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %rollback-instance-refresh-type-auto-scaling-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rollback-instance-refresh-type
                    'make-rollback-instance-refresh-type))
 (common-lisp:defun make-rollback-instance-refresh-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'rollback-instance-refresh-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-type))
   common-lisp:nil))
(common-lisp:deftype scale-in-protected-instances () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition scaling-activity-in-progress-fault
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       scaling-activity-in-progress-fault-message)))
 (common-lisp:export
  (common-lisp:list 'scaling-activity-in-progress-fault
                    'scaling-activity-in-progress-fault-message)))
(common-lisp:deftype scaling-activity-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scaling-policies ()
   '(trivial-types:proper-list scaling-policy))
 (common-lisp:defun |make-scaling-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scaling-policy common-lisp:nil
                       ((predictive-scaling-configuration :initarg
                         :predictive-scaling-configuration :type
                         (common-lisp:or predictive-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         %scaling-policy-predictive-scaling-configuration
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or scaling-policy-enabled
                                         common-lisp:null)
                         :accessor %scaling-policy-enabled :initform
                         common-lisp:nil)
                        (target-tracking-configuration :initarg
                         :target-tracking-configuration :type
                         (common-lisp:or target-tracking-configuration
                                         common-lisp:null)
                         :accessor
                         %scaling-policy-target-tracking-configuration
                         :initform common-lisp:nil)
                        (alarms :initarg :alarms :type
                         (common-lisp:or alarms common-lisp:null) :accessor
                         %scaling-policy-alarms :initform common-lisp:nil)
                        (estimated-instance-warmup :initarg
                         :estimated-instance-warmup :type
                         (common-lisp:or estimated-instance-warmup
                                         common-lisp:null)
                         :accessor %scaling-policy-estimated-instance-warmup
                         :initform common-lisp:nil)
                        (metric-aggregation-type :initarg
                         :metric-aggregation-type :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor %scaling-policy-metric-aggregation-type
                         :initform common-lisp:nil)
                        (step-adjustments :initarg :step-adjustments :type
                         (common-lisp:or step-adjustments common-lisp:null)
                         :accessor %scaling-policy-step-adjustments :initform
                         common-lisp:nil)
                        (cooldown :initarg :cooldown :type
                         (common-lisp:or cooldown common-lisp:null) :accessor
                         %scaling-policy-cooldown :initform common-lisp:nil)
                        (scaling-adjustment :initarg :scaling-adjustment :type
                         (common-lisp:or policy-increment common-lisp:null)
                         :accessor %scaling-policy-scaling-adjustment :initform
                         common-lisp:nil)
                        (min-adjustment-magnitude :initarg
                         :min-adjustment-magnitude :type
                         (common-lisp:or min-adjustment-magnitude
                                         common-lisp:null)
                         :accessor %scaling-policy-min-adjustment-magnitude
                         :initform common-lisp:nil)
                        (min-adjustment-step :initarg :min-adjustment-step
                         :type
                         (common-lisp:or min-adjustment-step common-lisp:null)
                         :accessor %scaling-policy-min-adjustment-step
                         :initform common-lisp:nil)
                        (adjustment-type :initarg :adjustment-type :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %scaling-policy-adjustment-type :initform
                         common-lisp:nil)
                        (policy-type :initarg :policy-type :type
                         (common-lisp:or xml-string-max-len64 common-lisp:null)
                         :accessor %scaling-policy-policy-type :initform
                         common-lisp:nil)
                        (policy-arn :initarg :policy-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %scaling-policy-policy-arn :initform
                         common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %scaling-policy-policy-name :initform
                         common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %scaling-policy-auto-scaling-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'scaling-policy 'make-scaling-policy))
 (common-lisp:defun make-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key predictive-scaling-configuration enabled
                     target-tracking-configuration alarms
                     estimated-instance-warmup metric-aggregation-type
                     step-adjustments cooldown scaling-adjustment
                     min-adjustment-magnitude min-adjustment-step
                     adjustment-type policy-type policy-arn policy-name
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-type))
      (common-lisp:list
       (common-lisp:cons "AdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-adjustment-step))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-adjustment-magnitude))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentMagnitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cooldown))
      (common-lisp:list
       (common-lisp:cons "Cooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-adjustments))
      (common-lisp:list
       (common-lisp:cons "StepAdjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-aggregation-type))
      (common-lisp:list
       (common-lisp:cons "MetricAggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "EstimatedInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictive-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "PredictiveScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-policy))
   common-lisp:nil))
(common-lisp:deftype scaling-policy-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass scaling-process-query common-lisp:nil
                       ((scaling-processes :initarg :scaling-processes :type
                         (common-lisp:or process-names common-lisp:null)
                         :accessor %scaling-process-query-scaling-processes
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %scaling-process-query-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'scaling-process-query 'make-scaling-process-query))
 (common-lisp:defun make-scaling-process-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scaling-processes
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-process-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scaling-process-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scaling-process-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-processes))
      (common-lisp:list
       (common-lisp:cons "ScalingProcesses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scaling-process-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-action-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-scheduled-action-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scheduled-actions-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %scheduled-actions-type-next-token :initform
                         common-lisp:nil)
                        (scheduled-update-group-actions :initarg
                         :scheduled-update-group-actions :type
                         (common-lisp:or scheduled-update-group-actions
                                         common-lisp:null)
                         :accessor
                         %scheduled-actions-type-scheduled-update-group-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scheduled-actions-type 'make-scheduled-actions-type))
 (common-lisp:defun make-scheduled-actions-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     scheduled-update-group-actions)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-actions-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-update-group-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduledUpdateGroupActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scheduled-update-group-action common-lisp:nil
                       ((time-zone :initarg :time-zone :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %scheduled-update-group-action-time-zone
                         :initform common-lisp:nil)
                        (desired-capacity :initarg :desired-capacity :type
                         (common-lisp:or auto-scaling-group-desired-capacity
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-desired-capacity
                         :initform common-lisp:nil)
                        (max-size :initarg :max-size :type
                         (common-lisp:or auto-scaling-group-max-size
                                         common-lisp:null)
                         :accessor %scheduled-update-group-action-max-size
                         :initform common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or auto-scaling-group-min-size
                                         common-lisp:null)
                         :accessor %scheduled-update-group-action-min-size
                         :initform common-lisp:nil)
                        (recurrence :initarg :recurrence :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %scheduled-update-group-action-recurrence
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %scheduled-update-group-action-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %scheduled-update-group-action-start-time
                         :initform common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %scheduled-update-group-action-time
                         :initform common-lisp:nil)
                        (scheduled-action-arn :initarg :scheduled-action-arn
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-scheduled-action-arn
                         :initform common-lisp:nil)
                        (scheduled-action-name :initarg :scheduled-action-name
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-scheduled-action-name
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-auto-scaling-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scheduled-update-group-action
                    'make-scheduled-update-group-action))
 (common-lisp:defun make-scheduled-update-group-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-zone desired-capacity max-size
                     min-size recurrence end-time start-time time
                     scheduled-action-arn scheduled-action-name
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'scheduled-update-group-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scheduled-update-group-action-request common-lisp:nil
                       ((time-zone :initarg :time-zone :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-request-time-zone
                         :initform common-lisp:nil)
                        (desired-capacity :initarg :desired-capacity :type
                         (common-lisp:or auto-scaling-group-desired-capacity
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-request-desired-capacity
                         :initform common-lisp:nil)
                        (max-size :initarg :max-size :type
                         (common-lisp:or auto-scaling-group-max-size
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-request-max-size
                         :initform common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or auto-scaling-group-min-size
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-request-min-size
                         :initform common-lisp:nil)
                        (recurrence :initarg :recurrence :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-request-recurrence
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-request-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-request-start-time
                         :initform common-lisp:nil)
                        (scheduled-action-name :initarg :scheduled-action-name
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %scheduled-update-group-action-request-scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required"))))
 (common-lisp:export
  (common-lisp:list 'scheduled-update-group-action-request
                    'make-scheduled-update-group-action-request))
 (common-lisp:defun make-scheduled-update-group-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-zone desired-capacity max-size
                     min-size recurrence end-time start-time
                     scheduled-action-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'scheduled-update-group-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-update-group-action-requests ()
   '(trivial-types:proper-list scheduled-update-group-action-request))
 (common-lisp:defun |make-scheduled-update-group-action-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-update-group-action-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype scheduled-update-group-actions ()
   '(trivial-types:proper-list scheduled-update-group-action))
 (common-lisp:defun |make-scheduled-update-group-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-update-group-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list xml-string))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-failure
     (autoscaling-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-linked-role-failure-message)))
 (common-lisp:export
  (common-lisp:list 'service-linked-role-failure
                    'service-linked-role-failure-message)))
(common-lisp:progn
 (common-lisp:defclass set-desired-capacity-type common-lisp:nil
                       ((honor-cooldown :initarg :honor-cooldown :type
                         (common-lisp:or honor-cooldown common-lisp:null)
                         :accessor %set-desired-capacity-type-honor-cooldown
                         :initform common-lisp:nil)
                        (desired-capacity :initarg :desired-capacity :type
                         (common-lisp:or auto-scaling-group-desired-capacity
                                         common-lisp:null)
                         :accessor %set-desired-capacity-type-desired-capacity
                         :initform
                         (common-lisp:error ":desired-capacity is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %set-desired-capacity-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'set-desired-capacity-type
                    'make-set-desired-capacity-type))
 (common-lisp:defun make-set-desired-capacity-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key honor-cooldown desired-capacity
                     auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'set-desired-capacity-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-desired-capacity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-desired-capacity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honor-cooldown))
      (common-lisp:list
       (common-lisp:cons "HonorCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-desired-capacity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-instance-health-query common-lisp:nil
                       ((should-respect-grace-period :initarg
                         :should-respect-grace-period :type
                         (common-lisp:or should-respect-grace-period
                                         common-lisp:null)
                         :accessor
                         %set-instance-health-query-should-respect-grace-period
                         :initform common-lisp:nil)
                        (health-status :initarg :health-status :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor %set-instance-health-query-health-status
                         :initform
                         (common-lisp:error ":health-status is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or xml-string-max-len19 common-lisp:null)
                         :accessor %set-instance-health-query-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'set-instance-health-query
                    'make-set-instance-health-query))
 (common-lisp:defun make-set-instance-health-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key should-respect-grace-period health-status
                     instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'set-instance-health-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-health-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-health-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'should-respect-grace-period))
      (common-lisp:list
       (common-lisp:cons "ShouldRespectGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-health-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-instance-protection-answer common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'set-instance-protection-answer
                    'make-set-instance-protection-answer))
 (common-lisp:defun make-set-instance-protection-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-instance-protection-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-instance-protection-query common-lisp:nil
                       ((protected-from-scale-in :initarg
                         :protected-from-scale-in :type
                         (common-lisp:or protected-from-scale-in
                                         common-lisp:null)
                         :accessor
                         %set-instance-protection-query-protected-from-scale-in
                         :initform
                         (common-lisp:error
                          ":protected-from-scale-in is required"))
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %set-instance-protection-query-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-ids common-lisp:null)
                         :accessor %set-instance-protection-query-instance-ids
                         :initform
                         (common-lisp:error ":instance-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'set-instance-protection-query
                    'make-set-instance-protection-query))
 (common-lisp:defun make-set-instance-protection-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protected-from-scale-in
                     auto-scaling-group-name instance-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-instance-protection-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "ProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-query))
   common-lisp:nil))
(common-lisp:deftype should-decrement-desired-capacity () 'common-lisp:boolean)
(common-lisp:deftype should-respect-grace-period () 'common-lisp:boolean)
(common-lisp:deftype skip-matching () 'common-lisp:boolean)
(common-lisp:deftype spot-instance-pools () 'common-lisp:integer)
(common-lisp:deftype spot-price () 'common-lisp:string)
(common-lisp:deftype standby-instances () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-instance-refresh-answer common-lisp:nil
                       ((instance-refresh-id :initarg :instance-refresh-id
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %start-instance-refresh-answer-instance-refresh-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-instance-refresh-answer
                    'make-start-instance-refresh-answer))
 (common-lisp:defun make-start-instance-refresh-answer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-refresh-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-instance-refresh-answer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refresh-id))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-instance-refresh-type common-lisp:nil
                       ((preferences :initarg :preferences :type
                         (common-lisp:or refresh-preferences common-lisp:null)
                         :accessor %start-instance-refresh-type-preferences
                         :initform common-lisp:nil)
                        (desired-configuration :initarg :desired-configuration
                         :type
                         (common-lisp:or desired-configuration
                                         common-lisp:null)
                         :accessor
                         %start-instance-refresh-type-desired-configuration
                         :initform common-lisp:nil)
                        (strategy :initarg :strategy :type
                         (common-lisp:or refresh-strategy common-lisp:null)
                         :accessor %start-instance-refresh-type-strategy
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %start-instance-refresh-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-instance-refresh-type
                    'make-start-instance-refresh-type))
 (common-lisp:defun make-start-instance-refresh-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preferences desired-configuration
                     strategy auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-instance-refresh-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "Strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-configuration))
      (common-lisp:list
       (common-lisp:cons "DesiredConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferences))
      (common-lisp:list
       (common-lisp:cons "Preferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass step-adjustment common-lisp:nil
                       ((scaling-adjustment :initarg :scaling-adjustment :type
                         (common-lisp:or policy-increment common-lisp:null)
                         :accessor %step-adjustment-scaling-adjustment
                         :initform
                         (common-lisp:error ":scaling-adjustment is required"))
                        (metric-interval-upper-bound :initarg
                         :metric-interval-upper-bound :type
                         (common-lisp:or metric-scale common-lisp:null)
                         :accessor %step-adjustment-metric-interval-upper-bound
                         :initform common-lisp:nil)
                        (metric-interval-lower-bound :initarg
                         :metric-interval-lower-bound :type
                         (common-lisp:or metric-scale common-lisp:null)
                         :accessor %step-adjustment-metric-interval-lower-bound
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'step-adjustment 'make-step-adjustment))
 (common-lisp:defun make-step-adjustment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scaling-adjustment
                     metric-interval-upper-bound metric-interval-lower-bound)
   (common-lisp:apply #'common-lisp:make-instance 'step-adjustment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-interval-lower-bound))
      (common-lisp:list
       (common-lisp:cons "MetricIntervalLowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-interval-upper-bound))
      (common-lisp:list
       (common-lisp:cons "MetricIntervalUpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-adjustments ()
   '(trivial-types:proper-list step-adjustment))
 (common-lisp:defun |make-step-adjustments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass suspended-process common-lisp:nil
                       ((suspension-reason :initarg :suspension-reason :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %suspended-process-suspension-reason
                         :initform common-lisp:nil)
                        (process-name :initarg :process-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %suspended-process-process-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'suspended-process 'make-suspended-process))
 (common-lisp:defun make-suspended-process
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suspension-reason process-name)
   (common-lisp:apply #'common-lisp:make-instance 'suspended-process
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suspended-process))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suspended-process))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-name))
      (common-lisp:list
       (common-lisp:cons "ProcessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspension-reason))
      (common-lisp:list
       (common-lisp:cons "SuspensionReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suspended-process))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype suspended-processes ()
   '(trivial-types:proper-list suspended-process))
 (common-lisp:defun |make-suspended-processes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suspended-process))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((propagate-at-launch :initarg :propagate-at-launch
                         :type
                         (common-lisp:or propagate-at-launch common-lisp:null)
                         :accessor %tag-propagate-at-launch :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %tag-resource-type :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %tag-resource-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key propagate-at-launch value key
                     resource-type resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-at-launch))
      (common-lisp:list
       (common-lisp:cons "PropagateAtLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-description common-lisp:nil
                       ((propagate-at-launch :initarg :propagate-at-launch
                         :type
                         (common-lisp:or propagate-at-launch common-lisp:null)
                         :accessor %tag-description-propagate-at-launch
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-description-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-description-key :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %tag-description-resource-type :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %tag-description-resource-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag-description 'make-tag-description))
 (common-lisp:defun make-tag-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key propagate-at-launch value key
                     resource-type resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'tag-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-at-launch))
      (common-lisp:list
       (common-lisp:cons "PropagateAtLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-description-list ()
   '(trivial-types:proper-list tag-description))
 (common-lisp:defun |make-tag-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tags-type common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or xml-string common-lisp:null) :accessor
                         %tags-type-next-token :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-description-list common-lisp:null)
                         :accessor %tags-type-tags :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tags-type 'make-tags-type))
 (common-lisp:defun make-tags-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance 'tags-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tags-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tags-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tags-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-group-arns ()
   '(trivial-types:proper-list xml-string-max-len511))
 (common-lisp:defun |make-target-group-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len511))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-tracking-configuration common-lisp:nil
                       ((disable-scale-in :initarg :disable-scale-in :type
                         (common-lisp:or disable-scale-in common-lisp:null)
                         :accessor
                         %target-tracking-configuration-disable-scale-in
                         :initform common-lisp:nil)
                        (target-value :initarg :target-value :type
                         (common-lisp:or metric-scale common-lisp:null)
                         :accessor %target-tracking-configuration-target-value
                         :initform
                         (common-lisp:error ":target-value is required"))
                        (customized-metric-specification :initarg
                         :customized-metric-specification :type
                         (common-lisp:or customized-metric-specification
                                         common-lisp:null)
                         :accessor
                         %target-tracking-configuration-customized-metric-specification
                         :initform common-lisp:nil)
                        (predefined-metric-specification :initarg
                         :predefined-metric-specification :type
                         (common-lisp:or predefined-metric-specification
                                         common-lisp:null)
                         :accessor
                         %target-tracking-configuration-predefined-metric-specification
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-tracking-configuration
                    'make-target-tracking-configuration))
 (common-lisp:defun make-target-tracking-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disable-scale-in target-value
                     customized-metric-specification
                     predefined-metric-specification)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-tracking-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-scale-in))
      (common-lisp:list
       (common-lisp:cons "DisableScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-tracking-metric-data-queries ()
   '(trivial-types:proper-list target-tracking-metric-data-query))
 (common-lisp:defun |make-target-tracking-metric-data-queries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-tracking-metric-data-query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-tracking-metric-data-query common-lisp:nil
                       ((return-data :initarg :return-data :type
                         (common-lisp:or return-data common-lisp:null)
                         :accessor
                         %target-tracking-metric-data-query-return-data
                         :initform common-lisp:nil)
                        (label :initarg :label :type
                         (common-lisp:or xml-string-metric-label
                                         common-lisp:null)
                         :accessor %target-tracking-metric-data-query-label
                         :initform common-lisp:nil)
                        (metric-stat :initarg :metric-stat :type
                         (common-lisp:or target-tracking-metric-stat
                                         common-lisp:null)
                         :accessor
                         %target-tracking-metric-data-query-metric-stat
                         :initform common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or xml-string-max-len2047
                                         common-lisp:null)
                         :accessor
                         %target-tracking-metric-data-query-expression
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %target-tracking-metric-data-query-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'target-tracking-metric-data-query
                    'make-target-tracking-metric-data-query))
 (common-lisp:defun make-target-tracking-metric-data-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key return-data label metric-stat expression
                     id)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-tracking-metric-data-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-stat))
      (common-lisp:list
       (common-lisp:cons "MetricStat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-data))
      (common-lisp:list
       (common-lisp:cons "ReturnData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass target-tracking-metric-stat common-lisp:nil
                       ((unit :initarg :unit :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor %target-tracking-metric-stat-unit :initform
                         common-lisp:nil)
                        (stat :initarg :stat :type
                         (common-lisp:or xml-string-metric-stat
                                         common-lisp:null)
                         :accessor %target-tracking-metric-stat-stat :initform
                         (common-lisp:error ":stat is required"))
                        (metric :initarg :metric :type
                         (common-lisp:or metric common-lisp:null) :accessor
                         %target-tracking-metric-stat-metric :initform
                         (common-lisp:error ":metric is required"))))
 (common-lisp:export
  (common-lisp:list 'target-tracking-metric-stat
                    'make-target-tracking-metric-stat))
 (common-lisp:defun make-target-tracking-metric-stat
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit stat metric)
   (common-lisp:apply #'common-lisp:make-instance 'target-tracking-metric-stat
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stat))
      (common-lisp:list
       (common-lisp:cons "Stat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-instance-in-auto-scaling-group-type
                       common-lisp:nil
                       ((should-decrement-desired-capacity :initarg
                         :should-decrement-desired-capacity :type
                         (common-lisp:or should-decrement-desired-capacity
                                         common-lisp:null)
                         :accessor
                         %terminate-instance-in-auto-scaling-group-type-should-decrement-desired-capacity
                         :initform
                         (common-lisp:error
                          ":should-decrement-desired-capacity is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or xml-string-max-len19 common-lisp:null)
                         :accessor
                         %terminate-instance-in-auto-scaling-group-type-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'terminate-instance-in-auto-scaling-group-type
                    'make-terminate-instance-in-auto-scaling-group-type))
 (common-lisp:defun make-terminate-instance-in-auto-scaling-group-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key should-decrement-desired-capacity
                     instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-instance-in-auto-scaling-group-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instance-in-auto-scaling-group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instance-in-auto-scaling-group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'should-decrement-desired-capacity))
      (common-lisp:list
       (common-lisp:cons "ShouldDecrementDesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instance-in-auto-scaling-group-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype termination-policies ()
   '(trivial-types:proper-list xml-string-max-len1600))
 (common-lisp:defun |make-termination-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len1600))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass total-local-storage-gbrequest common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-double
                                         common-lisp:null)
                         :accessor %total-local-storage-gbrequest-max :initform
                         common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-double
                                         common-lisp:null)
                         :accessor %total-local-storage-gbrequest-min :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'total-local-storage-gbrequest
                    'make-total-local-storage-gbrequest))
 (common-lisp:defun make-total-local-storage-gbrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance
                      'total-local-storage-gbrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          total-local-storage-gbrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          total-local-storage-gbrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          total-local-storage-gbrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass traffic-source-identifier common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or xml-string-max-len511
                                         common-lisp:null)
                         :accessor %traffic-source-identifier-type :initform
                         common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or xml-string-max-len511
                                         common-lisp:null)
                         :accessor %traffic-source-identifier-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'traffic-source-identifier
                    'make-traffic-source-identifier))
 (common-lisp:defun make-traffic-source-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type identifier)
   (common-lisp:apply #'common-lisp:make-instance 'traffic-source-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-source-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-source-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-source-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass traffic-source-state common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or xml-string-max-len511
                                         common-lisp:null)
                         :accessor %traffic-source-state-type :initform
                         common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or xml-string-max-len511
                                         common-lisp:null)
                         :accessor %traffic-source-state-identifier :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor %traffic-source-state-state :initform
                         common-lisp:nil)
                        (traffic-source :initarg :traffic-source :type
                         (common-lisp:or xml-string-max-len511
                                         common-lisp:null)
                         :accessor %traffic-source-state-traffic-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'traffic-source-state 'make-traffic-source-state))
 (common-lisp:defun make-traffic-source-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type identifier state traffic-source)
   (common-lisp:apply #'common-lisp:make-instance 'traffic-source-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input traffic-source-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input traffic-source-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-source))
      (common-lisp:list
       (common-lisp:cons "TrafficSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input traffic-source-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype traffic-source-states ()
   '(trivial-types:proper-list traffic-source-state))
 (common-lisp:defun |make-traffic-source-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list traffic-source-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype traffic-sources ()
   '(trivial-types:proper-list traffic-source-identifier))
 (common-lisp:defun |make-traffic-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            traffic-source-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-auto-scaling-group-type common-lisp:nil
                       ((default-instance-warmup :initarg
                         :default-instance-warmup :type
                         (common-lisp:or default-instance-warmup
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-default-instance-warmup
                         :initform common-lisp:nil)
                        (desired-capacity-type :initarg :desired-capacity-type
                         :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-desired-capacity-type
                         :initform common-lisp:nil)
                        (context :initarg :context :type
                         (common-lisp:or context common-lisp:null) :accessor
                         %update-auto-scaling-group-type-context :initform
                         common-lisp:nil)
                        (capacity-rebalance :initarg :capacity-rebalance :type
                         (common-lisp:or capacity-rebalance-enabled
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-capacity-rebalance
                         :initform common-lisp:nil)
                        (max-instance-lifetime :initarg :max-instance-lifetime
                         :type
                         (common-lisp:or max-instance-lifetime
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-max-instance-lifetime
                         :initform common-lisp:nil)
                        (service-linked-role-arn :initarg
                         :service-linked-role-arn :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-service-linked-role-arn
                         :initform common-lisp:nil)
                        (new-instances-protected-from-scale-in :initarg
                         :new-instances-protected-from-scale-in :type
                         (common-lisp:or instance-protected common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-new-instances-protected-from-scale-in
                         :initform common-lisp:nil)
                        (termination-policies :initarg :termination-policies
                         :type
                         (common-lisp:or termination-policies common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-termination-policies
                         :initform common-lisp:nil)
                        (vpczone-identifier :initarg :vpczone-identifier :type
                         (common-lisp:or xml-string-max-len2047
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-vpczone-identifier
                         :initform common-lisp:nil)
                        (placement-group :initarg :placement-group :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-placement-group
                         :initform common-lisp:nil)
                        (health-check-grace-period :initarg
                         :health-check-grace-period :type
                         (common-lisp:or health-check-grace-period
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-health-check-grace-period
                         :initform common-lisp:nil)
                        (health-check-type :initarg :health-check-type :type
                         (common-lisp:or xml-string-max-len32 common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-health-check-type
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-availability-zones
                         :initform common-lisp:nil)
                        (default-cooldown :initarg :default-cooldown :type
                         (common-lisp:or cooldown common-lisp:null) :accessor
                         %update-auto-scaling-group-type-default-cooldown
                         :initform common-lisp:nil)
                        (desired-capacity :initarg :desired-capacity :type
                         (common-lisp:or auto-scaling-group-desired-capacity
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-desired-capacity
                         :initform common-lisp:nil)
                        (max-size :initarg :max-size :type
                         (common-lisp:or auto-scaling-group-max-size
                                         common-lisp:null)
                         :accessor %update-auto-scaling-group-type-max-size
                         :initform common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or auto-scaling-group-min-size
                                         common-lisp:null)
                         :accessor %update-auto-scaling-group-type-min-size
                         :initform common-lisp:nil)
                        (mixed-instances-policy :initarg
                         :mixed-instances-policy :type
                         (common-lisp:or mixed-instances-policy
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-mixed-instances-policy
                         :initform common-lisp:nil)
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-launch-template
                         :initform common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-launch-configuration-name
                         :initform common-lisp:nil)
                        (auto-scaling-group-name :initarg
                         :auto-scaling-group-name :type
                         (common-lisp:or xml-string-max-len255
                                         common-lisp:null)
                         :accessor
                         %update-auto-scaling-group-type-auto-scaling-group-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-auto-scaling-group-type
                    'make-update-auto-scaling-group-type))
 (common-lisp:defun make-update-auto-scaling-group-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-instance-warmup
                     desired-capacity-type context capacity-rebalance
                     max-instance-lifetime service-linked-role-arn
                     new-instances-protected-from-scale-in termination-policies
                     vpczone-identifier placement-group
                     health-check-grace-period health-check-type
                     availability-zones default-cooldown desired-capacity
                     max-size min-size mixed-instances-policy launch-template
                     launch-configuration-name auto-scaling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-auto-scaling-group-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-auto-scaling-group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-auto-scaling-group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-cooldown))
      (common-lisp:list
       (common-lisp:cons "DefaultCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-type))
      (common-lisp:list
       (common-lisp:cons "HealthCheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-group))
      (common-lisp:list
       (common-lisp:cons "PlacementGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpczone-identifier))
      (common-lisp:list
       (common-lisp:cons "VPCZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-policies))
      (common-lisp:list
       (common-lisp:cons "TerminationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-instances-protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "NewInstancesProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-linked-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceLinkedRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-instance-lifetime))
      (common-lisp:list
       (common-lisp:cons "MaxInstanceLifetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-rebalance))
      (common-lisp:list
       (common-lisp:cons "CapacityRebalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-capacity-type))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-auto-scaling-group-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vcpu-count-request common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %vcpu-count-request-max :initform
                         common-lisp:nil)
                        (min :initarg :min :type
                         (common-lisp:or nullable-positive-integer
                                         common-lisp:null)
                         :accessor %vcpu-count-request-min :initform
                         (common-lisp:error ":min is required"))))
 (common-lisp:export
  (common-lisp:list 'vcpu-count-request 'make-vcpu-count-request))
 (common-lisp:defun make-vcpu-count-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min)
   (common-lisp:apply #'common-lisp:make-instance 'vcpu-count-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vcpu-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vcpu-count-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vcpu-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list xml-string))
 (common-lisp:defun |make-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass warm-pool-configuration common-lisp:nil
                       ((instance-reuse-policy :initarg :instance-reuse-policy
                         :type
                         (common-lisp:or instance-reuse-policy
                                         common-lisp:null)
                         :accessor
                         %warm-pool-configuration-instance-reuse-policy
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or warm-pool-status common-lisp:null)
                         :accessor %warm-pool-configuration-status :initform
                         common-lisp:nil)
                        (pool-state :initarg :pool-state :type
                         (common-lisp:or warm-pool-state common-lisp:null)
                         :accessor %warm-pool-configuration-pool-state
                         :initform common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or warm-pool-min-size common-lisp:null)
                         :accessor %warm-pool-configuration-min-size :initform
                         common-lisp:nil)
                        (max-group-prepared-capacity :initarg
                         :max-group-prepared-capacity :type
                         (common-lisp:or max-group-prepared-capacity
                                         common-lisp:null)
                         :accessor
                         %warm-pool-configuration-max-group-prepared-capacity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'warm-pool-configuration 'make-warm-pool-configuration))
 (common-lisp:defun make-warm-pool-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-reuse-policy status pool-state
                     min-size max-group-prepared-capacity)
   (common-lisp:apply #'common-lisp:make-instance 'warm-pool-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          warm-pool-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          warm-pool-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-group-prepared-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxGroupPreparedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-state))
      (common-lisp:list
       (common-lisp:cons "PoolState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-reuse-policy))
      (common-lisp:list
       (common-lisp:cons "InstanceReusePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          warm-pool-configuration))
   common-lisp:nil))
(common-lisp:deftype warm-pool-min-size () 'common-lisp:integer)
(common-lisp:deftype warm-pool-size () 'common-lisp:integer)
(common-lisp:deftype warm-pool-state () 'common-lisp:string)
(common-lisp:deftype warm-pool-status () 'common-lisp:string)
(common-lisp:deftype xml-string () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len1023 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len1600 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len19 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len2047 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len255 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len32 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len511 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len64 () 'common-lisp:string)
(common-lisp:deftype xml-string-metric-label () 'common-lisp:string)
(common-lisp:deftype xml-string-metric-stat () 'common-lisp:string)
(common-lisp:deftype xml-string-user-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun attach-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-instances-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AttachInstances"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-instances))
(common-lisp:progn
 (common-lisp:defun attach-load-balancer-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     target-group-arns)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name target-group-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-load-balancer-target-groups-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AttachLoadBalancerTargetGroups"
                                                        "2011-01-01"))
      common-lisp:nil "AttachLoadBalancerTargetGroupsResult" *error-map*)))
 (common-lisp:export 'attach-load-balancer-target-groups))
(common-lisp:progn
 (common-lisp:defun attach-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     load-balancer-names)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name load-balancer-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-load-balancers-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AttachLoadBalancers"
                                                        "2011-01-01"))
      common-lisp:nil "AttachLoadBalancersResult" *error-map*)))
 (common-lisp:export 'attach-load-balancers))
(common-lisp:progn
 (common-lisp:defun attach-traffic-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name traffic-sources)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name traffic-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-traffic-sources-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AttachTrafficSources"
                                                        "2011-01-01"))
      common-lisp:nil "AttachTrafficSourcesResult" *error-map*)))
 (common-lisp:export 'attach-traffic-sources))
(common-lisp:progn
 (common-lisp:defun batch-delete-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-action-names)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scheduled-action-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-scheduled-action-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "BatchDeleteScheduledAction"
                                                        "2011-01-01"))
      common-lisp:nil "BatchDeleteScheduledActionResult" *error-map*)))
 (common-lisp:export 'batch-delete-scheduled-action))
(common-lisp:progn
 (common-lisp:defun batch-put-scheduled-update-group-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-update-group-actions)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name
     scheduled-update-group-actions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-put-scheduled-update-group-action-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "BatchPutScheduledUpdateGroupAction"
                                                        "2011-01-01"))
      common-lisp:nil "BatchPutScheduledUpdateGroupActionResult" *error-map*)))
 (common-lisp:export 'batch-put-scheduled-update-group-action))
(common-lisp:progn
 (common-lisp:defun cancel-instance-refresh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name)
   (common-lisp:declare (common-lisp:ignorable auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-instance-refresh-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CancelInstanceRefresh"
                                                        "2011-01-01"))
      common-lisp:nil "CancelInstanceRefreshResult" *error-map*)))
 (common-lisp:export 'cancel-instance-refresh))
(common-lisp:progn
 (common-lisp:defun complete-lifecycle-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lifecycle-hook-name
                     auto-scaling-group-name lifecycle-action-token
                     lifecycle-action-result instance-id)
   (common-lisp:declare
    (common-lisp:ignorable lifecycle-hook-name auto-scaling-group-name
     lifecycle-action-token lifecycle-action-result instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-complete-lifecycle-action-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CompleteLifecycleAction"
                                                        "2011-01-01"))
      common-lisp:nil "CompleteLifecycleActionResult" *error-map*)))
 (common-lisp:export 'complete-lifecycle-action))
(common-lisp:progn
 (common-lisp:defun create-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     launch-configuration-name launch-template
                     mixed-instances-policy instance-id min-size max-size
                     desired-capacity default-cooldown availability-zones
                     load-balancer-names target-group-arns health-check-type
                     health-check-grace-period placement-group
                     vpczone-identifier termination-policies
                     new-instances-protected-from-scale-in capacity-rebalance
                     lifecycle-hook-specification-list tags
                     service-linked-role-arn max-instance-lifetime context
                     desired-capacity-type default-instance-warmup
                     traffic-sources)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name launch-configuration-name
     launch-template mixed-instances-policy instance-id min-size max-size
     desired-capacity default-cooldown availability-zones load-balancer-names
     target-group-arns health-check-type health-check-grace-period
     placement-group vpczone-identifier termination-policies
     new-instances-protected-from-scale-in capacity-rebalance
     lifecycle-hook-specification-list tags service-linked-role-arn
     max-instance-lifetime context desired-capacity-type
     default-instance-warmup traffic-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-auto-scaling-group-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateAutoScalingGroup"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-auto-scaling-group))
(common-lisp:progn
 (common-lisp:defun create-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-name image-id
                     key-name security-groups classic-link-vpcid
                     classic-link-vpcsecurity-groups user-data instance-id
                     instance-type kernel-id ramdisk-id block-device-mappings
                     instance-monitoring spot-price iam-instance-profile
                     ebs-optimized associate-public-ip-address
                     placement-tenancy metadata-options)
   (common-lisp:declare
    (common-lisp:ignorable launch-configuration-name image-id key-name
     security-groups classic-link-vpcid classic-link-vpcsecurity-groups
     user-data instance-id instance-type kernel-id ramdisk-id
     block-device-mappings instance-monitoring spot-price iam-instance-profile
     ebs-optimized associate-public-ip-address placement-tenancy
     metadata-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-launch-configuration-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLaunchConfiguration"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-launch-configuration))
(common-lisp:progn
 (common-lisp:defun create-or-update-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-or-update-tags-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateOrUpdateTags"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-or-update-tags))
(common-lisp:progn
 (common-lisp:defun delete-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name force-delete)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-auto-scaling-group-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteAutoScalingGroup"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-auto-scaling-group))
(common-lisp:progn
 (common-lisp:defun delete-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-name)
   (common-lisp:declare (common-lisp:ignorable launch-configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-launch-configuration-name-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLaunchConfiguration"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch-configuration))
(common-lisp:progn
 (common-lisp:defun delete-lifecycle-hook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lifecycle-hook-name
                     auto-scaling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable lifecycle-hook-name auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lifecycle-hook-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLifecycleHook"
                                                        "2011-01-01"))
      common-lisp:nil "DeleteLifecycleHookResult" *error-map*)))
 (common-lisp:export 'delete-lifecycle-hook))
(common-lisp:progn
 (common-lisp:defun delete-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name topic-arn)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name topic-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-notification-configuration-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteNotificationConfiguration"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-notification-configuration))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-name)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeletePolicy"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-action-name)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scheduled-action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scheduled-action-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteScheduledAction"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-scheduled-action))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteTags"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun delete-warm-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name force-delete)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-warm-pool-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteWarmPool"
                                                        "2011-01-01"))
      common-lisp:nil "DeleteWarmPoolResult" *error-map*)))
 (common-lisp:export 'delete-warm-pool))
(common-lisp:progn
 (common-lisp:defun describe-account-limits ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :protocol :query :operation
                                "DescribeAccountLimits" :params
                                `(("Action" ,@"DescribeAccountLimits")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeAccountLimitsResult" *error-map*))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-adjustment-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :protocol :query :operation
                                "DescribeAdjustmentTypes" :params
                                `(("Action" ,@"DescribeAdjustmentTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeAdjustmentTypesResult" *error-map*))
 (common-lisp:export 'describe-adjustment-types))
(common-lisp:progn
 (common-lisp:defun describe-auto-scaling-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-names next-token
                     max-records filters)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-names next-token max-records
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-auto-scaling-group-names-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeAutoScalingGroups"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeAutoScalingGroupsResult" *error-map*)))
 (common-lisp:export 'describe-auto-scaling-groups))
(common-lisp:progn
 (common-lisp:defun describe-auto-scaling-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids max-records next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-auto-scaling-instances-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeAutoScalingInstances"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeAutoScalingInstancesResult" *error-map*)))
 (common-lisp:export 'describe-auto-scaling-instances))
(common-lisp:progn
 (common-lisp:defun describe-auto-scaling-notification-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :protocol :query :operation
                                "DescribeAutoScalingNotificationTypes" :params
                                `(("Action"
                                   ,@"DescribeAutoScalingNotificationTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeAutoScalingNotificationTypesResult" *error-map*))
 (common-lisp:export 'describe-auto-scaling-notification-types))
(common-lisp:progn
 (common-lisp:defun describe-instance-refreshes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     instance-refresh-ids next-token max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name instance-refresh-ids
     next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-instance-refreshes-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeInstanceRefreshes"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeInstanceRefreshesResult" *error-map*)))
 (common-lisp:export 'describe-instance-refreshes))
(common-lisp:progn
 (common-lisp:defun describe-launch-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-names next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable launch-configuration-names next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-launch-configuration-names-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLaunchConfigurations"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeLaunchConfigurationsResult" *error-map*)))
 (common-lisp:export 'describe-launch-configurations))
(common-lisp:progn
 (common-lisp:defun describe-lifecycle-hook-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :protocol :query :operation
                                "DescribeLifecycleHookTypes" :params
                                `(("Action" ,@"DescribeLifecycleHookTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeLifecycleHookTypesResult" *error-map*))
 (common-lisp:export 'describe-lifecycle-hook-types))
(common-lisp:progn
 (common-lisp:defun describe-lifecycle-hooks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     lifecycle-hook-names)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name lifecycle-hook-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-lifecycle-hooks-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLifecycleHooks"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeLifecycleHooksResult" *error-map*)))
 (common-lisp:export 'describe-lifecycle-hooks))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-target-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancerTargetGroups"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeLoadBalancerTargetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-target-groups))
(common-lisp:progn
 (common-lisp:defun describe-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-load-balancers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancers"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeLoadBalancersResult" *error-map*)))
 (common-lisp:export 'describe-load-balancers))
(common-lisp:progn
 (common-lisp:defun describe-metric-collection-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :protocol :query :operation
                                "DescribeMetricCollectionTypes" :params
                                `(("Action" ,@"DescribeMetricCollectionTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeMetricCollectionTypesResult" *error-map*))
 (common-lisp:export 'describe-metric-collection-types))
(common-lisp:progn
 (common-lisp:defun describe-notification-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-names next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-names next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-notification-configurations-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeNotificationConfigurations"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeNotificationConfigurationsResult" *error-map*)))
 (common-lisp:export 'describe-notification-configurations))
(common-lisp:progn
 (common-lisp:defun describe-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-names
                     policy-types next-token max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-names policy-types
     next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-policies-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribePolicies"
                                                        "2011-01-01"))
      common-lisp:nil "DescribePoliciesResult" *error-map*)))
 (common-lisp:export 'describe-policies))
(common-lisp:progn
 (common-lisp:defun describe-scaling-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activity-ids auto-scaling-group-name
                     include-deleted-groups max-records next-token)
   (common-lisp:declare
    (common-lisp:ignorable activity-ids auto-scaling-group-name
     include-deleted-groups max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scaling-activities-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeScalingActivities"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeScalingActivitiesResult" *error-map*)))
 (common-lisp:export 'describe-scaling-activities))
(common-lisp:progn
 (common-lisp:defun describe-scaling-process-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :protocol :query :operation
                                "DescribeScalingProcessTypes" :params
                                `(("Action" ,@"DescribeScalingProcessTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeScalingProcessTypesResult" *error-map*))
 (common-lisp:export 'describe-scaling-process-types))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-action-names start-time end-time next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scheduled-action-names
     start-time end-time next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scheduled-actions-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeScheduledActions"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeScheduledActionsResult" *error-map*)))
 (common-lisp:export 'describe-scheduled-actions))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-records)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTags"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeTagsResult" *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-termination-policy-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :protocol :query :operation
                                "DescribeTerminationPolicyTypes" :params
                                `(("Action" ,@"DescribeTerminationPolicyTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeTerminationPolicyTypesResult" *error-map*))
 (common-lisp:export 'describe-termination-policy-types))
(common-lisp:progn
 (common-lisp:defun describe-traffic-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     traffic-source-type next-token max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name traffic-source-type
     next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-traffic-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTrafficSources"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeTrafficSourcesResult" *error-map*)))
 (common-lisp:export 'describe-traffic-sources))
(common-lisp:progn
 (common-lisp:defun describe-warm-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name max-records
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-warm-pool-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeWarmPool"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeWarmPoolResult" *error-map*)))
 (common-lisp:export 'describe-warm-pool))
(common-lisp:progn
 (common-lisp:defun detach-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name
                     should-decrement-desired-capacity)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name
     should-decrement-desired-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-instances-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetachInstances"
                                                        "2011-01-01"))
      common-lisp:nil "DetachInstancesResult" *error-map*)))
 (common-lisp:export 'detach-instances))
(common-lisp:progn
 (common-lisp:defun detach-load-balancer-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     target-group-arns)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name target-group-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-load-balancer-target-groups-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetachLoadBalancerTargetGroups"
                                                        "2011-01-01"))
      common-lisp:nil "DetachLoadBalancerTargetGroupsResult" *error-map*)))
 (common-lisp:export 'detach-load-balancer-target-groups))
(common-lisp:progn
 (common-lisp:defun detach-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     load-balancer-names)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name load-balancer-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-load-balancers-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetachLoadBalancers"
                                                        "2011-01-01"))
      common-lisp:nil "DetachLoadBalancersResult" *error-map*)))
 (common-lisp:export 'detach-load-balancers))
(common-lisp:progn
 (common-lisp:defun detach-traffic-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name traffic-sources)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name traffic-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-traffic-sources-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetachTrafficSources"
                                                        "2011-01-01"))
      common-lisp:nil "DetachTrafficSourcesResult" *error-map*)))
 (common-lisp:export 'detach-traffic-sources))
(common-lisp:progn
 (common-lisp:defun disable-metrics-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name metrics)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name metrics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-metrics-collection-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DisableMetricsCollection"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-metrics-collection))
(common-lisp:progn
 (common-lisp:defun enable-metrics-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name metrics
                     granularity)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name metrics granularity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-metrics-collection-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "EnableMetricsCollection"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-metrics-collection))
(common-lisp:progn
 (common-lisp:defun enter-standby
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name
                     should-decrement-desired-capacity)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name
     should-decrement-desired-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enter-standby-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "EnterStandby"
                                                        "2011-01-01"))
      common-lisp:nil "EnterStandbyResult" *error-map*)))
 (common-lisp:export 'enter-standby))
(common-lisp:progn
 (common-lisp:defun execute-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-name
                     honor-cooldown metric-value breach-threshold)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-name honor-cooldown
     metric-value breach-threshold))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-policy-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ExecutePolicy"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-policy))
(common-lisp:progn
 (common-lisp:defun exit-standby
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-exit-standby-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ExitStandby"
                                                        "2011-01-01"))
      common-lisp:nil "ExitStandbyResult" *error-map*)))
 (common-lisp:export 'exit-standby))
(common-lisp:progn
 (common-lisp:defun get-predictive-scaling-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-name
                     start-time end-time)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-name start-time
     end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-predictive-scaling-forecast-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "GetPredictiveScalingForecast"
                                                        "2011-01-01"))
      common-lisp:nil "GetPredictiveScalingForecastResult" *error-map*)))
 (common-lisp:export 'get-predictive-scaling-forecast))
(common-lisp:progn
 (common-lisp:defun put-lifecycle-hook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lifecycle-hook-name
                     auto-scaling-group-name lifecycle-transition role-arn
                     notification-target-arn notification-metadata
                     heartbeat-timeout default-result)
   (common-lisp:declare
    (common-lisp:ignorable lifecycle-hook-name auto-scaling-group-name
     lifecycle-transition role-arn notification-target-arn
     notification-metadata heartbeat-timeout default-result))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-lifecycle-hook-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "PutLifecycleHook"
                                                        "2011-01-01"))
      common-lisp:nil "PutLifecycleHookResult" *error-map*)))
 (common-lisp:export 'put-lifecycle-hook))
(common-lisp:progn
 (common-lisp:defun put-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name topic-arn
                     notification-types)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name topic-arn
     notification-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-notification-configuration-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "PutNotificationConfiguration"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-notification-configuration))
(common-lisp:progn
 (common-lisp:defun put-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-name
                     policy-type adjustment-type min-adjustment-step
                     min-adjustment-magnitude scaling-adjustment cooldown
                     metric-aggregation-type step-adjustments
                     estimated-instance-warmup target-tracking-configuration
                     enabled predictive-scaling-configuration)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-name policy-type
     adjustment-type min-adjustment-step min-adjustment-magnitude
     scaling-adjustment cooldown metric-aggregation-type step-adjustments
     estimated-instance-warmup target-tracking-configuration enabled
     predictive-scaling-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-scaling-policy-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "PutScalingPolicy"
                                                        "2011-01-01"))
      common-lisp:nil "PutScalingPolicyResult" *error-map*)))
 (common-lisp:export 'put-scaling-policy))
(common-lisp:progn
 (common-lisp:defun put-scheduled-update-group-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-action-name time start-time end-time recurrence
                     min-size max-size desired-capacity time-zone)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scheduled-action-name time
     start-time end-time recurrence min-size max-size desired-capacity
     time-zone))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-scheduled-update-group-action-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "PutScheduledUpdateGroupAction"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-scheduled-update-group-action))
(common-lisp:progn
 (common-lisp:defun put-warm-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     max-group-prepared-capacity min-size pool-state
                     instance-reuse-policy)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name max-group-prepared-capacity
     min-size pool-state instance-reuse-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-warm-pool-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "PutWarmPool"
                                                        "2011-01-01"))
      common-lisp:nil "PutWarmPoolResult" *error-map*)))
 (common-lisp:export 'put-warm-pool))
(common-lisp:progn
 (common-lisp:defun record-lifecycle-action-heartbeat
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lifecycle-hook-name
                     auto-scaling-group-name lifecycle-action-token
                     instance-id)
   (common-lisp:declare
    (common-lisp:ignorable lifecycle-hook-name auto-scaling-group-name
     lifecycle-action-token instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-record-lifecycle-action-heartbeat-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RecordLifecycleActionHeartbeat"
                                                        "2011-01-01"))
      common-lisp:nil "RecordLifecycleActionHeartbeatResult" *error-map*)))
 (common-lisp:export 'record-lifecycle-action-heartbeat))
(common-lisp:progn
 (common-lisp:defun resume-processes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scaling-processes)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scaling-processes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-scaling-process-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ResumeProcesses"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resume-processes))
(common-lisp:progn
 (common-lisp:defun rollback-instance-refresh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name)
   (common-lisp:declare (common-lisp:ignorable auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rollback-instance-refresh-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RollbackInstanceRefresh"
                                                        "2011-01-01"))
      common-lisp:nil "RollbackInstanceRefreshResult" *error-map*)))
 (common-lisp:export 'rollback-instance-refresh))
(common-lisp:progn
 (common-lisp:defun set-desired-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name desired-capacity
                     honor-cooldown)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name desired-capacity
     honor-cooldown))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-desired-capacity-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetDesiredCapacity"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-desired-capacity))
(common-lisp:progn
 (common-lisp:defun set-instance-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id health-status
                     should-respect-grace-period)
   (common-lisp:declare
    (common-lisp:ignorable instance-id health-status
     should-respect-grace-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-instance-health-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetInstanceHealth"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-instance-health))
(common-lisp:progn
 (common-lisp:defun set-instance-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name
                     protected-from-scale-in)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name
     protected-from-scale-in))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-instance-protection-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetInstanceProtection"
                                                        "2011-01-01"))
      common-lisp:nil "SetInstanceProtectionResult" *error-map*)))
 (common-lisp:export 'set-instance-protection))
(common-lisp:progn
 (common-lisp:defun start-instance-refresh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name strategy
                     desired-configuration preferences)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name strategy
     desired-configuration preferences))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-instance-refresh-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "StartInstanceRefresh"
                                                        "2011-01-01"))
      common-lisp:nil "StartInstanceRefreshResult" *error-map*)))
 (common-lisp:export 'start-instance-refresh))
(common-lisp:progn
 (common-lisp:defun suspend-processes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scaling-processes)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scaling-processes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-scaling-process-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SuspendProcesses"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'suspend-processes))
(common-lisp:progn
 (common-lisp:defun terminate-instance-in-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id
                     should-decrement-desired-capacity)
   (common-lisp:declare
    (common-lisp:ignorable instance-id should-decrement-desired-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-terminate-instance-in-auto-scaling-group-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "TerminateInstanceInAutoScalingGroup"
                                                        "2011-01-01"))
      common-lisp:nil "TerminateInstanceInAutoScalingGroupResult"
      *error-map*)))
 (common-lisp:export 'terminate-instance-in-auto-scaling-group))
(common-lisp:progn
 (common-lisp:defun update-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     launch-configuration-name launch-template
                     mixed-instances-policy min-size max-size desired-capacity
                     default-cooldown availability-zones health-check-type
                     health-check-grace-period placement-group
                     vpczone-identifier termination-policies
                     new-instances-protected-from-scale-in
                     service-linked-role-arn max-instance-lifetime
                     capacity-rebalance context desired-capacity-type
                     default-instance-warmup)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name launch-configuration-name
     launch-template mixed-instances-policy min-size max-size desired-capacity
     default-cooldown availability-zones health-check-type
     health-check-grace-period placement-group vpczone-identifier
     termination-policies new-instances-protected-from-scale-in
     service-linked-role-arn max-instance-lifetime capacity-rebalance context
     desired-capacity-type default-instance-warmup))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-auto-scaling-group-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "UpdateAutoScalingGroup"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-auto-scaling-group))
