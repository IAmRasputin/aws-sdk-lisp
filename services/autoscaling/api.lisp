;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/autoscaling/api
  (:use)
  (:nicknames #:aws/autoscaling)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/autoscaling/api)
(common-lisp:progn
 (common-lisp:defclass autoscaling-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "autoscaling"))
 (common-lisp:export 'autoscaling-request))
(common-lisp:progn
 (common-lisp:define-condition autoscaling-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'autoscaling-error))
(common-lisp:defvar *error-map*
  '(("ActiveInstanceRefreshNotFoundFault"
     . active-instance-refresh-not-found-fault)
    ("AlreadyExistsFault" . already-exists-fault)
    ("InstanceRefreshInProgressFault" . instance-refresh-in-progress-fault)
    ("InvalidNextToken" . invalid-next-token)
    ("IrreversibleInstanceRefreshFault" . irreversible-instance-refresh-fault)
    ("LimitExceededFault" . limit-exceeded-fault)
    ("ResourceContentionFault" . resource-contention-fault)
    ("ResourceInUseFault" . resource-in-use-fault)
    ("ScalingActivityInProgressFault" . scaling-activity-in-progress-fault)
    ("ServiceLinkedRoleFailure" . service-linked-role-failure)))
(common-lisp:progn
 (common-lisp:defstruct
     (accelerator-count-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accelerator-count-request-"))
   (min common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accelerator-count-request
                    'make-accelerator-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-count-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-count-request))
   common-lisp:nil))
(common-lisp:deftype accelerator-manufacturer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accelerator-manufacturers ()
   '(trivial-types:proper-list accelerator-manufacturer))
 (common-lisp:defun |make-accelerator-manufacturers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            accelerator-manufacturer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype accelerator-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accelerator-names ()
   '(trivial-types:proper-list accelerator-name))
 (common-lisp:defun |make-accelerator-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accelerator-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (accelerator-total-memory-mi-brequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-accelerator-total-memory-mi-brequest-"))
   (min common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accelerator-total-memory-mi-brequest
                    'make-accelerator-total-memory-mi-brequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-total-memory-mi-brequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-total-memory-mi-brequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-total-memory-mi-brequest))
   common-lisp:nil))
(common-lisp:deftype accelerator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accelerator-types ()
   '(trivial-types:proper-list accelerator-type))
 (common-lisp:defun |make-accelerator-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accelerator-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition active-instance-refresh-not-found-fault
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       active-instance-refresh-not-found-fault-message)))
 (common-lisp:export
  (common-lisp:list 'active-instance-refresh-not-found-fault
                    'active-instance-refresh-not-found-fault-message)))
(common-lisp:progn
 (common-lisp:deftype activities () '(trivial-types:proper-list activity))
 (common-lisp:defun |make-activities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (activities-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-activities-type-"))
   (activities (common-lisp:error ":activities is required") :type
    (common-lisp:or activities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'activities-type 'make-activities-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activities-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activities-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activities-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity (:copier common-lisp:nil) (:conc-name "struct-shape-activity-"))
   (activity-id (common-lisp:error ":activity-id is required") :type
    (common-lisp:or xml-string common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (cause (common-lisp:error ":cause is required") :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (status-code (common-lisp:error ":status-code is required") :type
    (common-lisp:or scaling-activity-status-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (progress common-lisp:nil :type (common-lisp:or progress common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or xml-string common-lisp:null))
   (auto-scaling-group-state common-lisp:nil :type
    (common-lisp:or auto-scaling-group-state common-lisp:null))
   (auto-scaling-group-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'activity 'make-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-id))
      (common-lisp:list
       (common-lisp:cons "ActivityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "Cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-state))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype activity-ids () '(trivial-types:proper-list xml-string))
 (common-lisp:defun |make-activity-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-type-"))
   (activity common-lisp:nil :type (common-lisp:or activity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'activity-type 'make-activity-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity))
      (common-lisp:list
       (common-lisp:cons "Activity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (adjustment-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-adjustment-type-"))
   (adjustment-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'adjustment-type 'make-adjustment-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input adjustment-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input adjustment-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-type))
      (common-lisp:list
       (common-lisp:cons "AdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input adjustment-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype adjustment-types ()
   '(trivial-types:proper-list adjustment-type))
 (common-lisp:defun |make-adjustment-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list adjustment-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (alarm (:copier common-lisp:nil) (:conc-name "struct-shape-alarm-"))
   (alarm-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (alarm-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "AlarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-arn))
      (common-lisp:list
       (common-lisp:cons "AlarmARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarms () '(trivial-types:proper-list alarm))
 (common-lisp:defun |make-alarms|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-instance-types ()
   '(trivial-types:proper-list allowed-instance-type))
 (common-lisp:defun |make-allowed-instance-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition already-exists-fault
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-fault-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-fault 'already-exists-fault-message)))
(common-lisp:deftype ascii-string-max-len255 () 'common-lisp:string)
(common-lisp:deftype associate-public-ip-address () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (attach-instances-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-instances-query-"))
   (instance-ids common-lisp:nil :type
    (common-lisp:or instance-ids common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-instances-query 'make-attach-instances-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-load-balancer-target-groups-result-type (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-attach-load-balancer-target-groups-result-type-")))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-target-groups-result-type
                    'make-attach-load-balancer-target-groups-result-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-load-balancer-target-groups-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-load-balancer-target-groups-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (target-group-arns (common-lisp:error ":target-group-arns is required")
    :type (common-lisp:or target-group-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-target-groups-type
                    'make-attach-load-balancer-target-groups-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-target-groups-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-load-balancers-result-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-load-balancers-result-type-")))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancers-result-type
                    'make-attach-load-balancers-result-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-load-balancers-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-load-balancers-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (load-balancer-names (common-lisp:error ":load-balancer-names is required")
    :type (common-lisp:or load-balancer-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancers-type
                    'make-attach-load-balancers-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancers-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-traffic-sources-result-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-traffic-sources-result-type-")))
 (common-lisp:export
  (common-lisp:list 'attach-traffic-sources-result-type
                    'make-attach-traffic-sources-result-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-traffic-sources-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-traffic-sources-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (traffic-sources (common-lisp:error ":traffic-sources is required") :type
    (common-lisp:or traffic-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-traffic-sources-type
                    'make-attach-traffic-sources-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-traffic-sources-type))
   common-lisp:nil))
(common-lisp:deftype auto-rollback () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-group-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (auto-scaling-group-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (launch-configuration-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (mixed-instances-policy common-lisp:nil :type
    (common-lisp:or mixed-instances-policy common-lisp:null))
   (min-size (common-lisp:error ":min-size is required") :type
    (common-lisp:or auto-scaling-group-min-size common-lisp:null))
   (max-size (common-lisp:error ":max-size is required") :type
    (common-lisp:or auto-scaling-group-max-size common-lisp:null))
   (desired-capacity (common-lisp:error ":desired-capacity is required") :type
    (common-lisp:or auto-scaling-group-desired-capacity common-lisp:null))
   (predicted-capacity common-lisp:nil :type
    (common-lisp:or auto-scaling-group-predicted-capacity common-lisp:null))
   (default-cooldown (common-lisp:error ":default-cooldown is required") :type
    (common-lisp:or cooldown common-lisp:null))
   (availability-zones (common-lisp:error ":availability-zones is required")
    :type (common-lisp:or availability-zones common-lisp:null))
   (load-balancer-names common-lisp:nil :type
    (common-lisp:or load-balancer-names common-lisp:null))
   (target-group-arns common-lisp:nil :type
    (common-lisp:or target-group-arns common-lisp:null))
   (health-check-type (common-lisp:error ":health-check-type is required")
    :type (common-lisp:or xml-string-max-len32 common-lisp:null))
   (health-check-grace-period common-lisp:nil :type
    (common-lisp:or health-check-grace-period common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or instances common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp-type common-lisp:null))
   (suspended-processes common-lisp:nil :type
    (common-lisp:or suspended-processes common-lisp:null))
   (placement-group common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (vpczone-identifier common-lisp:nil :type
    (common-lisp:or xml-string-max-len2047 common-lisp:null))
   (enabled-metrics common-lisp:nil :type
    (common-lisp:or enabled-metrics common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or tag-description-list common-lisp:null))
   (termination-policies common-lisp:nil :type
    (common-lisp:or termination-policies common-lisp:null))
   (new-instances-protected-from-scale-in common-lisp:nil :type
    (common-lisp:or instance-protected common-lisp:null))
   (service-linked-role-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (max-instance-lifetime common-lisp:nil :type
    (common-lisp:or max-instance-lifetime common-lisp:null))
   (capacity-rebalance common-lisp:nil :type
    (common-lisp:or capacity-rebalance-enabled common-lisp:null))
   (warm-pool-configuration common-lisp:nil :type
    (common-lisp:or warm-pool-configuration common-lisp:null))
   (warm-pool-size common-lisp:nil :type
    (common-lisp:or warm-pool-size common-lisp:null))
   (context common-lisp:nil :type (common-lisp:or context common-lisp:null))
   (desired-capacity-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (default-instance-warmup common-lisp:nil :type
    (common-lisp:or default-instance-warmup common-lisp:null))
   (traffic-sources common-lisp:nil :type
    (common-lisp:or traffic-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicted-capacity))
      (common-lisp:list
       (common-lisp:cons "PredictedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-cooldown))
      (common-lisp:list
       (common-lisp:cons "DefaultCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-type))
      (common-lisp:list
       (common-lisp:cons "HealthCheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-processes))
      (common-lisp:list
       (common-lisp:cons "SuspendedProcesses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-group))
      (common-lisp:list
       (common-lisp:cons "PlacementGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpczone-identifier))
      (common-lisp:list
       (common-lisp:cons "VPCZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-metrics))
      (common-lisp:list
       (common-lisp:cons "EnabledMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-policies))
      (common-lisp:list
       (common-lisp:cons "TerminationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-instances-protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "NewInstancesProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-linked-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceLinkedRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-instance-lifetime))
      (common-lisp:list
       (common-lisp:cons "MaxInstanceLifetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-rebalance))
      (common-lisp:list
       (common-lisp:cons "CapacityRebalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'warm-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "WarmPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-pool-size))
      (common-lisp:list
       (common-lisp:cons "WarmPoolSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-capacity-type))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-group-desired-capacity ()
  'common-lisp:integer)
(common-lisp:deftype auto-scaling-group-max-size () 'common-lisp:integer)
(common-lisp:deftype auto-scaling-group-min-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-auto-scaling-group-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-group-names-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-group-names-type-"))
   (auto-scaling-group-names common-lisp:nil :type
    (common-lisp:or auto-scaling-group-names common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group-names-type
                    'make-auto-scaling-group-names-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-names-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-names-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-names))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-names-type))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-group-predicted-capacity ()
  'common-lisp:integer)
(common-lisp:deftype auto-scaling-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-groups ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun |make-auto-scaling-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-groups-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-groups-type-"))
   (auto-scaling-groups (common-lisp:error ":auto-scaling-groups is required")
    :type (common-lisp:or auto-scaling-groups common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-groups-type 'make-auto-scaling-groups-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-groups-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-groups-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-groups-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-instance-details-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or xml-string-max-len19 common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (availability-zone (common-lisp:error ":availability-zone is required")
    :type (common-lisp:or xml-string-max-len255 common-lisp:null))
   (lifecycle-state (common-lisp:error ":lifecycle-state is required") :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (health-status (common-lisp:error ":health-status is required") :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (launch-configuration-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (protected-from-scale-in
    (common-lisp:error ":protected-from-scale-in is required") :type
    (common-lisp:or instance-protected common-lisp:null))
   (weighted-capacity common-lisp:nil :type
    (common-lisp:or xml-string-max-len32 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-instance-details
                    'make-auto-scaling-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "LifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "ProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-instances ()
   '(trivial-types:proper-list auto-scaling-instance-details))
 (common-lisp:defun |make-auto-scaling-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-scaling-instance-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-instances-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-instances-type-"))
   (auto-scaling-instances common-lisp:nil :type
    (common-lisp:or auto-scaling-instances common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-instances-type
                    'make-auto-scaling-instances-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instances-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instances-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-instances))
      (common-lisp:list
       (common-lisp:cons "AutoScalingInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-instances-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-notification-types ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-auto-scaling-notification-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bare-metal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (baseline-ebs-bandwidth-mbps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-baseline-ebs-bandwidth-mbps-request-"))
   (min common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'baseline-ebs-bandwidth-mbps-request
                    'make-baseline-ebs-bandwidth-mbps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          baseline-ebs-bandwidth-mbps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          baseline-ebs-bandwidth-mbps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          baseline-ebs-bandwidth-mbps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-scheduled-action-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-scheduled-action-answer-"))
   (failed-scheduled-actions common-lisp:nil :type
    (common-lisp:or failed-scheduled-update-group-action-requests
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-scheduled-action-answer
                    'make-batch-delete-scheduled-action-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-scheduled-actions))
      (common-lisp:list
       (common-lisp:cons "FailedScheduledActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-scheduled-action-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-scheduled-action-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (scheduled-action-names
    (common-lisp:error ":scheduled-action-names is required") :type
    (common-lisp:or scheduled-action-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-scheduled-action-type
                    'make-batch-delete-scheduled-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-names))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-scheduled-action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-scheduled-update-group-action-answer (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-put-scheduled-update-group-action-answer-"))
   (failed-scheduled-update-group-actions common-lisp:nil :type
    (common-lisp:or failed-scheduled-update-group-action-requests
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-scheduled-update-group-action-answer
                    'make-batch-put-scheduled-update-group-action-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-scheduled-update-group-actions))
      (common-lisp:list
       (common-lisp:cons "FailedScheduledUpdateGroupActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-scheduled-update-group-action-type (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-put-scheduled-update-group-action-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (scheduled-update-group-actions
    (common-lisp:error ":scheduled-update-group-actions is required") :type
    (common-lisp:or scheduled-update-group-action-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-scheduled-update-group-action-type
                    'make-batch-put-scheduled-update-group-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-update-group-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduledUpdateGroupActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-scheduled-update-group-action-type))
   common-lisp:nil))
(common-lisp:deftype block-device-ebs-delete-on-termination ()
  'common-lisp:boolean)
(common-lisp:deftype block-device-ebs-encrypted () 'common-lisp:boolean)
(common-lisp:deftype block-device-ebs-iops () 'common-lisp:integer)
(common-lisp:deftype block-device-ebs-throughput () 'common-lisp:integer)
(common-lisp:deftype block-device-ebs-volume-size () 'common-lisp:integer)
(common-lisp:deftype block-device-ebs-volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (block-device-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-block-device-mapping-"))
   (virtual-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (device-name (common-lisp:error ":device-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (ebs common-lisp:nil :type (common-lisp:or ebs common-lisp:null))
   (no-device common-lisp:nil :type
    (common-lisp:or no-device common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'block-device-mapping 'make-block-device-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype block-device-mappings ()
   '(trivial-types:proper-list block-device-mapping))
 (common-lisp:defun |make-block-device-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype burstable-performance () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-instance-refresh-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-instance-refresh-answer-"))
   (instance-refresh-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-instance-refresh-answer
                    'make-cancel-instance-refresh-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refresh-id))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-instance-refresh-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-instance-refresh-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-instance-refresh-type
                    'make-cancel-instance-refresh-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-instance-refresh-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (capacity-forecast (:copier common-lisp:nil)
      (:conc-name "struct-shape-capacity-forecast-"))
   (timestamps (common-lisp:error ":timestamps is required") :type
    (common-lisp:or predictive-scaling-forecast-timestamps common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or predictive-scaling-forecast-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'capacity-forecast 'make-capacity-forecast))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-forecast))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-forecast))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamps))
      (common-lisp:list
       (common-lisp:cons "Timestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-forecast))
   common-lisp:nil))
(common-lisp:deftype capacity-rebalance-enabled () 'common-lisp:boolean)
(common-lisp:deftype checkpoint-delay () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype checkpoint-percentages ()
   '(trivial-types:proper-list non-zero-int-percent))
 (common-lisp:defun |make-checkpoint-percentages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-zero-int-percent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype classic-link-vpcsecurity-groups ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-classic-link-vpcsecurity-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (complete-lifecycle-action-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-complete-lifecycle-action-answer-")))
 (common-lisp:export
  (common-lisp:list 'complete-lifecycle-action-answer
                    'make-complete-lifecycle-action-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (complete-lifecycle-action-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-complete-lifecycle-action-type-"))
   (lifecycle-hook-name (common-lisp:error ":lifecycle-hook-name is required")
    :type (common-lisp:or ascii-string-max-len255 common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (lifecycle-action-token common-lisp:nil :type
    (common-lisp:or lifecycle-action-token common-lisp:null))
   (lifecycle-action-result
    (common-lisp:error ":lifecycle-action-result is required") :type
    (common-lisp:or lifecycle-action-result common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len19 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'complete-lifecycle-action-type
                    'make-complete-lifecycle-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-action-token))
      (common-lisp:list
       (common-lisp:cons "LifecycleActionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-action-result))
      (common-lisp:list
       (common-lisp:cons "LifecycleActionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-lifecycle-action-type))
   common-lisp:nil))
(common-lisp:deftype context () 'common-lisp:string)
(common-lisp:deftype cooldown () 'common-lisp:integer)
(common-lisp:deftype cpu-manufacturer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cpu-manufacturers ()
   '(trivial-types:proper-list cpu-manufacturer))
 (common-lisp:defun |make-cpu-manufacturers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cpu-manufacturer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-auto-scaling-group-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-auto-scaling-group-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-configuration-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (mixed-instances-policy common-lisp:nil :type
    (common-lisp:or mixed-instances-policy common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len19 common-lisp:null))
   (min-size (common-lisp:error ":min-size is required") :type
    (common-lisp:or auto-scaling-group-min-size common-lisp:null))
   (max-size (common-lisp:error ":max-size is required") :type
    (common-lisp:or auto-scaling-group-max-size common-lisp:null))
   (desired-capacity common-lisp:nil :type
    (common-lisp:or auto-scaling-group-desired-capacity common-lisp:null))
   (default-cooldown common-lisp:nil :type
    (common-lisp:or cooldown common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (load-balancer-names common-lisp:nil :type
    (common-lisp:or load-balancer-names common-lisp:null))
   (target-group-arns common-lisp:nil :type
    (common-lisp:or target-group-arns common-lisp:null))
   (health-check-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (health-check-grace-period common-lisp:nil :type
    (common-lisp:or health-check-grace-period common-lisp:null))
   (placement-group common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (vpczone-identifier common-lisp:nil :type
    (common-lisp:or xml-string-max-len2047 common-lisp:null))
   (termination-policies common-lisp:nil :type
    (common-lisp:or termination-policies common-lisp:null))
   (new-instances-protected-from-scale-in common-lisp:nil :type
    (common-lisp:or instance-protected common-lisp:null))
   (capacity-rebalance common-lisp:nil :type
    (common-lisp:or capacity-rebalance-enabled common-lisp:null))
   (lifecycle-hook-specification-list common-lisp:nil :type
    (common-lisp:or lifecycle-hook-specifications common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (service-linked-role-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (max-instance-lifetime common-lisp:nil :type
    (common-lisp:or max-instance-lifetime common-lisp:null))
   (context common-lisp:nil :type (common-lisp:or context common-lisp:null))
   (desired-capacity-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (default-instance-warmup common-lisp:nil :type
    (common-lisp:or default-instance-warmup common-lisp:null))
   (traffic-sources common-lisp:nil :type
    (common-lisp:or traffic-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-auto-scaling-group-type
                    'make-create-auto-scaling-group-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-cooldown))
      (common-lisp:list
       (common-lisp:cons "DefaultCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-type))
      (common-lisp:list
       (common-lisp:cons "HealthCheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-group))
      (common-lisp:list
       (common-lisp:cons "PlacementGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpczone-identifier))
      (common-lisp:list
       (common-lisp:cons "VPCZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-policies))
      (common-lisp:list
       (common-lisp:cons "TerminationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-instances-protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "NewInstancesProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-rebalance))
      (common-lisp:list
       (common-lisp:cons "CapacityRebalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-hook-specification-list))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookSpecificationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-linked-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceLinkedRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-instance-lifetime))
      (common-lisp:list
       (common-lisp:cons "MaxInstanceLifetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-capacity-type))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-group-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-launch-configuration-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-launch-configuration-type-"))
   (launch-configuration-name
    (common-lisp:error ":launch-configuration-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (image-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (key-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-groups common-lisp:null))
   (classic-link-vpcid common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (classic-link-vpcsecurity-groups common-lisp:nil :type
    (common-lisp:or classic-link-vpcsecurity-groups common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or xml-string-user-data common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len19 common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (kernel-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (ramdisk-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mappings common-lisp:null))
   (instance-monitoring common-lisp:nil :type
    (common-lisp:or instance-monitoring common-lisp:null))
   (spot-price common-lisp:nil :type
    (common-lisp:or spot-price common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or xml-string-max-len1600 common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or ebs-optimized common-lisp:null))
   (associate-public-ip-address common-lisp:nil :type
    (common-lisp:or associate-public-ip-address common-lisp:null))
   (placement-tenancy common-lisp:nil :type
    (common-lisp:or xml-string-max-len64 common-lisp:null))
   (metadata-options common-lisp:nil :type
    (common-lisp:or instance-metadata-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-launch-configuration-type
                    'make-create-launch-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classic-link-vpcid))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classic-link-vpcsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVPCSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-monitoring))
      (common-lisp:list
       (common-lisp:cons "InstanceMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-tenancy))
      (common-lisp:list
       (common-lisp:cons "PlacementTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-or-update-tags-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-or-update-tags-type-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-or-update-tags-type
                    'make-create-or-update-tags-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-or-update-tags-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-or-update-tags-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-or-update-tags-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customized-metric-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-customized-metric-specification-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or metric-namespace common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or metric-dimensions common-lisp:null))
   (statistic common-lisp:nil :type
    (common-lisp:or metric-statistic common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or metric-unit common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or target-tracking-metric-data-queries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customized-metric-specification
                    'make-customized-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customized-metric-specification))
   common-lisp:nil))
(common-lisp:deftype default-instance-warmup () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-auto-scaling-group-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-auto-scaling-group-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (force-delete common-lisp:nil :type
    (common-lisp:or force-delete common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-auto-scaling-group-type
                    'make-delete-auto-scaling-group-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "ForceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-group-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lifecycle-hook-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lifecycle-hook-answer-")))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-hook-answer
                    'make-delete-lifecycle-hook-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lifecycle-hook-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lifecycle-hook-type-"))
   (lifecycle-hook-name (common-lisp:error ":lifecycle-hook-name is required")
    :type (common-lisp:or ascii-string-max-len255 common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-hook-type
                    'make-delete-lifecycle-hook-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-hook-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-notification-configuration-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-notification-configuration-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (topic-arn (common-lisp:error ":topic-arn is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-notification-configuration-type
                    'make-delete-notification-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-type-"))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-type 'make-delete-policy-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-policy-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-policy-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-policy-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-scheduled-action-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-scheduled-action-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (scheduled-action-name
    (common-lisp:error ":scheduled-action-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-action-type
                    'make-delete-scheduled-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-type-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-type 'make-delete-tags-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-warm-pool-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-warm-pool-answer-")))
 (common-lisp:export
  (common-lisp:list 'delete-warm-pool-answer 'make-delete-warm-pool-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-warm-pool-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-warm-pool-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (force-delete common-lisp:nil :type
    (common-lisp:or force-delete common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-warm-pool-type 'make-delete-warm-pool-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "ForceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-warm-pool-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-limits-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-limits-answer-"))
   (max-number-of-auto-scaling-groups common-lisp:nil :type
    (common-lisp:or max-number-of-auto-scaling-groups common-lisp:null))
   (max-number-of-launch-configurations common-lisp:nil :type
    (common-lisp:or max-number-of-launch-configurations common-lisp:null))
   (number-of-auto-scaling-groups common-lisp:nil :type
    (common-lisp:or number-of-auto-scaling-groups common-lisp:null))
   (number-of-launch-configurations common-lisp:nil :type
    (common-lisp:or number-of-launch-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-answer
                    'make-describe-account-limits-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-number-of-auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "MaxNumberOfAutoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-number-of-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "MaxNumberOfLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "NumberOfAutoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "NumberOfLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-adjustment-types-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-adjustment-types-answer-"))
   (adjustment-types common-lisp:nil :type
    (common-lisp:or adjustment-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-adjustment-types-answer
                    'make-describe-adjustment-types-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-adjustment-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-adjustment-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-types))
      (common-lisp:list
       (common-lisp:cons "AdjustmentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-adjustment-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-auto-scaling-instances-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-auto-scaling-instances-type-"))
   (instance-ids common-lisp:nil :type
    (common-lisp:or instance-ids common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-scaling-instances-type
                    'make-describe-auto-scaling-instances-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-instances-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-instances-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-instances-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-auto-scaling-notification-types-answer (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-auto-scaling-notification-types-answer-"))
   (auto-scaling-notification-types common-lisp:nil :type
    (common-lisp:or auto-scaling-notification-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-scaling-notification-types-answer
                    'make-describe-auto-scaling-notification-types-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-notification-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-notification-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-notification-types))
      (common-lisp:list
       (common-lisp:cons "AutoScalingNotificationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-notification-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-refreshes-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-refreshes-answer-"))
   (instance-refreshes common-lisp:nil :type
    (common-lisp:or instance-refreshes common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-refreshes-answer
                    'make-describe-instance-refreshes-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refreshes))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-refreshes-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-refreshes-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (instance-refresh-ids common-lisp:nil :type
    (common-lisp:or instance-refresh-ids common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-refreshes-type
                    'make-describe-instance-refreshes-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-refresh-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-refreshes-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-lifecycle-hook-types-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-lifecycle-hook-types-answer-"))
   (lifecycle-hook-types common-lisp:nil :type
    (common-lisp:or auto-scaling-notification-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-lifecycle-hook-types-answer
                    'make-describe-lifecycle-hook-types-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hook-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hook-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-hook-types))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hook-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-lifecycle-hooks-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-lifecycle-hooks-answer-"))
   (lifecycle-hooks common-lisp:nil :type
    (common-lisp:or lifecycle-hooks common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-lifecycle-hooks-answer
                    'make-describe-lifecycle-hooks-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hooks))
      (common-lisp:list
       (common-lisp:cons "LifecycleHooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-lifecycle-hooks-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-lifecycle-hooks-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (lifecycle-hook-names common-lisp:nil :type
    (common-lisp:or lifecycle-hook-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-lifecycle-hooks-type
                    'make-describe-lifecycle-hooks-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-hook-names))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lifecycle-hooks-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancer-target-groups-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-load-balancer-target-groups-request-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-target-groups-request
                    'make-describe-load-balancer-target-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancer-target-groups-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-load-balancer-target-groups-response-"))
   (load-balancer-target-groups common-lisp:nil :type
    (common-lisp:or load-balancer-target-group-states common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-target-groups-response
                    'make-describe-load-balancer-target-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-target-groups))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerTargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-target-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-load-balancers-request-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancers-request
                    'make-describe-load-balancers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-load-balancers-response-"))
   (load-balancers common-lisp:nil :type
    (common-lisp:or load-balancer-states common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancers-response
                    'make-describe-load-balancers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-metric-collection-types-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-metric-collection-types-answer-"))
   (metrics common-lisp:nil :type
    (common-lisp:or metric-collection-types common-lisp:null))
   (granularities common-lisp:nil :type
    (common-lisp:or metric-granularity-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-metric-collection-types-answer
                    'make-describe-metric-collection-types-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-collection-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-collection-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularities))
      (common-lisp:list
       (common-lisp:cons "Granularities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-collection-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notification-configurations-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-notification-configurations-answer-"))
   (notification-configurations
    (common-lisp:error ":notification-configurations is required") :type
    (common-lisp:or notification-configurations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notification-configurations-answer
                    'make-describe-notification-configurations-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configurations))
      (common-lisp:list
       (common-lisp:cons "NotificationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notification-configurations-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-notification-configurations-type-"))
   (auto-scaling-group-names common-lisp:nil :type
    (common-lisp:or auto-scaling-group-names common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notification-configurations-type
                    'make-describe-notification-configurations-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-names))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-configurations-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-policies-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-policies-type-"))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (policy-names common-lisp:nil :type
    (common-lisp:or policy-names common-lisp:null))
   (policy-types common-lisp:nil :type
    (common-lisp:or policy-types common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-policies-type 'make-describe-policies-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-policies-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-policies-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-types))
      (common-lisp:list
       (common-lisp:cons "PolicyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-policies-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scaling-activities-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scaling-activities-type-"))
   (activity-ids common-lisp:nil :type
    (common-lisp:or activity-ids common-lisp:null))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (include-deleted-groups common-lisp:nil :type
    (common-lisp:or include-deleted-groups common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-activities-type
                    'make-describe-scaling-activities-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-ids))
      (common-lisp:list
       (common-lisp:cons "ActivityIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-deleted-groups))
      (common-lisp:list
       (common-lisp:cons "IncludeDeletedGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-activities-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scheduled-actions-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scheduled-actions-type-"))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (scheduled-action-names common-lisp:nil :type
    (common-lisp:or scheduled-action-names common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-actions-type
                    'make-describe-scheduled-actions-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-names))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-type-"))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-type 'make-describe-tags-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-termination-policy-types-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-termination-policy-types-answer-"))
   (termination-policy-types common-lisp:nil :type
    (common-lisp:or termination-policies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-termination-policy-types-answer
                    'make-describe-termination-policy-types-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-termination-policy-types-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-termination-policy-types-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-policy-types))
      (common-lisp:list
       (common-lisp:cons "TerminationPolicyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-termination-policy-types-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-traffic-sources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-traffic-sources-request-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (traffic-source-type (common-lisp:error ":traffic-source-type is required")
    :type (common-lisp:or xml-string-max-len255 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-traffic-sources-request
                    'make-describe-traffic-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-source-type))
      (common-lisp:list
       (common-lisp:cons "TrafficSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-traffic-sources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-traffic-sources-response-"))
   (traffic-sources common-lisp:nil :type
    (common-lisp:or traffic-source-states common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-traffic-sources-response
                    'make-describe-traffic-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-warm-pool-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-warm-pool-answer-"))
   (warm-pool-configuration common-lisp:nil :type
    (common-lisp:or warm-pool-configuration common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or instances common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-warm-pool-answer
                    'make-describe-warm-pool-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'warm-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "WarmPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-warm-pool-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-warm-pool-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-warm-pool-type 'make-describe-warm-pool-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-warm-pool-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (desired-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-desired-configuration-"))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (mixed-instances-policy common-lisp:nil :type
    (common-lisp:or mixed-instances-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'desired-configuration 'make-desired-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          desired-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          desired-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          desired-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-instances-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-instances-answer-"))
   (activities common-lisp:nil :type
    (common-lisp:or activities common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-instances-answer 'make-detach-instances-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-instances-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-instances-query-"))
   (instance-ids common-lisp:nil :type
    (common-lisp:or instance-ids common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (should-decrement-desired-capacity
    (common-lisp:error ":should-decrement-desired-capacity is required") :type
    (common-lisp:or should-decrement-desired-capacity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-instances-query 'make-detach-instances-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'should-decrement-desired-capacity))
      (common-lisp:list
       (common-lisp:cons "ShouldDecrementDesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-load-balancer-target-groups-result-type (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-detach-load-balancer-target-groups-result-type-")))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancer-target-groups-result-type
                    'make-detach-load-balancer-target-groups-result-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-load-balancer-target-groups-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-load-balancer-target-groups-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (target-group-arns (common-lisp:error ":target-group-arns is required")
    :type (common-lisp:or target-group-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancer-target-groups-type
                    'make-detach-load-balancer-target-groups-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-target-groups-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-load-balancers-result-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-load-balancers-result-type-")))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancers-result-type
                    'make-detach-load-balancers-result-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-load-balancers-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-load-balancers-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (load-balancer-names (common-lisp:error ":load-balancer-names is required")
    :type (common-lisp:or load-balancer-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancers-type
                    'make-detach-load-balancers-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancers-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-traffic-sources-result-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-traffic-sources-result-type-")))
 (common-lisp:export
  (common-lisp:list 'detach-traffic-sources-result-type
                    'make-detach-traffic-sources-result-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-result-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-result-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-traffic-sources-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-traffic-sources-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (traffic-sources (common-lisp:error ":traffic-sources is required") :type
    (common-lisp:or traffic-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-traffic-sources-type
                    'make-detach-traffic-sources-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-sources))
      (common-lisp:list
       (common-lisp:cons "TrafficSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-traffic-sources-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-metrics-collection-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-metrics-collection-query-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (metrics common-lisp:nil :type (common-lisp:or metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-metrics-collection-query
                    'make-disable-metrics-collection-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-metrics-collection-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-metrics-collection-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-metrics-collection-query))
   common-lisp:nil))
(common-lisp:deftype disable-scale-in () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (ebs (:copier common-lisp:nil) (:conc-name "struct-shape-ebs-"))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (volume-size common-lisp:nil :type
    (common-lisp:or block-device-ebs-volume-size common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or block-device-ebs-volume-type common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or block-device-ebs-delete-on-termination common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or block-device-ebs-iops common-lisp:null))
   (encrypted common-lisp:nil :type
    (common-lisp:or block-device-ebs-encrypted common-lisp:null))
   (throughput common-lisp:nil :type
    (common-lisp:or block-device-ebs-throughput common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ebs 'make-ebs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "Throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs))
   common-lisp:nil))
(common-lisp:deftype ebs-optimized () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-metrics-collection-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-metrics-collection-query-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (metrics common-lisp:nil :type (common-lisp:or metrics common-lisp:null))
   (granularity (common-lisp:error ":granularity is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-metrics-collection-query
                    'make-enable-metrics-collection-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-metrics-collection-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-metrics-collection-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-metrics-collection-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enabled-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-enabled-metric-"))
   (metric common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (granularity common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'enabled-metric 'make-enabled-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enabled-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enabled-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enabled-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enabled-metrics ()
   '(trivial-types:proper-list enabled-metric))
 (common-lisp:defun |make-enabled-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list enabled-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (enter-standby-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-enter-standby-answer-"))
   (activities common-lisp:nil :type
    (common-lisp:or activities common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enter-standby-answer 'make-enter-standby-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enter-standby-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enter-standby-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enter-standby-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enter-standby-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-enter-standby-query-"))
   (instance-ids common-lisp:nil :type
    (common-lisp:or instance-ids common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (should-decrement-desired-capacity
    (common-lisp:error ":should-decrement-desired-capacity is required") :type
    (common-lisp:or should-decrement-desired-capacity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enter-standby-query 'make-enter-standby-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enter-standby-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enter-standby-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'should-decrement-desired-capacity))
      (common-lisp:list
       (common-lisp:cons "ShouldDecrementDesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enter-standby-query))
   common-lisp:nil))
(common-lisp:deftype estimated-instance-warmup () 'common-lisp:integer)
(common-lisp:deftype excluded-instance () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype excluded-instance-types ()
   '(trivial-types:proper-list excluded-instance))
 (common-lisp:defun |make-excluded-instance-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list excluded-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (execute-policy-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-execute-policy-type-"))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (honor-cooldown common-lisp:nil :type
    (common-lisp:or honor-cooldown common-lisp:null))
   (metric-value common-lisp:nil :type
    (common-lisp:or metric-scale common-lisp:null))
   (breach-threshold common-lisp:nil :type
    (common-lisp:or metric-scale common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execute-policy-type 'make-execute-policy-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execute-policy-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execute-policy-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honor-cooldown))
      (common-lisp:list
       (common-lisp:cons "HonorCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "MetricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breach-threshold))
      (common-lisp:list
       (common-lisp:cons "BreachThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execute-policy-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (exit-standby-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-exit-standby-answer-"))
   (activities common-lisp:nil :type
    (common-lisp:or activities common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exit-standby-answer 'make-exit-standby-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exit-standby-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exit-standby-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exit-standby-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (exit-standby-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-exit-standby-query-"))
   (instance-ids common-lisp:nil :type
    (common-lisp:or instance-ids common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exit-standby-query 'make-exit-standby-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exit-standby-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exit-standby-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exit-standby-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failed-scheduled-update-group-action-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-failed-scheduled-update-group-action-request-"))
   (scheduled-action-name
    (common-lisp:error ":scheduled-action-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or xml-string-max-len64 common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failed-scheduled-update-group-action-request
                    'make-failed-scheduled-update-group-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-scheduled-update-group-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-scheduled-update-group-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-scheduled-update-group-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-scheduled-update-group-action-requests ()
   '(trivial-types:proper-list failed-scheduled-update-group-action-request))
 (common-lisp:defun |make-failed-scheduled-update-group-action-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-scheduled-update-group-action-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name common-lisp:nil :type (common-lisp:or xml-string common-lisp:null))
   (values common-lisp:nil :type (common-lisp:or values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype force-delete () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (get-predictive-scaling-forecast-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-predictive-scaling-forecast-answer-"))
   (load-forecast (common-lisp:error ":load-forecast is required") :type
    (common-lisp:or load-forecasts common-lisp:null))
   (capacity-forecast (common-lisp:error ":capacity-forecast is required")
    :type (common-lisp:or capacity-forecast common-lisp:null))
   (update-time (common-lisp:error ":update-time is required") :type
    (common-lisp:or timestamp-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-predictive-scaling-forecast-answer
                    'make-get-predictive-scaling-forecast-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-forecast))
      (common-lisp:list
       (common-lisp:cons "LoadForecast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-forecast))
      (common-lisp:list
       (common-lisp:cons "CapacityForecast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-predictive-scaling-forecast-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-predictive-scaling-forecast-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or timestamp-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-predictive-scaling-forecast-type
                    'make-get-predictive-scaling-forecast-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-predictive-scaling-forecast-type))
   common-lisp:nil))
(common-lisp:deftype global-timeout () 'common-lisp:integer)
(common-lisp:deftype health-check-grace-period () 'common-lisp:integer)
(common-lisp:deftype heartbeat-timeout () 'common-lisp:integer)
(common-lisp:deftype honor-cooldown () 'common-lisp:boolean)
(common-lisp:deftype include-deleted-groups () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (instance (:copier common-lisp:nil) (:conc-name "struct-shape-instance-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or xml-string-max-len19 common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (availability-zone (common-lisp:error ":availability-zone is required")
    :type (common-lisp:or xml-string-max-len255 common-lisp:null))
   (lifecycle-state (common-lisp:error ":lifecycle-state is required") :type
    (common-lisp:or lifecycle-state common-lisp:null))
   (health-status (common-lisp:error ":health-status is required") :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (launch-configuration-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (protected-from-scale-in
    (common-lisp:error ":protected-from-scale-in is required") :type
    (common-lisp:or instance-protected common-lisp:null))
   (weighted-capacity common-lisp:nil :type
    (common-lisp:or xml-string-max-len32 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "LifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "ProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:deftype instance-generation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-generations ()
   '(trivial-types:proper-list instance-generation))
 (common-lisp:defun |make-instance-generations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-generation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-ids ()
   '(trivial-types:proper-list xml-string-max-len19))
 (common-lisp:defun |make-instance-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len19))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-metadata-endpoint-state () 'common-lisp:string)
(common-lisp:deftype instance-metadata-http-put-response-hop-limit ()
  'common-lisp:integer)
(common-lisp:deftype instance-metadata-http-tokens-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-metadata-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-metadata-options-"))
   (http-tokens common-lisp:nil :type
    (common-lisp:or instance-metadata-http-tokens-state common-lisp:null))
   (http-put-response-hop-limit common-lisp:nil :type
    (common-lisp:or instance-metadata-http-put-response-hop-limit
                    common-lisp:null))
   (http-endpoint common-lisp:nil :type
    (common-lisp:or instance-metadata-endpoint-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-metadata-options
                    'make-instance-metadata-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "HttpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "HttpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-monitoring (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-monitoring-"))
   (enabled common-lisp:nil :type
    (common-lisp:or monitoring-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-monitoring 'make-instance-monitoring))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-monitoring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-monitoring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-monitoring))
   common-lisp:nil))
(common-lisp:deftype instance-protected () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-refresh (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-refresh-"))
   (instance-refresh-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or instance-refresh-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (percentage-complete common-lisp:nil :type
    (common-lisp:or int-percent common-lisp:null))
   (instances-to-update common-lisp:nil :type
    (common-lisp:or instances-to-update common-lisp:null))
   (progress-details common-lisp:nil :type
    (common-lisp:or instance-refresh-progress-details common-lisp:null))
   (preferences common-lisp:nil :type
    (common-lisp:or refresh-preferences common-lisp:null))
   (desired-configuration common-lisp:nil :type
    (common-lisp:or desired-configuration common-lisp:null))
   (rollback-details common-lisp:nil :type
    (common-lisp:or rollback-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh 'make-instance-refresh))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-refresh))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-refresh))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refresh-id))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "PercentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-to-update))
      (common-lisp:list
       (common-lisp:cons "InstancesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-details))
      (common-lisp:list
       (common-lisp:cons "ProgressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferences))
      (common-lisp:list
       (common-lisp:cons "Preferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-configuration))
      (common-lisp:list
       (common-lisp:cons "DesiredConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-details))
      (common-lisp:list
       (common-lisp:cons "RollbackDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-refresh))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-refresh-ids ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-instance-refresh-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition instance-refresh-in-progress-fault
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       instance-refresh-in-progress-fault-message)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh-in-progress-fault
                    'instance-refresh-in-progress-fault-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-refresh-live-pool-progress (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-refresh-live-pool-progress-"))
   (percentage-complete common-lisp:nil :type
    (common-lisp:or int-percent common-lisp:null))
   (instances-to-update common-lisp:nil :type
    (common-lisp:or instances-to-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh-live-pool-progress
                    'make-instance-refresh-live-pool-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-live-pool-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-live-pool-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "PercentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-to-update))
      (common-lisp:list
       (common-lisp:cons "InstancesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-live-pool-progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-refresh-progress-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-refresh-progress-details-"))
   (live-pool-progress common-lisp:nil :type
    (common-lisp:or instance-refresh-live-pool-progress common-lisp:null))
   (warm-pool-progress common-lisp:nil :type
    (common-lisp:or instance-refresh-warm-pool-progress common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh-progress-details
                    'make-instance-refresh-progress-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-progress-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-progress-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'live-pool-progress))
      (common-lisp:list
       (common-lisp:cons "LivePoolProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-pool-progress))
      (common-lisp:list
       (common-lisp:cons "WarmPoolProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-progress-details))
   common-lisp:nil))
(common-lisp:deftype instance-refresh-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-refresh-warm-pool-progress (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-refresh-warm-pool-progress-"))
   (percentage-complete common-lisp:nil :type
    (common-lisp:or int-percent common-lisp:null))
   (instances-to-update common-lisp:nil :type
    (common-lisp:or instances-to-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-refresh-warm-pool-progress
                    'make-instance-refresh-warm-pool-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-warm-pool-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-warm-pool-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "PercentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-to-update))
      (common-lisp:list
       (common-lisp:cons "InstancesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-refresh-warm-pool-progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-refreshes ()
   '(trivial-types:proper-list instance-refresh))
 (common-lisp:defun |make-instance-refreshes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-refresh))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-requirements (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-requirements-"))
   (vcpu-count (common-lisp:error ":vcpu-count is required") :type
    (common-lisp:or vcpu-count-request common-lisp:null))
   (memory-mi-b (common-lisp:error ":memory-mi-b is required") :type
    (common-lisp:or memory-mi-brequest common-lisp:null))
   (cpu-manufacturers common-lisp:nil :type
    (common-lisp:or cpu-manufacturers common-lisp:null))
   (memory-gi-bper-vcpu common-lisp:nil :type
    (common-lisp:or memory-gi-bper-vcpu-request common-lisp:null))
   (excluded-instance-types common-lisp:nil :type
    (common-lisp:or excluded-instance-types common-lisp:null))
   (instance-generations common-lisp:nil :type
    (common-lisp:or instance-generations common-lisp:null))
   (spot-max-price-percentage-over-lowest-price common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null))
   (on-demand-max-price-percentage-over-lowest-price common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null))
   (bare-metal common-lisp:nil :type
    (common-lisp:or bare-metal common-lisp:null))
   (burstable-performance common-lisp:nil :type
    (common-lisp:or burstable-performance common-lisp:null))
   (require-hibernate-support common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (network-interface-count common-lisp:nil :type
    (common-lisp:or network-interface-count-request common-lisp:null))
   (local-storage common-lisp:nil :type
    (common-lisp:or local-storage common-lisp:null))
   (local-storage-types common-lisp:nil :type
    (common-lisp:or local-storage-types common-lisp:null))
   (total-local-storage-gb common-lisp:nil :type
    (common-lisp:or total-local-storage-gbrequest common-lisp:null))
   (baseline-ebs-bandwidth-mbps common-lisp:nil :type
    (common-lisp:or baseline-ebs-bandwidth-mbps-request common-lisp:null))
   (accelerator-types common-lisp:nil :type
    (common-lisp:or accelerator-types common-lisp:null))
   (accelerator-count common-lisp:nil :type
    (common-lisp:or accelerator-count-request common-lisp:null))
   (accelerator-manufacturers common-lisp:nil :type
    (common-lisp:or accelerator-manufacturers common-lisp:null))
   (accelerator-names common-lisp:nil :type
    (common-lisp:or accelerator-names common-lisp:null))
   (accelerator-total-memory-mi-b common-lisp:nil :type
    (common-lisp:or accelerator-total-memory-mi-brequest common-lisp:null))
   (network-bandwidth-gbps common-lisp:nil :type
    (common-lisp:or network-bandwidth-gbps-request common-lisp:null))
   (allowed-instance-types common-lisp:nil :type
    (common-lisp:or allowed-instance-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-requirements 'make-instance-requirements))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-requirements))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-requirements))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcpu-count))
      (common-lisp:list
       (common-lisp:cons "VCpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-mi-b))
      (common-lisp:list
       (common-lisp:cons "MemoryMiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-manufacturers))
      (common-lisp:list
       (common-lisp:cons "CpuManufacturers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gi-bper-vcpu))
      (common-lisp:list
       (common-lisp:cons "MemoryGiBPerVCpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-instance-types))
      (common-lisp:list
       (common-lisp:cons "ExcludedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-generations))
      (common-lisp:list
       (common-lisp:cons "InstanceGenerations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-max-price-percentage-over-lowest-price))
      (common-lisp:list
       (common-lisp:cons "SpotMaxPricePercentageOverLowestPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-max-price-percentage-over-lowest-price))
      (common-lisp:list
       (common-lisp:cons "OnDemandMaxPricePercentageOverLowestPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bare-metal))
      (common-lisp:list
       (common-lisp:cons "BareMetal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'burstable-performance))
      (common-lisp:list
       (common-lisp:cons "BurstablePerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-hibernate-support))
      (common-lisp:list
       (common-lisp:cons "RequireHibernateSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-count))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-storage))
      (common-lisp:list
       (common-lisp:cons "LocalStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-storage-types))
      (common-lisp:list
       (common-lisp:cons "LocalStorageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-local-storage-gb))
      (common-lisp:list
       (common-lisp:cons "TotalLocalStorageGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-ebs-bandwidth-mbps))
      (common-lisp:list
       (common-lisp:cons "BaselineEbsBandwidthMbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-count))
      (common-lisp:list
       (common-lisp:cons "AcceleratorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-manufacturers))
      (common-lisp:list
       (common-lisp:cons "AcceleratorManufacturers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-names))
      (common-lisp:list
       (common-lisp:cons "AcceleratorNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-total-memory-mi-b))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTotalMemoryMiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-bandwidth-gbps))
      (common-lisp:list
       (common-lisp:cons "NetworkBandwidthGbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-instance-types))
      (common-lisp:list
       (common-lisp:cons "AllowedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-requirements))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-reuse-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-reuse-policy-"))
   (reuse-on-scale-in common-lisp:nil :type
    (common-lisp:or reuse-on-scale-in common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-reuse-policy 'make-instance-reuse-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-reuse-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-reuse-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reuse-on-scale-in))
      (common-lisp:list
       (common-lisp:cons "ReuseOnScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-reuse-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instances () '(trivial-types:proper-list instance))
 (common-lisp:defun |make-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instances-distribution (:copier common-lisp:nil)
      (:conc-name "struct-shape-instances-distribution-"))
   (on-demand-allocation-strategy common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (on-demand-base-capacity common-lisp:nil :type
    (common-lisp:or on-demand-base-capacity common-lisp:null))
   (on-demand-percentage-above-base-capacity common-lisp:nil :type
    (common-lisp:or on-demand-percentage-above-base-capacity common-lisp:null))
   (spot-allocation-strategy common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (spot-instance-pools common-lisp:nil :type
    (common-lisp:or spot-instance-pools common-lisp:null))
   (spot-max-price common-lisp:nil :type
    (common-lisp:or mixed-instance-spot-price common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instances-distribution 'make-instances-distribution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instances-distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instances-distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "OnDemandAllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-base-capacity))
      (common-lisp:list
       (common-lisp:cons "OnDemandBaseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-percentage-above-base-capacity))
      (common-lisp:list
       (common-lisp:cons "OnDemandPercentageAboveBaseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "SpotAllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-instance-pools))
      (common-lisp:list
       (common-lisp:cons "SpotInstancePools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-max-price))
      (common-lisp:list
       (common-lisp:cons "SpotMaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instances-distribution))
   common-lisp:nil))
(common-lisp:deftype instances-to-update () 'common-lisp:integer)
(common-lisp:deftype int-percent () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token 'invalid-next-token-message)))
(common-lisp:progn
 (common-lisp:define-condition irreversible-instance-refresh-fault
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       irreversible-instance-refresh-fault-message)))
 (common-lisp:export
  (common-lisp:list 'irreversible-instance-refresh-fault
                    'irreversible-instance-refresh-fault-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-configuration-"))
   (launch-configuration-name
    (common-lisp:error ":launch-configuration-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-configuration-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (image-id (common-lisp:error ":image-id is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (key-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-groups common-lisp:null))
   (classic-link-vpcid common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (classic-link-vpcsecurity-groups common-lisp:nil :type
    (common-lisp:or classic-link-vpcsecurity-groups common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or xml-string-user-data common-lisp:null))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (kernel-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (ramdisk-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mappings common-lisp:null))
   (instance-monitoring common-lisp:nil :type
    (common-lisp:or instance-monitoring common-lisp:null))
   (spot-price common-lisp:nil :type
    (common-lisp:or spot-price common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or xml-string-max-len1600 common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp-type common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or ebs-optimized common-lisp:null))
   (associate-public-ip-address common-lisp:nil :type
    (common-lisp:or associate-public-ip-address common-lisp:null))
   (placement-tenancy common-lisp:nil :type
    (common-lisp:or xml-string-max-len64 common-lisp:null))
   (metadata-options common-lisp:nil :type
    (common-lisp:or instance-metadata-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-configuration 'make-launch-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classic-link-vpcid))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classic-link-vpcsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVPCSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-monitoring))
      (common-lisp:list
       (common-lisp:cons "InstanceMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-tenancy))
      (common-lisp:list
       (common-lisp:cons "PlacementTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-configuration-name-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-configuration-name-type-"))
   (launch-configuration-name
    (common-lisp:error ":launch-configuration-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-configuration-name-type
                    'make-launch-configuration-name-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-name-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-name-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-name-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-configuration-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-launch-configuration-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-configuration-names-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-configuration-names-type-"))
   (launch-configuration-names common-lisp:nil :type
    (common-lisp:or launch-configuration-names common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-configuration-names-type
                    'make-launch-configuration-names-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-names-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-names-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-names))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-names-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-configurations ()
   '(trivial-types:proper-list launch-configuration))
 (common-lisp:defun |make-launch-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-configurations-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-configurations-type-"))
   (launch-configurations
    (common-lisp:error ":launch-configurations is required") :type
    (common-lisp:or launch-configurations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-configurations-type
                    'make-launch-configurations-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-configurations-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-configurations-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configurations))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-configurations-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-template-"))
   (launch-template-specification common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (overrides common-lisp:nil :type
    (common-lisp:or overrides common-lisp:null)))
 (common-lisp:export (common-lisp:list 'launch-template 'make-launch-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "Overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-template))
   common-lisp:nil))
(common-lisp:deftype launch-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (launch-template-overrides (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-template-overrides-"))
   (instance-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (weighted-capacity common-lisp:nil :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (launch-template-specification common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (instance-requirements common-lisp:nil :type
    (common-lisp:or instance-requirements common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-template-overrides
                    'make-launch-template-overrides))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-overrides))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-overrides))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-requirements))
      (common-lisp:list
       (common-lisp:cons "InstanceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-overrides))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-template-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-template-specification-"))
   (launch-template-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-template-name common-lisp:nil :type
    (common-lisp:or launch-template-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-template-specification
                    'make-launch-template-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   common-lisp:nil))
(common-lisp:deftype lifecycle-action-result () 'common-lisp:string)
(common-lisp:deftype lifecycle-action-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-hook (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-hook-"))
   (lifecycle-hook-name common-lisp:nil :type
    (common-lisp:or ascii-string-max-len255 common-lisp:null))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (lifecycle-transition common-lisp:nil :type
    (common-lisp:or lifecycle-transition common-lisp:null))
   (notification-target-arn common-lisp:nil :type
    (common-lisp:or notification-target-resource-name common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (notification-metadata common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null))
   (heartbeat-timeout common-lisp:nil :type
    (common-lisp:or heartbeat-timeout common-lisp:null))
   (global-timeout common-lisp:nil :type
    (common-lisp:or global-timeout common-lisp:null))
   (default-result common-lisp:nil :type
    (common-lisp:or lifecycle-action-result common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lifecycle-hook 'make-lifecycle-hook))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-target-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTargetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-metadata))
      (common-lisp:list
       (common-lisp:cons "NotificationMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "HeartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-timeout))
      (common-lisp:list
       (common-lisp:cons "GlobalTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-result))
      (common-lisp:list
       (common-lisp:cons "DefaultResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-hook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-hook-names ()
   '(trivial-types:proper-list ascii-string-max-len255))
 (common-lisp:defun |make-lifecycle-hook-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ascii-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-hook-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-hook-specification-"))
   (lifecycle-hook-name (common-lisp:error ":lifecycle-hook-name is required")
    :type (common-lisp:or ascii-string-max-len255 common-lisp:null))
   (lifecycle-transition
    (common-lisp:error ":lifecycle-transition is required") :type
    (common-lisp:or lifecycle-transition common-lisp:null))
   (notification-metadata common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null))
   (heartbeat-timeout common-lisp:nil :type
    (common-lisp:or heartbeat-timeout common-lisp:null))
   (default-result common-lisp:nil :type
    (common-lisp:or lifecycle-action-result common-lisp:null))
   (notification-target-arn common-lisp:nil :type
    (common-lisp:or notification-target-resource-name common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-hook-specification
                    'make-lifecycle-hook-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-hook-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-hook-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-metadata))
      (common-lisp:list
       (common-lisp:cons "NotificationMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "HeartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-result))
      (common-lisp:list
       (common-lisp:cons "DefaultResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-target-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTargetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-hook-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-hook-specifications ()
   '(trivial-types:proper-list lifecycle-hook-specification))
 (common-lisp:defun |make-lifecycle-hook-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lifecycle-hook-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype lifecycle-hooks ()
   '(trivial-types:proper-list lifecycle-hook))
 (common-lisp:defun |make-lifecycle-hooks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-hook))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lifecycle-state () 'common-lisp:string)
(common-lisp:deftype lifecycle-transition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-fault
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-fault-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-fault 'limit-exceeded-fault-message)))
(common-lisp:progn
 (common-lisp:deftype load-balancer-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-load-balancer-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-state-"))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-state 'make-load-balancer-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-states ()
   '(trivial-types:proper-list load-balancer-state))
 (common-lisp:defun |make-load-balancer-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-target-group-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-target-group-state-"))
   (load-balancer-target-group-arn common-lisp:nil :type
    (common-lisp:or xml-string-max-len511 common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-target-group-state
                    'make-load-balancer-target-group-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-target-group-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-target-group-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-target-group-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerTargetGroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-target-group-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-target-group-states ()
   '(trivial-types:proper-list load-balancer-target-group-state))
 (common-lisp:defun |make-load-balancer-target-group-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-target-group-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (load-forecast (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-forecast-"))
   (timestamps (common-lisp:error ":timestamps is required") :type
    (common-lisp:or predictive-scaling-forecast-timestamps common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or predictive-scaling-forecast-values common-lisp:null))
   (metric-specification
    (common-lisp:error ":metric-specification is required") :type
    (common-lisp:or predictive-scaling-metric-specification common-lisp:null)))
 (common-lisp:export (common-lisp:list 'load-forecast 'make-load-forecast))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-forecast))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-forecast))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamps))
      (common-lisp:list
       (common-lisp:cons "Timestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-specification))
      (common-lisp:list
       (common-lisp:cons "MetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-forecast))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-forecasts ()
   '(trivial-types:proper-list load-forecast))
 (common-lisp:defun |make-load-forecasts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-forecast))
   aws-sdk/generator/shape::members))
(common-lisp:deftype local-storage () 'common-lisp:string)
(common-lisp:deftype local-storage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype local-storage-types ()
   '(trivial-types:proper-list local-storage-type))
 (common-lisp:defun |make-local-storage-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list local-storage-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-group-prepared-capacity () 'common-lisp:integer)
(common-lisp:deftype max-instance-lifetime () 'common-lisp:integer)
(common-lisp:deftype max-number-of-auto-scaling-groups () 'common-lisp:integer)
(common-lisp:deftype max-number-of-launch-configurations ()
  'common-lisp:integer)
(common-lisp:deftype max-records () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (memory-gi-bper-vcpu-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-memory-gi-bper-vcpu-request-"))
   (min common-lisp:nil :type
    (common-lisp:or nullable-positive-double common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'memory-gi-bper-vcpu-request
                    'make-memory-gi-bper-vcpu-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          memory-gi-bper-vcpu-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          memory-gi-bper-vcpu-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          memory-gi-bper-vcpu-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (memory-mi-brequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-memory-mi-brequest-"))
   (min (common-lisp:error ":min is required") :type
    (common-lisp:or nullable-positive-integer common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'memory-mi-brequest 'make-memory-mi-brequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input memory-mi-brequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input memory-mi-brequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input memory-mi-brequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric (:copier common-lisp:nil) (:conc-name "struct-shape-metric-"))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or metric-namespace common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or metric-dimensions common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric 'make-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-collection-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-collection-type-"))
   (metric common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-collection-type 'make-metric-collection-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-collection-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-collection-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-collection-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-collection-types ()
   '(trivial-types:proper-list metric-collection-type))
 (common-lisp:defun |make-metric-collection-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-collection-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-data-queries ()
   '(trivial-types:proper-list metric-data-query))
 (common-lisp:defun |make-metric-data-queries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-data-query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-data-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-data-query-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null))
   (metric-stat common-lisp:nil :type
    (common-lisp:or metric-stat common-lisp:null))
   (label common-lisp:nil :type
    (common-lisp:or xml-string-metric-label common-lisp:null))
   (return-data common-lisp:nil :type
    (common-lisp:or return-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-data-query 'make-metric-data-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-data-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-data-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-stat))
      (common-lisp:list
       (common-lisp:cons "MetricStat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-data))
      (common-lisp:list
       (common-lisp:cons "ReturnData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-data-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-dimension-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or metric-dimension-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or metric-dimension-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-dimension 'make-metric-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-dimension))
   common-lisp:nil))
(common-lisp:deftype metric-dimension-name () 'common-lisp:string)
(common-lisp:deftype metric-dimension-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-dimensions ()
   '(trivial-types:proper-list metric-dimension))
 (common-lisp:defun |make-metric-dimensions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-granularity-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-granularity-type-"))
   (granularity common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-granularity-type 'make-metric-granularity-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-granularity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-granularity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-granularity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-granularity-types ()
   '(trivial-types:proper-list metric-granularity-type))
 (common-lisp:defun |make-metric-granularity-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-granularity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:deftype metric-scale () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-stat (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-stat-"))
   (metric (common-lisp:error ":metric is required") :type
    (common-lisp:or metric common-lisp:null))
   (stat (common-lisp:error ":stat is required") :type
    (common-lisp:or xml-string-metric-stat common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or metric-unit common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-stat 'make-metric-stat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stat))
      (common-lisp:list
       (common-lisp:cons "Stat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-stat))
   common-lisp:nil))
(common-lisp:deftype metric-statistic () 'common-lisp:string)
(common-lisp:deftype metric-type () 'common-lisp:string)
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metrics ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:deftype min-adjustment-magnitude () 'common-lisp:integer)
(common-lisp:deftype min-adjustment-step () 'common-lisp:integer)
(common-lisp:deftype mixed-instance-spot-price () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mixed-instances-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-mixed-instances-policy-"))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template common-lisp:null))
   (instances-distribution common-lisp:nil :type
    (common-lisp:or instances-distribution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mixed-instances-policy 'make-mixed-instances-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mixed-instances-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mixed-instances-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-distribution))
      (common-lisp:list
       (common-lisp:cons "InstancesDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mixed-instances-policy))
   common-lisp:nil))
(common-lisp:deftype monitoring-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (network-bandwidth-gbps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-bandwidth-gbps-request-"))
   (min common-lisp:nil :type
    (common-lisp:or nullable-positive-double common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-bandwidth-gbps-request
                    'make-network-bandwidth-gbps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-bandwidth-gbps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-bandwidth-gbps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-bandwidth-gbps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface-count-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-count-request-"))
   (min common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface-count-request
                    'make-network-interface-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-count-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-count-request))
   common-lisp:nil))
(common-lisp:deftype no-device () 'common-lisp:boolean)
(common-lisp:deftype non-zero-int-percent () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-configuration-"))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (topic-arn common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (notification-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-type))
      (common-lisp:list
       (common-lisp:cons "NotificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notification-configurations ()
   '(trivial-types:proper-list notification-configuration))
 (common-lisp:defun |make-notification-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notification-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notification-target-resource-name () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype nullable-positive-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-positive-integer () 'common-lisp:integer)
(common-lisp:deftype number-of-auto-scaling-groups () 'common-lisp:integer)
(common-lisp:deftype number-of-launch-configurations () 'common-lisp:integer)
(common-lisp:deftype on-demand-base-capacity () 'common-lisp:integer)
(common-lisp:deftype on-demand-percentage-above-base-capacity ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype overrides ()
   '(trivial-types:proper-list launch-template-overrides))
 (common-lisp:defun |make-overrides|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-template-overrides))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policies-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-policies-type-"))
   (scaling-policies common-lisp:nil :type
    (common-lisp:or scaling-policies common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policies-type 'make-policies-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policies-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policies-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-policies))
      (common-lisp:list
       (common-lisp:cons "ScalingPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policies-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-arntype (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-arntype-"))
   (policy-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (alarms common-lisp:nil :type (common-lisp:or alarms common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-arntype 'make-policy-arntype))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-arntype))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-arntype))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-arntype))
   common-lisp:nil))
(common-lisp:deftype policy-increment () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype policy-names ()
   '(trivial-types:proper-list resource-name))
 (common-lisp:defun |make-policy-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype policy-types ()
   '(trivial-types:proper-list xml-string-max-len64))
 (common-lisp:defun |make-policy-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len64))
   aws-sdk/generator/shape::members))
(common-lisp:deftype predefined-load-metric-type () 'common-lisp:string)
(common-lisp:deftype predefined-metric-pair-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (predefined-metric-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-predefined-metric-specification-"))
   (predefined-metric-type
    (common-lisp:error ":predefined-metric-type is required") :type
    (common-lisp:or metric-type common-lisp:null))
   (resource-label common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predefined-metric-specification
                    'make-predefined-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predefined-metric-specification))
   common-lisp:nil))
(common-lisp:deftype predefined-scaling-metric-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (predictive-scaling-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-predictive-scaling-configuration-"))
   (metric-specifications
    (common-lisp:error ":metric-specifications is required") :type
    (common-lisp:or predictive-scaling-metric-specifications common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or predictive-scaling-mode common-lisp:null))
   (scheduling-buffer-time common-lisp:nil :type
    (common-lisp:or predictive-scaling-scheduling-buffer-time
                    common-lisp:null))
   (max-capacity-breach-behavior common-lisp:nil :type
    (common-lisp:or predictive-scaling-max-capacity-breach-behavior
                    common-lisp:null))
   (max-capacity-buffer common-lisp:nil :type
    (common-lisp:or predictive-scaling-max-capacity-buffer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-configuration
                    'make-predictive-scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-specifications))
      (common-lisp:list
       (common-lisp:cons "MetricSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduling-buffer-time))
      (common-lisp:list
       (common-lisp:cons "SchedulingBufferTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-capacity-breach-behavior))
      (common-lisp:list
       (common-lisp:cons "MaxCapacityBreachBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity-buffer))
      (common-lisp:list
       (common-lisp:cons "MaxCapacityBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (predictive-scaling-customized-capacity-metric (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-predictive-scaling-customized-capacity-metric-"))
   (metric-data-queries (common-lisp:error ":metric-data-queries is required")
    :type (common-lisp:or metric-data-queries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-customized-capacity-metric
                    'make-predictive-scaling-customized-capacity-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-capacity-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-capacity-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-queries))
      (common-lisp:list
       (common-lisp:cons "MetricDataQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-capacity-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (predictive-scaling-customized-load-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-predictive-scaling-customized-load-metric-"))
   (metric-data-queries (common-lisp:error ":metric-data-queries is required")
    :type (common-lisp:or metric-data-queries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-customized-load-metric
                    'make-predictive-scaling-customized-load-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-load-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-load-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-queries))
      (common-lisp:list
       (common-lisp:cons "MetricDataQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-load-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (predictive-scaling-customized-scaling-metric (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-predictive-scaling-customized-scaling-metric-"))
   (metric-data-queries (common-lisp:error ":metric-data-queries is required")
    :type (common-lisp:or metric-data-queries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-customized-scaling-metric
                    'make-predictive-scaling-customized-scaling-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-scaling-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-scaling-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-queries))
      (common-lisp:list
       (common-lisp:cons "MetricDataQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-customized-scaling-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictive-scaling-forecast-timestamps ()
   '(trivial-types:proper-list timestamp-type))
 (common-lisp:defun |make-predictive-scaling-forecast-timestamps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype predictive-scaling-forecast-values ()
   '(trivial-types:proper-list metric-scale))
 (common-lisp:defun |make-predictive-scaling-forecast-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-scale))
   aws-sdk/generator/shape::members))
(common-lisp:deftype predictive-scaling-max-capacity-breach-behavior ()
  'common-lisp:string)
(common-lisp:deftype predictive-scaling-max-capacity-buffer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (predictive-scaling-metric-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-predictive-scaling-metric-specification-"))
   (target-value (common-lisp:error ":target-value is required") :type
    (common-lisp:or metric-scale common-lisp:null))
   (predefined-metric-pair-specification common-lisp:nil :type
    (common-lisp:or predictive-scaling-predefined-metric-pair
                    common-lisp:null))
   (predefined-scaling-metric-specification common-lisp:nil :type
    (common-lisp:or predictive-scaling-predefined-scaling-metric
                    common-lisp:null))
   (predefined-load-metric-specification common-lisp:nil :type
    (common-lisp:or predictive-scaling-predefined-load-metric
                    common-lisp:null))
   (customized-scaling-metric-specification common-lisp:nil :type
    (common-lisp:or predictive-scaling-customized-scaling-metric
                    common-lisp:null))
   (customized-load-metric-specification common-lisp:nil :type
    (common-lisp:or predictive-scaling-customized-load-metric
                    common-lisp:null))
   (customized-capacity-metric-specification common-lisp:nil :type
    (common-lisp:or predictive-scaling-customized-capacity-metric
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-metric-specification
                    'make-predictive-scaling-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-pair-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricPairSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-scaling-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedScalingMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-load-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedLoadMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-scaling-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedScalingMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-load-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedLoadMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-capacity-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedCapacityMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-metric-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictive-scaling-metric-specifications ()
   '(trivial-types:proper-list predictive-scaling-metric-specification))
 (common-lisp:defun |make-predictive-scaling-metric-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            predictive-scaling-metric-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype predictive-scaling-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (predictive-scaling-predefined-load-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-predictive-scaling-predefined-load-metric-"))
   (predefined-metric-type
    (common-lisp:error ":predefined-metric-type is required") :type
    (common-lisp:or predefined-load-metric-type common-lisp:null))
   (resource-label common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-predefined-load-metric
                    'make-predictive-scaling-predefined-load-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-load-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-load-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-load-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (predictive-scaling-predefined-metric-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-predictive-scaling-predefined-metric-pair-"))
   (predefined-metric-type
    (common-lisp:error ":predefined-metric-type is required") :type
    (common-lisp:or predefined-metric-pair-type common-lisp:null))
   (resource-label common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-predefined-metric-pair
                    'make-predictive-scaling-predefined-metric-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-metric-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-metric-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-metric-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (predictive-scaling-predefined-scaling-metric (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-predictive-scaling-predefined-scaling-metric-"))
   (predefined-metric-type
    (common-lisp:error ":predefined-metric-type is required") :type
    (common-lisp:or predefined-scaling-metric-type common-lisp:null))
   (resource-label common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predictive-scaling-predefined-scaling-metric
                    'make-predictive-scaling-predefined-scaling-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-scaling-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-scaling-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-scaling-predefined-scaling-metric))
   common-lisp:nil))
(common-lisp:deftype predictive-scaling-scheduling-buffer-time ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype process-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-process-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (process-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-process-type-"))
   (process-name (common-lisp:error ":process-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'process-type 'make-process-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input process-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input process-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-name))
      (common-lisp:list
       (common-lisp:cons "ProcessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input process-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processes () '(trivial-types:proper-list process-type))
 (common-lisp:defun |make-processes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list process-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (processes-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-processes-type-"))
   (processes common-lisp:nil :type
    (common-lisp:or processes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'processes-type 'make-processes-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processes-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processes-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processes))
      (common-lisp:list
       (common-lisp:cons "Processes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processes-type))
   common-lisp:nil))
(common-lisp:deftype progress () 'common-lisp:integer)
(common-lisp:deftype propagate-at-launch () 'common-lisp:boolean)
(common-lisp:deftype protected-from-scale-in () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (put-lifecycle-hook-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-lifecycle-hook-answer-")))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-hook-answer
                    'make-put-lifecycle-hook-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-lifecycle-hook-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-lifecycle-hook-type-"))
   (lifecycle-hook-name (common-lisp:error ":lifecycle-hook-name is required")
    :type (common-lisp:or ascii-string-max-len255 common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (lifecycle-transition common-lisp:nil :type
    (common-lisp:or lifecycle-transition common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (notification-target-arn common-lisp:nil :type
    (common-lisp:or notification-target-resource-name common-lisp:null))
   (notification-metadata common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null))
   (heartbeat-timeout common-lisp:nil :type
    (common-lisp:or heartbeat-timeout common-lisp:null))
   (default-result common-lisp:nil :type
    (common-lisp:or lifecycle-action-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-hook-type 'make-put-lifecycle-hook-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-target-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTargetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-metadata))
      (common-lisp:list
       (common-lisp:cons "NotificationMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-timeout))
      (common-lisp:list
       (common-lisp:cons "HeartbeatTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-result))
      (common-lisp:list
       (common-lisp:cons "DefaultResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-hook-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-notification-configuration-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-notification-configuration-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (topic-arn (common-lisp:error ":topic-arn is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (notification-types (common-lisp:error ":notification-types is required")
    :type (common-lisp:or auto-scaling-notification-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-notification-configuration-type
                    'make-put-notification-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-types))
      (common-lisp:list
       (common-lisp:cons "NotificationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-notification-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-scaling-policy-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-scaling-policy-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (policy-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len64 common-lisp:null))
   (adjustment-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (min-adjustment-step common-lisp:nil :type
    (common-lisp:or min-adjustment-step common-lisp:null))
   (min-adjustment-magnitude common-lisp:nil :type
    (common-lisp:or min-adjustment-magnitude common-lisp:null))
   (scaling-adjustment common-lisp:nil :type
    (common-lisp:or policy-increment common-lisp:null))
   (cooldown common-lisp:nil :type (common-lisp:or cooldown common-lisp:null))
   (metric-aggregation-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (step-adjustments common-lisp:nil :type
    (common-lisp:or step-adjustments common-lisp:null))
   (estimated-instance-warmup common-lisp:nil :type
    (common-lisp:or estimated-instance-warmup common-lisp:null))
   (target-tracking-configuration common-lisp:nil :type
    (common-lisp:or target-tracking-configuration common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or scaling-policy-enabled common-lisp:null))
   (predictive-scaling-configuration common-lisp:nil :type
    (common-lisp:or predictive-scaling-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-scaling-policy-type 'make-put-scaling-policy-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-type))
      (common-lisp:list
       (common-lisp:cons "AdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-adjustment-step))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-adjustment-magnitude))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentMagnitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cooldown))
      (common-lisp:list
       (common-lisp:cons "Cooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-aggregation-type))
      (common-lisp:list
       (common-lisp:cons "MetricAggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-adjustments))
      (common-lisp:list
       (common-lisp:cons "StepAdjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "EstimatedInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictive-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "PredictiveScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-scheduled-update-group-action-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-scheduled-update-group-action-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (scheduled-action-name
    (common-lisp:error ":scheduled-action-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (recurrence common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (min-size common-lisp:nil :type
    (common-lisp:or auto-scaling-group-min-size common-lisp:null))
   (max-size common-lisp:nil :type
    (common-lisp:or auto-scaling-group-max-size common-lisp:null))
   (desired-capacity common-lisp:nil :type
    (common-lisp:or auto-scaling-group-desired-capacity common-lisp:null))
   (time-zone common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-scheduled-update-group-action-type
                    'make-put-scheduled-update-group-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-update-group-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-update-group-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scheduled-update-group-action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-warm-pool-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-warm-pool-answer-")))
 (common-lisp:export
  (common-lisp:list 'put-warm-pool-answer 'make-put-warm-pool-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-warm-pool-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-warm-pool-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-warm-pool-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-warm-pool-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (max-group-prepared-capacity common-lisp:nil :type
    (common-lisp:or max-group-prepared-capacity common-lisp:null))
   (min-size common-lisp:nil :type
    (common-lisp:or warm-pool-min-size common-lisp:null))
   (pool-state common-lisp:nil :type
    (common-lisp:or warm-pool-state common-lisp:null))
   (instance-reuse-policy common-lisp:nil :type
    (common-lisp:or instance-reuse-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-warm-pool-type 'make-put-warm-pool-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-warm-pool-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-warm-pool-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-group-prepared-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxGroupPreparedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-state))
      (common-lisp:list
       (common-lisp:cons "PoolState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-reuse-policy))
      (common-lisp:list
       (common-lisp:cons "InstanceReusePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-warm-pool-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (record-lifecycle-action-heartbeat-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-lifecycle-action-heartbeat-answer-")))
 (common-lisp:export
  (common-lisp:list 'record-lifecycle-action-heartbeat-answer
                    'make-record-lifecycle-action-heartbeat-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (record-lifecycle-action-heartbeat-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-lifecycle-action-heartbeat-type-"))
   (lifecycle-hook-name (common-lisp:error ":lifecycle-hook-name is required")
    :type (common-lisp:or ascii-string-max-len255 common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (lifecycle-action-token common-lisp:nil :type
    (common-lisp:or lifecycle-action-token common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len19 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'record-lifecycle-action-heartbeat-type
                    'make-record-lifecycle-action-heartbeat-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-hook-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleHookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-action-token))
      (common-lisp:list
       (common-lisp:cons "LifecycleActionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-lifecycle-action-heartbeat-type))
   common-lisp:nil))
(common-lisp:deftype refresh-instance-warmup () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (refresh-preferences (:copier common-lisp:nil)
      (:conc-name "struct-shape-refresh-preferences-"))
   (min-healthy-percentage common-lisp:nil :type
    (common-lisp:or int-percent common-lisp:null))
   (instance-warmup common-lisp:nil :type
    (common-lisp:or refresh-instance-warmup common-lisp:null))
   (checkpoint-percentages common-lisp:nil :type
    (common-lisp:or checkpoint-percentages common-lisp:null))
   (checkpoint-delay common-lisp:nil :type
    (common-lisp:or checkpoint-delay common-lisp:null))
   (skip-matching common-lisp:nil :type
    (common-lisp:or skip-matching common-lisp:null))
   (auto-rollback common-lisp:nil :type
    (common-lisp:or auto-rollback common-lisp:null))
   (scale-in-protected-instances common-lisp:nil :type
    (common-lisp:or scale-in-protected-instances common-lisp:null))
   (standby-instances common-lisp:nil :type
    (common-lisp:or standby-instances common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'refresh-preferences 'make-refresh-preferences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input refresh-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input refresh-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-healthy-percentage))
      (common-lisp:list
       (common-lisp:cons "MinHealthyPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-warmup))
      (common-lisp:list
       (common-lisp:cons "InstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checkpoint-percentages))
      (common-lisp:list
       (common-lisp:cons "CheckpointPercentages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-delay))
      (common-lisp:list
       (common-lisp:cons "CheckpointDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-matching))
      (common-lisp:list
       (common-lisp:cons "SkipMatching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-rollback))
      (common-lisp:list
       (common-lisp:cons "AutoRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scale-in-protected-instances))
      (common-lisp:list
       (common-lisp:cons "ScaleInProtectedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standby-instances))
      (common-lisp:list
       (common-lisp:cons "StandbyInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input refresh-preferences))
   common-lisp:nil))
(common-lisp:deftype refresh-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-contention-fault
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-contention-fault-message)))
 (common-lisp:export
  (common-lisp:list 'resource-contention-fault
                    'resource-contention-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-fault
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-fault-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-fault 'resource-in-use-fault-message)))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:deftype return-data () 'common-lisp:boolean)
(common-lisp:deftype reuse-on-scale-in () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (rollback-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rollback-details-"))
   (rollback-reason common-lisp:nil :type
    (common-lisp:or xml-string-max-len1023 common-lisp:null))
   (rollback-start-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (percentage-complete-on-rollback common-lisp:nil :type
    (common-lisp:or int-percent common-lisp:null))
   (instances-to-update-on-rollback common-lisp:nil :type
    (common-lisp:or instances-to-update common-lisp:null))
   (progress-details-on-rollback common-lisp:nil :type
    (common-lisp:or instance-refresh-progress-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rollback-details 'make-rollback-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rollback-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rollback-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-reason))
      (common-lisp:list
       (common-lisp:cons "RollbackReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-start-time))
      (common-lisp:list
       (common-lisp:cons "RollbackStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'percentage-complete-on-rollback))
      (common-lisp:list
       (common-lisp:cons "PercentageCompleteOnRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-to-update-on-rollback))
      (common-lisp:list
       (common-lisp:cons "InstancesToUpdateOnRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-details-on-rollback))
      (common-lisp:list
       (common-lisp:cons "ProgressDetailsOnRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rollback-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rollback-instance-refresh-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-rollback-instance-refresh-answer-"))
   (instance-refresh-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rollback-instance-refresh-answer
                    'make-rollback-instance-refresh-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refresh-id))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rollback-instance-refresh-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-rollback-instance-refresh-type-"))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rollback-instance-refresh-type
                    'make-rollback-instance-refresh-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-instance-refresh-type))
   common-lisp:nil))
(common-lisp:deftype scale-in-protected-instances () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition scaling-activity-in-progress-fault
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scaling-activity-in-progress-fault-message)))
 (common-lisp:export
  (common-lisp:list 'scaling-activity-in-progress-fault
                    'scaling-activity-in-progress-fault-message)))
(common-lisp:deftype scaling-activity-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scaling-policies ()
   '(trivial-types:proper-list scaling-policy))
 (common-lisp:defun |make-scaling-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scaling-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-scaling-policy-"))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (policy-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len64 common-lisp:null))
   (adjustment-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (min-adjustment-step common-lisp:nil :type
    (common-lisp:or min-adjustment-step common-lisp:null))
   (min-adjustment-magnitude common-lisp:nil :type
    (common-lisp:or min-adjustment-magnitude common-lisp:null))
   (scaling-adjustment common-lisp:nil :type
    (common-lisp:or policy-increment common-lisp:null))
   (cooldown common-lisp:nil :type (common-lisp:or cooldown common-lisp:null))
   (step-adjustments common-lisp:nil :type
    (common-lisp:or step-adjustments common-lisp:null))
   (metric-aggregation-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (estimated-instance-warmup common-lisp:nil :type
    (common-lisp:or estimated-instance-warmup common-lisp:null))
   (alarms common-lisp:nil :type (common-lisp:or alarms common-lisp:null))
   (target-tracking-configuration common-lisp:nil :type
    (common-lisp:or target-tracking-configuration common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or scaling-policy-enabled common-lisp:null))
   (predictive-scaling-configuration common-lisp:nil :type
    (common-lisp:or predictive-scaling-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scaling-policy 'make-scaling-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustment-type))
      (common-lisp:list
       (common-lisp:cons "AdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-adjustment-step))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-adjustment-magnitude))
      (common-lisp:list
       (common-lisp:cons "MinAdjustmentMagnitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cooldown))
      (common-lisp:list
       (common-lisp:cons "Cooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-adjustments))
      (common-lisp:list
       (common-lisp:cons "StepAdjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-aggregation-type))
      (common-lisp:list
       (common-lisp:cons "MetricAggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "EstimatedInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictive-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "PredictiveScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-policy))
   common-lisp:nil))
(common-lisp:deftype scaling-policy-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (scaling-process-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-scaling-process-query-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (scaling-processes common-lisp:nil :type
    (common-lisp:or process-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scaling-process-query 'make-scaling-process-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scaling-process-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scaling-process-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-processes))
      (common-lisp:list
       (common-lisp:cons "ScalingProcesses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scaling-process-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-action-names ()
   '(trivial-types:proper-list xml-string-max-len255))
 (common-lisp:defun |make-scheduled-action-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-actions-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-actions-type-"))
   (scheduled-update-group-actions common-lisp:nil :type
    (common-lisp:or scheduled-update-group-actions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-actions-type 'make-scheduled-actions-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-update-group-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduledUpdateGroupActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-update-group-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-update-group-action-"))
   (auto-scaling-group-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (scheduled-action-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (scheduled-action-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (recurrence common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (min-size common-lisp:nil :type
    (common-lisp:or auto-scaling-group-min-size common-lisp:null))
   (max-size common-lisp:nil :type
    (common-lisp:or auto-scaling-group-max-size common-lisp:null))
   (desired-capacity common-lisp:nil :type
    (common-lisp:or auto-scaling-group-desired-capacity common-lisp:null))
   (time-zone common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-update-group-action
                    'make-scheduled-update-group-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-update-group-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-update-group-action-request-"))
   (scheduled-action-name
    (common-lisp:error ":scheduled-action-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (recurrence common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (min-size common-lisp:nil :type
    (common-lisp:or auto-scaling-group-min-size common-lisp:null))
   (max-size common-lisp:nil :type
    (common-lisp:or auto-scaling-group-max-size common-lisp:null))
   (desired-capacity common-lisp:nil :type
    (common-lisp:or auto-scaling-group-desired-capacity common-lisp:null))
   (time-zone common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-update-group-action-request
                    'make-scheduled-update-group-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-update-group-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-update-group-action-requests ()
   '(trivial-types:proper-list scheduled-update-group-action-request))
 (common-lisp:defun |make-scheduled-update-group-action-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-update-group-action-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype scheduled-update-group-actions ()
   '(trivial-types:proper-list scheduled-update-group-action))
 (common-lisp:defun |make-scheduled-update-group-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-update-group-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list xml-string))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-linked-role-failure
     (autoscaling-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-linked-role-failure-message)))
 (common-lisp:export
  (common-lisp:list 'service-linked-role-failure
                    'service-linked-role-failure-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (set-desired-capacity-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-desired-capacity-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (desired-capacity (common-lisp:error ":desired-capacity is required") :type
    (common-lisp:or auto-scaling-group-desired-capacity common-lisp:null))
   (honor-cooldown common-lisp:nil :type
    (common-lisp:or honor-cooldown common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-desired-capacity-type
                    'make-set-desired-capacity-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-desired-capacity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-desired-capacity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honor-cooldown))
      (common-lisp:list
       (common-lisp:cons "HonorCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-desired-capacity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-instance-health-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-instance-health-query-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or xml-string-max-len19 common-lisp:null))
   (health-status (common-lisp:error ":health-status is required") :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (should-respect-grace-period common-lisp:nil :type
    (common-lisp:or should-respect-grace-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-instance-health-query
                    'make-set-instance-health-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-health-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-health-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'should-respect-grace-period))
      (common-lisp:list
       (common-lisp:cons "ShouldRespectGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-health-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-instance-protection-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-instance-protection-answer-")))
 (common-lisp:export
  (common-lisp:list 'set-instance-protection-answer
                    'make-set-instance-protection-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-instance-protection-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-instance-protection-query-"))
   (instance-ids (common-lisp:error ":instance-ids is required") :type
    (common-lisp:or instance-ids common-lisp:null))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (protected-from-scale-in
    (common-lisp:error ":protected-from-scale-in is required") :type
    (common-lisp:or protected-from-scale-in common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-instance-protection-query
                    'make-set-instance-protection-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "ProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-instance-protection-query))
   common-lisp:nil))
(common-lisp:deftype should-decrement-desired-capacity () 'common-lisp:boolean)
(common-lisp:deftype should-respect-grace-period () 'common-lisp:boolean)
(common-lisp:deftype skip-matching () 'common-lisp:boolean)
(common-lisp:deftype spot-instance-pools () 'common-lisp:integer)
(common-lisp:deftype spot-price () 'common-lisp:string)
(common-lisp:deftype standby-instances () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-instance-refresh-answer (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-instance-refresh-answer-"))
   (instance-refresh-id common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-instance-refresh-answer
                    'make-start-instance-refresh-answer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-answer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-answer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-refresh-id))
      (common-lisp:list
       (common-lisp:cons "InstanceRefreshId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-answer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-instance-refresh-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-instance-refresh-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (strategy common-lisp:nil :type
    (common-lisp:or refresh-strategy common-lisp:null))
   (desired-configuration common-lisp:nil :type
    (common-lisp:or desired-configuration common-lisp:null))
   (preferences common-lisp:nil :type
    (common-lisp:or refresh-preferences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-instance-refresh-type
                    'make-start-instance-refresh-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "Strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-configuration))
      (common-lisp:list
       (common-lisp:cons "DesiredConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferences))
      (common-lisp:list
       (common-lisp:cons "Preferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-refresh-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (step-adjustment (:copier common-lisp:nil)
      (:conc-name "struct-shape-step-adjustment-"))
   (metric-interval-lower-bound common-lisp:nil :type
    (common-lisp:or metric-scale common-lisp:null))
   (metric-interval-upper-bound common-lisp:nil :type
    (common-lisp:or metric-scale common-lisp:null))
   (scaling-adjustment (common-lisp:error ":scaling-adjustment is required")
    :type (common-lisp:or policy-increment common-lisp:null)))
 (common-lisp:export (common-lisp:list 'step-adjustment 'make-step-adjustment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-interval-lower-bound))
      (common-lisp:list
       (common-lisp:cons "MetricIntervalLowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-interval-upper-bound))
      (common-lisp:list
       (common-lisp:cons "MetricIntervalUpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-adjustments ()
   '(trivial-types:proper-list step-adjustment))
 (common-lisp:defun |make-step-adjustments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (suspended-process (:copier common-lisp:nil)
      (:conc-name "struct-shape-suspended-process-"))
   (process-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (suspension-reason common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suspended-process 'make-suspended-process))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suspended-process))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suspended-process))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-name))
      (common-lisp:list
       (common-lisp:cons "ProcessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspension-reason))
      (common-lisp:list
       (common-lisp:cons "SuspensionReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suspended-process))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype suspended-processes ()
   '(trivial-types:proper-list suspended-process))
 (common-lisp:defun |make-suspended-processes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suspended-process))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null))
   (propagate-at-launch common-lisp:nil :type
    (common-lisp:or propagate-at-launch common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-at-launch))
      (common-lisp:list
       (common-lisp:cons "PropagateAtLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-description-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null))
   (propagate-at-launch common-lisp:nil :type
    (common-lisp:or propagate-at-launch common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-description 'make-tag-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-at-launch))
      (common-lisp:list
       (common-lisp:cons "PropagateAtLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-description-list ()
   '(trivial-types:proper-list tag-description))
 (common-lisp:defun |make-tag-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tags-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-tags-type-"))
   (tags common-lisp:nil :type
    (common-lisp:or tag-description-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tags-type 'make-tags-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tags-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tags-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tags-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-group-arns ()
   '(trivial-types:proper-list xml-string-max-len511))
 (common-lisp:defun |make-target-group-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len511))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-tracking-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-tracking-configuration-"))
   (predefined-metric-specification common-lisp:nil :type
    (common-lisp:or predefined-metric-specification common-lisp:null))
   (customized-metric-specification common-lisp:nil :type
    (common-lisp:or customized-metric-specification common-lisp:null))
   (target-value (common-lisp:error ":target-value is required") :type
    (common-lisp:or metric-scale common-lisp:null))
   (disable-scale-in common-lisp:nil :type
    (common-lisp:or disable-scale-in common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-tracking-configuration
                    'make-target-tracking-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-scale-in))
      (common-lisp:list
       (common-lisp:cons "DisableScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-tracking-metric-data-queries ()
   '(trivial-types:proper-list target-tracking-metric-data-query))
 (common-lisp:defun |make-target-tracking-metric-data-queries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-tracking-metric-data-query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-tracking-metric-data-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-tracking-metric-data-query-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or xml-string-max-len2047 common-lisp:null))
   (metric-stat common-lisp:nil :type
    (common-lisp:or target-tracking-metric-stat common-lisp:null))
   (label common-lisp:nil :type
    (common-lisp:or xml-string-metric-label common-lisp:null))
   (return-data common-lisp:nil :type
    (common-lisp:or return-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-tracking-metric-data-query
                    'make-target-tracking-metric-data-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-stat))
      (common-lisp:list
       (common-lisp:cons "MetricStat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-data))
      (common-lisp:list
       (common-lisp:cons "ReturnData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-data-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (target-tracking-metric-stat (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-tracking-metric-stat-"))
   (metric (common-lisp:error ":metric is required") :type
    (common-lisp:or metric common-lisp:null))
   (stat (common-lisp:error ":stat is required") :type
    (common-lisp:or xml-string-metric-stat common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or metric-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-tracking-metric-stat
                    'make-target-tracking-metric-stat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stat))
      (common-lisp:list
       (common-lisp:cons "Stat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-metric-stat))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-instance-in-auto-scaling-group-type (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-terminate-instance-in-auto-scaling-group-type-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or xml-string-max-len19 common-lisp:null))
   (should-decrement-desired-capacity
    (common-lisp:error ":should-decrement-desired-capacity is required") :type
    (common-lisp:or should-decrement-desired-capacity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-instance-in-auto-scaling-group-type
                    'make-terminate-instance-in-auto-scaling-group-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instance-in-auto-scaling-group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instance-in-auto-scaling-group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'should-decrement-desired-capacity))
      (common-lisp:list
       (common-lisp:cons "ShouldDecrementDesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instance-in-auto-scaling-group-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype termination-policies ()
   '(trivial-types:proper-list xml-string-max-len1600))
 (common-lisp:defun |make-termination-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len1600))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (total-local-storage-gbrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-total-local-storage-gbrequest-"))
   (min common-lisp:nil :type
    (common-lisp:or nullable-positive-double common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'total-local-storage-gbrequest
                    'make-total-local-storage-gbrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          total-local-storage-gbrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          total-local-storage-gbrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          total-local-storage-gbrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-source-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-source-identifier-"))
   (identifier common-lisp:nil :type
    (common-lisp:or xml-string-max-len511 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-source-identifier
                    'make-traffic-source-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-source-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-source-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-source-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-source-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-source-state-"))
   (traffic-source common-lisp:nil :type
    (common-lisp:or xml-string-max-len511 common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-source-state 'make-traffic-source-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input traffic-source-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input traffic-source-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-source))
      (common-lisp:list
       (common-lisp:cons "TrafficSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input traffic-source-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype traffic-source-states ()
   '(trivial-types:proper-list traffic-source-state))
 (common-lisp:defun |make-traffic-source-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list traffic-source-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype traffic-sources ()
   '(trivial-types:proper-list traffic-source-identifier))
 (common-lisp:defun |make-traffic-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            traffic-source-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-auto-scaling-group-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-auto-scaling-group-type-"))
   (auto-scaling-group-name
    (common-lisp:error ":auto-scaling-group-name is required") :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-configuration-name common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (mixed-instances-policy common-lisp:nil :type
    (common-lisp:or mixed-instances-policy common-lisp:null))
   (min-size common-lisp:nil :type
    (common-lisp:or auto-scaling-group-min-size common-lisp:null))
   (max-size common-lisp:nil :type
    (common-lisp:or auto-scaling-group-max-size common-lisp:null))
   (desired-capacity common-lisp:nil :type
    (common-lisp:or auto-scaling-group-desired-capacity common-lisp:null))
   (default-cooldown common-lisp:nil :type
    (common-lisp:or cooldown common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (health-check-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len32 common-lisp:null))
   (health-check-grace-period common-lisp:nil :type
    (common-lisp:or health-check-grace-period common-lisp:null))
   (placement-group common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (vpczone-identifier common-lisp:nil :type
    (common-lisp:or xml-string-max-len2047 common-lisp:null))
   (termination-policies common-lisp:nil :type
    (common-lisp:or termination-policies common-lisp:null))
   (new-instances-protected-from-scale-in common-lisp:nil :type
    (common-lisp:or instance-protected common-lisp:null))
   (service-linked-role-arn common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (max-instance-lifetime common-lisp:nil :type
    (common-lisp:or max-instance-lifetime common-lisp:null))
   (capacity-rebalance common-lisp:nil :type
    (common-lisp:or capacity-rebalance-enabled common-lisp:null))
   (context common-lisp:nil :type (common-lisp:or context common-lisp:null))
   (desired-capacity-type common-lisp:nil :type
    (common-lisp:or xml-string-max-len255 common-lisp:null))
   (default-instance-warmup common-lisp:nil :type
    (common-lisp:or default-instance-warmup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-auto-scaling-group-type
                    'make-update-auto-scaling-group-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-auto-scaling-group-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-auto-scaling-group-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-capacity))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-cooldown))
      (common-lisp:list
       (common-lisp:cons "DefaultCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-type))
      (common-lisp:list
       (common-lisp:cons "HealthCheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-group))
      (common-lisp:list
       (common-lisp:cons "PlacementGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpczone-identifier))
      (common-lisp:list
       (common-lisp:cons "VPCZoneIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-policies))
      (common-lisp:list
       (common-lisp:cons "TerminationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-instances-protected-from-scale-in))
      (common-lisp:list
       (common-lisp:cons "NewInstancesProtectedFromScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-linked-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceLinkedRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-instance-lifetime))
      (common-lisp:list
       (common-lisp:cons "MaxInstanceLifetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-rebalance))
      (common-lisp:list
       (common-lisp:cons "CapacityRebalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-capacity-type))
      (common-lisp:list
       (common-lisp:cons "DesiredCapacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-auto-scaling-group-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vcpu-count-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-vcpu-count-request-"))
   (min (common-lisp:error ":min is required") :type
    (common-lisp:or nullable-positive-integer common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or nullable-positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vcpu-count-request 'make-vcpu-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vcpu-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vcpu-count-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vcpu-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list xml-string))
 (common-lisp:defun |make-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (warm-pool-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-warm-pool-configuration-"))
   (max-group-prepared-capacity common-lisp:nil :type
    (common-lisp:or max-group-prepared-capacity common-lisp:null))
   (min-size common-lisp:nil :type
    (common-lisp:or warm-pool-min-size common-lisp:null))
   (pool-state common-lisp:nil :type
    (common-lisp:or warm-pool-state common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or warm-pool-status common-lisp:null))
   (instance-reuse-policy common-lisp:nil :type
    (common-lisp:or instance-reuse-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'warm-pool-configuration 'make-warm-pool-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          warm-pool-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          warm-pool-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-group-prepared-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxGroupPreparedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-state))
      (common-lisp:list
       (common-lisp:cons "PoolState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-reuse-policy))
      (common-lisp:list
       (common-lisp:cons "InstanceReusePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          warm-pool-configuration))
   common-lisp:nil))
(common-lisp:deftype warm-pool-min-size () 'common-lisp:integer)
(common-lisp:deftype warm-pool-size () 'common-lisp:integer)
(common-lisp:deftype warm-pool-state () 'common-lisp:string)
(common-lisp:deftype warm-pool-status () 'common-lisp:string)
(common-lisp:deftype xml-string () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len1023 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len1600 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len19 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len2047 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len255 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len32 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len511 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len64 () 'common-lisp:string)
(common-lisp:deftype xml-string-metric-label () 'common-lisp:string)
(common-lisp:deftype xml-string-metric-stat () 'common-lisp:string)
(common-lisp:deftype xml-string-user-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun attach-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-instances-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachInstances"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-instances))
(common-lisp:progn
 (common-lisp:defun attach-load-balancer-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     target-group-arns)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name target-group-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-load-balancer-target-groups-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachLoadBalancerTargetGroups"
                                                        "2011-01-01"))
      common-lisp:nil "AttachLoadBalancerTargetGroupsResult" *error-map*)))
 (common-lisp:export 'attach-load-balancer-target-groups))
(common-lisp:progn
 (common-lisp:defun attach-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     load-balancer-names)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name load-balancer-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-load-balancers-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachLoadBalancers"
                                                        "2011-01-01"))
      common-lisp:nil "AttachLoadBalancersResult" *error-map*)))
 (common-lisp:export 'attach-load-balancers))
(common-lisp:progn
 (common-lisp:defun attach-traffic-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name traffic-sources)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name traffic-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-traffic-sources-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachTrafficSources"
                                                        "2011-01-01"))
      common-lisp:nil "AttachTrafficSourcesResult" *error-map*)))
 (common-lisp:export 'attach-traffic-sources))
(common-lisp:progn
 (common-lisp:defun batch-delete-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-action-names)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scheduled-action-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-scheduled-action-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteScheduledAction"
                                                        "2011-01-01"))
      common-lisp:nil "BatchDeleteScheduledActionResult" *error-map*)))
 (common-lisp:export 'batch-delete-scheduled-action))
(common-lisp:progn
 (common-lisp:defun batch-put-scheduled-update-group-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-update-group-actions)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name
     scheduled-update-group-actions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-put-scheduled-update-group-action-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchPutScheduledUpdateGroupAction"
                                                        "2011-01-01"))
      common-lisp:nil "BatchPutScheduledUpdateGroupActionResult" *error-map*)))
 (common-lisp:export 'batch-put-scheduled-update-group-action))
(common-lisp:progn
 (common-lisp:defun cancel-instance-refresh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name)
   (common-lisp:declare (common-lisp:ignorable auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-instance-refresh-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelInstanceRefresh"
                                                        "2011-01-01"))
      common-lisp:nil "CancelInstanceRefreshResult" *error-map*)))
 (common-lisp:export 'cancel-instance-refresh))
(common-lisp:progn
 (common-lisp:defun complete-lifecycle-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lifecycle-hook-name
                     auto-scaling-group-name lifecycle-action-token
                     lifecycle-action-result instance-id)
   (common-lisp:declare
    (common-lisp:ignorable lifecycle-hook-name auto-scaling-group-name
     lifecycle-action-token lifecycle-action-result instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-complete-lifecycle-action-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CompleteLifecycleAction"
                                                        "2011-01-01"))
      common-lisp:nil "CompleteLifecycleActionResult" *error-map*)))
 (common-lisp:export 'complete-lifecycle-action))
(common-lisp:progn
 (common-lisp:defun create-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     launch-configuration-name launch-template
                     mixed-instances-policy instance-id min-size max-size
                     desired-capacity default-cooldown availability-zones
                     load-balancer-names target-group-arns health-check-type
                     health-check-grace-period placement-group
                     vpczone-identifier termination-policies
                     new-instances-protected-from-scale-in capacity-rebalance
                     lifecycle-hook-specification-list tags
                     service-linked-role-arn max-instance-lifetime context
                     desired-capacity-type default-instance-warmup
                     traffic-sources)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name launch-configuration-name
     launch-template mixed-instances-policy instance-id min-size max-size
     desired-capacity default-cooldown availability-zones load-balancer-names
     target-group-arns health-check-type health-check-grace-period
     placement-group vpczone-identifier termination-policies
     new-instances-protected-from-scale-in capacity-rebalance
     lifecycle-hook-specification-list tags service-linked-role-arn
     max-instance-lifetime context desired-capacity-type
     default-instance-warmup traffic-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-auto-scaling-group-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAutoScalingGroup"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-auto-scaling-group))
(common-lisp:progn
 (common-lisp:defun create-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-name image-id
                     key-name security-groups classic-link-vpcid
                     classic-link-vpcsecurity-groups user-data instance-id
                     instance-type kernel-id ramdisk-id block-device-mappings
                     instance-monitoring spot-price iam-instance-profile
                     ebs-optimized associate-public-ip-address
                     placement-tenancy metadata-options)
   (common-lisp:declare
    (common-lisp:ignorable launch-configuration-name image-id key-name
     security-groups classic-link-vpcid classic-link-vpcsecurity-groups
     user-data instance-id instance-type kernel-id ramdisk-id
     block-device-mappings instance-monitoring spot-price iam-instance-profile
     ebs-optimized associate-public-ip-address placement-tenancy
     metadata-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-launch-configuration-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLaunchConfiguration"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-launch-configuration))
(common-lisp:progn
 (common-lisp:defun create-or-update-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-or-update-tags-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateOrUpdateTags"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-or-update-tags))
(common-lisp:progn
 (common-lisp:defun delete-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name force-delete)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-auto-scaling-group-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAutoScalingGroup"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-auto-scaling-group))
(common-lisp:progn
 (common-lisp:defun delete-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-name)
   (common-lisp:declare (common-lisp:ignorable launch-configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-launch-configuration-name-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLaunchConfiguration"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch-configuration))
(common-lisp:progn
 (common-lisp:defun delete-lifecycle-hook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lifecycle-hook-name
                     auto-scaling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable lifecycle-hook-name auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lifecycle-hook-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLifecycleHook"
                                                        "2011-01-01"))
      common-lisp:nil "DeleteLifecycleHookResult" *error-map*)))
 (common-lisp:export 'delete-lifecycle-hook))
(common-lisp:progn
 (common-lisp:defun delete-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name topic-arn)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name topic-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-notification-configuration-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNotificationConfiguration"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-notification-configuration))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-name)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePolicy"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-action-name)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scheduled-action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scheduled-action-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteScheduledAction"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-scheduled-action))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteTags"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun delete-warm-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name force-delete)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-warm-pool-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWarmPool"
                                                        "2011-01-01"))
      common-lisp:nil "DeleteWarmPoolResult" *error-map*)))
 (common-lisp:export 'delete-warm-pool))
(common-lisp:progn
 (common-lisp:defun describe-account-limits ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeAccountLimits")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeAccountLimitsResult" *error-map*))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-adjustment-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeAdjustmentTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeAdjustmentTypesResult" *error-map*))
 (common-lisp:export 'describe-adjustment-types))
(common-lisp:progn
 (common-lisp:defun describe-auto-scaling-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-names next-token
                     max-records filters)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-names next-token max-records
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-auto-scaling-group-names-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAutoScalingGroups"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeAutoScalingGroupsResult" *error-map*)))
 (common-lisp:export 'describe-auto-scaling-groups))
(common-lisp:progn
 (common-lisp:defun describe-auto-scaling-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids max-records next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-auto-scaling-instances-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAutoScalingInstances"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeAutoScalingInstancesResult" *error-map*)))
 (common-lisp:export 'describe-auto-scaling-instances))
(common-lisp:progn
 (common-lisp:defun describe-auto-scaling-notification-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :params
                                `(("Action"
                                   ,@"DescribeAutoScalingNotificationTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeAutoScalingNotificationTypesResult" *error-map*))
 (common-lisp:export 'describe-auto-scaling-notification-types))
(common-lisp:progn
 (common-lisp:defun describe-instance-refreshes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     instance-refresh-ids next-token max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name instance-refresh-ids
     next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-instance-refreshes-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInstanceRefreshes"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeInstanceRefreshesResult" *error-map*)))
 (common-lisp:export 'describe-instance-refreshes))
(common-lisp:progn
 (common-lisp:defun describe-launch-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-names next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable launch-configuration-names next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-launch-configuration-names-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLaunchConfigurations"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeLaunchConfigurationsResult" *error-map*)))
 (common-lisp:export 'describe-launch-configurations))
(common-lisp:progn
 (common-lisp:defun describe-lifecycle-hook-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeLifecycleHookTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeLifecycleHookTypesResult" *error-map*))
 (common-lisp:export 'describe-lifecycle-hook-types))
(common-lisp:progn
 (common-lisp:defun describe-lifecycle-hooks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     lifecycle-hook-names)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name lifecycle-hook-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-lifecycle-hooks-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLifecycleHooks"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeLifecycleHooksResult" *error-map*)))
 (common-lisp:export 'describe-lifecycle-hooks))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-target-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLoadBalancerTargetGroups"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeLoadBalancerTargetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-target-groups))
(common-lisp:progn
 (common-lisp:defun describe-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-load-balancers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLoadBalancers"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeLoadBalancersResult" *error-map*)))
 (common-lisp:export 'describe-load-balancers))
(common-lisp:progn
 (common-lisp:defun describe-metric-collection-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeMetricCollectionTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeMetricCollectionTypesResult" *error-map*))
 (common-lisp:export 'describe-metric-collection-types))
(common-lisp:progn
 (common-lisp:defun describe-notification-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-names next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-names next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-notification-configurations-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNotificationConfigurations"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeNotificationConfigurationsResult" *error-map*)))
 (common-lisp:export 'describe-notification-configurations))
(common-lisp:progn
 (common-lisp:defun describe-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-names
                     policy-types next-token max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-names policy-types
     next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-policies-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePolicies"
                                                        "2011-01-01"))
      common-lisp:nil "DescribePoliciesResult" *error-map*)))
 (common-lisp:export 'describe-policies))
(common-lisp:progn
 (common-lisp:defun describe-scaling-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activity-ids auto-scaling-group-name
                     include-deleted-groups max-records next-token)
   (common-lisp:declare
    (common-lisp:ignorable activity-ids auto-scaling-group-name
     include-deleted-groups max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scaling-activities-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeScalingActivities"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeScalingActivitiesResult" *error-map*)))
 (common-lisp:export 'describe-scaling-activities))
(common-lisp:progn
 (common-lisp:defun describe-scaling-process-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeScalingProcessTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeScalingProcessTypesResult" *error-map*))
 (common-lisp:export 'describe-scaling-process-types))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-action-names start-time end-time next-token
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scheduled-action-names
     start-time end-time next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scheduled-actions-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeScheduledActions"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeScheduledActionsResult" *error-map*)))
 (common-lisp:export 'describe-scheduled-actions))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-records)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTags"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeTagsResult" *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-termination-policy-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'autoscaling-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeTerminationPolicyTypes")
                                  ("Version" ,@"2011-01-01"))))
    common-lisp:nil "DescribeTerminationPolicyTypesResult" *error-map*))
 (common-lisp:export 'describe-termination-policy-types))
(common-lisp:progn
 (common-lisp:defun describe-traffic-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     traffic-source-type next-token max-records)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name traffic-source-type
     next-token max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-traffic-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTrafficSources"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeTrafficSourcesResult" *error-map*)))
 (common-lisp:export 'describe-traffic-sources))
(common-lisp:progn
 (common-lisp:defun describe-warm-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name max-records
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-warm-pool-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWarmPool"
                                                        "2011-01-01"))
      common-lisp:nil "DescribeWarmPoolResult" *error-map*)))
 (common-lisp:export 'describe-warm-pool))
(common-lisp:progn
 (common-lisp:defun detach-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name
                     should-decrement-desired-capacity)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name
     should-decrement-desired-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-instances-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachInstances"
                                                        "2011-01-01"))
      common-lisp:nil "DetachInstancesResult" *error-map*)))
 (common-lisp:export 'detach-instances))
(common-lisp:progn
 (common-lisp:defun detach-load-balancer-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     target-group-arns)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name target-group-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-load-balancer-target-groups-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachLoadBalancerTargetGroups"
                                                        "2011-01-01"))
      common-lisp:nil "DetachLoadBalancerTargetGroupsResult" *error-map*)))
 (common-lisp:export 'detach-load-balancer-target-groups))
(common-lisp:progn
 (common-lisp:defun detach-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     load-balancer-names)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name load-balancer-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-load-balancers-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachLoadBalancers"
                                                        "2011-01-01"))
      common-lisp:nil "DetachLoadBalancersResult" *error-map*)))
 (common-lisp:export 'detach-load-balancers))
(common-lisp:progn
 (common-lisp:defun detach-traffic-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name traffic-sources)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name traffic-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-traffic-sources-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachTrafficSources"
                                                        "2011-01-01"))
      common-lisp:nil "DetachTrafficSourcesResult" *error-map*)))
 (common-lisp:export 'detach-traffic-sources))
(common-lisp:progn
 (common-lisp:defun disable-metrics-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name metrics)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name metrics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-metrics-collection-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableMetricsCollection"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-metrics-collection))
(common-lisp:progn
 (common-lisp:defun enable-metrics-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name metrics
                     granularity)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name metrics granularity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-metrics-collection-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableMetricsCollection"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-metrics-collection))
(common-lisp:progn
 (common-lisp:defun enter-standby
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name
                     should-decrement-desired-capacity)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name
     should-decrement-desired-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enter-standby-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnterStandby"
                                                        "2011-01-01"))
      common-lisp:nil "EnterStandbyResult" *error-map*)))
 (common-lisp:export 'enter-standby))
(common-lisp:progn
 (common-lisp:defun execute-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-name
                     honor-cooldown metric-value breach-threshold)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-name honor-cooldown
     metric-value breach-threshold))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-policy-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExecutePolicy"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-policy))
(common-lisp:progn
 (common-lisp:defun exit-standby
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-exit-standby-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExitStandby"
                                                        "2011-01-01"))
      common-lisp:nil "ExitStandbyResult" *error-map*)))
 (common-lisp:export 'exit-standby))
(common-lisp:progn
 (common-lisp:defun get-predictive-scaling-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-name
                     start-time end-time)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-name start-time
     end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-predictive-scaling-forecast-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPredictiveScalingForecast"
                                                        "2011-01-01"))
      common-lisp:nil "GetPredictiveScalingForecastResult" *error-map*)))
 (common-lisp:export 'get-predictive-scaling-forecast))
(common-lisp:progn
 (common-lisp:defun put-lifecycle-hook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lifecycle-hook-name
                     auto-scaling-group-name lifecycle-transition role-arn
                     notification-target-arn notification-metadata
                     heartbeat-timeout default-result)
   (common-lisp:declare
    (common-lisp:ignorable lifecycle-hook-name auto-scaling-group-name
     lifecycle-transition role-arn notification-target-arn
     notification-metadata heartbeat-timeout default-result))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-lifecycle-hook-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutLifecycleHook"
                                                        "2011-01-01"))
      common-lisp:nil "PutLifecycleHookResult" *error-map*)))
 (common-lisp:export 'put-lifecycle-hook))
(common-lisp:progn
 (common-lisp:defun put-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name topic-arn
                     notification-types)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name topic-arn
     notification-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-notification-configuration-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutNotificationConfiguration"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-notification-configuration))
(common-lisp:progn
 (common-lisp:defun put-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name policy-name
                     policy-type adjustment-type min-adjustment-step
                     min-adjustment-magnitude scaling-adjustment cooldown
                     metric-aggregation-type step-adjustments
                     estimated-instance-warmup target-tracking-configuration
                     enabled predictive-scaling-configuration)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name policy-name policy-type
     adjustment-type min-adjustment-step min-adjustment-magnitude
     scaling-adjustment cooldown metric-aggregation-type step-adjustments
     estimated-instance-warmup target-tracking-configuration enabled
     predictive-scaling-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-scaling-policy-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutScalingPolicy"
                                                        "2011-01-01"))
      common-lisp:nil "PutScalingPolicyResult" *error-map*)))
 (common-lisp:export 'put-scaling-policy))
(common-lisp:progn
 (common-lisp:defun put-scheduled-update-group-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scheduled-action-name time start-time end-time recurrence
                     min-size max-size desired-capacity time-zone)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scheduled-action-name time
     start-time end-time recurrence min-size max-size desired-capacity
     time-zone))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-scheduled-update-group-action-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutScheduledUpdateGroupAction"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-scheduled-update-group-action))
(common-lisp:progn
 (common-lisp:defun put-warm-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     max-group-prepared-capacity min-size pool-state
                     instance-reuse-policy)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name max-group-prepared-capacity
     min-size pool-state instance-reuse-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-warm-pool-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutWarmPool"
                                                        "2011-01-01"))
      common-lisp:nil "PutWarmPoolResult" *error-map*)))
 (common-lisp:export 'put-warm-pool))
(common-lisp:progn
 (common-lisp:defun record-lifecycle-action-heartbeat
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lifecycle-hook-name
                     auto-scaling-group-name lifecycle-action-token
                     instance-id)
   (common-lisp:declare
    (common-lisp:ignorable lifecycle-hook-name auto-scaling-group-name
     lifecycle-action-token instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-record-lifecycle-action-heartbeat-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RecordLifecycleActionHeartbeat"
                                                        "2011-01-01"))
      common-lisp:nil "RecordLifecycleActionHeartbeatResult" *error-map*)))
 (common-lisp:export 'record-lifecycle-action-heartbeat))
(common-lisp:progn
 (common-lisp:defun resume-processes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scaling-processes)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scaling-processes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-scaling-process-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResumeProcesses"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resume-processes))
(common-lisp:progn
 (common-lisp:defun rollback-instance-refresh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name)
   (common-lisp:declare (common-lisp:ignorable auto-scaling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rollback-instance-refresh-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RollbackInstanceRefresh"
                                                        "2011-01-01"))
      common-lisp:nil "RollbackInstanceRefreshResult" *error-map*)))
 (common-lisp:export 'rollback-instance-refresh))
(common-lisp:progn
 (common-lisp:defun set-desired-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name desired-capacity
                     honor-cooldown)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name desired-capacity
     honor-cooldown))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-desired-capacity-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetDesiredCapacity"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-desired-capacity))
(common-lisp:progn
 (common-lisp:defun set-instance-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id health-status
                     should-respect-grace-period)
   (common-lisp:declare
    (common-lisp:ignorable instance-id health-status
     should-respect-grace-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-instance-health-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetInstanceHealth"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-instance-health))
(common-lisp:progn
 (common-lisp:defun set-instance-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids auto-scaling-group-name
                     protected-from-scale-in)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids auto-scaling-group-name
     protected-from-scale-in))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-instance-protection-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetInstanceProtection"
                                                        "2011-01-01"))
      common-lisp:nil "SetInstanceProtectionResult" *error-map*)))
 (common-lisp:export 'set-instance-protection))
(common-lisp:progn
 (common-lisp:defun start-instance-refresh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name strategy
                     desired-configuration preferences)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name strategy
     desired-configuration preferences))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-instance-refresh-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartInstanceRefresh"
                                                        "2011-01-01"))
      common-lisp:nil "StartInstanceRefreshResult" *error-map*)))
 (common-lisp:export 'start-instance-refresh))
(common-lisp:progn
 (common-lisp:defun suspend-processes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     scaling-processes)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name scaling-processes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-scaling-process-query
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SuspendProcesses"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'suspend-processes))
(common-lisp:progn
 (common-lisp:defun terminate-instance-in-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id
                     should-decrement-desired-capacity)
   (common-lisp:declare
    (common-lisp:ignorable instance-id should-decrement-desired-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-terminate-instance-in-auto-scaling-group-type
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TerminateInstanceInAutoScalingGroup"
                                                        "2011-01-01"))
      common-lisp:nil "TerminateInstanceInAutoScalingGroupResult"
      *error-map*)))
 (common-lisp:export 'terminate-instance-in-auto-scaling-group))
(common-lisp:progn
 (common-lisp:defun update-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-group-name
                     launch-configuration-name launch-template
                     mixed-instances-policy min-size max-size desired-capacity
                     default-cooldown availability-zones health-check-type
                     health-check-grace-period placement-group
                     vpczone-identifier termination-policies
                     new-instances-protected-from-scale-in
                     service-linked-role-arn max-instance-lifetime
                     capacity-rebalance context desired-capacity-type
                     default-instance-warmup)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-group-name launch-configuration-name
     launch-template mixed-instances-policy min-size max-size desired-capacity
     default-cooldown availability-zones health-check-type
     health-check-grace-period placement-group vpczone-identifier
     termination-policies new-instances-protected-from-scale-in
     service-linked-role-arn max-instance-lifetime capacity-rebalance context
     desired-capacity-type default-instance-warmup))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-auto-scaling-group-type
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'autoscaling-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAutoScalingGroup"
                                                        "2011-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-auto-scaling-group))
