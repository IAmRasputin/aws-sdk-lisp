;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/sts/api
  (:use)
  (:nicknames #:aws/sts)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/sts/api)
(common-lisp:progn
 (common-lisp:defclass sts-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "sts" :protocol :query))
 (common-lisp:export 'sts-request))
(common-lisp:progn
 (common-lisp:define-condition sts-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'sts-error))
(common-lisp:defvar *error-map*
  '(("ExpiredTokenException" . expired-token-exception)
    ("IDPCommunicationErrorException" . idpcommunication-error-exception)
    ("IDPRejectedClaimException" . idprejected-claim-exception)
    ("InvalidAuthorizationMessageException"
     . invalid-authorization-message-exception)
    ("InvalidIdentityTokenException" . invalid-identity-token-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("PackedPolicyTooLargeException" . packed-policy-too-large-exception)
    ("RegionDisabledException" . region-disabled-exception)))
(common-lisp:progn
 (common-lisp:defclass assume-role-request common-lisp:nil
                       ((source-identity :initarg :source-identity :type
                         (common-lisp:or |sourceIdentityType| common-lisp:null)
                         :accessor %assume-role-request-source-identity
                         :initform common-lisp:nil)
                        (token-code :initarg :token-code :type
                         (common-lisp:or |tokenCodeType| common-lisp:null)
                         :accessor %assume-role-request-token-code :initform
                         common-lisp:nil)
                        (serial-number :initarg :serial-number :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor %assume-role-request-serial-number :initform
                         common-lisp:nil)
                        (external-id :initarg :external-id :type
                         (common-lisp:or |externalIdType| common-lisp:null)
                         :accessor %assume-role-request-external-id :initform
                         common-lisp:nil)
                        (transitive-tag-keys :initarg :transitive-tag-keys
                         :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor %assume-role-request-transitive-tag-keys
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor %assume-role-request-tags :initform
                         common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or |roleDurationSecondsType|
                                         common-lisp:null)
                         :accessor %assume-role-request-duration-seconds
                         :initform common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or |sessionPolicyDocumentType|
                                         common-lisp:null)
                         :accessor %assume-role-request-policy :initform
                         common-lisp:nil)
                        (policy-arns :initarg :policy-arns :type
                         (common-lisp:or |policyDescriptorListType|
                                         common-lisp:null)
                         :accessor %assume-role-request-policy-arns :initform
                         common-lisp:nil)
                        (role-session-name :initarg :role-session-name :type
                         (common-lisp:or |roleSessionNameType|
                                         common-lisp:null)
                         :accessor %assume-role-request-role-session-name
                         :initform
                         (common-lisp:error ":role-session-name is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         %assume-role-request-role-arn :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'assume-role-request 'make-assume-role-request))
 (common-lisp:defun make-assume-role-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-identity token-code serial-number
                     external-id transitive-tag-keys tags duration-seconds
                     policy policy-arns role-session-name role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'assume-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assume-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assume-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-session-name))
      (common-lisp:list
       (common-lisp:cons "RoleSessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arns))
      (common-lisp:list
       (common-lisp:cons "PolicyArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitive-tag-keys))
      (common-lisp:list
       (common-lisp:cons "TransitiveTagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-code))
      (common-lisp:list
       (common-lisp:cons "TokenCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assume-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assume-role-response common-lisp:nil
                       ((source-identity :initarg :source-identity :type
                         (common-lisp:or |sourceIdentityType| common-lisp:null)
                         :accessor %assume-role-response-source-identity
                         :initform common-lisp:nil)
                        (packed-policy-size :initarg :packed-policy-size :type
                         (common-lisp:or |nonNegativeIntegerType|
                                         common-lisp:null)
                         :accessor %assume-role-response-packed-policy-size
                         :initform common-lisp:nil)
                        (assumed-role-user :initarg :assumed-role-user :type
                         (common-lisp:or assumed-role-user common-lisp:null)
                         :accessor %assume-role-response-assumed-role-user
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or credentials common-lisp:null)
                         :accessor %assume-role-response-credentials :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'assume-role-response 'make-assume-role-response))
 (common-lisp:defun make-assume-role-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-identity packed-policy-size
                     assumed-role-user credentials)
   (common-lisp:apply #'common-lisp:make-instance 'assume-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assume-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assume-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-user))
      (common-lisp:list
       (common-lisp:cons "AssumedRoleUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packed-policy-size))
      (common-lisp:list
       (common-lisp:cons "PackedPolicySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assume-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assume-role-with-samlrequest common-lisp:nil
                       ((duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or |roleDurationSecondsType|
                                         common-lisp:null)
                         :accessor
                         %assume-role-with-samlrequest-duration-seconds
                         :initform common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or |sessionPolicyDocumentType|
                                         common-lisp:null)
                         :accessor %assume-role-with-samlrequest-policy
                         :initform common-lisp:nil)
                        (policy-arns :initarg :policy-arns :type
                         (common-lisp:or |policyDescriptorListType|
                                         common-lisp:null)
                         :accessor %assume-role-with-samlrequest-policy-arns
                         :initform common-lisp:nil)
                        (samlassertion :initarg :samlassertion :type
                         (common-lisp:or samlassertion-type common-lisp:null)
                         :accessor %assume-role-with-samlrequest-samlassertion
                         :initform
                         (common-lisp:error ":samlassertion is required"))
                        (principal-arn :initarg :principal-arn :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         %assume-role-with-samlrequest-principal-arn :initform
                         (common-lisp:error ":principal-arn is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         %assume-role-with-samlrequest-role-arn :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'assume-role-with-samlrequest
                    'make-assume-role-with-samlrequest))
 (common-lisp:defun make-assume-role-with-samlrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key duration-seconds policy policy-arns
                     samlassertion principal-arn role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'assume-role-with-samlrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlassertion))
      (common-lisp:list
       (common-lisp:cons "SAMLAssertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arns))
      (common-lisp:list
       (common-lisp:cons "PolicyArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assume-role-with-samlresponse common-lisp:nil
                       ((source-identity :initarg :source-identity :type
                         (common-lisp:or |sourceIdentityType| common-lisp:null)
                         :accessor
                         %assume-role-with-samlresponse-source-identity
                         :initform common-lisp:nil)
                        (name-qualifier :initarg :name-qualifier :type
                         (common-lisp:or name-qualifier common-lisp:null)
                         :accessor
                         %assume-role-with-samlresponse-name-qualifier
                         :initform common-lisp:nil)
                        (audience :initarg :audience :type
                         (common-lisp:or audience common-lisp:null) :accessor
                         %assume-role-with-samlresponse-audience :initform
                         common-lisp:nil)
                        (issuer :initarg :issuer :type
                         (common-lisp:or issuer common-lisp:null) :accessor
                         %assume-role-with-samlresponse-issuer :initform
                         common-lisp:nil)
                        (subject-type :initarg :subject-type :type
                         (common-lisp:or subject-type common-lisp:null)
                         :accessor %assume-role-with-samlresponse-subject-type
                         :initform common-lisp:nil)
                        (subject :initarg :subject :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         %assume-role-with-samlresponse-subject :initform
                         common-lisp:nil)
                        (packed-policy-size :initarg :packed-policy-size :type
                         (common-lisp:or |nonNegativeIntegerType|
                                         common-lisp:null)
                         :accessor
                         %assume-role-with-samlresponse-packed-policy-size
                         :initform common-lisp:nil)
                        (assumed-role-user :initarg :assumed-role-user :type
                         (common-lisp:or assumed-role-user common-lisp:null)
                         :accessor
                         %assume-role-with-samlresponse-assumed-role-user
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or credentials common-lisp:null)
                         :accessor %assume-role-with-samlresponse-credentials
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'assume-role-with-samlresponse
                    'make-assume-role-with-samlresponse))
 (common-lisp:defun make-assume-role-with-samlresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-identity name-qualifier audience
                     issuer subject-type subject packed-policy-size
                     assumed-role-user credentials)
   (common-lisp:apply #'common-lisp:make-instance
                      'assume-role-with-samlresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-user))
      (common-lisp:list
       (common-lisp:cons "AssumedRoleUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packed-policy-size))
      (common-lisp:list
       (common-lisp:cons "PackedPolicySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-type))
      (common-lisp:list
       (common-lisp:cons "SubjectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audience))
      (common-lisp:list
       (common-lisp:cons "Audience"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-qualifier))
      (common-lisp:list
       (common-lisp:cons "NameQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assume-role-with-web-identity-request common-lisp:nil
                       ((duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or |roleDurationSecondsType|
                                         common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-request-duration-seconds
                         :initform common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or |sessionPolicyDocumentType|
                                         common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-request-policy
                         :initform common-lisp:nil)
                        (policy-arns :initarg :policy-arns :type
                         (common-lisp:or |policyDescriptorListType|
                                         common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-request-policy-arns
                         :initform common-lisp:nil)
                        (provider-id :initarg :provider-id :type
                         (common-lisp:or |urlType| common-lisp:null) :accessor
                         %assume-role-with-web-identity-request-provider-id
                         :initform common-lisp:nil)
                        (web-identity-token :initarg :web-identity-token :type
                         (common-lisp:or |clientTokenType| common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-request-web-identity-token
                         :initform
                         (common-lisp:error ":web-identity-token is required"))
                        (role-session-name :initarg :role-session-name :type
                         (common-lisp:or |roleSessionNameType|
                                         common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-request-role-session-name
                         :initform
                         (common-lisp:error ":role-session-name is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         %assume-role-with-web-identity-request-role-arn
                         :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'assume-role-with-web-identity-request
                    'make-assume-role-with-web-identity-request))
 (common-lisp:defun make-assume-role-with-web-identity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key duration-seconds policy policy-arns
                     provider-id web-identity-token role-session-name role-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'assume-role-with-web-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-session-name))
      (common-lisp:list
       (common-lisp:cons "RoleSessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-identity-token))
      (common-lisp:list
       (common-lisp:cons "WebIdentityToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-id))
      (common-lisp:list
       (common-lisp:cons "ProviderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arns))
      (common-lisp:list
       (common-lisp:cons "PolicyArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assume-role-with-web-identity-response common-lisp:nil
                       ((source-identity :initarg :source-identity :type
                         (common-lisp:or |sourceIdentityType| common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-response-source-identity
                         :initform common-lisp:nil)
                        (audience :initarg :audience :type
                         (common-lisp:or audience common-lisp:null) :accessor
                         %assume-role-with-web-identity-response-audience
                         :initform common-lisp:nil)
                        (provider :initarg :provider :type
                         (common-lisp:or issuer common-lisp:null) :accessor
                         %assume-role-with-web-identity-response-provider
                         :initform common-lisp:nil)
                        (packed-policy-size :initarg :packed-policy-size :type
                         (common-lisp:or |nonNegativeIntegerType|
                                         common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-response-packed-policy-size
                         :initform common-lisp:nil)
                        (assumed-role-user :initarg :assumed-role-user :type
                         (common-lisp:or assumed-role-user common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-response-assumed-role-user
                         :initform common-lisp:nil)
                        (subject-from-web-identity-token :initarg
                         :subject-from-web-identity-token :type
                         (common-lisp:or |webIdentitySubjectType|
                                         common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-response-subject-from-web-identity-token
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or credentials common-lisp:null)
                         :accessor
                         %assume-role-with-web-identity-response-credentials
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'assume-role-with-web-identity-response
                    'make-assume-role-with-web-identity-response))
 (common-lisp:defun make-assume-role-with-web-identity-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-identity audience provider
                     packed-policy-size assumed-role-user
                     subject-from-web-identity-token credentials)
   (common-lisp:apply #'common-lisp:make-instance
                      'assume-role-with-web-identity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-from-web-identity-token))
      (common-lisp:list
       (common-lisp:cons "SubjectFromWebIdentityToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-user))
      (common-lisp:list
       (common-lisp:cons "AssumedRoleUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packed-policy-size))
      (common-lisp:list
       (common-lisp:cons "PackedPolicySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audience))
      (common-lisp:list
       (common-lisp:cons "Audience"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assumed-role-user common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         %assumed-role-user-arn :initform
                         (common-lisp:error ":arn is required"))
                        (assumed-role-id :initarg :assumed-role-id :type
                         (common-lisp:or |assumedRoleIdType| common-lisp:null)
                         :accessor %assumed-role-user-assumed-role-id :initform
                         (common-lisp:error ":assumed-role-id is required"))))
 (common-lisp:export
  (common-lisp:list 'assumed-role-user 'make-assumed-role-user))
 (common-lisp:defun make-assumed-role-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn assumed-role-id)
   (common-lisp:apply #'common-lisp:make-instance 'assumed-role-user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assumed-role-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assumed-role-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-id))
      (common-lisp:list
       (common-lisp:cons "AssumedRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assumed-role-user))
   common-lisp:nil))
(common-lisp:deftype audience () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass credentials common-lisp:nil
                       ((expiration :initarg :expiration :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         %credentials-expiration :initform
                         (common-lisp:error ":expiration is required"))
                        (session-token :initarg :session-token :type
                         (common-lisp:or |tokenType| common-lisp:null)
                         :accessor %credentials-session-token :initform
                         (common-lisp:error ":session-token is required"))
                        (secret-access-key :initarg :secret-access-key :type
                         (common-lisp:or |accessKeySecretType|
                                         common-lisp:null)
                         :accessor %credentials-secret-access-key :initform
                         (common-lisp:error ":secret-access-key is required"))
                        (access-key-id :initarg :access-key-id :type
                         (common-lisp:or |accessKeyIdType| common-lisp:null)
                         :accessor %credentials-access-key-id :initform
                         (common-lisp:error ":access-key-id is required"))))
 (common-lisp:export (common-lisp:list 'credentials 'make-credentials))
 (common-lisp:defun make-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration session-token
                     secret-access-key access-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decode-authorization-message-request common-lisp:nil
                       ((encoded-message :initarg :encoded-message :type
                         (common-lisp:or |encodedMessageType| common-lisp:null)
                         :accessor
                         %decode-authorization-message-request-encoded-message
                         :initform
                         (common-lisp:error ":encoded-message is required"))))
 (common-lisp:export
  (common-lisp:list 'decode-authorization-message-request
                    'make-decode-authorization-message-request))
 (common-lisp:defun make-decode-authorization-message-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encoded-message)
   (common-lisp:apply #'common-lisp:make-instance
                      'decode-authorization-message-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoded-message))
      (common-lisp:list
       (common-lisp:cons "EncodedMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decode-authorization-message-response common-lisp:nil
                       ((decoded-message :initarg :decoded-message :type
                         (common-lisp:or |decodedMessageType| common-lisp:null)
                         :accessor
                         %decode-authorization-message-response-decoded-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decode-authorization-message-response
                    'make-decode-authorization-message-response))
 (common-lisp:defun make-decode-authorization-message-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key decoded-message)
   (common-lisp:apply #'common-lisp:make-instance
                      'decode-authorization-message-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decoded-message))
      (common-lisp:list
       (common-lisp:cons "DecodedMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition expired-token-exception
     (sts-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       expired-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-token-exception 'expired-token-exception-message)))
(common-lisp:progn
 (common-lisp:defclass federated-user common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         %federated-user-arn :initform
                         (common-lisp:error ":arn is required"))
                        (federated-user-id :initarg :federated-user-id :type
                         (common-lisp:or |federatedIdType| common-lisp:null)
                         :accessor %federated-user-federated-user-id :initform
                         (common-lisp:error
                          ":federated-user-id is required"))))
 (common-lisp:export (common-lisp:list 'federated-user 'make-federated-user))
 (common-lisp:defun make-federated-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn federated-user-id)
   (common-lisp:apply #'common-lisp:make-instance 'federated-user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input federated-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input federated-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-user-id))
      (common-lisp:list
       (common-lisp:cons "FederatedUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input federated-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-key-info-request common-lisp:nil
                       ((access-key-id :initarg :access-key-id :type
                         (common-lisp:or |accessKeyIdType| common-lisp:null)
                         :accessor %get-access-key-info-request-access-key-id
                         :initform
                         (common-lisp:error ":access-key-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-key-info-request
                    'make-get-access-key-info-request))
 (common-lisp:defun make-get-access-key-info-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-key-info-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-key-info-response common-lisp:nil
                       ((account :initarg :account :type
                         (common-lisp:or |accountType| common-lisp:null)
                         :accessor %get-access-key-info-response-account
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-key-info-response
                    'make-get-access-key-info-response))
 (common-lisp:defun make-get-access-key-info-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-key-info-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-caller-identity-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-caller-identity-request
                    'make-get-caller-identity-request))
 (common-lisp:defun make-get-caller-identity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-caller-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-caller-identity-response common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         %get-caller-identity-response-arn :initform
                         common-lisp:nil)
                        (account :initarg :account :type
                         (common-lisp:or |accountType| common-lisp:null)
                         :accessor %get-caller-identity-response-account
                         :initform common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or |userIdType| common-lisp:null)
                         :accessor %get-caller-identity-response-user-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-caller-identity-response
                    'make-get-caller-identity-response))
 (common-lisp:defun make-get-caller-identity-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn account user-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-caller-identity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-federation-token-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor %get-federation-token-request-tags :initform
                         common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or |durationSecondsType|
                                         common-lisp:null)
                         :accessor
                         %get-federation-token-request-duration-seconds
                         :initform common-lisp:nil)
                        (policy-arns :initarg :policy-arns :type
                         (common-lisp:or |policyDescriptorListType|
                                         common-lisp:null)
                         :accessor %get-federation-token-request-policy-arns
                         :initform common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or |sessionPolicyDocumentType|
                                         common-lisp:null)
                         :accessor %get-federation-token-request-policy
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor %get-federation-token-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-federation-token-request
                    'make-get-federation-token-request))
 (common-lisp:defun make-get-federation-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags duration-seconds policy-arns policy
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'get-federation-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arns))
      (common-lisp:list
       (common-lisp:cons "PolicyArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-federation-token-response common-lisp:nil
                       ((packed-policy-size :initarg :packed-policy-size :type
                         (common-lisp:or |nonNegativeIntegerType|
                                         common-lisp:null)
                         :accessor
                         %get-federation-token-response-packed-policy-size
                         :initform common-lisp:nil)
                        (federated-user :initarg :federated-user :type
                         (common-lisp:or federated-user common-lisp:null)
                         :accessor
                         %get-federation-token-response-federated-user
                         :initform common-lisp:nil)
                        (credentials :initarg :credentials :type
                         (common-lisp:or credentials common-lisp:null)
                         :accessor %get-federation-token-response-credentials
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-federation-token-response
                    'make-get-federation-token-response))
 (common-lisp:defun make-get-federation-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key packed-policy-size federated-user
                     credentials)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-federation-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-user))
      (common-lisp:list
       (common-lisp:cons "FederatedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packed-policy-size))
      (common-lisp:list
       (common-lisp:cons "PackedPolicySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-token-request common-lisp:nil
                       ((token-code :initarg :token-code :type
                         (common-lisp:or |tokenCodeType| common-lisp:null)
                         :accessor %get-session-token-request-token-code
                         :initform common-lisp:nil)
                        (serial-number :initarg :serial-number :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor %get-session-token-request-serial-number
                         :initform common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or |durationSecondsType|
                                         common-lisp:null)
                         :accessor %get-session-token-request-duration-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-session-token-request
                    'make-get-session-token-request))
 (common-lisp:defun make-get-session-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token-code serial-number
                     duration-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-code))
      (common-lisp:list
       (common-lisp:cons "TokenCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-token-response common-lisp:nil
                       ((credentials :initarg :credentials :type
                         (common-lisp:or credentials common-lisp:null)
                         :accessor %get-session-token-response-credentials
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-session-token-response
                    'make-get-session-token-response))
 (common-lisp:defun make-get-session-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key credentials)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition idpcommunication-error-exception
     (sts-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       idpcommunication-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idpcommunication-error-exception
                    'idpcommunication-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition idprejected-claim-exception
     (sts-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       idprejected-claim-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idprejected-claim-exception
                    'idprejected-claim-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-authorization-message-exception
     (sts-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-authorization-message-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-authorization-message-exception
                    'invalid-authorization-message-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-identity-token-exception
     (sts-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-identity-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-identity-token-exception
                    'invalid-identity-token-exception-message)))
(common-lisp:deftype issuer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (sts-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:deftype name-qualifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition packed-policy-too-large-exception
     (sts-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       packed-policy-too-large-exception-message)))
 (common-lisp:export
  (common-lisp:list 'packed-policy-too-large-exception
                    'packed-policy-too-large-exception-message)))
(common-lisp:progn
 (common-lisp:defclass policy-descriptor-type common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         %policy-descriptor-type-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-descriptor-type 'make-policy-descriptor-type))
 (common-lisp:defun make-policy-descriptor-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'policy-descriptor-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-descriptor-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-descriptor-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-descriptor-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition region-disabled-exception
     (sts-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       region-disabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'region-disabled-exception
                    'region-disabled-exception-message)))
(common-lisp:deftype samlassertion-type () 'common-lisp:string)
(common-lisp:deftype subject () 'common-lisp:string)
(common-lisp:deftype subject-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or |tagValueType| common-lisp:null)
                         :accessor %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or |tagKeyType| common-lisp:null)
                         :accessor %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype |accessKeyIdType| () 'common-lisp:string)
(common-lisp:deftype |accessKeySecretType| () 'common-lisp:string)
(common-lisp:deftype |accountType| () 'common-lisp:string)
(common-lisp:deftype |arnType| () 'common-lisp:string)
(common-lisp:deftype |assumedRoleIdType| () 'common-lisp:string)
(common-lisp:deftype |clientTokenType| () 'common-lisp:string)
(common-lisp:deftype |dateType| () 'common-lisp:string)
(common-lisp:deftype |decodedMessageType| () 'common-lisp:string)
(common-lisp:deftype |durationSecondsType| () 'common-lisp:integer)
(common-lisp:deftype |encodedMessageType| () 'common-lisp:string)
(common-lisp:deftype |expiredIdentityTokenMessage| () 'common-lisp:string)
(common-lisp:deftype |externalIdType| () 'common-lisp:string)
(common-lisp:deftype |federatedIdType| () 'common-lisp:string)
(common-lisp:deftype |idpCommunicationErrorMessage| () 'common-lisp:string)
(common-lisp:deftype |idpRejectedClaimMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidAuthorizationMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidIdentityTokenMessage| () 'common-lisp:string)
(common-lisp:deftype |malformedPolicyDocumentMessage| () 'common-lisp:string)
(common-lisp:deftype |nonNegativeIntegerType| () 'common-lisp:integer)
(common-lisp:deftype |packedPolicyTooLargeMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyDescriptorListType| ()
   '(trivial-types:proper-list policy-descriptor-type))
 (common-lisp:defun |make-policydescriptorlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-descriptor-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |regionDisabledMessage| () 'common-lisp:string)
(common-lisp:deftype |roleDurationSecondsType| () 'common-lisp:integer)
(common-lisp:deftype |roleSessionNameType| () 'common-lisp:string)
(common-lisp:deftype |serialNumberType| () 'common-lisp:string)
(common-lisp:deftype |sessionPolicyDocumentType| () 'common-lisp:string)
(common-lisp:deftype |sourceIdentityType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagKeyListType| ()
   '(trivial-types:proper-list |tagKeyType|))
 (common-lisp:defun |make-tagkeylisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |tagKeyType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagKeyType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagListType| () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-taglisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagValueType| () 'common-lisp:string)
(common-lisp:deftype |tokenCodeType| () 'common-lisp:string)
(common-lisp:deftype |tokenType| () 'common-lisp:string)
(common-lisp:deftype |urlType| () 'common-lisp:string)
(common-lisp:deftype |userIdType| () 'common-lisp:string)
(common-lisp:deftype |userNameType| () 'common-lisp:string)
(common-lisp:deftype |webIdentitySubjectType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun assume-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn role-session-name policy-arns
                     policy duration-seconds tags transitive-tag-keys
                     external-id serial-number token-code source-identity)
   (common-lisp:declare
    (common-lisp:ignorable role-arn role-session-name policy-arns policy
     duration-seconds tags transitive-tag-keys external-id serial-number
     token-code source-identity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-assume-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AssumeRole"
                                                        "2011-06-15"))
      common-lisp:nil "AssumeRoleResult" *error-map*)))
 (common-lisp:export 'assume-role))
(common-lisp:progn
 (common-lisp:defun assume-role-with-saml
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn principal-arn samlassertion
                     policy-arns policy duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable role-arn principal-arn samlassertion policy-arns
     policy duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-assume-role-with-samlrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AssumeRoleWithSAML"
                                                        "2011-06-15"))
      common-lisp:nil "AssumeRoleWithSAMLResult" *error-map*)))
 (common-lisp:export 'assume-role-with-saml))
(common-lisp:progn
 (common-lisp:defun assume-role-with-web-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn role-session-name
                     web-identity-token provider-id policy-arns policy
                     duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable role-arn role-session-name web-identity-token
     provider-id policy-arns policy duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-assume-role-with-web-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AssumeRoleWithWebIdentity"
                                                        "2011-06-15"))
      common-lisp:nil "AssumeRoleWithWebIdentityResult" *error-map*)))
 (common-lisp:export 'assume-role-with-web-identity))
(common-lisp:progn
 (common-lisp:defun decode-authorization-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encoded-message)
   (common-lisp:declare (common-lisp:ignorable encoded-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-decode-authorization-message-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DecodeAuthorizationMessage"
                                                        "2011-06-15"))
      common-lisp:nil "DecodeAuthorizationMessageResult" *error-map*)))
 (common-lisp:export 'decode-authorization-message))
(common-lisp:progn
 (common-lisp:defun get-access-key-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-key-id)
   (common-lisp:declare (common-lisp:ignorable access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-key-info-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "GetAccessKeyInfo"
                                                        "2011-06-15"))
      common-lisp:nil "GetAccessKeyInfoResult" *error-map*)))
 (common-lisp:export 'get-access-key-info))
(common-lisp:progn
 (common-lisp:defun get-caller-identity ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sts-request :method "POST" :path "/" :protocol
                                :query :operation "GetCallerIdentity" :params
                                `(("Action" ,@"GetCallerIdentity")
                                  ("Version" ,@"2011-06-15"))))
    common-lisp:nil "GetCallerIdentityResult" *error-map*))
 (common-lisp:export 'get-caller-identity))
(common-lisp:progn
 (common-lisp:defun get-federation-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name policy policy-arns duration-seconds
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name policy policy-arns duration-seconds tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-federation-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "GetFederationToken"
                                                        "2011-06-15"))
      common-lisp:nil "GetFederationTokenResult" *error-map*)))
 (common-lisp:export 'get-federation-token))
(common-lisp:progn
 (common-lisp:defun get-session-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key duration-seconds serial-number
                     token-code)
   (common-lisp:declare
    (common-lisp:ignorable duration-seconds serial-number token-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "GetSessionToken"
                                                        "2011-06-15"))
      common-lisp:nil "GetSessionTokenResult" *error-map*)))
 (common-lisp:export 'get-session-token))
