;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/sts/api
  (:use)
  (:nicknames #:aws/sts)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/sts/api)
(common-lisp:progn
 (common-lisp:define-condition sts-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'sts-error))
(common-lisp:progn
 (common-lisp:defclass sts-request (aws-sdk/query-request:query-request)
                       common-lisp:nil
                       (:default-initargs :service "sts" :api-version
                        "2011-06-15" :host-prefix "sts" :signing-name
                        common-lisp:nil :global-host "sts.amazonaws.com"))
 (common-lisp:export 'sts-request))
(common-lisp:defvar *error-map*
  '(("ExpiredTokenException" . expired-token-exception)
    ("IDPCommunicationErrorException" . idpcommunication-error-exception)
    ("IDPRejectedClaimException" . idprejected-claim-exception)
    ("InvalidAuthorizationMessageException"
     . invalid-authorization-message-exception)
    ("InvalidIdentityTokenException" . invalid-identity-token-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("PackedPolicyTooLargeException" . packed-policy-too-large-exception)
    ("RegionDisabledException" . region-disabled-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-role-request-"))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (role-session-name (common-lisp:error ":role-session-name is required")
    :type (common-lisp:or |roleSessionNameType| common-lisp:null))
   (policy-arns common-lisp:nil :type
    (common-lisp:or |policyDescriptorListType| common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or |unrestrictedSessionPolicyDocumentType| common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or |roleDurationSecondsType| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagListType| common-lisp:null))
   (transitive-tag-keys common-lisp:nil :type
    (common-lisp:or |tagKeyListType| common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or |externalIdType| common-lisp:null))
   (serial-number common-lisp:nil :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (token-code common-lisp:nil :type
    (common-lisp:or |tokenCodeType| common-lisp:null))
   (source-identity common-lisp:nil :type
    (common-lisp:or |sourceIdentityType| common-lisp:null))
   (provided-contexts common-lisp:nil :type
    (common-lisp:or provided-contexts-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-role-request 'make-assume-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assume-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assume-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-session-name))
      (common-lisp:list
       (common-lisp:cons "RoleSessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arns))
      (common-lisp:list
       (common-lisp:cons "PolicyArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitive-tag-keys))
      (common-lisp:list
       (common-lisp:cons "TransitiveTagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-code))
      (common-lisp:list
       (common-lisp:cons "TokenCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provided-contexts))
      (common-lisp:list
       (common-lisp:cons "ProvidedContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assume-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-role-response-"))
   (credentials common-lisp:nil :type
    (common-lisp:or credentials common-lisp:null))
   (assumed-role-user common-lisp:nil :type
    (common-lisp:or assumed-role-user common-lisp:null))
   (packed-policy-size common-lisp:nil :type
    (common-lisp:or |nonNegativeIntegerType| common-lisp:null))
   (source-identity common-lisp:nil :type
    (common-lisp:or |sourceIdentityType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-role-response 'make-assume-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assume-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assume-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-user))
      (common-lisp:list
       (common-lisp:cons "AssumedRoleUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packed-policy-size))
      (common-lisp:list
       (common-lisp:cons "PackedPolicySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assume-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-role-with-samlrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-role-with-samlrequest-"))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (principal-arn (common-lisp:error ":principal-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (samlassertion (common-lisp:error ":samlassertion is required") :type
    (common-lisp:or samlassertion-type common-lisp:null))
   (policy-arns common-lisp:nil :type
    (common-lisp:or |policyDescriptorListType| common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or |sessionPolicyDocumentType| common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or |roleDurationSecondsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-role-with-samlrequest
                    'make-assume-role-with-samlrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlassertion))
      (common-lisp:list
       (common-lisp:cons "SAMLAssertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arns))
      (common-lisp:list
       (common-lisp:cons "PolicyArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-role-with-samlresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-role-with-samlresponse-"))
   (credentials common-lisp:nil :type
    (common-lisp:or credentials common-lisp:null))
   (assumed-role-user common-lisp:nil :type
    (common-lisp:or assumed-role-user common-lisp:null))
   (packed-policy-size common-lisp:nil :type
    (common-lisp:or |nonNegativeIntegerType| common-lisp:null))
   (subject common-lisp:nil :type (common-lisp:or subject common-lisp:null))
   (subject-type common-lisp:nil :type
    (common-lisp:or subject-type common-lisp:null))
   (issuer common-lisp:nil :type (common-lisp:or issuer common-lisp:null))
   (audience common-lisp:nil :type (common-lisp:or audience common-lisp:null))
   (name-qualifier common-lisp:nil :type
    (common-lisp:or name-qualifier common-lisp:null))
   (source-identity common-lisp:nil :type
    (common-lisp:or |sourceIdentityType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-role-with-samlresponse
                    'make-assume-role-with-samlresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-user))
      (common-lisp:list
       (common-lisp:cons "AssumedRoleUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packed-policy-size))
      (common-lisp:list
       (common-lisp:cons "PackedPolicySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-type))
      (common-lisp:list
       (common-lisp:cons "SubjectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audience))
      (common-lisp:list
       (common-lisp:cons "Audience"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-qualifier))
      (common-lisp:list
       (common-lisp:cons "NameQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-samlresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-role-with-web-identity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-role-with-web-identity-request-"))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (role-session-name (common-lisp:error ":role-session-name is required")
    :type (common-lisp:or |roleSessionNameType| common-lisp:null))
   (web-identity-token (common-lisp:error ":web-identity-token is required")
    :type (common-lisp:or |clientTokenType| common-lisp:null))
   (provider-id common-lisp:nil :type
    (common-lisp:or |urlType| common-lisp:null))
   (policy-arns common-lisp:nil :type
    (common-lisp:or |policyDescriptorListType| common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or |sessionPolicyDocumentType| common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or |roleDurationSecondsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-role-with-web-identity-request
                    'make-assume-role-with-web-identity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-session-name))
      (common-lisp:list
       (common-lisp:cons "RoleSessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-identity-token))
      (common-lisp:list
       (common-lisp:cons "WebIdentityToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-id))
      (common-lisp:list
       (common-lisp:cons "ProviderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arns))
      (common-lisp:list
       (common-lisp:cons "PolicyArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-role-with-web-identity-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-role-with-web-identity-response-"))
   (credentials common-lisp:nil :type
    (common-lisp:or credentials common-lisp:null))
   (subject-from-web-identity-token common-lisp:nil :type
    (common-lisp:or |webIdentitySubjectType| common-lisp:null))
   (assumed-role-user common-lisp:nil :type
    (common-lisp:or assumed-role-user common-lisp:null))
   (packed-policy-size common-lisp:nil :type
    (common-lisp:or |nonNegativeIntegerType| common-lisp:null))
   (provider common-lisp:nil :type (common-lisp:or issuer common-lisp:null))
   (audience common-lisp:nil :type (common-lisp:or audience common-lisp:null))
   (source-identity common-lisp:nil :type
    (common-lisp:or |sourceIdentityType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-role-with-web-identity-response
                    'make-assume-role-with-web-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-from-web-identity-token))
      (common-lisp:list
       (common-lisp:cons "SubjectFromWebIdentityToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-user))
      (common-lisp:list
       (common-lisp:cons "AssumedRoleUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packed-policy-size))
      (common-lisp:list
       (common-lisp:cons "PackedPolicySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audience))
      (common-lisp:list
       (common-lisp:cons "Audience"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-with-web-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assumed-role-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-assumed-role-user-"))
   (assumed-role-id (common-lisp:error ":assumed-role-id is required") :type
    (common-lisp:or |assumedRoleIdType| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assumed-role-user 'make-assumed-role-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assumed-role-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assumed-role-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-id))
      (common-lisp:list
       (common-lisp:cons "AssumedRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assumed-role-user))
   common-lisp:nil))
(common-lisp:deftype audience () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-credentials-"))
   (access-key-id (common-lisp:error ":access-key-id is required") :type
    (common-lisp:or |accessKeyIdType| common-lisp:null))
   (secret-access-key (common-lisp:error ":secret-access-key is required")
    :type (common-lisp:or |accessKeySecretType| common-lisp:null))
   (session-token (common-lisp:error ":session-token is required") :type
    (common-lisp:or |tokenType| common-lisp:null))
   (expiration (common-lisp:error ":expiration is required") :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'credentials 'make-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decode-authorization-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-decode-authorization-message-request-"))
   (encoded-message (common-lisp:error ":encoded-message is required") :type
    (common-lisp:or |encodedMessageType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decode-authorization-message-request
                    'make-decode-authorization-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoded-message))
      (common-lisp:list
       (common-lisp:cons "EncodedMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decode-authorization-message-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-decode-authorization-message-response-"))
   (decoded-message common-lisp:nil :type
    (common-lisp:or |decodedMessageType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decode-authorization-message-response
                    'make-decode-authorization-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decoded-message))
      (common-lisp:list
       (common-lisp:cons "DecodedMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decode-authorization-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition expired-token-exception
     (sts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-token-exception 'expired-token-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (federated-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-federated-user-"))
   (federated-user-id (common-lisp:error ":federated-user-id is required")
    :type (common-lisp:or |federatedIdType| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'federated-user 'make-federated-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input federated-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input federated-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-user-id))
      (common-lisp:list
       (common-lisp:cons "FederatedUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input federated-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-key-info-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-key-info-request-"))
   (access-key-id (common-lisp:error ":access-key-id is required") :type
    (common-lisp:or |accessKeyIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-key-info-request
                    'make-get-access-key-info-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-key-info-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-key-info-response-"))
   (account common-lisp:nil :type
    (common-lisp:or |accountType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-key-info-response
                    'make-get-access-key-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-info-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-caller-identity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-caller-identity-request-")))
 (common-lisp:export
  (common-lisp:list 'get-caller-identity-request
                    'make-get-caller-identity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-caller-identity-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-caller-identity-response-"))
   (user-id common-lisp:nil :type
    (common-lisp:or |userIdType| common-lisp:null))
   (account common-lisp:nil :type
    (common-lisp:or |accountType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-caller-identity-response
                    'make-get-caller-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-caller-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-federation-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-federation-token-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or |sessionPolicyDocumentType| common-lisp:null))
   (policy-arns common-lisp:nil :type
    (common-lisp:or |policyDescriptorListType| common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or |durationSecondsType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-federation-token-request
                    'make-get-federation-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arns))
      (common-lisp:list
       (common-lisp:cons "PolicyArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-federation-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-federation-token-response-"))
   (credentials common-lisp:nil :type
    (common-lisp:or credentials common-lisp:null))
   (federated-user common-lisp:nil :type
    (common-lisp:or federated-user common-lisp:null))
   (packed-policy-size common-lisp:nil :type
    (common-lisp:or |nonNegativeIntegerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-federation-token-response
                    'make-get-federation-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-user))
      (common-lisp:list
       (common-lisp:cons "FederatedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packed-policy-size))
      (common-lisp:list
       (common-lisp:cons "PackedPolicySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-token-request-"))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or |durationSecondsType| common-lisp:null))
   (serial-number common-lisp:nil :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (token-code common-lisp:nil :type
    (common-lisp:or |tokenCodeType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-token-request
                    'make-get-session-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-code))
      (common-lisp:list
       (common-lisp:cons "TokenCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-token-response-"))
   (credentials common-lisp:nil :type
    (common-lisp:or credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-token-response
                    'make-get-session-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-session-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition idpcommunication-error-exception
     (sts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idpcommunication-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idpcommunication-error-exception
                    'idpcommunication-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition idprejected-claim-exception
     (sts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idprejected-claim-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idprejected-claim-exception
                    'idprejected-claim-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-authorization-message-exception
     (sts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-authorization-message-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-authorization-message-exception
                    'invalid-authorization-message-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-identity-token-exception
     (sts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-identity-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-identity-token-exception
                    'invalid-identity-token-exception-message)))
(common-lisp:deftype issuer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (sts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:deftype name-qualifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition packed-policy-too-large-exception
     (sts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       packed-policy-too-large-exception-message)))
 (common-lisp:export
  (common-lisp:list 'packed-policy-too-large-exception
                    'packed-policy-too-large-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-descriptor-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-descriptor-type-"))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-descriptor-type 'make-policy-descriptor-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-descriptor-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-descriptor-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-descriptor-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provided-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-provided-context-"))
   (provider-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null))
   (context-assertion common-lisp:nil :type
    (common-lisp:or |contextAssertionType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provided-context 'make-provided-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provided-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provided-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-arn))
      (common-lisp:list
       (common-lisp:cons "ProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-assertion))
      (common-lisp:list
       (common-lisp:cons "ContextAssertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provided-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provided-contexts-list-type ()
   '(trivial-types:proper-list provided-context))
 (common-lisp:defun make-provided-contexts-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provided-context))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition region-disabled-exception
     (sts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       region-disabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'region-disabled-exception
                    'region-disabled-exception-message)))
(common-lisp:deftype samlassertion-type () 'common-lisp:string)
(common-lisp:deftype subject () 'common-lisp:string)
(common-lisp:deftype subject-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or |tagKeyType| common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or |tagValueType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype |accessKeyIdType| () 'common-lisp:string)
(common-lisp:deftype |accessKeySecretType| () 'common-lisp:string)
(common-lisp:deftype |accountType| () 'common-lisp:string)
(common-lisp:deftype |arnType| () 'common-lisp:string)
(common-lisp:deftype |assumedRoleIdType| () 'common-lisp:string)
(common-lisp:deftype |clientTokenType| () 'common-lisp:string)
(common-lisp:deftype |contextAssertionType| () 'common-lisp:string)
(common-lisp:deftype |dateType| () 'common-lisp:string)
(common-lisp:deftype |decodedMessageType| () 'common-lisp:string)
(common-lisp:deftype |durationSecondsType| () 'common-lisp:integer)
(common-lisp:deftype |encodedMessageType| () 'common-lisp:string)
(common-lisp:deftype |expiredIdentityTokenMessage| () 'common-lisp:string)
(common-lisp:deftype |externalIdType| () 'common-lisp:string)
(common-lisp:deftype |federatedIdType| () 'common-lisp:string)
(common-lisp:deftype |idpCommunicationErrorMessage| () 'common-lisp:string)
(common-lisp:deftype |idpRejectedClaimMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidAuthorizationMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidIdentityTokenMessage| () 'common-lisp:string)
(common-lisp:deftype |malformedPolicyDocumentMessage| () 'common-lisp:string)
(common-lisp:deftype |nonNegativeIntegerType| () 'common-lisp:integer)
(common-lisp:deftype |packedPolicyTooLargeMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyDescriptorListType| ()
   '(trivial-types:proper-list policy-descriptor-type))
 (common-lisp:defun make-policydescriptorlisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-descriptor-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |regionDisabledMessage| () 'common-lisp:string)
(common-lisp:deftype |roleDurationSecondsType| () 'common-lisp:integer)
(common-lisp:deftype |roleSessionNameType| () 'common-lisp:string)
(common-lisp:deftype |serialNumberType| () 'common-lisp:string)
(common-lisp:deftype |sessionPolicyDocumentType| () 'common-lisp:string)
(common-lisp:deftype |sourceIdentityType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagKeyListType| ()
   '(trivial-types:proper-list |tagKeyType|))
 (common-lisp:defun make-tagkeylisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |tagKeyType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagKeyType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagListType| () '(trivial-types:proper-list tag))
 (common-lisp:defun make-taglisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagValueType| () 'common-lisp:string)
(common-lisp:deftype |tokenCodeType| () 'common-lisp:string)
(common-lisp:deftype |tokenType| () 'common-lisp:string)
(common-lisp:deftype |unrestrictedSessionPolicyDocumentType| ()
  'common-lisp:string)
(common-lisp:deftype |urlType| () 'common-lisp:string)
(common-lisp:deftype |userIdType| () 'common-lisp:string)
(common-lisp:deftype |userNameType| () 'common-lisp:string)
(common-lisp:deftype |webIdentitySubjectType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun assume-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn role-session-name policy-arns
                     policy duration-seconds tags transitive-tag-keys
                     external-id serial-number token-code source-identity
                     provided-contexts)
   (common-lisp:declare
    (common-lisp:ignorable role-arn role-session-name policy-arns policy
     duration-seconds tags transitive-tag-keys external-id serial-number
     token-code source-identity provided-contexts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-assume-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssumeRole"))
      common-lisp:nil "AssumeRoleResult" *error-map*)))
 (common-lisp:export 'assume-role))
(common-lisp:progn
 (common-lisp:defun assume-role-with-saml
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn principal-arn samlassertion
                     policy-arns policy duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable role-arn principal-arn samlassertion policy-arns
     policy duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-assume-role-with-samlrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssumeRoleWithSAML"))
      common-lisp:nil "AssumeRoleWithSAMLResult" *error-map*)))
 (common-lisp:export 'assume-role-with-saml))
(common-lisp:progn
 (common-lisp:defun assume-role-with-web-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn role-session-name
                     web-identity-token provider-id policy-arns policy
                     duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable role-arn role-session-name web-identity-token
     provider-id policy-arns policy duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-assume-role-with-web-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssumeRoleWithWebIdentity"))
      common-lisp:nil "AssumeRoleWithWebIdentityResult" *error-map*)))
 (common-lisp:export 'assume-role-with-web-identity))
(common-lisp:progn
 (common-lisp:defun decode-authorization-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encoded-message)
   (common-lisp:declare (common-lisp:ignorable encoded-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-decode-authorization-message-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DecodeAuthorizationMessage"))
      common-lisp:nil "DecodeAuthorizationMessageResult" *error-map*)))
 (common-lisp:export 'decode-authorization-message))
(common-lisp:progn
 (common-lisp:defun get-access-key-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-key-id)
   (common-lisp:declare (common-lisp:ignorable access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-key-info-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAccessKeyInfo"))
      common-lisp:nil "GetAccessKeyInfoResult" *error-map*)))
 (common-lisp:export 'get-access-key-info))
(common-lisp:progn
 (common-lisp:defun get-caller-identity ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sts-request :method "POST" :path "/"
                                :operation "GetCallerIdentity"))
    common-lisp:nil "GetCallerIdentityResult" *error-map*))
 (common-lisp:export 'get-caller-identity))
(common-lisp:progn
 (common-lisp:defun get-federation-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name policy policy-arns duration-seconds
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name policy policy-arns duration-seconds tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-federation-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetFederationToken"))
      common-lisp:nil "GetFederationTokenResult" *error-map*)))
 (common-lisp:export 'get-federation-token))
(common-lisp:progn
 (common-lisp:defun get-session-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key duration-seconds serial-number
                     token-code)
   (common-lisp:declare
    (common-lisp:ignorable duration-seconds serial-number token-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSessionToken"))
      common-lisp:nil "GetSessionTokenResult" *error-map*)))
 (common-lisp:export 'get-session-token))
