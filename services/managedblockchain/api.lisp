;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/managedblockchain/api
  (:use)
  (:nicknames #:aws/managedblockchain)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/managedblockchain/api)
(common-lisp:progn
 (common-lisp:defclass managedblockchain-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "managedblockchain"
                        :protocol :rest-json))
 (common-lisp:export 'managedblockchain-request))
(common-lisp:progn
 (common-lisp:define-condition managedblockchain-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'managedblockchain-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("IllegalActionException" . illegal-action-exception)
    ("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (accessor (:copier common-lisp:nil) (:conc-name "struct-shape-accessor-"))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or accessor-type common-lisp:null))
   (billing-token common-lisp:nil :type
    (common-lisp:or accessor-billing-token-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or accessor-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or output-tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'accessor 'make-accessor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accessor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accessor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-token))
      (common-lisp:list
       (common-lisp:cons "BillingToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accessor))
   common-lisp:nil))
(common-lisp:deftype accessor-billing-token-string () 'common-lisp:string)
(common-lisp:deftype accessor-list-max-results () 'common-lisp:integer)
(common-lisp:deftype accessor-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (accessor-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-accessor-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or accessor-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or accessor-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accessor-summary 'make-accessor-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accessor-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accessor-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accessor-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accessor-summary-list ()
   '(trivial-types:proper-list accessor-summary))
 (common-lisp:defun |make-accessor-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accessor-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype accessor-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (approval-threshold-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-approval-threshold-policy-"))
   (threshold-percentage common-lisp:nil :type
    (common-lisp:or threshold-percentage-int common-lisp:null))
   (proposal-duration-in-hours common-lisp:nil :type
    (common-lisp:or proposal-duration-int common-lisp:null))
   (threshold-comparator common-lisp:nil :type
    (common-lisp:or threshold-comparator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'approval-threshold-policy
                    'make-approval-threshold-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          approval-threshold-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          approval-threshold-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-percentage))
      (common-lisp:list
       (common-lisp:cons "ThresholdPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposal-duration-in-hours))
      (common-lisp:list
       (common-lisp:cons "ProposalDurationInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-comparator))
      (common-lisp:list
       (common-lisp:cons "ThresholdComparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          approval-threshold-policy))
   common-lisp:nil))
(common-lisp:deftype arn-string () 'common-lisp:string)
(common-lisp:deftype availability-zone-string () 'common-lisp:string)
(common-lisp:deftype client-request-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-accessor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-accessor-input-"))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token-string common-lisp:null))
   (accessor-type (common-lisp:error ":accessor-type is required") :type
    (common-lisp:or accessor-type common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or input-tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-accessor-input 'make-create-accessor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessor-type))
      (common-lisp:list
       (common-lisp:cons "AccessorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-accessor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-accessor-output-"))
   (accessor-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (billing-token common-lisp:nil :type
    (common-lisp:or accessor-billing-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-accessor-output 'make-create-accessor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessor-id))
      (common-lisp:list
       (common-lisp:cons "AccessorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-token))
      (common-lisp:list
       (common-lisp:cons "BillingToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-accessor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-member-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-member-input-"))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token-string common-lisp:null))
   (invitation-id (common-lisp:error ":invitation-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-configuration
    (common-lisp:error ":member-configuration is required") :type
    (common-lisp:or member-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-member-input 'make-create-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-member-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-configuration))
      (common-lisp:list
       (common-lisp:cons "MemberConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-member-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-member-output-"))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-member-output 'make-create-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-member-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-input-"))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (framework (common-lisp:error ":framework is required") :type
    (common-lisp:or framework common-lisp:null))
   (framework-version (common-lisp:error ":framework-version is required")
    :type (common-lisp:or framework-version-string common-lisp:null))
   (framework-configuration common-lisp:nil :type
    (common-lisp:or network-framework-configuration common-lisp:null))
   (voting-policy (common-lisp:error ":voting-policy is required") :type
    (common-lisp:or voting-policy common-lisp:null))
   (member-configuration
    (common-lisp:error ":member-configuration is required") :type
    (common-lisp:or member-configuration common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or input-tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-input 'make-create-network-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-network-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-network-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-configuration))
      (common-lisp:list
       (common-lisp:cons "FrameworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voting-policy))
      (common-lisp:list
       (common-lisp:cons "VotingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-configuration))
      (common-lisp:list
       (common-lisp:cons "MemberConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-network-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-output-"))
   (network-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-output 'make-create-network-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-node-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-node-input-"))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token-string common-lisp:null))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (node-configuration (common-lisp:error ":node-configuration is required")
    :type (common-lisp:or node-configuration common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or input-tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-node-input 'make-create-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-configuration))
      (common-lisp:list
       (common-lisp:cons "NodeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-node-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-node-output-"))
   (node-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-node-output 'make-create-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-node-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-proposal-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-proposal-input-"))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or client-request-token-string common-lisp:null))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or proposal-actions common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or input-tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-proposal-input 'make-create-proposal-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-proposal-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-proposal-output-"))
   (proposal-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-proposal-output 'make-create-proposal-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "ProposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-proposal-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-accessor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-accessor-input-"))
   (accessor-id (common-lisp:error ":accessor-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-accessor-input 'make-delete-accessor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-accessor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-accessor-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-accessor-output 'make-delete-accessor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-accessor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-member-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-member-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-member-input 'make-delete-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-member-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-member-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-member-output 'make-delete-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-node-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-node-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (node-id (common-lisp:error ":node-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-node-input 'make-delete-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-node-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-node-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-node-output 'make-delete-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-node-output))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:deftype edition () 'common-lisp:string)
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype framework () 'common-lisp:string)
(common-lisp:deftype framework-version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-accessor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-accessor-input-"))
   (accessor-id (common-lisp:error ":accessor-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-accessor-input 'make-get-accessor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-accessor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-accessor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-accessor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-accessor-output-"))
   (accessor common-lisp:nil :type (common-lisp:or accessor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-accessor-output 'make-get-accessor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-accessor-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-accessor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessor))
      (common-lisp:list
       (common-lisp:cons "Accessor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-accessor-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-member-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-member-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-member-input 'make-get-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-member-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-member-output-"))
   (member common-lisp:nil :type (common-lisp:or member common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-member-output 'make-get-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-member-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "Member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-network-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-network-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-network-input 'make-get-network-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-network-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-network-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-network-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-network-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-network-output-"))
   (network common-lisp:nil :type (common-lisp:or network common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-network-output 'make-get-network-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-network-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-network-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "Network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-network-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-node-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-node-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (node-id (common-lisp:error ":node-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-node-input 'make-get-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-node-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-node-output-"))
   (node common-lisp:nil :type (common-lisp:or node common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-node-output 'make-get-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node))
      (common-lisp:list
       (common-lisp:cons "Node"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-node-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-proposal-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-proposal-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (proposal-id (common-lisp:error ":proposal-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-proposal-input 'make-get-proposal-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-proposal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-proposal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-proposal-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-proposal-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-proposal-output-"))
   (proposal common-lisp:nil :type (common-lisp:or proposal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-proposal-output 'make-get-proposal-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-proposal-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-proposal-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal))
      (common-lisp:list
       (common-lisp:cons "Proposal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-proposal-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition illegal-action-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-action-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-action-exception
                    'illegal-action-exception-message)))
(common-lisp:progn
 (common-lisp:deftype input-tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-input-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype instance-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (managedblockchain-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-service-error-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (invitation (:copier common-lisp:nil)
      (:conc-name "struct-shape-invitation-"))
   (invitation-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or invitation-status common-lisp:null))
   (network-summary common-lisp:nil :type
    (common-lisp:or network-summary common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'invitation 'make-invitation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-summary))
      (common-lisp:list
       (common-lisp:cons "NetworkSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invitation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invitation-list ()
   '(trivial-types:proper-list invitation))
 (common-lisp:defun |make-invitation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invitation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype invitation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (invite-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-invite-action-"))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'invite-action 'make-invite-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invite-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invite-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invite-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invite-action-list ()
   '(trivial-types:proper-list invite-action))
 (common-lisp:defun |make-invite-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invite-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype is-owned () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (list-accessors-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-accessors-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or accessor-list-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-accessors-input 'make-list-accessors-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-accessors-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-accessors-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-accessors-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-accessors-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-accessors-output-"))
   (accessors common-lisp:nil :type
    (common-lisp:or accessor-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-accessors-output 'make-list-accessors-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accessors-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accessors-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessors))
      (common-lisp:list
       (common-lisp:cons "Accessors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accessors-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-invitations-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-invitations-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or proposal-list-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-input 'make-list-invitations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-invitations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-invitations-output-"))
   (invitations common-lisp:nil :type
    (common-lisp:or invitation-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-output 'make-list-invitations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "Invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or member-status common-lisp:null))
   (is-owned common-lisp:nil :type (common-lisp:or is-owned common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or member-list-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-input 'make-list-members-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-output-"))
   (members common-lisp:nil :type
    (common-lisp:or member-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-output 'make-list-members-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-networks-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-networks-input-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or network-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or network-list-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-networks-input 'make-list-networks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-networks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-networks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-networks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-networks-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-networks-output-"))
   (networks common-lisp:nil :type
    (common-lisp:or network-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-networks-output 'make-list-networks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-networks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-networks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networks))
      (common-lisp:list
       (common-lisp:cons "Networks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-networks-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-nodes-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-nodes-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or node-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or node-list-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-nodes-input 'make-list-nodes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-nodes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-nodes-output-"))
   (nodes common-lisp:nil :type
    (common-lisp:or node-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-nodes-output 'make-list-nodes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-nodes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-nodes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-nodes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-proposal-votes-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-proposal-votes-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (proposal-id (common-lisp:error ":proposal-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or proposal-list-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-proposal-votes-input
                    'make-list-proposal-votes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-proposal-votes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-proposal-votes-output-"))
   (proposal-votes common-lisp:nil :type
    (common-lisp:or proposal-vote-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-proposal-votes-output
                    'make-list-proposal-votes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-votes))
      (common-lisp:list
       (common-lisp:cons "ProposalVotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-proposal-votes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-proposals-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-proposals-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or proposal-list-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-proposals-input 'make-list-proposals-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-proposals-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-proposals-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-proposals-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-proposals-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-proposals-output-"))
   (proposals common-lisp:nil :type
    (common-lisp:or proposal-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-proposals-output 'make-list-proposals-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-proposals-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-proposals-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposals))
      (common-lisp:list
       (common-lisp:cons "Proposals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-proposals-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type
    (common-lisp:or output-tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (log-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-configuration-"))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-configuration 'make-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (log-configurations (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-configurations-"))
   (cloudwatch common-lisp:nil :type
    (common-lisp:or log-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-configurations 'make-log-configurations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch))
      (common-lisp:list
       (common-lisp:cons "Cloudwatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member (:copier common-lisp:nil) (:conc-name "struct-shape-member-"))
   (network-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or network-member-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (framework-attributes common-lisp:nil :type
    (common-lisp:or member-framework-attributes common-lisp:null))
   (log-publishing-configuration common-lisp:nil :type
    (common-lisp:or member-log-publishing-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or member-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or output-tag-map common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-attributes))
      (common-lisp:list
       (common-lisp:cons "FrameworkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-configuration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or network-member-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (framework-configuration
    (common-lisp:error ":framework-configuration is required") :type
    (common-lisp:or member-framework-configuration common-lisp:null))
   (log-publishing-configuration common-lisp:nil :type
    (common-lisp:or member-log-publishing-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or input-tag-map common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-configuration 'make-member-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-configuration))
      (common-lisp:list
       (common-lisp:cons "FrameworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member-fabric-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-fabric-attributes-"))
   (admin-username common-lisp:nil :type
    (common-lisp:or username-string common-lisp:null))
   (ca-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-fabric-attributes 'make-member-fabric-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-username))
      (common-lisp:list
       (common-lisp:cons "AdminUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-endpoint))
      (common-lisp:list
       (common-lisp:cons "CaEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member-fabric-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-fabric-configuration-"))
   (admin-username (common-lisp:error ":admin-username is required") :type
    (common-lisp:or username-string common-lisp:null))
   (admin-password (common-lisp:error ":admin-password is required") :type
    (common-lisp:or password-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-fabric-configuration
                    'make-member-fabric-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-username))
      (common-lisp:list
       (common-lisp:cons "AdminUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-password))
      (common-lisp:list
       (common-lisp:cons "AdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member-fabric-log-publishing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-fabric-log-publishing-configuration-"))
   (ca-logs common-lisp:nil :type
    (common-lisp:or log-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-fabric-log-publishing-configuration
                    'make-member-fabric-log-publishing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-log-publishing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-log-publishing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-logs))
      (common-lisp:list
       (common-lisp:cons "CaLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-fabric-log-publishing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member-framework-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-framework-attributes-"))
   (fabric common-lisp:nil :type
    (common-lisp:or member-fabric-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-framework-attributes
                    'make-member-framework-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (member-framework-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-framework-configuration-"))
   (fabric common-lisp:nil :type
    (common-lisp:or member-fabric-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-framework-configuration
                    'make-member-framework-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-framework-configuration))
   common-lisp:nil))
(common-lisp:deftype member-list-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (member-log-publishing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-log-publishing-configuration-"))
   (fabric common-lisp:nil :type
    (common-lisp:or member-fabric-log-publishing-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-log-publishing-configuration
                    'make-member-log-publishing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-log-publishing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-log-publishing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-log-publishing-configuration))
   common-lisp:nil))
(common-lisp:deftype member-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (member-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or network-member-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or member-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (is-owned common-lisp:nil :type (common-lisp:or is-owned common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member-summary 'make-member-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-owned))
      (common-lisp:list
       (common-lisp:cons "IsOwned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-summary-list ()
   '(trivial-types:proper-list member-summary))
 (common-lisp:defun |make-member-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network (:copier common-lisp:nil) (:conc-name "struct-shape-network-"))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null))
   (framework-version common-lisp:nil :type
    (common-lisp:or framework-version-string common-lisp:null))
   (framework-attributes common-lisp:nil :type
    (common-lisp:or network-framework-attributes common-lisp:null))
   (vpc-endpoint-service-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (voting-policy common-lisp:nil :type
    (common-lisp:or voting-policy common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or network-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or output-tag-map common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network 'make-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-attributes))
      (common-lisp:list
       (common-lisp:cons "FrameworkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-service-name))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voting-policy))
      (common-lisp:list
       (common-lisp:cons "VotingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-ethereum-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-ethereum-attributes-"))
   (chain-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-ethereum-attributes
                    'make-network-ethereum-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-ethereum-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-ethereum-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chain-id))
      (common-lisp:list
       (common-lisp:cons "ChainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-ethereum-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-fabric-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-fabric-attributes-"))
   (ordering-service-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (edition common-lisp:nil :type (common-lisp:or edition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-fabric-attributes
                    'make-network-fabric-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ordering-service-endpoint))
      (common-lisp:list
       (common-lisp:cons "OrderingServiceEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-fabric-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-fabric-configuration-"))
   (edition (common-lisp:error ":edition is required") :type
    (common-lisp:or edition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-fabric-configuration
                    'make-network-fabric-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-fabric-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-framework-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-framework-attributes-"))
   (fabric common-lisp:nil :type
    (common-lisp:or network-fabric-attributes common-lisp:null))
   (ethereum common-lisp:nil :type
    (common-lisp:or network-ethereum-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-framework-attributes
                    'make-network-framework-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethereum))
      (common-lisp:list
       (common-lisp:cons "Ethereum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-framework-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-framework-configuration-"))
   (fabric common-lisp:nil :type
    (common-lisp:or network-fabric-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-framework-configuration
                    'make-network-framework-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-framework-configuration))
   common-lisp:nil))
(common-lisp:deftype network-list-max-results () 'common-lisp:integer)
(common-lisp:deftype network-member-name-string () 'common-lisp:string)
(common-lisp:deftype network-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null))
   (framework-version common-lisp:nil :type
    (common-lisp:or framework-version-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or network-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network-summary 'make-network-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-summary-list ()
   '(trivial-types:proper-list network-summary))
 (common-lisp:defun |make-network-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (node (:copier common-lisp:nil) (:conc-name "struct-shape-node-"))
   (network-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type-string common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or availability-zone-string common-lisp:null))
   (framework-attributes common-lisp:nil :type
    (common-lisp:or node-framework-attributes common-lisp:null))
   (log-publishing-configuration common-lisp:nil :type
    (common-lisp:or node-log-publishing-configuration common-lisp:null))
   (state-db common-lisp:nil :type
    (common-lisp:or state-dbtype common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or node-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or output-tag-map common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framework-attributes))
      (common-lisp:list
       (common-lisp:cons "FrameworkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-db))
      (common-lisp:list
       (common-lisp:cons "StateDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (node-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-configuration-"))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or instance-type-string common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or availability-zone-string common-lisp:null))
   (log-publishing-configuration common-lisp:nil :type
    (common-lisp:or node-log-publishing-configuration common-lisp:null))
   (state-db common-lisp:nil :type
    (common-lisp:or state-dbtype common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-configuration 'make-node-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-db))
      (common-lisp:list
       (common-lisp:cons "StateDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (node-ethereum-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-ethereum-attributes-"))
   (http-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (web-socket-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-ethereum-attributes 'make-node-ethereum-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-ethereum-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-ethereum-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-socket-endpoint))
      (common-lisp:list
       (common-lisp:cons "WebSocketEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-ethereum-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (node-fabric-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-fabric-attributes-"))
   (peer-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (peer-event-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-fabric-attributes 'make-node-fabric-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-endpoint))
      (common-lisp:list
       (common-lisp:cons "PeerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-event-endpoint))
      (common-lisp:list
       (common-lisp:cons "PeerEventEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (node-fabric-log-publishing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-fabric-log-publishing-configuration-"))
   (chaincode-logs common-lisp:nil :type
    (common-lisp:or log-configurations common-lisp:null))
   (peer-logs common-lisp:nil :type
    (common-lisp:or log-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-fabric-log-publishing-configuration
                    'make-node-fabric-log-publishing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-log-publishing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-log-publishing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chaincode-logs))
      (common-lisp:list
       (common-lisp:cons "ChaincodeLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-logs))
      (common-lisp:list
       (common-lisp:cons "PeerLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-fabric-log-publishing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (node-framework-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-framework-attributes-"))
   (fabric common-lisp:nil :type
    (common-lisp:or node-fabric-attributes common-lisp:null))
   (ethereum common-lisp:nil :type
    (common-lisp:or node-ethereum-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-framework-attributes
                    'make-node-framework-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-framework-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-framework-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ethereum))
      (common-lisp:list
       (common-lisp:cons "Ethereum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-framework-attributes))
   common-lisp:nil))
(common-lisp:deftype node-list-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (node-log-publishing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-log-publishing-configuration-"))
   (fabric common-lisp:nil :type
    (common-lisp:or node-fabric-log-publishing-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'node-log-publishing-configuration
                    'make-node-log-publishing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-log-publishing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-log-publishing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fabric))
      (common-lisp:list
       (common-lisp:cons "Fabric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-log-publishing-configuration))
   common-lisp:nil))
(common-lisp:deftype node-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (node-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-node-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or node-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or availability-zone-string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type-string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node-summary 'make-node-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-summary-list ()
   '(trivial-types:proper-list node-summary))
 (common-lisp:defun |make-node-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype output-tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-output-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype password-string () 'common-lisp:string)
(common-lisp:deftype principal-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (proposal (:copier common-lisp:nil) (:conc-name "struct-shape-proposal-"))
   (proposal-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (network-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or proposal-actions common-lisp:null))
   (proposed-by-member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (proposed-by-member-name common-lisp:nil :type
    (common-lisp:or network-member-name-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or proposal-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (yes-vote-count common-lisp:nil :type
    (common-lisp:or vote-count common-lisp:null))
   (no-vote-count common-lisp:nil :type
    (common-lisp:or vote-count common-lisp:null))
   (outstanding-vote-count common-lisp:nil :type
    (common-lisp:or vote-count common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or output-tag-map common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'proposal 'make-proposal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proposal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proposal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "ProposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-by-member-id))
      (common-lisp:list
       (common-lisp:cons "ProposedByMemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-by-member-name))
      (common-lisp:list
       (common-lisp:cons "ProposedByMemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yes-vote-count))
      (common-lisp:list
       (common-lisp:cons "YesVoteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-vote-count))
      (common-lisp:list
       (common-lisp:cons "NoVoteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outstanding-vote-count))
      (common-lisp:list
       (common-lisp:cons "OutstandingVoteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proposal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (proposal-actions (:copier common-lisp:nil)
      (:conc-name "struct-shape-proposal-actions-"))
   (invitations common-lisp:nil :type
    (common-lisp:or invite-action-list common-lisp:null))
   (removals common-lisp:nil :type
    (common-lisp:or remove-action-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proposal-actions 'make-proposal-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proposal-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proposal-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "Invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'removals))
      (common-lisp:list
       (common-lisp:cons "Removals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proposal-actions))
   common-lisp:nil))
(common-lisp:deftype proposal-duration-int () 'common-lisp:integer)
(common-lisp:deftype proposal-list-max-results () 'common-lisp:integer)
(common-lisp:deftype proposal-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (proposal-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-proposal-summary-"))
   (proposal-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (proposed-by-member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (proposed-by-member-name common-lisp:nil :type
    (common-lisp:or network-member-name-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or proposal-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proposal-summary 'make-proposal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proposal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proposal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proposal-id))
      (common-lisp:list
       (common-lisp:cons "ProposalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-by-member-id))
      (common-lisp:list
       (common-lisp:cons "ProposedByMemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-by-member-name))
      (common-lisp:list
       (common-lisp:cons "ProposedByMemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proposal-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype proposal-summary-list ()
   '(trivial-types:proper-list proposal-summary))
 (common-lisp:defun |make-proposal-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list proposal-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype proposal-vote-list ()
   '(trivial-types:proper-list vote-summary))
 (common-lisp:defun |make-proposal-vote-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vote-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-invitation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-invitation-input-"))
   (invitation-id (common-lisp:error ":invitation-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-invitation-input 'make-reject-invitation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-invitation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-invitation-output-")))
 (common-lisp:export
  (common-lisp:list 'reject-invitation-output 'make-reject-invitation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-invitation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-action-"))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'remove-action 'make-remove-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remove-action-list ()
   '(trivial-types:proper-list remove-action))
 (common-lisp:defun |make-remove-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list remove-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:deftype resource-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-ready-exception
                    'resource-not-ready-exception-message)))
(common-lisp:deftype state-dbtype () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn-string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or input-tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype threshold-comparator () 'common-lisp:string)
(common-lisp:deftype threshold-percentage-int () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (managedblockchain-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (managedblockchain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn-string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-member-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-member-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (log-publishing-configuration common-lisp:nil :type
    (common-lisp:or member-log-publishing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-member-input 'make-update-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-member-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-member-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-member-output-")))
 (common-lisp:export
  (common-lisp:list 'update-member-output 'make-update-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-node-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-node-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null))
   (node-id (common-lisp:error ":node-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (log-publishing-configuration common-lisp:nil :type
    (common-lisp:or node-log-publishing-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-node-input 'make-update-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-configuration))
      (common-lisp:list
       (common-lisp:cons "LogPublishingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-node-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-node-output-")))
 (common-lisp:export
  (common-lisp:list 'update-node-output 'make-update-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-node-output))
   common-lisp:nil))
(common-lisp:deftype username-string () 'common-lisp:string)
(common-lisp:deftype vote-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (vote-on-proposal-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-vote-on-proposal-input-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (proposal-id (common-lisp:error ":proposal-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (voter-member-id (common-lisp:error ":voter-member-id is required") :type
    (common-lisp:or resource-id-string common-lisp:null))
   (vote (common-lisp:error ":vote is required") :type
    (common-lisp:or vote-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vote-on-proposal-input 'make-vote-on-proposal-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voter-member-id))
      (common-lisp:list
       (common-lisp:cons "VoterMemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vote))
      (common-lisp:list
       (common-lisp:cons "Vote"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vote-on-proposal-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-vote-on-proposal-output-")))
 (common-lisp:export
  (common-lisp:list 'vote-on-proposal-output 'make-vote-on-proposal-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vote-on-proposal-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vote-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-vote-summary-"))
   (vote common-lisp:nil :type (common-lisp:or vote-value common-lisp:null))
   (member-name common-lisp:nil :type
    (common-lisp:or network-member-name-string common-lisp:null))
   (member-id common-lisp:nil :type
    (common-lisp:or resource-id-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vote-summary 'make-vote-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vote-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vote-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vote))
      (common-lisp:list
       (common-lisp:cons "Vote"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-name))
      (common-lisp:list
       (common-lisp:cons "MemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vote-summary))
   common-lisp:nil))
(common-lisp:deftype vote-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (voting-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-voting-policy-"))
   (approval-threshold-policy common-lisp:nil :type
    (common-lisp:or approval-threshold-policy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'voting-policy 'make-voting-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input voting-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input voting-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approval-threshold-policy))
      (common-lisp:list
       (common-lisp:cons "ApprovalThresholdPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input voting-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-accessor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token accessor-type tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token accessor-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-accessor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        :rest-json "/accessors" "CreateAccessor" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-accessor))
(common-lisp:progn
 (common-lisp:defun create-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token invitation-id
                     network-id member-configuration)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token invitation-id network-id
     member-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "CreateMember" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-member))
(common-lisp:progn
 (common-lisp:defun create-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token name description
                     framework framework-version framework-configuration
                     voting-policy member-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token name description framework
     framework-version framework-configuration voting-policy
     member-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        :rest-json "/networks" "CreateNetwork" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-network))
(common-lisp:progn
 (common-lisp:defun create-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token network-id member-id
                     node-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token network-id member-id
     node-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "CreateNode" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-node))
(common-lisp:progn
 (common-lisp:defun create-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token network-id member-id
                     actions description tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token network-id member-id actions
     description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-proposal-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "CreateProposal" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-proposal))
(common-lisp:progn
 (common-lisp:defun delete-accessor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accessor-id)
   (common-lisp:declare (common-lisp:ignorable accessor-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-accessor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/accessors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'accessor-id))))
        "DeleteAccessor" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-accessor))
(common-lisp:progn
 (common-lisp:defun delete-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id)
   (common-lisp:declare (common-lisp:ignorable network-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-id))))
        "DeleteMember" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-member))
(common-lisp:progn
 (common-lisp:defun delete-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id node-id)
   (common-lisp:declare (common-lisp:ignorable network-id member-id node-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'node-id))))
        "DeleteNode" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-node))
(common-lisp:progn
 (common-lisp:defun get-accessor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accessor-id)
   (common-lisp:declare (common-lisp:ignorable accessor-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-accessor-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/accessors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'accessor-id))))
        "GetAccessor" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-accessor))
(common-lisp:progn
 (common-lisp:defun get-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id)
   (common-lisp:declare (common-lisp:ignorable network-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-id))))
        "GetMember" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-member))
(common-lisp:progn
 (common-lisp:defun get-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id)
   (common-lisp:declare (common-lisp:ignorable network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "GetNetwork" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-network))
(common-lisp:progn
 (common-lisp:defun get-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id node-id)
   (common-lisp:declare (common-lisp:ignorable network-id member-id node-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'node-id))))
        "GetNode" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-node))
(common-lisp:progn
 (common-lisp:defun get-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id proposal-id)
   (common-lisp:declare (common-lisp:ignorable network-id proposal-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-proposal-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'proposal-id))))
        "GetProposal" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-proposal))
(common-lisp:progn
 (common-lisp:defun list-accessors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-accessors-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json "/accessors" "ListAccessors" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-accessors))
(common-lisp:progn
 (common-lisp:defun list-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invitations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json "/invitations" "ListInvitations" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-invitations))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id name status is-owned
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable network-id name status is-owned max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "ListMembers" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-networks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name framework status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable name framework status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-networks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json "/networks" "ListNetworks" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-networks))
(common-lisp:progn
 (common-lisp:defun list-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable network-id member-id status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "ListNodes" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-nodes))
(common-lisp:progn
 (common-lisp:defun list-proposal-votes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id proposal-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable network-id proposal-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-proposal-votes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals/~A/votes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'proposal-id))))
        "ListProposalVotes" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-proposal-votes))
(common-lisp:progn
 (common-lisp:defun list-proposals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable network-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-proposals-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))))
        "ListProposals" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-proposals))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun reject-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key invitation-id)
   (common-lisp:declare (common-lisp:ignorable invitation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-invitation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/invitations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'invitation-id))))
        "RejectInvitation" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-invitation))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id
                     log-publishing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable network-id member-id log-publishing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "PATCH"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/members/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'member-id))))
        "UpdateMember" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-member))
(common-lisp:progn
 (common-lisp:defun update-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id member-id node-id
                     log-publishing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable network-id member-id node-id
     log-publishing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "PATCH"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/nodes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'node-id))))
        "UpdateNode" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-node))
(common-lisp:progn
 (common-lisp:defun vote-on-proposal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-id proposal-id voter-member-id
                     vote)
   (common-lisp:declare
    (common-lisp:ignorable network-id proposal-id voter-member-id vote))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-vote-on-proposal-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/networks/~A/proposals/~A/votes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'network-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'proposal-id))))
        "VoteOnProposal" "2018-09-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'vote-on-proposal))
