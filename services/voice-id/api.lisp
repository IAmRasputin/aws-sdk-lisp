;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/voice-id/api
  (:use)
  (:nicknames #:aws/voice-id)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/voice-id/api)
(common-lisp:progn
 (common-lisp:defclass voice-id-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "voice-id" :protocol :json))
 (common-lisp:export 'voice-id-request))
(common-lisp:progn
 (common-lisp:define-condition voice-id-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'voice-id-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (voice-id-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-fraudster-request common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %associate-fraudster-request-watchlist-id
                         :initform
                         (common-lisp:error ":watchlist-id is required"))
                        (fraudster-id :initarg :fraudster-id :type
                         (common-lisp:or fraudster-id common-lisp:null)
                         :accessor %associate-fraudster-request-fraudster-id
                         :initform
                         (common-lisp:error ":fraudster-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %associate-fraudster-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-fraudster-request
                    'make-associate-fraudster-request))
 (common-lisp:defun make-associate-fraudster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id fraudster-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'associate-fraudster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-fraudster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-fraudster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fraudster-id))
      (common-lisp:list
       (common-lisp:cons "FraudsterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-fraudster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-fraudster-response common-lisp:nil
                       ((fraudster :initarg :fraudster :type
                         (common-lisp:or fraudster common-lisp:null) :accessor
                         %associate-fraudster-response-fraudster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-fraudster-response
                    'make-associate-fraudster-response))
 (common-lisp:defun make-associate-fraudster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fraudster)
   (common-lisp:apply #'common-lisp:make-instance 'associate-fraudster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-fraudster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-fraudster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fraudster))
      (common-lisp:list
       (common-lisp:cons "Fraudster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-fraudster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authentication-configuration common-lisp:nil
                       ((acceptance-threshold :initarg :acceptance-threshold
                         :type (common-lisp:or score common-lisp:null)
                         :accessor
                         %authentication-configuration-acceptance-threshold
                         :initform
                         (common-lisp:error
                          ":acceptance-threshold is required"))))
 (common-lisp:export
  (common-lisp:list 'authentication-configuration
                    'make-authentication-configuration))
 (common-lisp:defun make-authentication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acceptance-threshold)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceptance-threshold))
      (common-lisp:list
       (common-lisp:cons "AcceptanceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   common-lisp:nil))
(common-lisp:deftype authentication-decision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authentication-result common-lisp:nil
                       ((score :initarg :score :type
                         (common-lisp:or score common-lisp:null) :accessor
                         %authentication-result-score :initform
                         common-lisp:nil)
                        (generated-speaker-id :initarg :generated-speaker-id
                         :type
                         (common-lisp:or generated-speaker-id common-lisp:null)
                         :accessor %authentication-result-generated-speaker-id
                         :initform common-lisp:nil)
                        (decision :initarg :decision :type
                         (common-lisp:or authentication-decision
                                         common-lisp:null)
                         :accessor %authentication-result-decision :initform
                         common-lisp:nil)
                        (customer-speaker-id :initarg :customer-speaker-id
                         :type
                         (common-lisp:or customer-speaker-id common-lisp:null)
                         :accessor %authentication-result-customer-speaker-id
                         :initform common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or authentication-configuration
                                         common-lisp:null)
                         :accessor %authentication-result-configuration
                         :initform common-lisp:nil)
                        (authentication-result-id :initarg
                         :authentication-result-id :type
                         (common-lisp:or unique-id-large common-lisp:null)
                         :accessor
                         %authentication-result-authentication-result-id
                         :initform common-lisp:nil)
                        (audio-aggregation-started-at :initarg
                         :audio-aggregation-started-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %authentication-result-audio-aggregation-started-at
                         :initform common-lisp:nil)
                        (audio-aggregation-ended-at :initarg
                         :audio-aggregation-ended-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %authentication-result-audio-aggregation-ended-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'authentication-result 'make-authentication-result))
 (common-lisp:defun make-authentication-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key score generated-speaker-id decision
                     customer-speaker-id configuration authentication-result-id
                     audio-aggregation-started-at audio-aggregation-ended-at)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-aggregation-ended-at))
      (common-lisp:list
       (common-lisp:cons "AudioAggregationEndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-aggregation-started-at))
      (common-lisp:list
       (common-lisp:cons "AudioAggregationStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-result-id))
      (common-lisp:list
       (common-lisp:cons "AuthenticationResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-speaker-id))
      (common-lisp:list
       (common-lisp:cons "CustomerSpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision))
      (common-lisp:list
       (common-lisp:cons "Decision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-speaker-id))
      (common-lisp:list
       (common-lisp:cons "GeneratedSpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-result))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (voice-id-error)
     ((conflict-type :initarg :conflict-type :initform common-lisp:nil :reader
       conflict-exception-conflict-type)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-conflict-type
                    'conflict-exception-message)))
(common-lisp:deftype conflict-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-domain-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-domain-request-tags :initform common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %create-domain-request-server-side-encryption-configuration
                         :initform
                         (common-lisp:error
                          ":server-side-encryption-configuration is required"))
                        (name :initarg :name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %create-domain-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-domain-request-description :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor %create-domain-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defun make-create-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags server-side-encryption-configuration
                     name description client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-response common-lisp:nil
                       ((domain :initarg :domain :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         %create-domain-response-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-domain-response 'make-create-domain-response))
 (common-lisp:defun make-create-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-watchlist-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or watchlist-name common-lisp:null)
                         :accessor %create-watchlist-request-name :initform
                         (common-lisp:error ":name is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %create-watchlist-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or watchlist-description
                                         common-lisp:null)
                         :accessor %create-watchlist-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor %create-watchlist-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-watchlist-request 'make-create-watchlist-request))
 (common-lisp:defun make-create-watchlist-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name domain-id description client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-watchlist-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-watchlist-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-watchlist-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-watchlist-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-watchlist-response common-lisp:nil
                       ((watchlist :initarg :watchlist :type
                         (common-lisp:or watchlist common-lisp:null) :accessor
                         %create-watchlist-response-watchlist :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-watchlist-response
                    'make-create-watchlist-response))
 (common-lisp:defun make-create-watchlist-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist)
   (common-lisp:apply #'common-lisp:make-instance 'create-watchlist-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-watchlist-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-watchlist-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist))
      (common-lisp:list
       (common-lisp:cons "Watchlist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-watchlist-response))
   common-lisp:nil))
(common-lisp:deftype customer-speaker-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-domain-request common-lisp:nil
                       ((domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %delete-domain-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defun make-delete-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fraudster-request common-lisp:nil
                       ((fraudster-id :initarg :fraudster-id :type
                         (common-lisp:or fraudster-id common-lisp:null)
                         :accessor %delete-fraudster-request-fraudster-id
                         :initform
                         (common-lisp:error ":fraudster-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %delete-fraudster-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fraudster-request 'make-delete-fraudster-request))
 (common-lisp:defun make-delete-fraudster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fraudster-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fraudster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fraudster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fraudster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fraudster-id))
      (common-lisp:list
       (common-lisp:cons "FraudsterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fraudster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-speaker-request common-lisp:nil
                       ((speaker-id :initarg :speaker-id :type
                         (common-lisp:or speaker-id common-lisp:null) :accessor
                         %delete-speaker-request-speaker-id :initform
                         (common-lisp:error ":speaker-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %delete-speaker-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-speaker-request 'make-delete-speaker-request))
 (common-lisp:defun make-delete-speaker-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speaker-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-speaker-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-speaker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-speaker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker-id))
      (common-lisp:list
       (common-lisp:cons "SpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-speaker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-watchlist-request common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %delete-watchlist-request-watchlist-id
                         :initform
                         (common-lisp:error ":watchlist-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %delete-watchlist-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-watchlist-request 'make-delete-watchlist-request))
 (common-lisp:defun make-delete-watchlist-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-watchlist-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-watchlist-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-watchlist-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-watchlist-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-request common-lisp:nil
                       ((domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %describe-domain-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-request 'make-describe-domain-request))
 (common-lisp:defun make-describe-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-response common-lisp:nil
                       ((domain :initarg :domain :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         %describe-domain-response-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-response 'make-describe-domain-response))
 (common-lisp:defun make-describe-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fraudster-registration-job-request
                       common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-fraudster-registration-job-request-job-id
                         :initform (common-lisp:error ":job-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %describe-fraudster-registration-job-request-domain-id
                         :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fraudster-registration-job-request
                    'make-describe-fraudster-registration-job-request))
 (common-lisp:defun make-describe-fraudster-registration-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fraudster-registration-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-registration-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-registration-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-registration-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fraudster-registration-job-response
                       common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or fraudster-registration-job
                                         common-lisp:null)
                         :accessor
                         %describe-fraudster-registration-job-response-job
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fraudster-registration-job-response
                    'make-describe-fraudster-registration-job-response))
 (common-lisp:defun make-describe-fraudster-registration-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fraudster-registration-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-registration-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-registration-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-registration-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fraudster-request common-lisp:nil
                       ((fraudster-id :initarg :fraudster-id :type
                         (common-lisp:or fraudster-id common-lisp:null)
                         :accessor %describe-fraudster-request-fraudster-id
                         :initform
                         (common-lisp:error ":fraudster-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %describe-fraudster-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fraudster-request
                    'make-describe-fraudster-request))
 (common-lisp:defun make-describe-fraudster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fraudster-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-fraudster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fraudster-id))
      (common-lisp:list
       (common-lisp:cons "FraudsterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fraudster-response common-lisp:nil
                       ((fraudster :initarg :fraudster :type
                         (common-lisp:or fraudster common-lisp:null) :accessor
                         %describe-fraudster-response-fraudster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fraudster-response
                    'make-describe-fraudster-response))
 (common-lisp:defun make-describe-fraudster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fraudster)
   (common-lisp:apply #'common-lisp:make-instance 'describe-fraudster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fraudster))
      (common-lisp:list
       (common-lisp:cons "Fraudster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fraudster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-speaker-enrollment-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-speaker-enrollment-job-request-job-id
                         :initform (common-lisp:error ":job-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %describe-speaker-enrollment-job-request-domain-id
                         :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-speaker-enrollment-job-request
                    'make-describe-speaker-enrollment-job-request))
 (common-lisp:defun make-describe-speaker-enrollment-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-speaker-enrollment-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-enrollment-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-enrollment-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-enrollment-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-speaker-enrollment-job-response common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or speaker-enrollment-job
                                         common-lisp:null)
                         :accessor
                         %describe-speaker-enrollment-job-response-job
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-speaker-enrollment-job-response
                    'make-describe-speaker-enrollment-job-response))
 (common-lisp:defun make-describe-speaker-enrollment-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-speaker-enrollment-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-enrollment-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-enrollment-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-enrollment-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-speaker-request common-lisp:nil
                       ((speaker-id :initarg :speaker-id :type
                         (common-lisp:or speaker-id common-lisp:null) :accessor
                         %describe-speaker-request-speaker-id :initform
                         (common-lisp:error ":speaker-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %describe-speaker-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-speaker-request 'make-describe-speaker-request))
 (common-lisp:defun make-describe-speaker-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speaker-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-speaker-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker-id))
      (common-lisp:list
       (common-lisp:cons "SpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-speaker-response common-lisp:nil
                       ((speaker :initarg :speaker :type
                         (common-lisp:or speaker common-lisp:null) :accessor
                         %describe-speaker-response-speaker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-speaker-response
                    'make-describe-speaker-response))
 (common-lisp:defun make-describe-speaker-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speaker)
   (common-lisp:apply #'common-lisp:make-instance 'describe-speaker-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker))
      (common-lisp:list
       (common-lisp:cons "Speaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-speaker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-watchlist-request common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %describe-watchlist-request-watchlist-id
                         :initform
                         (common-lisp:error ":watchlist-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %describe-watchlist-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-watchlist-request
                    'make-describe-watchlist-request))
 (common-lisp:defun make-describe-watchlist-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-watchlist-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-watchlist-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-watchlist-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-watchlist-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-watchlist-response common-lisp:nil
                       ((watchlist :initarg :watchlist :type
                         (common-lisp:or watchlist common-lisp:null) :accessor
                         %describe-watchlist-response-watchlist :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-watchlist-response
                    'make-describe-watchlist-response))
 (common-lisp:defun make-describe-watchlist-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist)
   (common-lisp:apply #'common-lisp:make-instance 'describe-watchlist-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-watchlist-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-watchlist-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist))
      (common-lisp:list
       (common-lisp:cons "Watchlist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-watchlist-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-fraudster-request common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %disassociate-fraudster-request-watchlist-id
                         :initform
                         (common-lisp:error ":watchlist-id is required"))
                        (fraudster-id :initarg :fraudster-id :type
                         (common-lisp:or fraudster-id common-lisp:null)
                         :accessor %disassociate-fraudster-request-fraudster-id
                         :initform
                         (common-lisp:error ":fraudster-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %disassociate-fraudster-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-fraudster-request
                    'make-disassociate-fraudster-request))
 (common-lisp:defun make-disassociate-fraudster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id fraudster-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-fraudster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fraudster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fraudster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fraudster-id))
      (common-lisp:list
       (common-lisp:cons "FraudsterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fraudster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-fraudster-response common-lisp:nil
                       ((fraudster :initarg :fraudster :type
                         (common-lisp:or fraudster common-lisp:null) :accessor
                         %disassociate-fraudster-response-fraudster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-fraudster-response
                    'make-disassociate-fraudster-response))
 (common-lisp:defun make-disassociate-fraudster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fraudster)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-fraudster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fraudster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fraudster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fraudster))
      (common-lisp:list
       (common-lisp:cons "Fraudster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fraudster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain common-lisp:nil
                       ((watchlist-details :initarg :watchlist-details :type
                         (common-lisp:or watchlist-details common-lisp:null)
                         :accessor %domain-watchlist-details :initform
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %domain-updated-at :initform common-lisp:nil)
                        (server-side-encryption-update-details :initarg
                         :server-side-encryption-update-details :type
                         (common-lisp:or server-side-encryption-update-details
                                         common-lisp:null)
                         :accessor
                         %domain-server-side-encryption-update-details
                         :initform common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor %domain-server-side-encryption-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-name :initform common-lisp:nil)
                        (domain-status :initarg :domain-status :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor %domain-domain-status :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %domain-domain-id :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %domain-description :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %domain-created-at :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain 'make-domain))
 (common-lisp:defun make-domain
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-details updated-at
                     server-side-encryption-update-details
                     server-side-encryption-configuration name domain-status
                     domain-id description created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'domain
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-update-details))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionUpdateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-details))
      (common-lisp:list
       (common-lisp:cons "WatchlistDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain))
   common-lisp:nil))
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-summaries ()
   '(trivial-types:proper-list domain-summary))
 (common-lisp:defun |make-domain-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-summary common-lisp:nil
                       ((watchlist-details :initarg :watchlist-details :type
                         (common-lisp:or watchlist-details common-lisp:null)
                         :accessor %domain-summary-watchlist-details :initform
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %domain-summary-updated-at :initform common-lisp:nil)
                        (server-side-encryption-update-details :initarg
                         :server-side-encryption-update-details :type
                         (common-lisp:or server-side-encryption-update-details
                                         common-lisp:null)
                         :accessor
                         %domain-summary-server-side-encryption-update-details
                         :initform common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %domain-summary-server-side-encryption-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-summary-name :initform
                         common-lisp:nil)
                        (domain-status :initarg :domain-status :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor %domain-summary-domain-status :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %domain-summary-domain-id :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %domain-summary-description :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %domain-summary-created-at :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-summary-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain-summary 'make-domain-summary))
 (common-lisp:defun make-domain-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-details updated-at
                     server-side-encryption-update-details
                     server-side-encryption-configuration name domain-status
                     domain-id description created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'domain-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-update-details))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionUpdateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-details))
      (common-lisp:list
       (common-lisp:cons "WatchlistDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-summary))
   common-lisp:nil))
(common-lisp:deftype duplicate-registration-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enrollment-config common-lisp:nil
                       ((fraud-detection-config :initarg
                         :fraud-detection-config :type
                         (common-lisp:or enrollment-job-fraud-detection-config
                                         common-lisp:null)
                         :accessor %enrollment-config-fraud-detection-config
                         :initform common-lisp:nil)
                        (existing-enrollment-action :initarg
                         :existing-enrollment-action :type
                         (common-lisp:or existing-enrollment-action
                                         common-lisp:null)
                         :accessor
                         %enrollment-config-existing-enrollment-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enrollment-config 'make-enrollment-config))
 (common-lisp:defun make-enrollment-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fraud-detection-config
                     existing-enrollment-action)
   (common-lisp:apply #'common-lisp:make-instance 'enrollment-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enrollment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enrollment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-enrollment-action))
      (common-lisp:list
       (common-lisp:cons "ExistingEnrollmentAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fraud-detection-config))
      (common-lisp:list
       (common-lisp:cons "FraudDetectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enrollment-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enrollment-job-fraud-detection-config common-lisp:nil
                       ((watchlist-ids :initarg :watchlist-ids :type
                         (common-lisp:or
                          enrollment-job-fraud-detection-config-watchlist-ids
                          common-lisp:null)
                         :accessor
                         %enrollment-job-fraud-detection-config-watchlist-ids
                         :initform common-lisp:nil)
                        (risk-threshold :initarg :risk-threshold :type
                         (common-lisp:or score common-lisp:null) :accessor
                         %enrollment-job-fraud-detection-config-risk-threshold
                         :initform common-lisp:nil)
                        (fraud-detection-action :initarg
                         :fraud-detection-action :type
                         (common-lisp:or fraud-detection-action
                                         common-lisp:null)
                         :accessor
                         %enrollment-job-fraud-detection-config-fraud-detection-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enrollment-job-fraud-detection-config
                    'make-enrollment-job-fraud-detection-config))
 (common-lisp:defun make-enrollment-job-fraud-detection-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-ids risk-threshold
                     fraud-detection-action)
   (common-lisp:apply #'common-lisp:make-instance
                      'enrollment-job-fraud-detection-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enrollment-job-fraud-detection-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enrollment-job-fraud-detection-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fraud-detection-action))
      (common-lisp:list
       (common-lisp:cons "FraudDetectionAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-threshold))
      (common-lisp:list
       (common-lisp:cons "RiskThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-ids))
      (common-lisp:list
       (common-lisp:cons "WatchlistIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enrollment-job-fraud-detection-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enrollment-job-fraud-detection-config-watchlist-ids ()
   '(trivial-types:proper-list watchlist-id))
 (common-lisp:defun |make-enrollment-job-fraud-detection-config-watchlist-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list watchlist-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass evaluate-session-request common-lisp:nil
                       ((session-name-or-id :initarg :session-name-or-id :type
                         (common-lisp:or session-name-or-id common-lisp:null)
                         :accessor %evaluate-session-request-session-name-or-id
                         :initform
                         (common-lisp:error ":session-name-or-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %evaluate-session-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'evaluate-session-request 'make-evaluate-session-request))
 (common-lisp:defun make-evaluate-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-name-or-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-name-or-id))
      (common-lisp:list
       (common-lisp:cons "SessionNameOrId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-session-response common-lisp:nil
                       ((streaming-status :initarg :streaming-status :type
                         (common-lisp:or streaming-status common-lisp:null)
                         :accessor %evaluate-session-response-streaming-status
                         :initform common-lisp:nil)
                        (session-name :initarg :session-name :type
                         (common-lisp:or session-name common-lisp:null)
                         :accessor %evaluate-session-response-session-name
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %evaluate-session-response-session-id :initform
                         common-lisp:nil)
                        (fraud-detection-result :initarg
                         :fraud-detection-result :type
                         (common-lisp:or fraud-detection-result
                                         common-lisp:null)
                         :accessor
                         %evaluate-session-response-fraud-detection-result
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %evaluate-session-response-domain-id :initform
                         common-lisp:nil)
                        (authentication-result :initarg :authentication-result
                         :type
                         (common-lisp:or authentication-result
                                         common-lisp:null)
                         :accessor
                         %evaluate-session-response-authentication-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'evaluate-session-response
                    'make-evaluate-session-response))
 (common-lisp:defun make-evaluate-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-status session-name session-id
                     fraud-detection-result domain-id authentication-result)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-result))
      (common-lisp:list
       (common-lisp:cons "AuthenticationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fraud-detection-result))
      (common-lisp:list
       (common-lisp:cons "FraudDetectionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-name))
      (common-lisp:list
       (common-lisp:cons "SessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-status))
      (common-lisp:list
       (common-lisp:cons "StreamingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-session-response))
   common-lisp:nil))
(common-lisp:deftype existing-enrollment-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failure-details common-lisp:nil
                       ((status-code :initarg :status-code :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %failure-details-status-code :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failure-details-message :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'failure-details 'make-failure-details))
 (common-lisp:defun make-failure-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-code message)
   (common-lisp:apply #'common-lisp:make-instance 'failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-details))
   common-lisp:nil))
(common-lisp:deftype fraud-detection-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fraud-detection-configuration common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %fraud-detection-configuration-watchlist-id
                         :initform common-lisp:nil)
                        (risk-threshold :initarg :risk-threshold :type
                         (common-lisp:or score common-lisp:null) :accessor
                         %fraud-detection-configuration-risk-threshold
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fraud-detection-configuration
                    'make-fraud-detection-configuration))
 (common-lisp:defun make-fraud-detection-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id risk-threshold)
   (common-lisp:apply #'common-lisp:make-instance
                      'fraud-detection-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fraud-detection-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fraud-detection-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-threshold))
      (common-lisp:list
       (common-lisp:cons "RiskThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fraud-detection-configuration))
   common-lisp:nil))
(common-lisp:deftype fraud-detection-decision () 'common-lisp:string)
(common-lisp:deftype fraud-detection-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fraud-detection-reasons ()
   '(trivial-types:proper-list fraud-detection-reason))
 (common-lisp:defun |make-fraud-detection-reasons|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fraud-detection-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fraud-detection-result common-lisp:nil
                       ((risk-details :initarg :risk-details :type
                         (common-lisp:or fraud-risk-details common-lisp:null)
                         :accessor %fraud-detection-result-risk-details
                         :initform common-lisp:nil)
                        (reasons :initarg :reasons :type
                         (common-lisp:or fraud-detection-reasons
                                         common-lisp:null)
                         :accessor %fraud-detection-result-reasons :initform
                         common-lisp:nil)
                        (fraud-detection-result-id :initarg
                         :fraud-detection-result-id :type
                         (common-lisp:or unique-id-large common-lisp:null)
                         :accessor
                         %fraud-detection-result-fraud-detection-result-id
                         :initform common-lisp:nil)
                        (decision :initarg :decision :type
                         (common-lisp:or fraud-detection-decision
                                         common-lisp:null)
                         :accessor %fraud-detection-result-decision :initform
                         common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or fraud-detection-configuration
                                         common-lisp:null)
                         :accessor %fraud-detection-result-configuration
                         :initform common-lisp:nil)
                        (audio-aggregation-started-at :initarg
                         :audio-aggregation-started-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fraud-detection-result-audio-aggregation-started-at
                         :initform common-lisp:nil)
                        (audio-aggregation-ended-at :initarg
                         :audio-aggregation-ended-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fraud-detection-result-audio-aggregation-ended-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fraud-detection-result 'make-fraud-detection-result))
 (common-lisp:defun make-fraud-detection-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key risk-details reasons
                     fraud-detection-result-id decision configuration
                     audio-aggregation-started-at audio-aggregation-ended-at)
   (common-lisp:apply #'common-lisp:make-instance 'fraud-detection-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fraud-detection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fraud-detection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-aggregation-ended-at))
      (common-lisp:list
       (common-lisp:cons "AudioAggregationEndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-aggregation-started-at))
      (common-lisp:list
       (common-lisp:cons "AudioAggregationStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision))
      (common-lisp:list
       (common-lisp:cons "Decision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fraud-detection-result-id))
      (common-lisp:list
       (common-lisp:cons "FraudDetectionResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "Reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-details))
      (common-lisp:list
       (common-lisp:cons "RiskDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fraud-detection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fraud-risk-details common-lisp:nil
                       ((voice-spoofing-risk :initarg :voice-spoofing-risk
                         :type
                         (common-lisp:or voice-spoofing-risk common-lisp:null)
                         :accessor %fraud-risk-details-voice-spoofing-risk
                         :initform
                         (common-lisp:error
                          ":voice-spoofing-risk is required"))
                        (known-fraudster-risk :initarg :known-fraudster-risk
                         :type
                         (common-lisp:or known-fraudster-risk common-lisp:null)
                         :accessor %fraud-risk-details-known-fraudster-risk
                         :initform
                         (common-lisp:error
                          ":known-fraudster-risk is required"))))
 (common-lisp:export
  (common-lisp:list 'fraud-risk-details 'make-fraud-risk-details))
 (common-lisp:defun make-fraud-risk-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key voice-spoofing-risk known-fraudster-risk)
   (common-lisp:apply #'common-lisp:make-instance 'fraud-risk-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fraud-risk-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fraud-risk-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'known-fraudster-risk))
      (common-lisp:list
       (common-lisp:cons "KnownFraudsterRisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-spoofing-risk))
      (common-lisp:list
       (common-lisp:cons "VoiceSpoofingRisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fraud-risk-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fraudster common-lisp:nil
                       ((watchlist-ids :initarg :watchlist-ids :type
                         (common-lisp:or response-watchlist-ids
                                         common-lisp:null)
                         :accessor %fraudster-watchlist-ids :initform
                         common-lisp:nil)
                        (generated-fraudster-id :initarg
                         :generated-fraudster-id :type
                         (common-lisp:or generated-fraudster-id
                                         common-lisp:null)
                         :accessor %fraudster-generated-fraudster-id :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %fraudster-domain-id :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fraudster-created-at :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fraudster 'make-fraudster))
 (common-lisp:defun make-fraudster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-ids generated-fraudster-id
                     domain-id created-at)
   (common-lisp:apply #'common-lisp:make-instance 'fraudster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fraudster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fraudster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-fraudster-id))
      (common-lisp:list
       (common-lisp:cons "GeneratedFraudsterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-ids))
      (common-lisp:list
       (common-lisp:cons "WatchlistIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fraudster))
   common-lisp:nil))
(common-lisp:deftype fraudster-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fraudster-registration-job common-lisp:nil
                       ((registration-config :initarg :registration-config
                         :type
                         (common-lisp:or registration-config common-lisp:null)
                         :accessor
                         %fraudster-registration-job-registration-config
                         :initform common-lisp:nil)
                        (output-data-config :initarg :output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         %fraudster-registration-job-output-data-config
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or fraudster-registration-job-status
                                         common-lisp:null)
                         :accessor %fraudster-registration-job-job-status
                         :initform common-lisp:nil)
                        (job-progress :initarg :job-progress :type
                         (common-lisp:or job-progress common-lisp:null)
                         :accessor %fraudster-registration-job-job-progress
                         :initform common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %fraudster-registration-job-job-name :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %fraudster-registration-job-job-id :initform
                         common-lisp:nil)
                        (input-data-config :initarg :input-data-config :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         %fraudster-registration-job-input-data-config
                         :initform common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or failure-details common-lisp:null)
                         :accessor %fraudster-registration-job-failure-details
                         :initform common-lisp:nil)
                        (ended-at :initarg :ended-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fraudster-registration-job-ended-at :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %fraudster-registration-job-domain-id :initform
                         common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         %fraudster-registration-job-data-access-role-arn
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fraudster-registration-job-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fraudster-registration-job
                    'make-fraudster-registration-job))
 (common-lisp:defun make-fraudster-registration-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registration-config output-data-config
                     job-status job-progress job-name job-id input-data-config
                     failure-details ended-at domain-id data-access-role-arn
                     created-at)
   (common-lisp:apply #'common-lisp:make-instance 'fraudster-registration-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fraudster-registration-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fraudster-registration-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "EndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-progress))
      (common-lisp:list
       (common-lisp:cons "JobProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-config))
      (common-lisp:list
       (common-lisp:cons "RegistrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fraudster-registration-job))
   common-lisp:nil))
(common-lisp:deftype fraudster-registration-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fraudster-registration-job-summaries ()
   '(trivial-types:proper-list fraudster-registration-job-summary))
 (common-lisp:defun |make-fraudster-registration-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fraudster-registration-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fraudster-registration-job-summary common-lisp:nil
                       ((job-status :initarg :job-status :type
                         (common-lisp:or fraudster-registration-job-status
                                         common-lisp:null)
                         :accessor
                         %fraudster-registration-job-summary-job-status
                         :initform common-lisp:nil)
                        (job-progress :initarg :job-progress :type
                         (common-lisp:or job-progress common-lisp:null)
                         :accessor
                         %fraudster-registration-job-summary-job-progress
                         :initform common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %fraudster-registration-job-summary-job-name :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %fraudster-registration-job-summary-job-id :initform
                         common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or failure-details common-lisp:null)
                         :accessor
                         %fraudster-registration-job-summary-failure-details
                         :initform common-lisp:nil)
                        (ended-at :initarg :ended-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fraudster-registration-job-summary-ended-at :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %fraudster-registration-job-summary-domain-id
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fraudster-registration-job-summary-created-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fraudster-registration-job-summary
                    'make-fraudster-registration-job-summary))
 (common-lisp:defun make-fraudster-registration-job-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-status job-progress job-name job-id
                     failure-details ended-at domain-id created-at)
   (common-lisp:apply #'common-lisp:make-instance
                      'fraudster-registration-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fraudster-registration-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fraudster-registration-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "EndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-progress))
      (common-lisp:list
       (common-lisp:cons "JobProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fraudster-registration-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fraudster-summaries ()
   '(trivial-types:proper-list fraudster-summary))
 (common-lisp:defun |make-fraudster-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fraudster-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fraudster-summary common-lisp:nil
                       ((watchlist-ids :initarg :watchlist-ids :type
                         (common-lisp:or response-watchlist-ids
                                         common-lisp:null)
                         :accessor %fraudster-summary-watchlist-ids :initform
                         common-lisp:nil)
                        (generated-fraudster-id :initarg
                         :generated-fraudster-id :type
                         (common-lisp:or generated-fraudster-id
                                         common-lisp:null)
                         :accessor %fraudster-summary-generated-fraudster-id
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %fraudster-summary-domain-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fraudster-summary-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fraudster-summary 'make-fraudster-summary))
 (common-lisp:defun make-fraudster-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-ids generated-fraudster-id
                     domain-id created-at)
   (common-lisp:apply #'common-lisp:make-instance 'fraudster-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fraudster-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fraudster-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-fraudster-id))
      (common-lisp:list
       (common-lisp:cons "GeneratedFraudsterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-ids))
      (common-lisp:list
       (common-lisp:cons "WatchlistIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fraudster-summary))
   common-lisp:nil))
(common-lisp:deftype generated-fraudster-id () 'common-lisp:string)
(common-lisp:deftype generated-speaker-id () 'common-lisp:string)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-data-config common-lisp:nil
                       ((s3uri :initarg :s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %input-data-config-s3uri :initform
                         (common-lisp:error ":s3uri is required"))))
 (common-lisp:export
  (common-lisp:list 'input-data-config 'make-input-data-config))
 (common-lisp:defun make-input-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3uri)
   (common-lisp:apply #'common-lisp:make-instance 'input-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-data-config))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (voice-id-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-progress common-lisp:nil
                       ((percent-complete :initarg :percent-complete :type
                         (common-lisp:or score common-lisp:null) :accessor
                         %job-progress-percent-complete :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-progress 'make-job-progress))
 (common-lisp:defun make-job-progress
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key percent-complete)
   (common-lisp:apply #'common-lisp:make-instance 'job-progress
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-complete))
      (common-lisp:list
       (common-lisp:cons "PercentComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-progress))
   common-lisp:nil))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass known-fraudster-risk common-lisp:nil
                       ((risk-score :initarg :risk-score :type
                         (common-lisp:or score common-lisp:null) :accessor
                         %known-fraudster-risk-risk-score :initform
                         (common-lisp:error ":risk-score is required"))
                        (generated-fraudster-id :initarg
                         :generated-fraudster-id :type
                         (common-lisp:or generated-fraudster-id
                                         common-lisp:null)
                         :accessor %known-fraudster-risk-generated-fraudster-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'known-fraudster-risk 'make-known-fraudster-risk))
 (common-lisp:defun make-known-fraudster-risk
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key risk-score generated-fraudster-id)
   (common-lisp:apply #'common-lisp:make-instance 'known-fraudster-risk
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input known-fraudster-risk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input known-fraudster-risk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-fraudster-id))
      (common-lisp:list
       (common-lisp:cons "GeneratedFraudsterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-score))
      (common-lisp:list
       (common-lisp:cons "RiskScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input known-fraudster-risk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-domains-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-for-list-domain-fe
                                         common-lisp:null)
                         :accessor %list-domains-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domains-request 'make-list-domains-request))
 (common-lisp:defun make-list-domains-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-domains-response-next-token :initform
                         common-lisp:nil)
                        (domain-summaries :initarg :domain-summaries :type
                         (common-lisp:or domain-summaries common-lisp:null)
                         :accessor %list-domains-response-domain-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domains-response 'make-list-domains-response))
 (common-lisp:defun make-list-domains-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token domain-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-summaries))
      (common-lisp:list
       (common-lisp:cons "DomainSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fraudster-registration-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fraudster-registration-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-for-list common-lisp:null)
                         :accessor
                         %list-fraudster-registration-jobs-request-max-results
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or fraudster-registration-job-status
                                         common-lisp:null)
                         :accessor
                         %list-fraudster-registration-jobs-request-job-status
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %list-fraudster-registration-jobs-request-domain-id
                         :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fraudster-registration-jobs-request
                    'make-list-fraudster-registration-jobs-request))
 (common-lisp:defun make-list-fraudster-registration-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results job-status
                     domain-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fraudster-registration-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudster-registration-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudster-registration-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudster-registration-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fraudster-registration-jobs-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-fraudster-registration-jobs-response-next-token
                         :initform common-lisp:nil)
                        (job-summaries :initarg :job-summaries :type
                         (common-lisp:or fraudster-registration-job-summaries
                                         common-lisp:null)
                         :accessor
                         %list-fraudster-registration-jobs-response-job-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fraudster-registration-jobs-response
                    'make-list-fraudster-registration-jobs-response))
 (common-lisp:defun make-list-fraudster-registration-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token job-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fraudster-registration-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudster-registration-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudster-registration-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summaries))
      (common-lisp:list
       (common-lisp:cons "JobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudster-registration-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fraudsters-request common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %list-fraudsters-request-watchlist-id
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fraudsters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-for-list common-lisp:null)
                         :accessor %list-fraudsters-request-max-results
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %list-fraudsters-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fraudsters-request 'make-list-fraudsters-request))
 (common-lisp:defun make-list-fraudsters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id next-token max-results
                     domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-fraudsters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudsters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudsters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudsters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fraudsters-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-fraudsters-response-next-token :initform
                         common-lisp:nil)
                        (fraudster-summaries :initarg :fraudster-summaries
                         :type
                         (common-lisp:or fraudster-summaries common-lisp:null)
                         :accessor
                         %list-fraudsters-response-fraudster-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fraudsters-response 'make-list-fraudsters-response))
 (common-lisp:defun make-list-fraudsters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fraudster-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-fraudsters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudsters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudsters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fraudster-summaries))
      (common-lisp:list
       (common-lisp:cons "FraudsterSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fraudsters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-speaker-enrollment-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-speaker-enrollment-jobs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-for-list common-lisp:null)
                         :accessor
                         %list-speaker-enrollment-jobs-request-max-results
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or speaker-enrollment-job-status
                                         common-lisp:null)
                         :accessor
                         %list-speaker-enrollment-jobs-request-job-status
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %list-speaker-enrollment-jobs-request-domain-id
                         :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-speaker-enrollment-jobs-request
                    'make-list-speaker-enrollment-jobs-request))
 (common-lisp:defun make-list-speaker-enrollment-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results job-status
                     domain-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-speaker-enrollment-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-speaker-enrollment-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-speaker-enrollment-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-speaker-enrollment-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-speaker-enrollment-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-speaker-enrollment-jobs-response-next-token
                         :initform common-lisp:nil)
                        (job-summaries :initarg :job-summaries :type
                         (common-lisp:or speaker-enrollment-job-summaries
                                         common-lisp:null)
                         :accessor
                         %list-speaker-enrollment-jobs-response-job-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-speaker-enrollment-jobs-response
                    'make-list-speaker-enrollment-jobs-response))
 (common-lisp:defun make-list-speaker-enrollment-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token job-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-speaker-enrollment-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-speaker-enrollment-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-speaker-enrollment-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summaries))
      (common-lisp:list
       (common-lisp:cons "JobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-speaker-enrollment-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-speakers-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-speakers-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-for-list common-lisp:null)
                         :accessor %list-speakers-request-max-results :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %list-speakers-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-speakers-request 'make-list-speakers-request))
 (common-lisp:defun make-list-speakers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-speakers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-speakers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-speakers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-speakers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-speakers-response common-lisp:nil
                       ((speaker-summaries :initarg :speaker-summaries :type
                         (common-lisp:or speaker-summaries common-lisp:null)
                         :accessor %list-speakers-response-speaker-summaries
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-speakers-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-speakers-response 'make-list-speakers-response))
 (common-lisp:defun make-list-speakers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speaker-summaries next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-speakers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-speakers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-speakers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker-summaries))
      (common-lisp:list
       (common-lisp:cons "SpeakerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-speakers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-watchlists-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-watchlists-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-for-list common-lisp:null)
                         :accessor %list-watchlists-request-max-results
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %list-watchlists-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-watchlists-request 'make-list-watchlists-request))
 (common-lisp:defun make-list-watchlists-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-watchlists-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-watchlists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-watchlists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-watchlists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-watchlists-response common-lisp:nil
                       ((watchlist-summaries :initarg :watchlist-summaries
                         :type
                         (common-lisp:or watchlist-summaries common-lisp:null)
                         :accessor
                         %list-watchlists-response-watchlist-summaries
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-watchlists-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-watchlists-response 'make-list-watchlists-response))
 (common-lisp:defun make-list-watchlists-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-summaries next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-watchlists-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-watchlists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-watchlists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-summaries))
      (common-lisp:list
       (common-lisp:cons "WatchlistSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-watchlists-response))
   common-lisp:nil))
(common-lisp:deftype max-results-for-list () 'common-lisp:integer)
(common-lisp:deftype max-results-for-list-domain-fe () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass opt-out-speaker-request common-lisp:nil
                       ((speaker-id :initarg :speaker-id :type
                         (common-lisp:or speaker-id common-lisp:null) :accessor
                         %opt-out-speaker-request-speaker-id :initform
                         (common-lisp:error ":speaker-id is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %opt-out-speaker-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export
  (common-lisp:list 'opt-out-speaker-request 'make-opt-out-speaker-request))
 (common-lisp:defun make-opt-out-speaker-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speaker-id domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'opt-out-speaker-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-speaker-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-speaker-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker-id))
      (common-lisp:list
       (common-lisp:cons "SpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-speaker-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass opt-out-speaker-response common-lisp:nil
                       ((speaker :initarg :speaker :type
                         (common-lisp:or speaker common-lisp:null) :accessor
                         %opt-out-speaker-response-speaker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'opt-out-speaker-response 'make-opt-out-speaker-response))
 (common-lisp:defun make-opt-out-speaker-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speaker)
   (common-lisp:apply #'common-lisp:make-instance 'opt-out-speaker-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-speaker-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-speaker-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker))
      (common-lisp:list
       (common-lisp:cons "Speaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          opt-out-speaker-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-data-config common-lisp:nil
                       ((s3uri :initarg :s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %output-data-config-s3uri :initform
                         (common-lisp:error ":s3uri is required"))
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %output-data-config-kms-key-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-data-config 'make-output-data-config))
 (common-lisp:defun make-output-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3uri kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'output-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-data-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registration-config common-lisp:nil
                       ((watchlist-ids :initarg :watchlist-ids :type
                         (common-lisp:or registration-config-watchlist-ids
                                         common-lisp:null)
                         :accessor %registration-config-watchlist-ids :initform
                         common-lisp:nil)
                        (fraudster-similarity-threshold :initarg
                         :fraudster-similarity-threshold :type
                         (common-lisp:or score common-lisp:null) :accessor
                         %registration-config-fraudster-similarity-threshold
                         :initform common-lisp:nil)
                        (duplicate-registration-action :initarg
                         :duplicate-registration-action :type
                         (common-lisp:or duplicate-registration-action
                                         common-lisp:null)
                         :accessor
                         %registration-config-duplicate-registration-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'registration-config 'make-registration-config))
 (common-lisp:defun make-registration-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-ids
                     fraudster-similarity-threshold
                     duplicate-registration-action)
   (common-lisp:apply #'common-lisp:make-instance 'registration-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'duplicate-registration-action))
      (common-lisp:list
       (common-lisp:cons "DuplicateRegistrationAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fraudster-similarity-threshold))
      (common-lisp:list
       (common-lisp:cons "FraudsterSimilarityThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-ids))
      (common-lisp:list
       (common-lisp:cons "WatchlistIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registration-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registration-config-watchlist-ids ()
   '(trivial-types:proper-list watchlist-id))
 (common-lisp:defun |make-registration-config-watchlist-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list watchlist-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (voice-id-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype response-watchlist-ids ()
   '(trivial-types:proper-list watchlist-id))
 (common-lisp:defun |make-response-watchlist-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list watchlist-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:deftype score () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-configuration common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %server-side-encryption-configuration-kms-key-id
                         :initform
                         (common-lisp:error ":kms-key-id is required"))))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-configuration
                    'make-server-side-encryption-configuration))
 (common-lisp:defun make-server-side-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-side-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-update-details common-lisp:nil
                       ((update-status :initarg :update-status :type
                         (common-lisp:or server-side-encryption-update-status
                                         common-lisp:null)
                         :accessor
                         %server-side-encryption-update-details-update-status
                         :initform common-lisp:nil)
                        (old-kms-key-id :initarg :old-kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %server-side-encryption-update-details-old-kms-key-id
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %server-side-encryption-update-details-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-update-details
                    'make-server-side-encryption-update-details))
 (common-lisp:defun make-server-side-encryption-update-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-status old-kms-key-id message)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-side-encryption-update-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-update-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-update-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'old-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "OldKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-update-details))
   common-lisp:nil))
(common-lisp:deftype server-side-encryption-update-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (voice-id-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:deftype session-name () 'common-lisp:string)
(common-lisp:deftype session-name-or-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass speaker common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-updated-at :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or speaker-status common-lisp:null)
                         :accessor %speaker-status :initform common-lisp:nil)
                        (last-accessed-at :initarg :last-accessed-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-last-accessed-at :initform common-lisp:nil)
                        (generated-speaker-id :initarg :generated-speaker-id
                         :type
                         (common-lisp:or generated-speaker-id common-lisp:null)
                         :accessor %speaker-generated-speaker-id :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %speaker-domain-id :initform common-lisp:nil)
                        (customer-speaker-id :initarg :customer-speaker-id
                         :type
                         (common-lisp:or customer-speaker-id common-lisp:null)
                         :accessor %speaker-customer-speaker-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-created-at :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'speaker 'make-speaker))
 (common-lisp:defun make-speaker
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at status last-accessed-at
                     generated-speaker-id domain-id customer-speaker-id
                     created-at)
   (common-lisp:apply #'common-lisp:make-instance 'speaker
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input speaker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input speaker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-speaker-id))
      (common-lisp:list
       (common-lisp:cons "CustomerSpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-speaker-id))
      (common-lisp:list
       (common-lisp:cons "GeneratedSpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed-at))
      (common-lisp:list
       (common-lisp:cons "LastAccessedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input speaker))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass speaker-enrollment-job common-lisp:nil
                       ((output-data-config :initarg :output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor %speaker-enrollment-job-output-data-config
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or speaker-enrollment-job-status
                                         common-lisp:null)
                         :accessor %speaker-enrollment-job-job-status :initform
                         common-lisp:nil)
                        (job-progress :initarg :job-progress :type
                         (common-lisp:or job-progress common-lisp:null)
                         :accessor %speaker-enrollment-job-job-progress
                         :initform common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %speaker-enrollment-job-job-name :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %speaker-enrollment-job-job-id :initform
                         common-lisp:nil)
                        (input-data-config :initarg :input-data-config :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor %speaker-enrollment-job-input-data-config
                         :initform common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or failure-details common-lisp:null)
                         :accessor %speaker-enrollment-job-failure-details
                         :initform common-lisp:nil)
                        (enrollment-config :initarg :enrollment-config :type
                         (common-lisp:or enrollment-config common-lisp:null)
                         :accessor %speaker-enrollment-job-enrollment-config
                         :initform common-lisp:nil)
                        (ended-at :initarg :ended-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-enrollment-job-ended-at :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %speaker-enrollment-job-domain-id :initform
                         common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %speaker-enrollment-job-data-access-role-arn
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-enrollment-job-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'speaker-enrollment-job 'make-speaker-enrollment-job))
 (common-lisp:defun make-speaker-enrollment-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-data-config job-status
                     job-progress job-name job-id input-data-config
                     failure-details enrollment-config ended-at domain-id
                     data-access-role-arn created-at)
   (common-lisp:apply #'common-lisp:make-instance 'speaker-enrollment-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          speaker-enrollment-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          speaker-enrollment-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "EndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-config))
      (common-lisp:list
       (common-lisp:cons "EnrollmentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-progress))
      (common-lisp:list
       (common-lisp:cons "JobProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          speaker-enrollment-job))
   common-lisp:nil))
(common-lisp:deftype speaker-enrollment-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype speaker-enrollment-job-summaries ()
   '(trivial-types:proper-list speaker-enrollment-job-summary))
 (common-lisp:defun |make-speaker-enrollment-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            speaker-enrollment-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass speaker-enrollment-job-summary common-lisp:nil
                       ((job-status :initarg :job-status :type
                         (common-lisp:or speaker-enrollment-job-status
                                         common-lisp:null)
                         :accessor %speaker-enrollment-job-summary-job-status
                         :initform common-lisp:nil)
                        (job-progress :initarg :job-progress :type
                         (common-lisp:or job-progress common-lisp:null)
                         :accessor %speaker-enrollment-job-summary-job-progress
                         :initform common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %speaker-enrollment-job-summary-job-name :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %speaker-enrollment-job-summary-job-id :initform
                         common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or failure-details common-lisp:null)
                         :accessor
                         %speaker-enrollment-job-summary-failure-details
                         :initform common-lisp:nil)
                        (ended-at :initarg :ended-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-enrollment-job-summary-ended-at :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %speaker-enrollment-job-summary-domain-id :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-enrollment-job-summary-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'speaker-enrollment-job-summary
                    'make-speaker-enrollment-job-summary))
 (common-lisp:defun make-speaker-enrollment-job-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-status job-progress job-name job-id
                     failure-details ended-at domain-id created-at)
   (common-lisp:apply #'common-lisp:make-instance
                      'speaker-enrollment-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          speaker-enrollment-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          speaker-enrollment-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "EndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-progress))
      (common-lisp:list
       (common-lisp:cons "JobProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          speaker-enrollment-job-summary))
   common-lisp:nil))
(common-lisp:deftype speaker-id () 'common-lisp:string)
(common-lisp:deftype speaker-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype speaker-summaries ()
   '(trivial-types:proper-list speaker-summary))
 (common-lisp:defun |make-speaker-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list speaker-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass speaker-summary common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-summary-updated-at :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or speaker-status common-lisp:null)
                         :accessor %speaker-summary-status :initform
                         common-lisp:nil)
                        (last-accessed-at :initarg :last-accessed-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-summary-last-accessed-at :initform
                         common-lisp:nil)
                        (generated-speaker-id :initarg :generated-speaker-id
                         :type
                         (common-lisp:or generated-speaker-id common-lisp:null)
                         :accessor %speaker-summary-generated-speaker-id
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %speaker-summary-domain-id :initform common-lisp:nil)
                        (customer-speaker-id :initarg :customer-speaker-id
                         :type
                         (common-lisp:or customer-speaker-id common-lisp:null)
                         :accessor %speaker-summary-customer-speaker-id
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %speaker-summary-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'speaker-summary 'make-speaker-summary))
 (common-lisp:defun make-speaker-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at status last-accessed-at
                     generated-speaker-id domain-id customer-speaker-id
                     created-at)
   (common-lisp:apply #'common-lisp:make-instance 'speaker-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input speaker-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input speaker-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-speaker-id))
      (common-lisp:list
       (common-lisp:cons "CustomerSpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-speaker-id))
      (common-lisp:list
       (common-lisp:cons "GeneratedSpeakerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed-at))
      (common-lisp:list
       (common-lisp:cons "LastAccessedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input speaker-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fraudster-registration-job-request common-lisp:nil
                       ((registration-config :initarg :registration-config
                         :type
                         (common-lisp:or registration-config common-lisp:null)
                         :accessor
                         %start-fraudster-registration-job-request-registration-config
                         :initform common-lisp:nil)
                        (output-data-config :initarg :output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         %start-fraudster-registration-job-request-output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required"))
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %start-fraudster-registration-job-request-job-name
                         :initform common-lisp:nil)
                        (input-data-config :initarg :input-data-config :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         %start-fraudster-registration-job-request-input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %start-fraudster-registration-job-request-domain-id
                         :initform
                         (common-lisp:error ":domain-id is required"))
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         %start-fraudster-registration-job-request-data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         %start-fraudster-registration-job-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-fraudster-registration-job-request
                    'make-start-fraudster-registration-job-request))
 (common-lisp:defun make-start-fraudster-registration-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registration-config output-data-config
                     job-name input-data-config domain-id data-access-role-arn
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-fraudster-registration-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fraudster-registration-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fraudster-registration-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-config))
      (common-lisp:list
       (common-lisp:cons "RegistrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fraudster-registration-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fraudster-registration-job-response
                       common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or fraudster-registration-job
                                         common-lisp:null)
                         :accessor
                         %start-fraudster-registration-job-response-job
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-fraudster-registration-job-response
                    'make-start-fraudster-registration-job-response))
 (common-lisp:defun make-start-fraudster-registration-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-fraudster-registration-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fraudster-registration-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fraudster-registration-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fraudster-registration-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-speaker-enrollment-job-request common-lisp:nil
                       ((output-data-config :initarg :output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         %start-speaker-enrollment-job-request-output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required"))
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %start-speaker-enrollment-job-request-job-name
                         :initform common-lisp:nil)
                        (input-data-config :initarg :input-data-config :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         %start-speaker-enrollment-job-request-input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required"))
                        (enrollment-config :initarg :enrollment-config :type
                         (common-lisp:or enrollment-config common-lisp:null)
                         :accessor
                         %start-speaker-enrollment-job-request-enrollment-config
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %start-speaker-enrollment-job-request-domain-id
                         :initform
                         (common-lisp:error ":domain-id is required"))
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         %start-speaker-enrollment-job-request-data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         %start-speaker-enrollment-job-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-speaker-enrollment-job-request
                    'make-start-speaker-enrollment-job-request))
 (common-lisp:defun make-start-speaker-enrollment-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-data-config job-name
                     input-data-config enrollment-config domain-id
                     data-access-role-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-speaker-enrollment-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-enrollment-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-enrollment-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-config))
      (common-lisp:list
       (common-lisp:cons "EnrollmentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-enrollment-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-speaker-enrollment-job-response common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or speaker-enrollment-job
                                         common-lisp:null)
                         :accessor %start-speaker-enrollment-job-response-job
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-speaker-enrollment-job-response
                    'make-start-speaker-enrollment-job-response))
 (common-lisp:defun make-start-speaker-enrollment-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-speaker-enrollment-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-enrollment-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-enrollment-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-enrollment-job-response))
   common-lisp:nil))
(common-lisp:deftype streaming-status () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (voice-id-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype unique-id-large () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-request common-lisp:nil
                       ((server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %update-domain-request-server-side-encryption-configuration
                         :initform
                         (common-lisp:error
                          ":server-side-encryption-configuration is required"))
                        (name :initarg :name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %update-domain-request-name :initform
                         (common-lisp:error ":name is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %update-domain-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-domain-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-domain-request 'make-update-domain-request))
 (common-lisp:defun make-update-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-side-encryption-configuration name
                     domain-id description)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-response common-lisp:nil
                       ((domain :initarg :domain :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         %update-domain-response-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-domain-response 'make-update-domain-response))
 (common-lisp:defun make-update-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-watchlist-request common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %update-watchlist-request-watchlist-id
                         :initform
                         (common-lisp:error ":watchlist-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or watchlist-name common-lisp:null)
                         :accessor %update-watchlist-request-name :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %update-watchlist-request-domain-id :initform
                         (common-lisp:error ":domain-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or watchlist-description
                                         common-lisp:null)
                         :accessor %update-watchlist-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-watchlist-request 'make-update-watchlist-request))
 (common-lisp:defun make-update-watchlist-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id name domain-id description)
   (common-lisp:apply #'common-lisp:make-instance 'update-watchlist-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-watchlist-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-watchlist-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-watchlist-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-watchlist-response common-lisp:nil
                       ((watchlist :initarg :watchlist :type
                         (common-lisp:or watchlist common-lisp:null) :accessor
                         %update-watchlist-response-watchlist :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-watchlist-response
                    'make-update-watchlist-response))
 (common-lisp:defun make-update-watchlist-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist)
   (common-lisp:apply #'common-lisp:make-instance 'update-watchlist-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-watchlist-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-watchlist-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist))
      (common-lisp:list
       (common-lisp:cons "Watchlist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-watchlist-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (voice-id-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass voice-spoofing-risk common-lisp:nil
                       ((risk-score :initarg :risk-score :type
                         (common-lisp:or score common-lisp:null) :accessor
                         %voice-spoofing-risk-risk-score :initform
                         (common-lisp:error ":risk-score is required"))))
 (common-lisp:export
  (common-lisp:list 'voice-spoofing-risk 'make-voice-spoofing-risk))
 (common-lisp:defun make-voice-spoofing-risk
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key risk-score)
   (common-lisp:apply #'common-lisp:make-instance 'voice-spoofing-risk
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input voice-spoofing-risk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input voice-spoofing-risk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-score))
      (common-lisp:list
       (common-lisp:cons "RiskScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input voice-spoofing-risk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass watchlist common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %watchlist-watchlist-id :initform
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %watchlist-updated-at :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or watchlist-name common-lisp:null)
                         :accessor %watchlist-name :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %watchlist-domain-id :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or watchlist-description
                                         common-lisp:null)
                         :accessor %watchlist-description :initform
                         common-lisp:nil)
                        (default-watchlist :initarg :default-watchlist :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %watchlist-default-watchlist :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %watchlist-created-at :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'watchlist 'make-watchlist))
 (common-lisp:defun make-watchlist
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id updated-at name domain-id
                     description default-watchlist created-at)
   (common-lisp:apply #'common-lisp:make-instance 'watchlist
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input watchlist))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input watchlist))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-watchlist))
      (common-lisp:list
       (common-lisp:cons "DefaultWatchlist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input watchlist))
   common-lisp:nil))
(common-lisp:deftype watchlist-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass watchlist-details common-lisp:nil
                       ((default-watchlist-id :initarg :default-watchlist-id
                         :type (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %watchlist-details-default-watchlist-id
                         :initform
                         (common-lisp:error
                          ":default-watchlist-id is required"))))
 (common-lisp:export
  (common-lisp:list 'watchlist-details 'make-watchlist-details))
 (common-lisp:defun make-watchlist-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-watchlist-id)
   (common-lisp:apply #'common-lisp:make-instance 'watchlist-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input watchlist-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input watchlist-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-watchlist-id))
      (common-lisp:list
       (common-lisp:cons "DefaultWatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input watchlist-details))
   common-lisp:nil))
(common-lisp:deftype watchlist-id () 'common-lisp:string)
(common-lisp:deftype watchlist-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype watchlist-summaries ()
   '(trivial-types:proper-list watchlist-summary))
 (common-lisp:defun |make-watchlist-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list watchlist-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass watchlist-summary common-lisp:nil
                       ((watchlist-id :initarg :watchlist-id :type
                         (common-lisp:or watchlist-id common-lisp:null)
                         :accessor %watchlist-summary-watchlist-id :initform
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %watchlist-summary-updated-at :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or watchlist-name common-lisp:null)
                         :accessor %watchlist-summary-name :initform
                         common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %watchlist-summary-domain-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or watchlist-description
                                         common-lisp:null)
                         :accessor %watchlist-summary-description :initform
                         common-lisp:nil)
                        (default-watchlist :initarg :default-watchlist :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %watchlist-summary-default-watchlist :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %watchlist-summary-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'watchlist-summary 'make-watchlist-summary))
 (common-lisp:defun make-watchlist-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watchlist-id updated-at name domain-id
                     description default-watchlist created-at)
   (common-lisp:apply #'common-lisp:make-instance 'watchlist-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input watchlist-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input watchlist-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-watchlist))
      (common-lisp:list
       (common-lisp:cons "DefaultWatchlist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watchlist-id))
      (common-lisp:list
       (common-lisp:cons "WatchlistId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input watchlist-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-fraudster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id fraudster-id watchlist-id)
   (common-lisp:declare
    (common-lisp:ignorable domain-id fraudster-id watchlist-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-fraudster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateFraudster"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-fraudster))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description name
                     server-side-encryption-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description name
     server-side-encryption-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDomain"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-watchlist
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description domain-id name)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-watchlist-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateWatchlist"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-watchlist))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id)
   (common-lisp:declare (common-lisp:ignorable domain-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDomain"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-fraudster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id fraudster-id)
   (common-lisp:declare (common-lisp:ignorable domain-id fraudster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fraudster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteFraudster"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fraudster))
(common-lisp:progn
 (common-lisp:defun delete-speaker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id speaker-id)
   (common-lisp:declare (common-lisp:ignorable domain-id speaker-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-speaker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSpeaker"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-speaker))
(common-lisp:progn
 (common-lisp:defun delete-watchlist
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id watchlist-id)
   (common-lisp:declare (common-lisp:ignorable domain-id watchlist-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-watchlist-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteWatchlist"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-watchlist))
(common-lisp:progn
 (common-lisp:defun describe-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id)
   (common-lisp:declare (common-lisp:ignorable domain-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDomain"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain))
(common-lisp:progn
 (common-lisp:defun describe-fraudster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id fraudster-id)
   (common-lisp:declare (common-lisp:ignorable domain-id fraudster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fraudster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFraudster"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fraudster))
(common-lisp:progn
 (common-lisp:defun describe-fraudster-registration-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id job-id)
   (common-lisp:declare (common-lisp:ignorable domain-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fraudster-registration-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFraudsterRegistrationJob"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fraudster-registration-job))
(common-lisp:progn
 (common-lisp:defun describe-speaker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id speaker-id)
   (common-lisp:declare (common-lisp:ignorable domain-id speaker-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-speaker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSpeaker"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-speaker))
(common-lisp:progn
 (common-lisp:defun describe-speaker-enrollment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id job-id)
   (common-lisp:declare (common-lisp:ignorable domain-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-speaker-enrollment-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSpeakerEnrollmentJob"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-speaker-enrollment-job))
(common-lisp:progn
 (common-lisp:defun describe-watchlist
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id watchlist-id)
   (common-lisp:declare (common-lisp:ignorable domain-id watchlist-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-watchlist-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWatchlist"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-watchlist))
(common-lisp:progn
 (common-lisp:defun disassociate-fraudster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id fraudster-id watchlist-id)
   (common-lisp:declare
    (common-lisp:ignorable domain-id fraudster-id watchlist-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-fraudster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateFraudster"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-fraudster))
(common-lisp:progn
 (common-lisp:defun evaluate-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id session-name-or-id)
   (common-lisp:declare (common-lisp:ignorable domain-id session-name-or-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-evaluate-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EvaluateSession"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'evaluate-session))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDomains"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-fraudster-registration-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id job-status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-id job-status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-fraudster-registration-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFraudsterRegistrationJobs"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fraudster-registration-jobs))
(common-lisp:progn
 (common-lisp:defun list-fraudsters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id max-results next-token
                     watchlist-id)
   (common-lisp:declare
    (common-lisp:ignorable domain-id max-results next-token watchlist-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fraudsters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFraudsters"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fraudsters))
(common-lisp:progn
 (common-lisp:defun list-speaker-enrollment-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id job-status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-id job-status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-speaker-enrollment-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSpeakerEnrollmentJobs"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-speaker-enrollment-jobs))
(common-lisp:progn
 (common-lisp:defun list-speakers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-speakers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSpeakers"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-speakers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-watchlists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-watchlists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListWatchlists"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-watchlists))
(common-lisp:progn
 (common-lisp:defun opt-out-speaker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id speaker-id)
   (common-lisp:declare (common-lisp:ignorable domain-id speaker-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-opt-out-speaker-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "OptOutSpeaker"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'opt-out-speaker))
(common-lisp:progn
 (common-lisp:defun start-fraudster-registration-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data-access-role-arn
                     domain-id input-data-config job-name output-data-config
                     registration-config)
   (common-lisp:declare
    (common-lisp:ignorable client-token data-access-role-arn domain-id
     input-data-config job-name output-data-config registration-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-fraudster-registration-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartFraudsterRegistrationJob"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-fraudster-registration-job))
(common-lisp:progn
 (common-lisp:defun start-speaker-enrollment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data-access-role-arn
                     domain-id enrollment-config input-data-config job-name
                     output-data-config)
   (common-lisp:declare
    (common-lisp:ignorable client-token data-access-role-arn domain-id
     enrollment-config input-data-config job-name output-data-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-speaker-enrollment-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartSpeakerEnrollmentJob"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-speaker-enrollment-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-id name
                     server-side-encryption-configuration)
   (common-lisp:declare
    (common-lisp:ignorable description domain-id name
     server-side-encryption-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDomain"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain))
(common-lisp:progn
 (common-lisp:defun update-watchlist
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description domain-id name watchlist-id)
   (common-lisp:declare
    (common-lisp:ignorable description domain-id name watchlist-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-watchlist-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'voice-id-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateWatchlist"
                                                        "2021-09-27"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-watchlist))
