;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/workmail/api
  (:use)
  (:nicknames #:aws/workmail)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/workmail/api)
(common-lisp:progn
 (common-lisp:defclass workmail-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "workmail"))
 (common-lisp:export 'workmail-request))
(common-lisp:progn
 (common-lisp:define-condition workmail-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'workmail-error))
(common-lisp:defvar *error-map*
  '(("DirectoryInUseException" . directory-in-use-exception)
    ("DirectoryServiceAuthenticationFailedException"
     . directory-service-authentication-failed-exception)
    ("DirectoryUnavailableException" . directory-unavailable-exception)
    ("EmailAddressInUseException" . email-address-in-use-exception)
    ("EntityAlreadyRegisteredException" . entity-already-registered-exception)
    ("EntityNotFoundException" . entity-not-found-exception)
    ("EntityStateException" . entity-state-exception)
    ("InvalidConfigurationException" . invalid-configuration-exception)
    ("InvalidCustomSesConfigurationException"
     . invalid-custom-ses-configuration-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidPasswordException" . invalid-password-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MailDomainInUseException" . mail-domain-in-use-exception)
    ("MailDomainNotFoundException" . mail-domain-not-found-exception)
    ("MailDomainStateException" . mail-domain-state-exception)
    ("NameAvailabilityException" . name-availability-exception)
    ("OrganizationNotFoundException" . organization-not-found-exception)
    ("OrganizationStateException" . organization-state-exception)
    ("ReservedNameException" . reserved-name-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-rule-"))
   (name common-lisp:nil :type
    (common-lisp:or access-control-rule-name common-lisp:null))
   (effect common-lisp:nil :type
    (common-lisp:or access-control-rule-effect common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or access-control-rule-description common-lisp:null))
   (ip-ranges common-lisp:nil :type
    (common-lisp:or ip-range-list common-lisp:null))
   (not-ip-ranges common-lisp:nil :type
    (common-lisp:or ip-range-list common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or actions-list common-lisp:null))
   (not-actions common-lisp:nil :type
    (common-lisp:or actions-list common-lisp:null))
   (user-ids common-lisp:nil :type
    (common-lisp:or user-id-list common-lisp:null))
   (not-user-ids common-lisp:nil :type
    (common-lisp:or user-id-list common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (date-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (impersonation-role-ids common-lisp:nil :type
    (common-lisp:or impersonation-role-id-list common-lisp:null))
   (not-impersonation-role-ids common-lisp:nil :type
    (common-lisp:or impersonation-role-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-rule 'make-access-control-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-ip-ranges))
      (common-lisp:list
       (common-lisp:cons "NotIpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-actions))
      (common-lisp:list
       (common-lisp:cons "NotActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-user-ids))
      (common-lisp:list
       (common-lisp:cons "NotUserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-ids))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-impersonation-role-ids))
      (common-lisp:list
       (common-lisp:cons "NotImpersonationRoleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control-rule))
   common-lisp:nil))
(common-lisp:deftype access-control-rule-action () 'common-lisp:string)
(common-lisp:deftype access-control-rule-description () 'common-lisp:string)
(common-lisp:deftype access-control-rule-effect () 'common-lisp:string)
(common-lisp:deftype access-control-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-control-rule-name-list ()
   '(trivial-types:proper-list access-control-rule-name))
 (common-lisp:defun |make-access-control-rule-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            access-control-rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype access-control-rules-list ()
   '(trivial-types:proper-list access-control-rule))
 (common-lisp:defun |make-access-control-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-control-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-effect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype actions-list ()
   '(trivial-types:proper-list access-control-rule-action))
 (common-lisp:defun |make-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            access-control-rule-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aliases () '(trivial-types:proper-list email-address))
 (common-lisp:defun |make-aliases|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list email-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-delegate-to-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-delegate-to-resource-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-delegate-to-resource-request
                    'make-associate-delegate-to-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-delegate-to-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-delegate-to-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'associate-delegate-to-resource-response
                    'make-associate-delegate-to-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegate-to-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-member-to-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-member-to-group-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-member-to-group-request
                    'make-associate-member-to-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-member-to-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-member-to-group-response-")))
 (common-lisp:export
  (common-lisp:list 'associate-member-to-group-response
                    'make-associate-member-to-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-member-to-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-impersonation-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-impersonation-role-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (impersonation-role-id
    (common-lisp:error ":impersonation-role-id is required") :type
    (common-lisp:or impersonation-role-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-impersonation-role-request
                    'make-assume-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-impersonation-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-impersonation-role-response-"))
   (token common-lisp:nil :type
    (common-lisp:or impersonation-token common-lisp:null))
   (expires-in common-lisp:nil :type
    (common-lisp:or expires-in common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-impersonation-role-response
                    'make-assume-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "ExpiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (availability-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-configuration-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (provider-type common-lisp:nil :type
    (common-lisp:or availability-provider-type common-lisp:null))
   (ews-provider common-lisp:nil :type
    (common-lisp:or redacted-ews-availability-provider common-lisp:null))
   (lambda-provider common-lisp:nil :type
    (common-lisp:or lambda-availability-provider common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (date-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-configuration
                    'make-availability-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          availability-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          availability-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-provider))
      (common-lisp:list
       (common-lisp:cons "EwsProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-provider))
      (common-lisp:list
       (common-lisp:cons "LambdaProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          availability-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-configuration-list ()
   '(trivial-types:proper-list availability-configuration))
 (common-lisp:defun |make-availability-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            availability-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype availability-provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (booking-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-booking-options-"))
   (auto-accept-requests common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-decline-recurring-requests common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-decline-conflicting-requests common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'booking-options 'make-booking-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input booking-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input booking-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-accept-requests))
      (common-lisp:list
       (common-lisp:cons "AutoAcceptRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-decline-recurring-requests))
      (common-lisp:list
       (common-lisp:cons "AutoDeclineRecurringRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-decline-conflicting-requests))
      (common-lisp:list
       (common-lisp:cons "AutoDeclineConflictingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input booking-options))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-mailbox-export-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-mailbox-export-job-request-"))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or idempotency-client-token common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or mailbox-export-job-id common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-mailbox-export-job-request
                    'make-cancel-mailbox-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-mailbox-export-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-mailbox-export-job-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-mailbox-export-job-response
                    'make-cancel-mailbox-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mailbox-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-alias-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or email-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-alias-request 'make-create-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-alias-response-")))
 (common-lisp:export
  (common-lisp:list 'create-alias-response 'make-create-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-availability-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-availability-configuration-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-client-token common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (ews-provider common-lisp:nil :type
    (common-lisp:or ews-availability-provider common-lisp:null))
   (lambda-provider common-lisp:nil :type
    (common-lisp:or lambda-availability-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-availability-configuration-request
                    'make-create-availability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-provider))
      (common-lisp:list
       (common-lisp:cons "EwsProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-provider))
      (common-lisp:list
       (common-lisp:cons "LambdaProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-availability-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-availability-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'create-availability-configuration-response
                    'make-create-availability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-availability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-response-"))
   (group-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-impersonation-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-impersonation-role-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-client-token common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or impersonation-role-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or impersonation-role-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or impersonation-role-description common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or impersonation-rule-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-impersonation-role-request
                    'make-create-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-impersonation-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-impersonation-role-response-"))
   (impersonation-role-id common-lisp:nil :type
    (common-lisp:or impersonation-role-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-impersonation-role-response
                    'make-create-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mobile-device-access-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mobile-device-access-rule-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-client-token common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or mobile-device-access-rule-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-description common-lisp:null))
   (effect (common-lisp:error ":effect is required") :type
    (common-lisp:or mobile-device-access-rule-effect common-lisp:null))
   (device-types common-lisp:nil :type
    (common-lisp:or device-type-list common-lisp:null))
   (not-device-types common-lisp:nil :type
    (common-lisp:or device-type-list common-lisp:null))
   (device-models common-lisp:nil :type
    (common-lisp:or device-model-list common-lisp:null))
   (not-device-models common-lisp:nil :type
    (common-lisp:or device-model-list common-lisp:null))
   (device-operating-systems common-lisp:nil :type
    (common-lisp:or device-operating-system-list common-lisp:null))
   (not-device-operating-systems common-lisp:nil :type
    (common-lisp:or device-operating-system-list common-lisp:null))
   (device-user-agents common-lisp:nil :type
    (common-lisp:or device-user-agent-list common-lisp:null))
   (not-device-user-agents common-lisp:nil :type
    (common-lisp:or device-user-agent-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mobile-device-access-rule-request
                    'make-create-mobile-device-access-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-types))
      (common-lisp:list
       (common-lisp:cons "DeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-types))
      (common-lisp:list
       (common-lisp:cons "NotDeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-models))
      (common-lisp:list
       (common-lisp:cons "DeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-models))
      (common-lisp:list
       (common-lisp:cons "NotDeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "DeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "NotDeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-user-agents))
      (common-lisp:list
       (common-lisp:cons "DeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-user-agents))
      (common-lisp:list
       (common-lisp:cons "NotDeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mobile-device-access-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mobile-device-access-rule-response-"))
   (mobile-device-access-rule-id common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mobile-device-access-rule-response
                    'make-create-mobile-device-access-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mobile-device-access-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-organization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-organization-request-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or organization-name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-client-token common-lisp:null))
   (domains common-lisp:nil :type (common-lisp:or domains common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (enable-interoperability common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-organization-request
                    'make-create-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-interoperability))
      (common-lisp:list
       (common-lisp:cons "EnableInteroperability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-organization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-organization-response-"))
   (organization-id common-lisp:nil :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-organization-response
                    'make-create-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resource-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resource-request 'make-create-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resource-response-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resource-response 'make-create-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (display-name (common-lisp:error ":display-name is required") :type
    (common-lisp:or string common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-response-"))
   (user-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delegate (:copier common-lisp:nil) (:conc-name "struct-shape-delegate-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or member-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delegate 'make-delegate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-control-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-control-rule-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-control-rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-control-rule-request
                    'make-delete-access-control-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-control-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-control-rule-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-access-control-rule-response
                    'make-delete-access-control-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-control-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-alias-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or email-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-alias-request 'make-delete-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-alias-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-alias-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-alias-response 'make-delete-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-availability-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-availability-configuration-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-availability-configuration-request
                    'make-delete-availability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-availability-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-availability-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-availability-configuration-response
                    'make-delete-availability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-availability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-email-monitoring-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-email-monitoring-configuration-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-email-monitoring-configuration-request
                    'make-delete-email-monitoring-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-email-monitoring-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-email-monitoring-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-email-monitoring-configuration-response
                    'make-delete-email-monitoring-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-monitoring-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-group-response 'make-delete-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-impersonation-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-impersonation-role-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (impersonation-role-id
    (common-lisp:error ":impersonation-role-id is required") :type
    (common-lisp:or impersonation-role-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-impersonation-role-request
                    'make-delete-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-impersonation-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-impersonation-role-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-impersonation-role-response
                    'make-delete-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mailbox-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mailbox-permissions-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (grantee-id (common-lisp:error ":grantee-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mailbox-permissions-request
                    'make-delete-mailbox-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-id))
      (common-lisp:list
       (common-lisp:cons "GranteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mailbox-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mailbox-permissions-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-mailbox-permissions-response
                    'make-delete-mailbox-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mailbox-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mobile-device-access-override-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-mobile-device-access-override-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or entity-identifier common-lisp:null))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mobile-device-access-override-request
                    'make-delete-mobile-device-access-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mobile-device-access-override-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-mobile-device-access-override-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-mobile-device-access-override-response
                    'make-delete-mobile-device-access-override-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-override-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mobile-device-access-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mobile-device-access-rule-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (mobile-device-access-rule-id
    (common-lisp:error ":mobile-device-access-rule-id is required") :type
    (common-lisp:or mobile-device-access-rule-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mobile-device-access-rule-request
                    'make-delete-mobile-device-access-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mobile-device-access-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mobile-device-access-rule-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-mobile-device-access-rule-response
                    'make-delete-mobile-device-access-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mobile-device-access-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-organization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-organization-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-client-token common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (delete-directory (common-lisp:error ":delete-directory is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-organization-request
                    'make-delete-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-directory))
      (common-lisp:list
       (common-lisp:cons "DeleteDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-organization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-organization-response-"))
   (organization-id common-lisp:nil :type
    (common-lisp:or organization-id common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-organization-response
                    'make-delete-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-request 'make-delete-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-resource-response 'make-delete-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-retention-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-retention-policy-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or short-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-retention-policy-request
                    'make-delete-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-retention-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-retention-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-retention-policy-response
                    'make-delete-retention-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-from-work-mail-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-from-work-mail-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-from-work-mail-request
                    'make-deregister-from-work-mail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-from-work-mail-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-from-work-mail-response-")))
 (common-lisp:export
  (common-lisp:list 'deregister-from-work-mail-response
                    'make-deregister-from-work-mail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-from-work-mail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-mail-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-mail-domain-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or work-mail-domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-mail-domain-request
                    'make-deregister-mail-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-mail-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-mail-domain-response-")))
 (common-lisp:export
  (common-lisp:list 'deregister-mail-domain-response
                    'make-deregister-mail-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-mail-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-email-monitoring-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-email-monitoring-configuration-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-email-monitoring-configuration-request
                    'make-describe-email-monitoring-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-email-monitoring-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-email-monitoring-configuration-response-"))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (log-group-arn common-lisp:nil :type
    (common-lisp:or log-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-email-monitoring-configuration-response
                    'make-describe-email-monitoring-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "LogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-email-monitoring-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-request 'make-describe-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-group-response-"))
   (group-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or group-name common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or entity-state common-lisp:null))
   (enabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (disabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-group-response 'make-describe-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-inbound-dmarc-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-inbound-dmarc-settings-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-dmarc-settings-request
                    'make-describe-inbound-dmarc-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-inbound-dmarc-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-inbound-dmarc-settings-response-"))
   (enforced common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-dmarc-settings-response
                    'make-describe-inbound-dmarc-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforced))
      (common-lisp:list
       (common-lisp:cons "Enforced"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-dmarc-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-mailbox-export-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-mailbox-export-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or mailbox-export-job-id common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-mailbox-export-job-request
                    'make-describe-mailbox-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-mailbox-export-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-mailbox-export-job-response-"))
   (entity-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (s3prefix common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null))
   (s3path common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null))
   (estimated-progress common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or mailbox-export-job-state common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or mailbox-export-error-info common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-mailbox-export-job-response
                    'make-describe-mailbox-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "S3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-progress))
      (common-lisp:list
       (common-lisp:cons "EstimatedProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "ErrorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mailbox-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-organization-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-request
                    'make-describe-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-organization-response-"))
   (organization-id common-lisp:nil :type
    (common-lisp:or organization-id common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or organization-name common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (directory-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (default-mail-domain common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (completed-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-response
                    'make-describe-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-type))
      (common-lisp:list
       (common-lisp:cons "DirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-mail-domain))
      (common-lisp:list
       (common-lisp:cons "DefaultMailDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-date))
      (common-lisp:list
       (common-lisp:cons "CompletedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-request
                    'make-describe-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-response-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or resource-type common-lisp:null))
   (booking-options common-lisp:nil :type
    (common-lisp:or booking-options common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or entity-state common-lisp:null))
   (enabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (disabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-response
                    'make-describe-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'booking-options))
      (common-lisp:list
       (common-lisp:cons "BookingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-request 'make-describe-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-response-"))
   (user-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or user-name common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or entity-state common-lisp:null))
   (user-role common-lisp:nil :type
    (common-lisp:or user-role common-lisp:null))
   (enabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (disabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-response 'make-describe-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "UserRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype device-id () 'common-lisp:string)
(common-lisp:deftype device-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-model-list ()
   '(trivial-types:proper-list device-model))
 (common-lisp:defun |make-device-model-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-model))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-operating-system () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-operating-system-list ()
   '(trivial-types:proper-list device-operating-system))
 (common-lisp:defun |make-device-operating-system-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-operating-system))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-type-list ()
   '(trivial-types:proper-list device-type))
 (common-lisp:defun |make-device-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-user-agent () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-user-agent-list ()
   '(trivial-types:proper-list device-user-agent))
 (common-lisp:defun |make-device-user-agent-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-user-agent))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition directory-in-use-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-in-use-exception
                    'directory-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition directory-service-authentication-failed-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-service-authentication-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-service-authentication-failed-exception
                    'directory-service-authentication-failed-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition directory-unavailable-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-unavailable-exception
                    'directory-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-delegate-from-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-delegate-from-resource-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-delegate-from-resource-request
                    'make-disassociate-delegate-from-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-delegate-from-resource-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-delegate-from-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-delegate-from-resource-response
                    'make-disassociate-delegate-from-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegate-from-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-member-from-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-member-from-group-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (member-id (common-lisp:error ":member-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-from-group-request
                    'make-disassociate-member-from-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-id))
      (common-lisp:list
       (common-lisp:cons "MemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-member-from-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-member-from-group-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-member-from-group-response
                    'make-disassociate-member-from-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-member-from-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dns-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-record-"))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (hostname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dns-record 'make-dns-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-record))
   common-lisp:nil))
(common-lisp:deftype dns-record-verification-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dns-records () '(trivial-types:proper-list dns-record))
 (common-lisp:defun |make-dns-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dns-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain (:copier common-lisp:nil) (:conc-name "struct-shape-domain-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or hosted-zone-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain 'make-domain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domains () '(trivial-types:proper-list domain))
 (common-lisp:defun |make-domains|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition email-address-in-use-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       email-address-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'email-address-in-use-exception
                    'email-address-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition entity-already-registered-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-already-registered-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-already-registered-exception
                    'entity-already-registered-exception-message)))
(common-lisp:deftype entity-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-not-found-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-not-found-exception
                    'entity-not-found-exception-message)))
(common-lisp:deftype entity-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-state-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-state-exception 'entity-state-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (ews-availability-provider (:copier common-lisp:nil)
      (:conc-name "struct-shape-ews-availability-provider-"))
   (ews-endpoint (common-lisp:error ":ews-endpoint is required") :type
    (common-lisp:or url common-lisp:null))
   (ews-username (common-lisp:error ":ews-username is required") :type
    (common-lisp:or external-user-name common-lisp:null))
   (ews-password (common-lisp:error ":ews-password is required") :type
    (common-lisp:or password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ews-availability-provider
                    'make-ews-availability-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ews-availability-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ews-availability-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-endpoint))
      (common-lisp:list
       (common-lisp:cons "EwsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-username))
      (common-lisp:list
       (common-lisp:cons "EwsUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-password))
      (common-lisp:list
       (common-lisp:cons "EwsPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ews-availability-provider))
   common-lisp:nil))
(common-lisp:deftype expires-in () 'common-lisp:integer)
(common-lisp:deftype external-user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (folder-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-folder-configuration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or folder-name common-lisp:null))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or retention-action common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'folder-configuration 'make-folder-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-configurations ()
   '(trivial-types:proper-list folder-configuration))
 (common-lisp:defun |make-folder-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype folder-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-control-effect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-control-effect-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (ip-address (common-lisp:error ":ip-address is required") :type
    (common-lisp:or ip-address common-lisp:null))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or access-control-rule-action common-lisp:null))
   (user-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (impersonation-role-id common-lisp:nil :type
    (common-lisp:or impersonation-role-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-control-effect-request
                    'make-get-access-control-effect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-control-effect-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-control-effect-response-"))
   (effect common-lisp:nil :type
    (common-lisp:or access-control-rule-effect common-lisp:null))
   (matched-rules common-lisp:nil :type
    (common-lisp:or access-control-rule-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-control-effect-response
                    'make-get-access-control-effect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-rules))
      (common-lisp:list
       (common-lisp:cons "MatchedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-control-effect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-default-retention-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-default-retention-policy-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-default-retention-policy-request
                    'make-get-default-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-default-retention-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-default-retention-policy-response-"))
   (id common-lisp:nil :type (common-lisp:or short-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or short-string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (folder-configurations common-lisp:nil :type
    (common-lisp:or folder-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-default-retention-policy-response
                    'make-get-default-retention-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'folder-configurations))
      (common-lisp:list
       (common-lisp:cons "FolderConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-default-retention-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-impersonation-role-effect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-impersonation-role-effect-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (impersonation-role-id
    (common-lisp:error ":impersonation-role-id is required") :type
    (common-lisp:or impersonation-role-id common-lisp:null))
   (target-user (common-lisp:error ":target-user is required") :type
    (common-lisp:or entity-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-impersonation-role-effect-request
                    'make-get-impersonation-role-effect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-user))
      (common-lisp:list
       (common-lisp:cons "TargetUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-impersonation-role-effect-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-impersonation-role-effect-response-"))
   (type common-lisp:nil :type
    (common-lisp:or impersonation-role-type common-lisp:null))
   (effect common-lisp:nil :type
    (common-lisp:or access-effect common-lisp:null))
   (matched-rules common-lisp:nil :type
    (common-lisp:or impersonation-matched-rule-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-impersonation-role-effect-response
                    'make-get-impersonation-role-effect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-rules))
      (common-lisp:list
       (common-lisp:cons "MatchedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-effect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-impersonation-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-impersonation-role-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (impersonation-role-id
    (common-lisp:error ":impersonation-role-id is required") :type
    (common-lisp:or impersonation-role-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-impersonation-role-request
                    'make-get-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-impersonation-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-impersonation-role-response-"))
   (impersonation-role-id common-lisp:nil :type
    (common-lisp:or impersonation-role-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or impersonation-role-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or impersonation-role-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or impersonation-role-description common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or impersonation-rule-list common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (date-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-impersonation-role-response
                    'make-get-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mail-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mail-domain-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or work-mail-domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mail-domain-request 'make-get-mail-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mail-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mail-domain-response-"))
   (records common-lisp:nil :type
    (common-lisp:or dns-records common-lisp:null))
   (is-test-domain common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-default common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ownership-verification-status common-lisp:nil :type
    (common-lisp:or dns-record-verification-status common-lisp:null))
   (dkim-verification-status common-lisp:nil :type
    (common-lisp:or dns-record-verification-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mail-domain-response 'make-get-mail-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-test-domain))
      (common-lisp:list
       (common-lisp:cons "IsTestDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ownership-verification-status))
      (common-lisp:list
       (common-lisp:cons "OwnershipVerificationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dkim-verification-status))
      (common-lisp:list
       (common-lisp:cons "DkimVerificationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mail-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mailbox-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mailbox-details-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mailbox-details-request
                    'make-get-mailbox-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mailbox-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mailbox-details-response-"))
   (mailbox-quota common-lisp:nil :type
    (common-lisp:or mailbox-quota common-lisp:null))
   (mailbox-size common-lisp:nil :type
    (common-lisp:or mailbox-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mailbox-details-response
                    'make-get-mailbox-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailbox-quota))
      (common-lisp:list
       (common-lisp:cons "MailboxQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailbox-size))
      (common-lisp:list
       (common-lisp:cons "MailboxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mailbox-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mobile-device-access-effect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mobile-device-access-effect-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (device-type common-lisp:nil :type
    (common-lisp:or device-type common-lisp:null))
   (device-model common-lisp:nil :type
    (common-lisp:or device-model common-lisp:null))
   (device-operating-system common-lisp:nil :type
    (common-lisp:or device-operating-system common-lisp:null))
   (device-user-agent common-lisp:nil :type
    (common-lisp:or device-user-agent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mobile-device-access-effect-request
                    'make-get-mobile-device-access-effect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-model))
      (common-lisp:list
       (common-lisp:cons "DeviceModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-operating-system))
      (common-lisp:list
       (common-lisp:cons "DeviceOperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-user-agent))
      (common-lisp:list
       (common-lisp:cons "DeviceUserAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mobile-device-access-effect-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mobile-device-access-effect-response-"))
   (effect common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-effect common-lisp:null))
   (matched-rules common-lisp:nil :type
    (common-lisp:or mobile-device-access-matched-rule-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mobile-device-access-effect-response
                    'make-get-mobile-device-access-effect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-rules))
      (common-lisp:list
       (common-lisp:cons "MatchedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-effect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mobile-device-access-override-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mobile-device-access-override-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or entity-identifier common-lisp:null))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or device-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mobile-device-access-override-request
                    'make-get-mobile-device-access-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mobile-device-access-override-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mobile-device-access-override-response-"))
   (user-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (effect common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-effect common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-description common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (date-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mobile-device-access-override-response
                    'make-get-mobile-device-access-override-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-device-access-override-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group (:copier common-lisp:nil) (:conc-name "struct-shape-group-"))
   (id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or group-name common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or entity-state common-lisp:null))
   (enabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (disabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype groups () '(trivial-types:proper-list group))
 (common-lisp:defun |make-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hosted-zone-id () 'common-lisp:string)
(common-lisp:deftype idempotency-client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (impersonation-matched-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-impersonation-matched-rule-"))
   (impersonation-rule-id common-lisp:nil :type
    (common-lisp:or impersonation-rule-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or impersonation-rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'impersonation-matched-rule
                    'make-impersonation-matched-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          impersonation-matched-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          impersonation-matched-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-rule-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          impersonation-matched-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype impersonation-matched-rule-list ()
   '(trivial-types:proper-list impersonation-matched-rule))
 (common-lisp:defun |make-impersonation-matched-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            impersonation-matched-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (impersonation-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-impersonation-role-"))
   (impersonation-role-id common-lisp:nil :type
    (common-lisp:or impersonation-role-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or impersonation-role-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or impersonation-role-type common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (date-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'impersonation-role 'make-impersonation-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input impersonation-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input impersonation-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input impersonation-role))
   common-lisp:nil))
(common-lisp:deftype impersonation-role-description () 'common-lisp:string)
(common-lisp:deftype impersonation-role-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype impersonation-role-id-list ()
   '(trivial-types:proper-list impersonation-role-id))
 (common-lisp:defun |make-impersonation-role-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list impersonation-role-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype impersonation-role-list ()
   '(trivial-types:proper-list impersonation-role))
 (common-lisp:defun |make-impersonation-role-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list impersonation-role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype impersonation-role-name () 'common-lisp:string)
(common-lisp:deftype impersonation-role-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (impersonation-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-impersonation-rule-"))
   (impersonation-rule-id
    (common-lisp:error ":impersonation-rule-id is required") :type
    (common-lisp:or impersonation-rule-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or impersonation-rule-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or impersonation-rule-description common-lisp:null))
   (effect (common-lisp:error ":effect is required") :type
    (common-lisp:or access-effect common-lisp:null))
   (target-users common-lisp:nil :type
    (common-lisp:or target-users common-lisp:null))
   (not-target-users common-lisp:nil :type
    (common-lisp:or target-users common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'impersonation-rule 'make-impersonation-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input impersonation-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input impersonation-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-rule-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-users))
      (common-lisp:list
       (common-lisp:cons "TargetUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-target-users))
      (common-lisp:list
       (common-lisp:cons "NotTargetUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input impersonation-rule))
   common-lisp:nil))
(common-lisp:deftype impersonation-rule-description () 'common-lisp:string)
(common-lisp:deftype impersonation-rule-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype impersonation-rule-list ()
   '(trivial-types:proper-list impersonation-rule))
 (common-lisp:defun |make-impersonation-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list impersonation-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype impersonation-rule-name () 'common-lisp:string)
(common-lisp:deftype impersonation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-exception
                    'invalid-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-custom-ses-configuration-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-custom-ses-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-custom-ses-configuration-exception
                    'invalid-custom-ses-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-password-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-password-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-password-exception
                    'invalid-password-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-range () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-range-list () '(trivial-types:proper-list ip-range))
 (common-lisp:defun |make-ip-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype jobs () '(trivial-types:proper-list mailbox-export-job))
 (common-lisp:defun |make-jobs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mailbox-export-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-availability-provider (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-availability-provider-"))
   (lambda-arn (common-lisp:error ":lambda-arn is required") :type
    (common-lisp:or lambda-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-availability-provider
                    'make-lambda-availability-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-availability-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-availability-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-availability-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-control-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-control-rules-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-control-rules-request
                    'make-list-access-control-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-control-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-control-rules-response-"))
   (rules common-lisp:nil :type
    (common-lisp:or access-control-rules-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-control-rules-response
                    'make-list-access-control-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-control-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-aliases-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-request 'make-list-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-aliases-response-"))
   (aliases common-lisp:nil :type (common-lisp:or aliases common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-response 'make-list-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-availability-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-availability-configurations-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-availability-configurations-request
                    'make-list-availability-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-availability-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-availability-configurations-response-"))
   (availability-configurations common-lisp:nil :type
    (common-lisp:or availability-configuration-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-availability-configurations-response
                    'make-list-availability-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-configurations))
      (common-lisp:list
       (common-lisp:cons "AvailabilityConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-availability-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-members-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-members-request
                    'make-list-group-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-members-response-"))
   (members common-lisp:nil :type (common-lisp:or members common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-members-response
                    'make-list-group-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-response-"))
   (groups common-lisp:nil :type (common-lisp:or groups common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-impersonation-roles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-impersonation-roles-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-impersonation-roles-request
                    'make-list-impersonation-roles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-impersonation-roles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-impersonation-roles-response-"))
   (roles common-lisp:nil :type
    (common-lisp:or impersonation-role-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-impersonation-roles-response
                    'make-list-impersonation-roles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-impersonation-roles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mail-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mail-domains-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mail-domains-request
                    'make-list-mail-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mail-domains-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mail-domains-response-"))
   (mail-domains common-lisp:nil :type
    (common-lisp:or mail-domains common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mail-domains-response
                    'make-list-mail-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mail-domains))
      (common-lisp:list
       (common-lisp:cons "MailDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mail-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mailbox-export-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mailbox-export-jobs-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mailbox-export-jobs-request
                    'make-list-mailbox-export-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mailbox-export-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mailbox-export-jobs-response-"))
   (jobs common-lisp:nil :type (common-lisp:or jobs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mailbox-export-jobs-response
                    'make-list-mailbox-export-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-export-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mailbox-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mailbox-permissions-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mailbox-permissions-request
                    'make-list-mailbox-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mailbox-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mailbox-permissions-response-"))
   (permissions common-lisp:nil :type
    (common-lisp:or permissions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mailbox-permissions-response
                    'make-list-mailbox-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mailbox-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mobile-device-access-overrides-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mobile-device-access-overrides-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mobile-device-access-overrides-request
                    'make-list-mobile-device-access-overrides-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mobile-device-access-overrides-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-mobile-device-access-overrides-response-"))
   (overrides common-lisp:nil :type
    (common-lisp:or mobile-device-access-overrides-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mobile-device-access-overrides-response
                    'make-list-mobile-device-access-overrides-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "Overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-overrides-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mobile-device-access-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mobile-device-access-rules-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mobile-device-access-rules-request
                    'make-list-mobile-device-access-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mobile-device-access-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mobile-device-access-rules-response-"))
   (rules common-lisp:nil :type
    (common-lisp:or mobile-device-access-rules-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mobile-device-access-rules-response
                    'make-list-mobile-device-access-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-device-access-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-organizations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-organizations-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-organizations-request
                    'make-list-organizations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-organizations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-organizations-response-"))
   (organization-summaries common-lisp:nil :type
    (common-lisp:or organization-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-organizations-response
                    'make-list-organizations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-summaries))
      (common-lisp:list
       (common-lisp:cons "OrganizationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organizations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-delegates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-delegates-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-delegates-request
                    'make-list-resource-delegates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-delegates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-delegates-response-"))
   (delegates common-lisp:nil :type
    (common-lisp:or resource-delegates common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-delegates-response
                    'make-list-resource-delegates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegates))
      (common-lisp:list
       (common-lisp:cons "Delegates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-delegates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resources-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resources-request 'make-list-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resources-response-"))
   (resources common-lisp:nil :type
    (common-lisp:or resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resources-response 'make-list-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-response-"))
   (users common-lisp:nil :type (common-lisp:or users common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:deftype log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition mail-domain-in-use-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mail-domain-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mail-domain-in-use-exception
                    'mail-domain-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition mail-domain-not-found-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mail-domain-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mail-domain-not-found-exception
                    'mail-domain-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition mail-domain-state-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mail-domain-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mail-domain-state-exception
                    'mail-domain-state-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (mail-domain-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-mail-domain-summary-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (default-domain common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mail-domain-summary 'make-mail-domain-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mail-domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mail-domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-domain))
      (common-lisp:list
       (common-lisp:cons "DefaultDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mail-domain-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mail-domains ()
   '(trivial-types:proper-list mail-domain-summary))
 (common-lisp:defun |make-mail-domains|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mail-domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype mailbox-export-error-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mailbox-export-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-mailbox-export-job-"))
   (job-id common-lisp:nil :type
    (common-lisp:or mailbox-export-job-id common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (s3path common-lisp:nil :type
    (common-lisp:or s3object-key common-lisp:null))
   (estimated-progress common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or mailbox-export-job-state common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mailbox-export-job 'make-mailbox-export-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mailbox-export-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mailbox-export-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "S3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-progress))
      (common-lisp:list
       (common-lisp:cons "EstimatedProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mailbox-export-job))
   common-lisp:nil))
(common-lisp:deftype mailbox-export-job-id () 'common-lisp:string)
(common-lisp:deftype mailbox-export-job-state () 'common-lisp:string)
(common-lisp:deftype mailbox-quota () 'common-lisp:integer)
(common-lisp:deftype mailbox-size () 'common-lisp:double-float)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (member (:copier common-lisp:nil) (:conc-name "struct-shape-member-"))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or member-type common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or entity-state common-lisp:null))
   (enabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (disabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:deftype member-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype members () '(trivial-types:proper-list member))
 (common-lisp:defun |make-members|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (mobile-device-access-matched-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-mobile-device-access-matched-rule-"))
   (mobile-device-access-rule-id common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mobile-device-access-matched-rule
                    'make-mobile-device-access-matched-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-matched-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-matched-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-matched-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mobile-device-access-matched-rule-list ()
   '(trivial-types:proper-list mobile-device-access-matched-rule))
 (common-lisp:defun |make-mobile-device-access-matched-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mobile-device-access-matched-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (mobile-device-access-override (:copier common-lisp:nil)
      (:conc-name "struct-shape-mobile-device-access-override-"))
   (user-id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (device-id common-lisp:nil :type
    (common-lisp:or device-id common-lisp:null))
   (effect common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-effect common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-description common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (date-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mobile-device-access-override
                    'make-mobile-device-access-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mobile-device-access-overrides-list ()
   '(trivial-types:proper-list mobile-device-access-override))
 (common-lisp:defun |make-mobile-device-access-overrides-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mobile-device-access-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (mobile-device-access-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-mobile-device-access-rule-"))
   (mobile-device-access-rule-id common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-description common-lisp:null))
   (effect common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-effect common-lisp:null))
   (device-types common-lisp:nil :type
    (common-lisp:or device-type-list common-lisp:null))
   (not-device-types common-lisp:nil :type
    (common-lisp:or device-type-list common-lisp:null))
   (device-models common-lisp:nil :type
    (common-lisp:or device-model-list common-lisp:null))
   (not-device-models common-lisp:nil :type
    (common-lisp:or device-model-list common-lisp:null))
   (device-operating-systems common-lisp:nil :type
    (common-lisp:or device-operating-system-list common-lisp:null))
   (not-device-operating-systems common-lisp:nil :type
    (common-lisp:or device-operating-system-list common-lisp:null))
   (device-user-agents common-lisp:nil :type
    (common-lisp:or device-user-agent-list common-lisp:null))
   (not-device-user-agents common-lisp:nil :type
    (common-lisp:or device-user-agent-list common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (date-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mobile-device-access-rule
                    'make-mobile-device-access-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-types))
      (common-lisp:list
       (common-lisp:cons "DeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-types))
      (common-lisp:list
       (common-lisp:cons "NotDeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-models))
      (common-lisp:list
       (common-lisp:cons "DeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-models))
      (common-lisp:list
       (common-lisp:cons "NotDeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "DeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "NotDeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-user-agents))
      (common-lisp:list
       (common-lisp:cons "DeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-user-agents))
      (common-lisp:list
       (common-lisp:cons "NotDeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mobile-device-access-rule))
   common-lisp:nil))
(common-lisp:deftype mobile-device-access-rule-description ()
  'common-lisp:string)
(common-lisp:deftype mobile-device-access-rule-effect () 'common-lisp:string)
(common-lisp:deftype mobile-device-access-rule-id () 'common-lisp:string)
(common-lisp:deftype mobile-device-access-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mobile-device-access-rules-list ()
   '(trivial-types:proper-list mobile-device-access-rule))
 (common-lisp:defun |make-mobile-device-access-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mobile-device-access-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition name-availability-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       name-availability-exception-message)))
 (common-lisp:export
  (common-lisp:list 'name-availability-exception
                    'name-availability-exception-message)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype organization-id () 'common-lisp:string)
(common-lisp:deftype organization-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition organization-not-found-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       organization-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'organization-not-found-exception
                    'organization-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition organization-state-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       organization-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'organization-state-exception
                    'organization-state-exception-message)))
(common-lisp:progn
 (common-lisp:deftype organization-summaries ()
   '(trivial-types:proper-list organization-summary))
 (common-lisp:defun |make-organization-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organization-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (organization-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-organization-summary-"))
   (organization-id common-lisp:nil :type
    (common-lisp:or organization-id common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or organization-name common-lisp:null))
   (default-mail-domain common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'organization-summary 'make-organization-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input organization-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input organization-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-mail-domain))
      (common-lisp:list
       (common-lisp:cons "DefaultMailDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input organization-summary))
   common-lisp:nil))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-permission-"))
   (grantee-id (common-lisp:error ":grantee-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (grantee-type (common-lisp:error ":grantee-type is required") :type
    (common-lisp:or member-type common-lisp:null))
   (permission-values (common-lisp:error ":permission-values is required")
    :type (common-lisp:or permission-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'permission 'make-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-id))
      (common-lisp:list
       (common-lisp:cons "GranteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-type))
      (common-lisp:list
       (common-lisp:cons "GranteeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-values))
      (common-lisp:list
       (common-lisp:cons "PermissionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission))
   common-lisp:nil))
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-values ()
   '(trivial-types:proper-list permission-type))
 (common-lisp:defun |make-permission-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype permissions () '(trivial-types:proper-list permission))
 (common-lisp:defun |make-permissions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-access-control-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-access-control-rule-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or access-control-rule-name common-lisp:null))
   (effect (common-lisp:error ":effect is required") :type
    (common-lisp:or access-control-rule-effect common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or access-control-rule-description common-lisp:null))
   (ip-ranges common-lisp:nil :type
    (common-lisp:or ip-range-list common-lisp:null))
   (not-ip-ranges common-lisp:nil :type
    (common-lisp:or ip-range-list common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or actions-list common-lisp:null))
   (not-actions common-lisp:nil :type
    (common-lisp:or actions-list common-lisp:null))
   (user-ids common-lisp:nil :type
    (common-lisp:or user-id-list common-lisp:null))
   (not-user-ids common-lisp:nil :type
    (common-lisp:or user-id-list common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (impersonation-role-ids common-lisp:nil :type
    (common-lisp:or impersonation-role-id-list common-lisp:null))
   (not-impersonation-role-ids common-lisp:nil :type
    (common-lisp:or impersonation-role-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-access-control-rule-request
                    'make-put-access-control-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-ip-ranges))
      (common-lisp:list
       (common-lisp:cons "NotIpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-actions))
      (common-lisp:list
       (common-lisp:cons "NotActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-user-ids))
      (common-lisp:list
       (common-lisp:cons "NotUserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-ids))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-impersonation-role-ids))
      (common-lisp:list
       (common-lisp:cons "NotImpersonationRoleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-access-control-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-access-control-rule-response-")))
 (common-lisp:export
  (common-lisp:list 'put-access-control-rule-response
                    'make-put-access-control-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-access-control-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-email-monitoring-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-email-monitoring-configuration-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (log-group-arn (common-lisp:error ":log-group-arn is required") :type
    (common-lisp:or log-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-email-monitoring-configuration-request
                    'make-put-email-monitoring-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "LogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-email-monitoring-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-email-monitoring-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'put-email-monitoring-configuration-response
                    'make-put-email-monitoring-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-email-monitoring-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-inbound-dmarc-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-inbound-dmarc-settings-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (enforced (common-lisp:error ":enforced is required") :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-inbound-dmarc-settings-request
                    'make-put-inbound-dmarc-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforced))
      (common-lisp:list
       (common-lisp:cons "Enforced"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-inbound-dmarc-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-inbound-dmarc-settings-response-")))
 (common-lisp:export
  (common-lisp:list 'put-inbound-dmarc-settings-response
                    'make-put-inbound-dmarc-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-inbound-dmarc-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-mailbox-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-mailbox-permissions-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (grantee-id (common-lisp:error ":grantee-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (permission-values (common-lisp:error ":permission-values is required")
    :type (common-lisp:or permission-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-mailbox-permissions-request
                    'make-put-mailbox-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-id))
      (common-lisp:list
       (common-lisp:cons "GranteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-values))
      (common-lisp:list
       (common-lisp:cons "PermissionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-mailbox-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-mailbox-permissions-response-")))
 (common-lisp:export
  (common-lisp:list 'put-mailbox-permissions-response
                    'make-put-mailbox-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-mailbox-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-mobile-device-access-override-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-mobile-device-access-override-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or entity-identifier common-lisp:null))
   (device-id (common-lisp:error ":device-id is required") :type
    (common-lisp:or device-id common-lisp:null))
   (effect (common-lisp:error ":effect is required") :type
    (common-lisp:or mobile-device-access-rule-effect common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-mobile-device-access-override-request
                    'make-put-mobile-device-access-override-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-mobile-device-access-override-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-mobile-device-access-override-response-")))
 (common-lisp:export
  (common-lisp:list 'put-mobile-device-access-override-response
                    'make-put-mobile-device-access-override-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-mobile-device-access-override-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-retention-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-retention-policy-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or short-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or short-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-description common-lisp:null))
   (folder-configurations
    (common-lisp:error ":folder-configurations is required") :type
    (common-lisp:or folder-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-retention-policy-request
                    'make-put-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'folder-configurations))
      (common-lisp:list
       (common-lisp:cons "FolderConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-retention-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-retention-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'put-retention-policy-response
                    'make-put-retention-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redacted-ews-availability-provider (:copier common-lisp:nil)
      (:conc-name "struct-shape-redacted-ews-availability-provider-"))
   (ews-endpoint common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (ews-username common-lisp:nil :type
    (common-lisp:or external-user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redacted-ews-availability-provider
                    'make-redacted-ews-availability-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redacted-ews-availability-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redacted-ews-availability-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-endpoint))
      (common-lisp:list
       (common-lisp:cons "EwsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-username))
      (common-lisp:list
       (common-lisp:cons "EwsUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redacted-ews-availability-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-mail-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-mail-domain-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-client-token common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or work-mail-domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-mail-domain-request
                    'make-register-mail-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-mail-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-mail-domain-response-")))
 (common-lisp:export
  (common-lisp:list 'register-mail-domain-response
                    'make-register-mail-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-mail-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-to-work-mail-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-to-work-mail-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (email (common-lisp:error ":email is required") :type
    (common-lisp:or email-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-to-work-mail-request
                    'make-register-to-work-mail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-to-work-mail-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-to-work-mail-response-")))
 (common-lisp:export
  (common-lisp:list 'register-to-work-mail-response
                    'make-register-to-work-mail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-to-work-mail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-name-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       reserved-name-exception-message)))
 (common-lisp:export
  (common-lisp:list 'reserved-name-exception 'reserved-name-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-password-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-password-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-password-request 'make-reset-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-password-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-password-response-")))
 (common-lisp:export
  (common-lisp:list 'reset-password-response 'make-reset-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-password-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or resource-type common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or entity-state common-lisp:null))
   (enabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (disabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-delegates ()
   '(trivial-types:proper-list delegate))
 (common-lisp:defun |make-resource-delegates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retention-action () 'common-lisp:string)
(common-lisp:deftype retention-period () 'common-lisp:integer)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype short-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-mailbox-export-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-mailbox-export-job-request-"))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or idempotency-client-token common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (kms-key-arn (common-lisp:error ":kms-key-arn is required") :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (s3bucket-name (common-lisp:error ":s3bucket-name is required") :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (s3prefix (common-lisp:error ":s3prefix is required") :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-mailbox-export-job-request
                    'make-start-mailbox-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-mailbox-export-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-mailbox-export-job-response-"))
   (job-id common-lisp:nil :type
    (common-lisp:or mailbox-export-job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-mailbox-export-job-response
                    'make-start-mailbox-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mailbox-export-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-users ()
   '(trivial-types:proper-list entity-identifier))
 (common-lisp:defun |make-target-users|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (test-availability-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-availability-configuration-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (ews-provider common-lisp:nil :type
    (common-lisp:or ews-availability-provider common-lisp:null))
   (lambda-provider common-lisp:nil :type
    (common-lisp:or lambda-availability-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-availability-configuration-request
                    'make-test-availability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-provider))
      (common-lisp:list
       (common-lisp:cons "EwsProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-provider))
      (common-lisp:list
       (common-lisp:cons "LambdaProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-availability-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-availability-configuration-response-"))
   (test-passed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-availability-configuration-response
                    'make-test-availability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-passed))
      (common-lisp:list
       (common-lisp:cons "TestPassed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-availability-configuration-response))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (workmail-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-availability-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-availability-configuration-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (ews-provider common-lisp:nil :type
    (common-lisp:or ews-availability-provider common-lisp:null))
   (lambda-provider common-lisp:nil :type
    (common-lisp:or lambda-availability-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-availability-configuration-request
                    'make-update-availability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ews-provider))
      (common-lisp:list
       (common-lisp:cons "EwsProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-provider))
      (common-lisp:list
       (common-lisp:cons "LambdaProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-availability-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-availability-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-availability-configuration-response
                    'make-update-availability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-availability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-default-mail-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-default-mail-domain-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or work-mail-domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-default-mail-domain-request
                    'make-update-default-mail-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-default-mail-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-default-mail-domain-response-")))
 (common-lisp:export
  (common-lisp:list 'update-default-mail-domain-response
                    'make-update-default-mail-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-default-mail-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-impersonation-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-impersonation-role-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (impersonation-role-id
    (common-lisp:error ":impersonation-role-id is required") :type
    (common-lisp:or impersonation-role-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or impersonation-role-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or impersonation-role-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or impersonation-role-description common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or impersonation-rule-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-impersonation-role-request
                    'make-update-impersonation-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'impersonation-role-id))
      (common-lisp:list
       (common-lisp:cons "ImpersonationRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-impersonation-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-impersonation-role-response-")))
 (common-lisp:export
  (common-lisp:list 'update-impersonation-role-response
                    'make-update-impersonation-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-impersonation-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mailbox-quota-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mailbox-quota-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (mailbox-quota (common-lisp:error ":mailbox-quota is required") :type
    (common-lisp:or mailbox-quota common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mailbox-quota-request
                    'make-update-mailbox-quota-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailbox-quota))
      (common-lisp:list
       (common-lisp:cons "MailboxQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mailbox-quota-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mailbox-quota-response-")))
 (common-lisp:export
  (common-lisp:list 'update-mailbox-quota-response
                    'make-update-mailbox-quota-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mailbox-quota-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mobile-device-access-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mobile-device-access-rule-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (mobile-device-access-rule-id
    (common-lisp:error ":mobile-device-access-rule-id is required") :type
    (common-lisp:or mobile-device-access-rule-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or mobile-device-access-rule-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or mobile-device-access-rule-description common-lisp:null))
   (effect (common-lisp:error ":effect is required") :type
    (common-lisp:or mobile-device-access-rule-effect common-lisp:null))
   (device-types common-lisp:nil :type
    (common-lisp:or device-type-list common-lisp:null))
   (not-device-types common-lisp:nil :type
    (common-lisp:or device-type-list common-lisp:null))
   (device-models common-lisp:nil :type
    (common-lisp:or device-model-list common-lisp:null))
   (not-device-models common-lisp:nil :type
    (common-lisp:or device-model-list common-lisp:null))
   (device-operating-systems common-lisp:nil :type
    (common-lisp:or device-operating-system-list common-lisp:null))
   (not-device-operating-systems common-lisp:nil :type
    (common-lisp:or device-operating-system-list common-lisp:null))
   (device-user-agents common-lisp:nil :type
    (common-lisp:or device-user-agent-list common-lisp:null))
   (not-device-user-agents common-lisp:nil :type
    (common-lisp:or device-user-agent-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mobile-device-access-rule-request
                    'make-update-mobile-device-access-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mobile-device-access-rule-id))
      (common-lisp:list
       (common-lisp:cons "MobileDeviceAccessRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "Effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-types))
      (common-lisp:list
       (common-lisp:cons "DeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-types))
      (common-lisp:list
       (common-lisp:cons "NotDeviceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-models))
      (common-lisp:list
       (common-lisp:cons "DeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-device-models))
      (common-lisp:list
       (common-lisp:cons "NotDeviceModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "DeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-operating-systems))
      (common-lisp:list
       (common-lisp:cons "NotDeviceOperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-user-agents))
      (common-lisp:list
       (common-lisp:cons "DeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-device-user-agents))
      (common-lisp:list
       (common-lisp:cons "NotDeviceUserAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mobile-device-access-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mobile-device-access-rule-response-")))
 (common-lisp:export
  (common-lisp:list 'update-mobile-device-access-rule-response
                    'make-update-mobile-device-access-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mobile-device-access-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-primary-email-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-primary-email-address-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (email (common-lisp:error ":email is required") :type
    (common-lisp:or email-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-primary-email-address-request
                    'make-update-primary-email-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-primary-email-address-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-primary-email-address-response-")))
 (common-lisp:export
  (common-lisp:list 'update-primary-email-address-response
                    'make-update-primary-email-address-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-email-address-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or organization-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (booking-options common-lisp:nil :type
    (common-lisp:or booking-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resource-request 'make-update-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'booking-options))
      (common-lisp:list
       (common-lisp:cons "BookingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'update-resource-response 'make-update-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user (:copier common-lisp:nil) (:conc-name "struct-shape-user-"))
   (id common-lisp:nil :type
    (common-lisp:or work-mail-identifier common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or user-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or entity-state common-lisp:null))
   (user-role common-lisp:nil :type
    (common-lisp:or user-role common-lisp:null))
   (enabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (disabled-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role))
      (common-lisp:list
       (common-lisp:cons "UserRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-date))
      (common-lisp:list
       (common-lisp:cons "EnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-date))
      (common-lisp:list
       (common-lisp:cons "DisabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-id-list ()
   '(trivial-types:proper-list work-mail-identifier))
 (common-lisp:defun |make-user-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list work-mail-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:deftype user-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype users () '(trivial-types:proper-list user))
 (common-lisp:defun |make-users|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype work-mail-domain-name () 'common-lisp:string)
(common-lisp:deftype work-mail-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-delegate-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id entity-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id resource-id entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-delegate-to-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateDelegateToResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-delegate-to-resource))
(common-lisp:progn
 (common-lisp:defun associate-member-to-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id member-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id group-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-member-to-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateMemberToGroup"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-member-to-group))
(common-lisp:progn
 (common-lisp:defun assume-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-assume-impersonation-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssumeImpersonationRole"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'assume-impersonation-role))
(common-lisp:progn
 (common-lisp:defun cancel-mailbox-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token job-id organization-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token job-id organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-mailbox-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelMailboxExportJob"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-mailbox-export-job))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id alias)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAlias"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-availability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id domain-name
                     ews-provider lambda-provider)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id domain-name
     ews-provider lambda-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-availability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAvailabilityConfiguration"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-availability-configuration))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id name)
   (common-lisp:declare (common-lisp:ignorable organization-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGroup"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id name type
                     description rules)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id name type description
     rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-impersonation-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateImpersonationRole"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-impersonation-role))
(common-lisp:progn
 (common-lisp:defun create-mobile-device-access-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id client-token name
                     description effect device-types not-device-types
                     device-models not-device-models device-operating-systems
                     not-device-operating-systems device-user-agents
                     not-device-user-agents)
   (common-lisp:declare
    (common-lisp:ignorable organization-id client-token name description effect
     device-types not-device-types device-models not-device-models
     device-operating-systems not-device-operating-systems device-user-agents
     not-device-user-agents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-mobile-device-access-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMobileDeviceAccessRule"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mobile-device-access-rule))
(common-lisp:progn
 (common-lisp:defun create-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id alias client-token domains
                     kms-key-arn enable-interoperability)
   (common-lisp:declare
    (common-lisp:ignorable directory-id alias client-token domains kms-key-arn
     enable-interoperability))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-organization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateOrganization"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-organization))
(common-lisp:progn
 (common-lisp:defun create-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id name type)
   (common-lisp:declare (common-lisp:ignorable organization-id name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resource))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id name display-name
                     password)
   (common-lisp:declare
    (common-lisp:ignorable organization-id name display-name password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateUser"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-access-control-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id name)
   (common-lisp:declare (common-lisp:ignorable organization-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-access-control-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccessControlRule"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-control-rule))
(common-lisp:progn
 (common-lisp:defun delete-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id alias)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAlias"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-alias))
(common-lisp:progn
 (common-lisp:defun delete-availability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name)
   (common-lisp:declare (common-lisp:ignorable organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-availability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAvailabilityConfiguration"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-availability-configuration))
(common-lisp:progn
 (common-lisp:defun delete-email-monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-email-monitoring-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEmailMonitoringConfiguration"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-email-monitoring-configuration))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id)
   (common-lisp:declare (common-lisp:ignorable organization-id group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGroup"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-impersonation-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteImpersonationRole"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-impersonation-role))
(common-lisp:progn
 (common-lisp:defun delete-mailbox-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id grantee-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id grantee-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-mailbox-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMailboxPermissions"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mailbox-permissions))
(common-lisp:progn
 (common-lisp:defun delete-mobile-device-access-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id device-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-mobile-device-access-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMobileDeviceAccessOverride"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mobile-device-access-override))
(common-lisp:progn
 (common-lisp:defun delete-mobile-device-access-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id
                     mobile-device-access-rule-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id mobile-device-access-rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-mobile-device-access-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMobileDeviceAccessRule"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mobile-device-access-rule))
(common-lisp:progn
 (common-lisp:defun delete-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id
                     delete-directory)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id delete-directory))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-organization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOrganization"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-organization))
(common-lisp:progn
 (common-lisp:defun delete-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id)
   (common-lisp:declare (common-lisp:ignorable organization-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource))
(common-lisp:progn
 (common-lisp:defun delete-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id id)
   (common-lisp:declare (common-lisp:ignorable organization-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-retention-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRetentionPolicy"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-retention-policy))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id)
   (common-lisp:declare (common-lisp:ignorable organization-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteUser"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun deregister-from-work-mail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id)
   (common-lisp:declare (common-lisp:ignorable organization-id entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-from-work-mail-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterFromWorkMail"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-from-work-mail))
(common-lisp:progn
 (common-lisp:defun deregister-mail-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name)
   (common-lisp:declare (common-lisp:ignorable organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-mail-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterMailDomain"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-mail-domain))
(common-lisp:progn
 (common-lisp:defun describe-email-monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-email-monitoring-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEmailMonitoringConfiguration"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-email-monitoring-configuration))
(common-lisp:progn
 (common-lisp:defun describe-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id)
   (common-lisp:declare (common-lisp:ignorable organization-id group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeGroup"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-group))
(common-lisp:progn
 (common-lisp:defun describe-inbound-dmarc-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inbound-dmarc-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInboundDmarcSettings"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-inbound-dmarc-settings))
(common-lisp:progn
 (common-lisp:defun describe-mailbox-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id organization-id)
   (common-lisp:declare (common-lisp:ignorable job-id organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-mailbox-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMailboxExportJob"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-mailbox-export-job))
(common-lisp:progn
 (common-lisp:defun describe-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-organization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrganization"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-organization))
(common-lisp:progn
 (common-lisp:defun describe-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id)
   (common-lisp:declare (common-lisp:ignorable organization-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource))
(common-lisp:progn
 (common-lisp:defun describe-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id)
   (common-lisp:declare (common-lisp:ignorable organization-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUser"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user))
(common-lisp:progn
 (common-lisp:defun disassociate-delegate-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id entity-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id resource-id entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-delegate-from-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateDelegateFromResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-delegate-from-resource))
(common-lisp:progn
 (common-lisp:defun disassociate-member-from-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id member-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id group-id member-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-member-from-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateMemberFromGroup"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-member-from-group))
(common-lisp:progn
 (common-lisp:defun get-access-control-effect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id ip-address action user-id
                     impersonation-role-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id ip-address action user-id
     impersonation-role-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-access-control-effect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAccessControlEffect"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-control-effect))
(common-lisp:progn
 (common-lisp:defun get-default-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-default-retention-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDefaultRetentionPolicy"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-default-retention-policy))
(common-lisp:progn
 (common-lisp:defun get-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-impersonation-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetImpersonationRole"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-impersonation-role))
(common-lisp:progn
 (common-lisp:defun get-impersonation-role-effect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id
                     target-user)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id target-user))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-impersonation-role-effect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetImpersonationRoleEffect"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-impersonation-role-effect))
(common-lisp:progn
 (common-lisp:defun get-mail-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name)
   (common-lisp:declare (common-lisp:ignorable organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mail-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMailDomain"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mail-domain))
(common-lisp:progn
 (common-lisp:defun get-mailbox-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id)
   (common-lisp:declare (common-lisp:ignorable organization-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mailbox-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMailboxDetails"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mailbox-details))
(common-lisp:progn
 (common-lisp:defun get-mobile-device-access-effect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id device-type device-model
                     device-operating-system device-user-agent)
   (common-lisp:declare
    (common-lisp:ignorable organization-id device-type device-model
     device-operating-system device-user-agent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-mobile-device-access-effect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMobileDeviceAccessEffect"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mobile-device-access-effect))
(common-lisp:progn
 (common-lisp:defun get-mobile-device-access-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id device-id)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-mobile-device-access-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMobileDeviceAccessOverride"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mobile-device-access-override))
(common-lisp:progn
 (common-lisp:defun list-access-control-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-access-control-rules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccessControlRules"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-control-rules))
(common-lisp:progn
 (common-lisp:defun list-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAliases"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-aliases))
(common-lisp:progn
 (common-lisp:defun list-availability-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-availability-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAvailabilityConfigurations"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-availability-configurations))
(common-lisp:progn
 (common-lisp:defun list-group-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id group-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id group-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-group-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroupMembers"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-group-members))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListGroups"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-impersonation-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-impersonation-roles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListImpersonationRoles"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-impersonation-roles))
(common-lisp:progn
 (common-lisp:defun list-mail-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mail-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMailDomains"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mail-domains))
(common-lisp:progn
 (common-lisp:defun list-mailbox-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mailbox-export-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMailboxExportJobs"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mailbox-export-jobs))
(common-lisp:progn
 (common-lisp:defun list-mailbox-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mailbox-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMailboxPermissions"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mailbox-permissions))
(common-lisp:progn
 (common-lisp:defun list-mobile-device-access-overrides
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id device-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id device-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-mobile-device-access-overrides-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMobileDeviceAccessOverrides"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mobile-device-access-overrides))
(common-lisp:progn
 (common-lisp:defun list-mobile-device-access-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id)
   (common-lisp:declare (common-lisp:ignorable organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-mobile-device-access-rules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMobileDeviceAccessRules"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mobile-device-access-rules))
(common-lisp:progn
 (common-lisp:defun list-organizations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-organizations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOrganizations"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-organizations))
(common-lisp:progn
 (common-lisp:defun list-resource-delegates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id resource-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-delegates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourceDelegates"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-delegates))
(common-lisp:progn
 (common-lisp:defun list-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResources"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resources))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListUsers"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun put-access-control-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name effect description ip-ranges
                     not-ip-ranges actions not-actions user-ids not-user-ids
                     organization-id impersonation-role-ids
                     not-impersonation-role-ids)
   (common-lisp:declare
    (common-lisp:ignorable name effect description ip-ranges not-ip-ranges
     actions not-actions user-ids not-user-ids organization-id
     impersonation-role-ids not-impersonation-role-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-access-control-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAccessControlRule"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-access-control-rule))
(common-lisp:progn
 (common-lisp:defun put-email-monitoring-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id role-arn log-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable organization-id role-arn log-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-email-monitoring-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutEmailMonitoringConfiguration"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-email-monitoring-configuration))
(common-lisp:progn
 (common-lisp:defun put-inbound-dmarc-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id enforced)
   (common-lisp:declare (common-lisp:ignorable organization-id enforced))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-inbound-dmarc-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutInboundDmarcSettings"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-inbound-dmarc-settings))
(common-lisp:progn
 (common-lisp:defun put-mailbox-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id grantee-id
                     permission-values)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id grantee-id
     permission-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-mailbox-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutMailboxPermissions"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-mailbox-permissions))
(common-lisp:progn
 (common-lisp:defun put-mobile-device-access-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id device-id effect
                     description)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id device-id effect
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-mobile-device-access-override-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutMobileDeviceAccessOverride"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-mobile-device-access-override))
(common-lisp:progn
 (common-lisp:defun put-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id id name description
                     folder-configurations)
   (common-lisp:declare
    (common-lisp:ignorable organization-id id name description
     folder-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-retention-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRetentionPolicy"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-retention-policy))
(common-lisp:progn
 (common-lisp:defun register-mail-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id domain-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-mail-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterMailDomain"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-mail-domain))
(common-lisp:progn
 (common-lisp:defun register-to-work-mail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id email)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id email))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-to-work-mail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterToWorkMail"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-to-work-mail))
(common-lisp:progn
 (common-lisp:defun reset-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id password)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetPassword"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-password))
(common-lisp:progn
 (common-lisp:defun start-mailbox-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token organization-id entity-id
                     description role-arn kms-key-arn s3bucket-name s3prefix)
   (common-lisp:declare
    (common-lisp:ignorable client-token organization-id entity-id description
     role-arn kms-key-arn s3bucket-name s3prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-mailbox-export-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMailboxExportJob"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-mailbox-export-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-availability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name ews-provider
                     lambda-provider)
   (common-lisp:declare
    (common-lisp:ignorable organization-id domain-name ews-provider
     lambda-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-test-availability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestAvailabilityConfiguration"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-availability-configuration))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-availability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name ews-provider
                     lambda-provider)
   (common-lisp:declare
    (common-lisp:ignorable organization-id domain-name ews-provider
     lambda-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-availability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAvailabilityConfiguration"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-availability-configuration))
(common-lisp:progn
 (common-lisp:defun update-default-mail-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id domain-name)
   (common-lisp:declare (common-lisp:ignorable organization-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-default-mail-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDefaultMailDomain"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-default-mail-domain))
(common-lisp:progn
 (common-lisp:defun update-impersonation-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id impersonation-role-id
                     name type description rules)
   (common-lisp:declare
    (common-lisp:ignorable organization-id impersonation-role-id name type
     description rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-impersonation-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateImpersonationRole"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-impersonation-role))
(common-lisp:progn
 (common-lisp:defun update-mailbox-quota
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id user-id mailbox-quota)
   (common-lisp:declare
    (common-lisp:ignorable organization-id user-id mailbox-quota))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mailbox-quota-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMailboxQuota"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mailbox-quota))
(common-lisp:progn
 (common-lisp:defun update-mobile-device-access-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id
                     mobile-device-access-rule-id name description effect
                     device-types not-device-types device-models
                     not-device-models device-operating-systems
                     not-device-operating-systems device-user-agents
                     not-device-user-agents)
   (common-lisp:declare
    (common-lisp:ignorable organization-id mobile-device-access-rule-id name
     description effect device-types not-device-types device-models
     not-device-models device-operating-systems not-device-operating-systems
     device-user-agents not-device-user-agents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-mobile-device-access-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMobileDeviceAccessRule"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mobile-device-access-rule))
(common-lisp:progn
 (common-lisp:defun update-primary-email-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id entity-id email)
   (common-lisp:declare
    (common-lisp:ignorable organization-id entity-id email))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-primary-email-address-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePrimaryEmailAddress"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-primary-email-address))
(common-lisp:progn
 (common-lisp:defun update-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id resource-id name
                     booking-options)
   (common-lisp:declare
    (common-lisp:ignorable organization-id resource-id name booking-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workmail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateResource"
                                                        "2017-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource))
