;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/support-app/api
  (:use)
  (:nicknames #:aws/support-app)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/support-app/api)
(common-lisp:progn
 (common-lisp:defclass support-app-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "support-app" :protocol
                        :rest-json))
 (common-lisp:export 'support-app-request))
(common-lisp:progn
 (common-lisp:define-condition support-app-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'support-app-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (support-app-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (support-app-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-slack-channel-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-slack-channel-configuration-request-"))
   (channel-id (common-lisp:error ":channelid is required") :type
    (common-lisp:or |channelId| common-lisp:null))
   (channel-name common-lisp:nil :type
    (common-lisp:or |channelName| common-lisp:null))
   (channel-role-arn (common-lisp:error ":channelrolearn is required") :type
    (common-lisp:or |roleArn| common-lisp:null))
   (notify-on-add-correspondence-to-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (notify-on-case-severity
    (common-lisp:error ":notifyoncaseseverity is required") :type
    (common-lisp:or notification-severity-level common-lisp:null))
   (notify-on-create-or-reopen-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (notify-on-resolve-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (team-id (common-lisp:error ":teamid is required") :type
    (common-lisp:or |teamId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-slack-channel-configuration-request
                    'make-create-slack-channel-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-slack-channel-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-slack-channel-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "channelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-role-arn))
      (common-lisp:list
       (common-lisp:cons "channelRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-add-correspondence-to-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnAddCorrespondenceToCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-case-severity))
      (common-lisp:list
       (common-lisp:cons "notifyOnCaseSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-create-or-reopen-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnCreateOrReopenCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-resolve-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnResolveCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-slack-channel-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-slack-channel-configuration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-slack-channel-configuration-result-")))
 (common-lisp:export
  (common-lisp:list 'create-slack-channel-configuration-result
                    'make-create-slack-channel-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-slack-channel-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-slack-channel-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-slack-channel-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-account-alias-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-account-alias-request
                    'make-delete-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-alias-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-account-alias-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-account-alias-result
                    'make-delete-account-alias-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-slack-channel-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-slack-channel-configuration-request-"))
   (channel-id (common-lisp:error ":channelid is required") :type
    (common-lisp:or |channelId| common-lisp:null))
   (team-id (common-lisp:error ":teamid is required") :type
    (common-lisp:or |teamId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-slack-channel-configuration-request
                    'make-delete-slack-channel-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-channel-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-channel-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "channelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-channel-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-slack-channel-configuration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-slack-channel-configuration-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-slack-channel-configuration-result
                    'make-delete-slack-channel-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-channel-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-channel-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-channel-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-slack-workspace-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-slack-workspace-configuration-request-"))
   (team-id (common-lisp:error ":teamid is required") :type
    (common-lisp:or |teamId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-slack-workspace-configuration-request
                    'make-delete-slack-workspace-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-workspace-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-workspace-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-workspace-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-slack-workspace-configuration-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-slack-workspace-configuration-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-slack-workspace-configuration-result
                    'make-delete-slack-workspace-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-workspace-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-workspace-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-slack-workspace-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-alias-request-")))
 (common-lisp:export
  (common-lisp:list 'get-account-alias-request
                    'make-get-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-alias-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-alias-result-"))
   (account-alias common-lisp:nil :type
    (common-lisp:or |awsAccountAlias| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-alias-result 'make-get-account-alias-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-alias-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-alias))
      (common-lisp:list
       (common-lisp:cons "accountAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (support-app-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-slack-channel-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-slack-channel-configurations-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |paginationToken| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-slack-channel-configurations-request
                    'make-list-slack-channel-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-channel-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-channel-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-channel-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-slack-channel-configurations-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-slack-channel-configurations-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |paginationToken| common-lisp:null))
   (slack-channel-configurations
    (common-lisp:error ":slackchannelconfigurations is required") :type
    (common-lisp:or |slackChannelConfigurationList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-slack-channel-configurations-result
                    'make-list-slack-channel-configurations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-channel-configurations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-channel-configurations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slack-channel-configurations))
      (common-lisp:list
       (common-lisp:cons "slackChannelConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-channel-configurations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-slack-workspace-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-slack-workspace-configurations-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |paginationToken| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-slack-workspace-configurations-request
                    'make-list-slack-workspace-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-workspace-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-workspace-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-workspace-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-slack-workspace-configurations-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-slack-workspace-configurations-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |paginationToken| common-lisp:null))
   (slack-workspace-configurations common-lisp:nil :type
    (common-lisp:or slack-workspace-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-slack-workspace-configurations-result
                    'make-list-slack-workspace-configurations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-workspace-configurations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-workspace-configurations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slack-workspace-configurations))
      (common-lisp:list
       (common-lisp:cons "slackWorkspaceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-slack-workspace-configurations-result))
   common-lisp:nil))
(common-lisp:deftype notification-severity-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-account-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-account-alias-request-"))
   (account-alias (common-lisp:error ":accountalias is required") :type
    (common-lisp:or |awsAccountAlias| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-account-alias-request
                    'make-put-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-alias))
      (common-lisp:list
       (common-lisp:cons "accountAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-account-alias-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-account-alias-result-")))
 (common-lisp:export
  (common-lisp:list 'put-account-alias-result 'make-put-account-alias-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-slack-workspace-for-organization-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-register-slack-workspace-for-organization-request-"))
   (team-id (common-lisp:error ":teamid is required") :type
    (common-lisp:or |teamId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-slack-workspace-for-organization-request
                    'make-register-slack-workspace-for-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-slack-workspace-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-slack-workspace-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-slack-workspace-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-slack-workspace-for-organization-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-register-slack-workspace-for-organization-result-"))
   (account-type common-lisp:nil :type
    (common-lisp:or account-type common-lisp:null))
   (team-id common-lisp:nil :type (common-lisp:or |teamId| common-lisp:null))
   (team-name common-lisp:nil :type
    (common-lisp:or |teamName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-slack-workspace-for-organization-result
                    'make-register-slack-workspace-for-organization-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-slack-workspace-for-organization-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-slack-workspace-for-organization-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-type))
      (common-lisp:list
       (common-lisp:cons "accountType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-name))
      (common-lisp:list
       (common-lisp:cons "teamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-slack-workspace-for-organization-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (support-app-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (support-app-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (slack-channel-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-slack-channel-configuration-"))
   (channel-id (common-lisp:error ":channelid is required") :type
    (common-lisp:or |channelId| common-lisp:null))
   (channel-name common-lisp:nil :type
    (common-lisp:or |channelName| common-lisp:null))
   (channel-role-arn common-lisp:nil :type
    (common-lisp:or |roleArn| common-lisp:null))
   (notify-on-add-correspondence-to-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (notify-on-case-severity common-lisp:nil :type
    (common-lisp:or notification-severity-level common-lisp:null))
   (notify-on-create-or-reopen-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (notify-on-resolve-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (team-id (common-lisp:error ":teamid is required") :type
    (common-lisp:or |teamId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slack-channel-configuration
                    'make-slack-channel-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slack-channel-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slack-channel-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "channelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-role-arn))
      (common-lisp:list
       (common-lisp:cons "channelRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-add-correspondence-to-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnAddCorrespondenceToCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-case-severity))
      (common-lisp:list
       (common-lisp:cons "notifyOnCaseSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-create-or-reopen-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnCreateOrReopenCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-resolve-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnResolveCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slack-channel-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (slack-workspace-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-slack-workspace-configuration-"))
   (allow-organization-member-account common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (team-id (common-lisp:error ":teamid is required") :type
    (common-lisp:or |teamId| common-lisp:null))
   (team-name common-lisp:nil :type
    (common-lisp:or |teamName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slack-workspace-configuration
                    'make-slack-workspace-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slack-workspace-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slack-workspace-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-organization-member-account))
      (common-lisp:list
       (common-lisp:cons "allowOrganizationMemberAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-name))
      (common-lisp:list
       (common-lisp:cons "teamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slack-workspace-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slack-workspace-configuration-list ()
   '(trivial-types:proper-list slack-workspace-configuration))
 (common-lisp:defun |make-slack-workspace-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            slack-workspace-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-slack-channel-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-slack-channel-configuration-request-"))
   (channel-id (common-lisp:error ":channelid is required") :type
    (common-lisp:or |channelId| common-lisp:null))
   (channel-name common-lisp:nil :type
    (common-lisp:or |channelName| common-lisp:null))
   (channel-role-arn common-lisp:nil :type
    (common-lisp:or |roleArn| common-lisp:null))
   (notify-on-add-correspondence-to-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (notify-on-case-severity common-lisp:nil :type
    (common-lisp:or notification-severity-level common-lisp:null))
   (notify-on-create-or-reopen-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (notify-on-resolve-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (team-id (common-lisp:error ":teamid is required") :type
    (common-lisp:or |teamId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-slack-channel-configuration-request
                    'make-update-slack-channel-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-slack-channel-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-slack-channel-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "channelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-role-arn))
      (common-lisp:list
       (common-lisp:cons "channelRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-add-correspondence-to-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnAddCorrespondenceToCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-case-severity))
      (common-lisp:list
       (common-lisp:cons "notifyOnCaseSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-create-or-reopen-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnCreateOrReopenCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-resolve-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnResolveCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-slack-channel-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-slack-channel-configuration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-slack-channel-configuration-result-"))
   (channel-id common-lisp:nil :type
    (common-lisp:or |channelId| common-lisp:null))
   (channel-name common-lisp:nil :type
    (common-lisp:or |channelName| common-lisp:null))
   (channel-role-arn common-lisp:nil :type
    (common-lisp:or |roleArn| common-lisp:null))
   (notify-on-add-correspondence-to-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (notify-on-case-severity common-lisp:nil :type
    (common-lisp:or notification-severity-level common-lisp:null))
   (notify-on-create-or-reopen-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (notify-on-resolve-case common-lisp:nil :type
    (common-lisp:or |booleanValue| common-lisp:null))
   (team-id common-lisp:nil :type (common-lisp:or |teamId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-slack-channel-configuration-result
                    'make-update-slack-channel-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-slack-channel-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-slack-channel-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "channelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-role-arn))
      (common-lisp:list
       (common-lisp:cons "channelRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-add-correspondence-to-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnAddCorrespondenceToCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-case-severity))
      (common-lisp:list
       (common-lisp:cons "notifyOnCaseSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-create-or-reopen-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnCreateOrReopenCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-on-resolve-case))
      (common-lisp:list
       (common-lisp:cons "notifyOnResolveCase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "teamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-slack-channel-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (support-app-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype |awsAccountAlias| () 'common-lisp:string)
(common-lisp:deftype |booleanValue| () 'common-lisp:boolean)
(common-lisp:deftype |channelId| () 'common-lisp:string)
(common-lisp:deftype |channelName| () 'common-lisp:string)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |paginationToken| () 'common-lisp:string)
(common-lisp:deftype |roleArn| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |slackChannelConfigurationList| ()
   '(trivial-types:proper-list slack-channel-configuration))
 (common-lisp:defun |make-slackchannelconfigurationlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            slack-channel-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |teamId| () 'common-lisp:string)
(common-lisp:deftype |teamName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-slack-channel-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id channel-name channel-role-arn
                     notify-on-add-correspondence-to-case
                     notify-on-case-severity notify-on-create-or-reopen-case
                     notify-on-resolve-case team-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-id channel-name channel-role-arn
     notify-on-add-correspondence-to-case notify-on-case-severity
     notify-on-create-or-reopen-case notify-on-resolve-case team-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-slack-channel-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-app-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/control/create-slack-channel-configuration"
                                                        "CreateSlackChannelConfiguration"
                                                        "2021-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-slack-channel-configuration))
(common-lisp:progn
 (common-lisp:defun delete-account-alias ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'support-app-request :method "POST" :path
                                "/control/delete-account-alias" :protocol
                                :rest-json :operation "DeleteAccountAlias"
                                :params
                                `(("Action" ,@"DeleteAccountAlias")
                                  ("Version" ,@"2021-08-20"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-account-alias))
(common-lisp:progn
 (common-lisp:defun delete-slack-channel-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id team-id)
   (common-lisp:declare (common-lisp:ignorable channel-id team-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-slack-channel-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-app-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/control/delete-slack-channel-configuration"
                                                        "DeleteSlackChannelConfiguration"
                                                        "2021-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-slack-channel-configuration))
(common-lisp:progn
 (common-lisp:defun delete-slack-workspace-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key team-id)
   (common-lisp:declare (common-lisp:ignorable team-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-slack-workspace-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-app-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/control/delete-slack-workspace-configuration"
                                                        "DeleteSlackWorkspaceConfiguration"
                                                        "2021-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-slack-workspace-configuration))
(common-lisp:progn
 (common-lisp:defun get-account-alias ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'support-app-request :method "POST" :path
                                "/control/get-account-alias" :protocol
                                :rest-json :operation "GetAccountAlias" :params
                                `(("Action" ,@"GetAccountAlias")
                                  ("Version" ,@"2021-08-20"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-alias))
(common-lisp:progn
 (common-lisp:defun list-slack-channel-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-slack-channel-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-app-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/control/list-slack-channel-configurations"
                                                        "ListSlackChannelConfigurations"
                                                        "2021-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-slack-channel-configurations))
(common-lisp:progn
 (common-lisp:defun list-slack-workspace-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-slack-workspace-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-app-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/control/list-slack-workspace-configurations"
                                                        "ListSlackWorkspaceConfigurations"
                                                        "2021-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-slack-workspace-configurations))
(common-lisp:progn
 (common-lisp:defun put-account-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-alias)
   (common-lisp:declare (common-lisp:ignorable account-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-account-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-app-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/control/put-account-alias"
                                                        "PutAccountAlias"
                                                        "2021-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-account-alias))
(common-lisp:progn
 (common-lisp:defun register-slack-workspace-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key team-id)
   (common-lisp:declare (common-lisp:ignorable team-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-slack-workspace-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-app-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/control/register-slack-workspace-for-organization"
                                                        "RegisterSlackWorkspaceForOrganization"
                                                        "2021-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-slack-workspace-for-organization))
(common-lisp:progn
 (common-lisp:defun update-slack-channel-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id channel-name channel-role-arn
                     notify-on-add-correspondence-to-case
                     notify-on-case-severity notify-on-create-or-reopen-case
                     notify-on-resolve-case team-id)
   (common-lisp:declare
    (common-lisp:ignorable channel-id channel-name channel-role-arn
     notify-on-add-correspondence-to-case notify-on-case-severity
     notify-on-create-or-reopen-case notify-on-resolve-case team-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-slack-channel-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-app-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/control/update-slack-channel-configuration"
                                                        "UpdateSlackChannelConfiguration"
                                                        "2021-08-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-slack-channel-configuration))
