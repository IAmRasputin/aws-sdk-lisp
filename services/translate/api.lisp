;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/translate/api
  (:use)
  (:nicknames #:aws/translate)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/translate/api)
(common-lisp:progn
 (common-lisp:defclass translate-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "translate" :protocol
                        :json))
 (common-lisp:export 'translate-request))
(common-lisp:progn
 (common-lisp:define-condition translate-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'translate-error))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConflictException" . conflict-exception)
    ("DetectedLanguageLowConfidenceException"
     . detected-language-low-confidence-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidFilterException" . invalid-filter-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TextSizeLimitExceededException" . text-size-limit-exceeded-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnsupportedDisplayLanguageCodeException"
     . unsupported-display-language-code-exception)
    ("UnsupportedLanguagePairException" . unsupported-language-pair-exception)))
(common-lisp:progn
 (common-lisp:defclass applied-terminology common-lisp:nil
                       ((terms :initarg :terms :type
                         (common-lisp:or term-list common-lisp:null) :accessor
                         %applied-terminology-terms :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %applied-terminology-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'applied-terminology 'make-applied-terminology))
 (common-lisp:defun make-applied-terminology
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terms name)
   (common-lisp:apply #'common-lisp:make-instance 'applied-terminology
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input applied-terminology))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input applied-terminology))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terms))
      (common-lisp:list
       (common-lisp:cons "Terms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input applied-terminology))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype applied-terminology-list ()
   '(trivial-types:proper-list applied-terminology))
 (common-lisp:defun |make-applied-terminology-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list applied-terminology))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bounded-length-string () 'common-lisp:string)
(common-lisp:deftype client-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-parallel-data-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-parallel-data-request-tags :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor %create-parallel-data-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (encryption-key :initarg :encryption-key :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor %create-parallel-data-request-encryption-key
                         :initform common-lisp:nil)
                        (parallel-data-config :initarg :parallel-data-config
                         :type
                         (common-lisp:or parallel-data-config common-lisp:null)
                         :accessor
                         %create-parallel-data-request-parallel-data-config
                         :initform
                         (common-lisp:error
                          ":parallel-data-config is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-parallel-data-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-parallel-data-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-parallel-data-request
                    'make-create-parallel-data-request))
 (common-lisp:defun make-create-parallel-data-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-token encryption-key
                     parallel-data-config description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-parallel-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-config))
      (common-lisp:list
       (common-lisp:cons "ParallelDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-parallel-data-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or parallel-data-status common-lisp:null)
                         :accessor %create-parallel-data-response-status
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-parallel-data-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-parallel-data-response
                    'make-create-parallel-data-response))
 (common-lisp:defun make-create-parallel-data-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-parallel-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parallel-data-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-parallel-data-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-parallel-data-request
                    'make-delete-parallel-data-request))
 (common-lisp:defun make-delete-parallel-data-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-parallel-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parallel-data-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or parallel-data-status common-lisp:null)
                         :accessor %delete-parallel-data-response-status
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-parallel-data-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-parallel-data-response
                    'make-delete-parallel-data-response))
 (common-lisp:defun make-delete-parallel-data-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-parallel-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-terminology-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-terminology-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-terminology-request
                    'make-delete-terminology-request))
 (common-lisp:defun make-delete-terminology-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-terminology-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-terminology-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-terminology-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-terminology-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-text-translation-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %describe-text-translation-job-request-job-id
                         :initform (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-text-translation-job-request
                    'make-describe-text-translation-job-request))
 (common-lisp:defun make-describe-text-translation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-text-translation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-text-translation-job-response common-lisp:nil
                       ((text-translation-job-properties :initarg
                         :text-translation-job-properties :type
                         (common-lisp:or text-translation-job-properties
                                         common-lisp:null)
                         :accessor
                         %describe-text-translation-job-response-text-translation-job-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-text-translation-job-response
                    'make-describe-text-translation-job-response))
 (common-lisp:defun make-describe-text-translation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key text-translation-job-properties)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-text-translation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-translation-job-properties))
      (common-lisp:list
       (common-lisp:cons "TextTranslationJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition detected-language-low-confidence-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       detected-language-low-confidence-exception-message)
      (detected-language-code :initarg :detected-language-code :initform
       common-lisp:nil :reader
       detected-language-low-confidence-exception-detected-language-code)))
 (common-lisp:export
  (common-lisp:list 'detected-language-low-confidence-exception
                    'detected-language-low-confidence-exception-message
                    'detected-language-low-confidence-exception-detected-language-code)))
(common-lisp:deftype directionality () 'common-lisp:string)
(common-lisp:deftype display-language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption-key common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or encryption-key-id common-lisp:null)
                         :accessor %encryption-key-id :initform
                         (common-lisp:error ":id is required"))
                        (type :initarg :type :type
                         (common-lisp:or encryption-key-type common-lisp:null)
                         :accessor %encryption-key-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'encryption-key 'make-encryption-key))
 (common-lisp:defun make-encryption-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id type)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-key))
   common-lisp:nil))
(common-lisp:deftype encryption-key-id () 'common-lisp:string)
(common-lisp:deftype encryption-key-type () 'common-lisp:string)
(common-lisp:deftype formality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-parallel-data-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %get-parallel-data-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-parallel-data-request
                    'make-get-parallel-data-request))
 (common-lisp:defun make-get-parallel-data-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-parallel-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parallel-data-response common-lisp:nil
                       ((latest-update-attempt-auxiliary-data-location :initarg
                         :latest-update-attempt-auxiliary-data-location :type
                         (common-lisp:or parallel-data-data-location
                                         common-lisp:null)
                         :accessor
                         %get-parallel-data-response-latest-update-attempt-auxiliary-data-location
                         :initform common-lisp:nil)
                        (auxiliary-data-location :initarg
                         :auxiliary-data-location :type
                         (common-lisp:or parallel-data-data-location
                                         common-lisp:null)
                         :accessor
                         %get-parallel-data-response-auxiliary-data-location
                         :initform common-lisp:nil)
                        (data-location :initarg :data-location :type
                         (common-lisp:or parallel-data-data-location
                                         common-lisp:null)
                         :accessor %get-parallel-data-response-data-location
                         :initform common-lisp:nil)
                        (parallel-data-properties :initarg
                         :parallel-data-properties :type
                         (common-lisp:or parallel-data-properties
                                         common-lisp:null)
                         :accessor
                         %get-parallel-data-response-parallel-data-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-parallel-data-response
                    'make-get-parallel-data-response))
 (common-lisp:defun make-get-parallel-data-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     latest-update-attempt-auxiliary-data-location
                     auxiliary-data-location data-location
                     parallel-data-properties)
   (common-lisp:apply #'common-lisp:make-instance 'get-parallel-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-properties))
      (common-lisp:list
       (common-lisp:cons "ParallelDataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location))
      (common-lisp:list
       (common-lisp:cons "DataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auxiliary-data-location))
      (common-lisp:list
       (common-lisp:cons "AuxiliaryDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-auxiliary-data-location))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptAuxiliaryDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-terminology-request common-lisp:nil
                       ((terminology-data-format :initarg
                         :terminology-data-format :type
                         (common-lisp:or terminology-data-format
                                         common-lisp:null)
                         :accessor
                         %get-terminology-request-terminology-data-format
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %get-terminology-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-terminology-request 'make-get-terminology-request))
 (common-lisp:defun make-get-terminology-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terminology-data-format name)
   (common-lisp:apply #'common-lisp:make-instance 'get-terminology-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-data-format))
      (common-lisp:list
       (common-lisp:cons "TerminologyDataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-terminology-response common-lisp:nil
                       ((auxiliary-data-location :initarg
                         :auxiliary-data-location :type
                         (common-lisp:or terminology-data-location
                                         common-lisp:null)
                         :accessor
                         %get-terminology-response-auxiliary-data-location
                         :initform common-lisp:nil)
                        (terminology-data-location :initarg
                         :terminology-data-location :type
                         (common-lisp:or terminology-data-location
                                         common-lisp:null)
                         :accessor
                         %get-terminology-response-terminology-data-location
                         :initform common-lisp:nil)
                        (terminology-properties :initarg
                         :terminology-properties :type
                         (common-lisp:or terminology-properties
                                         common-lisp:null)
                         :accessor
                         %get-terminology-response-terminology-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-terminology-response 'make-get-terminology-response))
 (common-lisp:defun make-get-terminology-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auxiliary-data-location
                     terminology-data-location terminology-properties)
   (common-lisp:apply #'common-lisp:make-instance 'get-terminology-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-properties))
      (common-lisp:list
       (common-lisp:cons "TerminologyProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-data-location))
      (common-lisp:list
       (common-lisp:cons "TerminologyDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auxiliary-data-location))
      (common-lisp:list
       (common-lisp:cons "AuxiliaryDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-response))
   common-lisp:nil))
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-terminology-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %import-terminology-request-tags :initform
                         common-lisp:nil)
                        (encryption-key :initarg :encryption-key :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor %import-terminology-request-encryption-key
                         :initform common-lisp:nil)
                        (terminology-data :initarg :terminology-data :type
                         (common-lisp:or terminology-data common-lisp:null)
                         :accessor %import-terminology-request-terminology-data
                         :initform
                         (common-lisp:error ":terminology-data is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %import-terminology-request-description
                         :initform common-lisp:nil)
                        (merge-strategy :initarg :merge-strategy :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor %import-terminology-request-merge-strategy
                         :initform
                         (common-lisp:error ":merge-strategy is required"))
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %import-terminology-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-terminology-request
                    'make-import-terminology-request))
 (common-lisp:defun make-import-terminology-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags encryption-key terminology-data
                     description merge-strategy name)
   (common-lisp:apply #'common-lisp:make-instance 'import-terminology-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "MergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminology-data))
      (common-lisp:list
       (common-lisp:cons "TerminologyData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-terminology-response common-lisp:nil
                       ((auxiliary-data-location :initarg
                         :auxiliary-data-location :type
                         (common-lisp:or terminology-data-location
                                         common-lisp:null)
                         :accessor
                         %import-terminology-response-auxiliary-data-location
                         :initform common-lisp:nil)
                        (terminology-properties :initarg
                         :terminology-properties :type
                         (common-lisp:or terminology-properties
                                         common-lisp:null)
                         :accessor
                         %import-terminology-response-terminology-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-terminology-response
                    'make-import-terminology-response))
 (common-lisp:defun make-import-terminology-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auxiliary-data-location
                     terminology-properties)
   (common-lisp:apply #'common-lisp:make-instance 'import-terminology-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-properties))
      (common-lisp:list
       (common-lisp:cons "TerminologyProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auxiliary-data-location))
      (common-lisp:list
       (common-lisp:cons "AuxiliaryDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-data-config common-lisp:nil
                       ((content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %input-data-config-content-type :initform
                         (common-lisp:error ":content-type is required"))
                        (s3uri :initarg :s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %input-data-config-s3uri :initform
                         (common-lisp:error ":s3uri is required"))))
 (common-lisp:export
  (common-lisp:list 'input-data-config 'make-input-data-config))
 (common-lisp:defun make-input-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type s3uri)
   (common-lisp:apply #'common-lisp:make-instance 'input-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-data-config))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-filter-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-filter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-filter-exception
                    'invalid-filter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass job-details common-lisp:nil
                       ((input-documents-count :initarg :input-documents-count
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %job-details-input-documents-count :initform
                         common-lisp:nil)
                        (documents-with-errors-count :initarg
                         :documents-with-errors-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %job-details-documents-with-errors-count :initform
                         common-lisp:nil)
                        (translated-documents-count :initarg
                         :translated-documents-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %job-details-translated-documents-count :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defun make-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-documents-count
                     documents-with-errors-count translated-documents-count)
   (common-lisp:apply #'common-lisp:make-instance 'job-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'translated-documents-count))
      (common-lisp:list
       (common-lisp:cons "TranslatedDocumentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'documents-with-errors-count))
      (common-lisp:list
       (common-lisp:cons "DocumentsWithErrorsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-documents-count))
      (common-lisp:list
       (common-lisp:cons "InputDocumentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass language common-lisp:nil
                       ((language-code :initarg :language-code :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor %language-language-code :initform
                         (common-lisp:error ":language-code is required"))
                        (language-name :initarg :language-name :type
                         (common-lisp:or localized-name-string
                                         common-lisp:null)
                         :accessor %language-language-name :initform
                         (common-lisp:error ":language-name is required"))))
 (common-lisp:export (common-lisp:list 'language 'make-language))
 (common-lisp:defun make-language
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language-code language-name)
   (common-lisp:apply #'common-lisp:make-instance 'language
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-name))
      (common-lisp:list
       (common-lisp:cons "LanguageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language))
   common-lisp:nil))
(common-lisp:deftype language-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype language-code-string-list ()
   '(trivial-types:proper-list language-code-string))
 (common-lisp:defun |make-language-code-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype languages-list () '(trivial-types:proper-list language))
 (common-lisp:defun |make-languages-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-languages-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor %list-languages-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-languages-request-next-token :initform
                         common-lisp:nil)
                        (display-language-code :initarg :display-language-code
                         :type
                         (common-lisp:or display-language-code
                                         common-lisp:null)
                         :accessor
                         %list-languages-request-display-language-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-languages-request 'make-list-languages-request))
 (common-lisp:defun make-list-languages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     display-language-code)
   (common-lisp:apply #'common-lisp:make-instance 'list-languages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-language-code))
      (common-lisp:list
       (common-lisp:cons "DisplayLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-languages-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-languages-response-next-token :initform
                         common-lisp:nil)
                        (display-language-code :initarg :display-language-code
                         :type
                         (common-lisp:or display-language-code
                                         common-lisp:null)
                         :accessor
                         %list-languages-response-display-language-code
                         :initform common-lisp:nil)
                        (languages :initarg :languages :type
                         (common-lisp:or languages-list common-lisp:null)
                         :accessor %list-languages-response-languages :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-languages-response 'make-list-languages-response))
 (common-lisp:defun make-list-languages-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token display-language-code
                     languages)
   (common-lisp:apply #'common-lisp:make-instance 'list-languages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'languages))
      (common-lisp:list
       (common-lisp:cons "Languages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-language-code))
      (common-lisp:list
       (common-lisp:cons "DisplayLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-parallel-data-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor %list-parallel-data-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-parallel-data-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-parallel-data-request
                    'make-list-parallel-data-request))
 (common-lisp:defun make-list-parallel-data-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-parallel-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-parallel-data-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-parallel-data-response-next-token :initform
                         common-lisp:nil)
                        (parallel-data-properties-list :initarg
                         :parallel-data-properties-list :type
                         (common-lisp:or parallel-data-properties-list
                                         common-lisp:null)
                         :accessor
                         %list-parallel-data-response-parallel-data-properties-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-parallel-data-response
                    'make-list-parallel-data-response))
 (common-lisp:defun make-list-parallel-data-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token parallel-data-properties-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-parallel-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-properties-list))
      (common-lisp:list
       (common-lisp:cons "ParallelDataPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-terminologies-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor %list-terminologies-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-terminologies-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-terminologies-request
                    'make-list-terminologies-request))
 (common-lisp:defun make-list-terminologies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-terminologies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-terminologies-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-terminologies-response-next-token :initform
                         common-lisp:nil)
                        (terminology-properties-list :initarg
                         :terminology-properties-list :type
                         (common-lisp:or terminology-properties-list
                                         common-lisp:null)
                         :accessor
                         %list-terminologies-response-terminology-properties-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-terminologies-response
                    'make-list-terminologies-response))
 (common-lisp:defun make-list-terminologies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token terminology-properties-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-terminologies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-properties-list))
      (common-lisp:list
       (common-lisp:cons "TerminologyPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-text-translation-jobs-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor
                         %list-text-translation-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-text-translation-jobs-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or text-translation-job-filter
                                         common-lisp:null)
                         :accessor %list-text-translation-jobs-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-text-translation-jobs-request
                    'make-list-text-translation-jobs-request))
 (common-lisp:defun make-list-text-translation-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-text-translation-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-text-translation-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-text-translation-jobs-response-next-token
                         :initform common-lisp:nil)
                        (text-translation-job-properties-list :initarg
                         :text-translation-job-properties-list :type
                         (common-lisp:or text-translation-job-properties-list
                                         common-lisp:null)
                         :accessor
                         %list-text-translation-jobs-response-text-translation-job-properties-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-text-translation-jobs-response
                    'make-list-text-translation-jobs-response))
 (common-lisp:defun make-list-text-translation-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     text-translation-job-properties-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-text-translation-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-translation-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "TextTranslationJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-response))
   common-lisp:nil))
(common-lisp:deftype localized-name-string () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results-integer () 'common-lisp:integer)
(common-lisp:deftype merge-strategy () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-data-config common-lisp:nil
                       ((encryption-key :initarg :encryption-key :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor %output-data-config-encryption-key :initform
                         common-lisp:nil)
                        (s3uri :initarg :s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %output-data-config-s3uri :initform
                         (common-lisp:error ":s3uri is required"))))
 (common-lisp:export
  (common-lisp:list 'output-data-config 'make-output-data-config))
 (common-lisp:defun make-output-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-key s3uri)
   (common-lisp:apply #'common-lisp:make-instance 'output-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-data-config))
   common-lisp:nil))
(common-lisp:deftype parallel-data-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parallel-data-config common-lisp:nil
                       ((format :initarg :format :type
                         (common-lisp:or parallel-data-format common-lisp:null)
                         :accessor %parallel-data-config-format :initform
                         (common-lisp:error ":format is required"))
                        (s3uri :initarg :s3uri :type
                         (common-lisp:or s3uri common-lisp:null) :accessor
                         %parallel-data-config-s3uri :initform
                         (common-lisp:error ":s3uri is required"))))
 (common-lisp:export
  (common-lisp:list 'parallel-data-config 'make-parallel-data-config))
 (common-lisp:defun make-parallel-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format s3uri)
   (common-lisp:apply #'common-lisp:make-instance 'parallel-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parallel-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parallel-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parallel-data-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parallel-data-data-location common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parallel-data-data-location-location :initform
                         (common-lisp:error ":location is required"))
                        (repository-type :initarg :repository-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parallel-data-data-location-repository-type :initform
                         (common-lisp:error ":repository-type is required"))))
 (common-lisp:export
  (common-lisp:list 'parallel-data-data-location
                    'make-parallel-data-data-location))
 (common-lisp:defun make-parallel-data-data-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location repository-type)
   (common-lisp:apply #'common-lisp:make-instance 'parallel-data-data-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-data-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-data-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-type))
      (common-lisp:list
       (common-lisp:cons "RepositoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-data-location))
   common-lisp:nil))
(common-lisp:deftype parallel-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parallel-data-properties common-lisp:nil
                       ((latest-update-attempt-at :initarg
                         :latest-update-attempt-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %parallel-data-properties-latest-update-attempt-at
                         :initform common-lisp:nil)
                        (latest-update-attempt-status :initarg
                         :latest-update-attempt-status :type
                         (common-lisp:or parallel-data-status common-lisp:null)
                         :accessor
                         %parallel-data-properties-latest-update-attempt-status
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %parallel-data-properties-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %parallel-data-properties-created-at :initform
                         common-lisp:nil)
                        (encryption-key :initarg :encryption-key :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor %parallel-data-properties-encryption-key
                         :initform common-lisp:nil)
                        (skipped-record-count :initarg :skipped-record-count
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %parallel-data-properties-skipped-record-count
                         :initform common-lisp:nil)
                        (failed-record-count :initarg :failed-record-count
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %parallel-data-properties-failed-record-count
                         :initform common-lisp:nil)
                        (imported-record-count :initarg :imported-record-count
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %parallel-data-properties-imported-record-count
                         :initform common-lisp:nil)
                        (imported-data-size :initarg :imported-data-size :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %parallel-data-properties-imported-data-size :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or unbounded-length-string
                                         common-lisp:null)
                         :accessor %parallel-data-properties-message :initform
                         common-lisp:nil)
                        (parallel-data-config :initarg :parallel-data-config
                         :type
                         (common-lisp:or parallel-data-config common-lisp:null)
                         :accessor
                         %parallel-data-properties-parallel-data-config
                         :initform common-lisp:nil)
                        (target-language-codes :initarg :target-language-codes
                         :type
                         (common-lisp:or language-code-string-list
                                         common-lisp:null)
                         :accessor
                         %parallel-data-properties-target-language-codes
                         :initform common-lisp:nil)
                        (source-language-code :initarg :source-language-code
                         :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor
                         %parallel-data-properties-source-language-code
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or parallel-data-status common-lisp:null)
                         :accessor %parallel-data-properties-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %parallel-data-properties-description
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or parallel-data-arn common-lisp:null)
                         :accessor %parallel-data-properties-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %parallel-data-properties-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parallel-data-properties 'make-parallel-data-properties))
 (common-lisp:defun make-parallel-data-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latest-update-attempt-at
                     latest-update-attempt-status last-updated-at created-at
                     encryption-key skipped-record-count failed-record-count
                     imported-record-count imported-data-size message
                     parallel-data-config target-language-codes
                     source-language-code status description arn name)
   (common-lisp:apply #'common-lisp:make-instance 'parallel-data-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-codes))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-config))
      (common-lisp:list
       (common-lisp:cons "ParallelDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-data-size))
      (common-lisp:list
       (common-lisp:cons "ImportedDataSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-record-count))
      (common-lisp:list
       (common-lisp:cons "ImportedRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-record-count))
      (common-lisp:list
       (common-lisp:cons "FailedRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skipped-record-count))
      (common-lisp:list
       (common-lisp:cons "SkippedRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-status))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-at))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parallel-data-properties-list ()
   '(trivial-types:proper-list parallel-data-properties))
 (common-lisp:defun |make-parallel-data-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            parallel-data-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parallel-data-status () 'common-lisp:string)
(common-lisp:deftype profanity () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-name-list ()
   '(trivial-types:proper-list resource-name))
 (common-lisp:defun |make-resource-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-text-translation-job-request common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or translation-settings common-lisp:null)
                         :accessor %start-text-translation-job-request-settings
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor
                         %start-text-translation-job-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (parallel-data-names :initarg :parallel-data-names
                         :type
                         (common-lisp:or resource-name-list common-lisp:null)
                         :accessor
                         %start-text-translation-job-request-parallel-data-names
                         :initform common-lisp:nil)
                        (terminology-names :initarg :terminology-names :type
                         (common-lisp:or resource-name-list common-lisp:null)
                         :accessor
                         %start-text-translation-job-request-terminology-names
                         :initform common-lisp:nil)
                        (target-language-codes :initarg :target-language-codes
                         :type
                         (common-lisp:or target-language-code-string-list
                                         common-lisp:null)
                         :accessor
                         %start-text-translation-job-request-target-language-codes
                         :initform
                         (common-lisp:error
                          ":target-language-codes is required"))
                        (source-language-code :initarg :source-language-code
                         :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor
                         %start-text-translation-job-request-source-language-code
                         :initform
                         (common-lisp:error
                          ":source-language-code is required"))
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         %start-text-translation-job-request-data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required"))
                        (output-data-config :initarg :output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         %start-text-translation-job-request-output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required"))
                        (input-data-config :initarg :input-data-config :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         %start-text-translation-job-request-input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required"))
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %start-text-translation-job-request-job-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-text-translation-job-request
                    'make-start-text-translation-job-request))
 (common-lisp:defun make-start-text-translation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings client-token parallel-data-names
                     terminology-names target-language-codes
                     source-language-code data-access-role-arn
                     output-data-config input-data-config job-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-text-translation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-codes))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminology-names))
      (common-lisp:list
       (common-lisp:cons "TerminologyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallel-data-names))
      (common-lisp:list
       (common-lisp:cons "ParallelDataNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-text-translation-job-response common-lisp:nil
                       ((job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %start-text-translation-job-response-job-status
                         :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %start-text-translation-job-response-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-text-translation-job-response
                    'make-start-text-translation-job-response))
 (common-lisp:defun make-start-text-translation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-status job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-text-translation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-text-translation-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %stop-text-translation-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-text-translation-job-request
                    'make-stop-text-translation-job-request))
 (common-lisp:defun make-stop-text-translation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-text-translation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-text-translation-job-response common-lisp:nil
                       ((job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %stop-text-translation-job-response-job-status
                         :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %stop-text-translation-job-response-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-text-translation-job-response
                    'make-stop-text-translation-job-response))
 (common-lisp:defun make-stop-text-translation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-status job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-text-translation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-language-code-string-list ()
   '(trivial-types:proper-list language-code-string))
 (common-lisp:defun |make-target-language-code-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass term common-lisp:nil
                       ((target-text :initarg :target-text :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %term-target-text :initform common-lisp:nil)
                        (source-text :initarg :source-text :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %term-source-text :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'term 'make-term))
 (common-lisp:defun make-term
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-text source-text)
   (common-lisp:apply #'common-lisp:make-instance 'term
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-text))
      (common-lisp:list
       (common-lisp:cons "SourceText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-text))
      (common-lisp:list
       (common-lisp:cons "TargetText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype term-list () '(trivial-types:proper-list term))
 (common-lisp:defun |make-term-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list term))
   aws-sdk/generator/shape::members))
(common-lisp:deftype terminology-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass terminology-data common-lisp:nil
                       ((directionality :initarg :directionality :type
                         (common-lisp:or directionality common-lisp:null)
                         :accessor %terminology-data-directionality :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or terminology-data-format
                                         common-lisp:null)
                         :accessor %terminology-data-format :initform
                         (common-lisp:error ":format is required"))
                        (file :initarg :file :type
                         (common-lisp:or terminology-file common-lisp:null)
                         :accessor %terminology-data-file :initform
                         (common-lisp:error ":file is required"))))
 (common-lisp:export
  (common-lisp:list 'terminology-data 'make-terminology-data))
 (common-lisp:defun make-terminology-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directionality format file)
   (common-lisp:apply #'common-lisp:make-instance 'terminology-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input terminology-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input terminology-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "File"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directionality))
      (common-lisp:list
       (common-lisp:cons "Directionality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input terminology-data))
   common-lisp:nil))
(common-lisp:deftype terminology-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass terminology-data-location common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %terminology-data-location-location :initform
                         (common-lisp:error ":location is required"))
                        (repository-type :initarg :repository-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %terminology-data-location-repository-type :initform
                         (common-lisp:error ":repository-type is required"))))
 (common-lisp:export
  (common-lisp:list 'terminology-data-location
                    'make-terminology-data-location))
 (common-lisp:defun make-terminology-data-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location repository-type)
   (common-lisp:apply #'common-lisp:make-instance 'terminology-data-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminology-data-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminology-data-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-type))
      (common-lisp:list
       (common-lisp:cons "RepositoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminology-data-location))
   common-lisp:nil))
(common-lisp:deftype terminology-file ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass terminology-properties common-lisp:nil
                       ((format :initarg :format :type
                         (common-lisp:or terminology-data-format
                                         common-lisp:null)
                         :accessor %terminology-properties-format :initform
                         common-lisp:nil)
                        (skipped-term-count :initarg :skipped-term-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %terminology-properties-skipped-term-count :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or unbounded-length-string
                                         common-lisp:null)
                         :accessor %terminology-properties-message :initform
                         common-lisp:nil)
                        (directionality :initarg :directionality :type
                         (common-lisp:or directionality common-lisp:null)
                         :accessor %terminology-properties-directionality
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %terminology-properties-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %terminology-properties-created-at :initform
                         common-lisp:nil)
                        (term-count :initarg :term-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %terminology-properties-term-count :initform
                         common-lisp:nil)
                        (size-bytes :initarg :size-bytes :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %terminology-properties-size-bytes :initform
                         common-lisp:nil)
                        (encryption-key :initarg :encryption-key :type
                         (common-lisp:or encryption-key common-lisp:null)
                         :accessor %terminology-properties-encryption-key
                         :initform common-lisp:nil)
                        (target-language-codes :initarg :target-language-codes
                         :type
                         (common-lisp:or language-code-string-list
                                         common-lisp:null)
                         :accessor
                         %terminology-properties-target-language-codes
                         :initform common-lisp:nil)
                        (source-language-code :initarg :source-language-code
                         :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor %terminology-properties-source-language-code
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or terminology-arn common-lisp:null)
                         :accessor %terminology-properties-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %terminology-properties-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %terminology-properties-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'terminology-properties 'make-terminology-properties))
 (common-lisp:defun make-terminology-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format skipped-term-count message
                     directionality last-updated-at created-at term-count
                     size-bytes encryption-key target-language-codes
                     source-language-code arn description name)
   (common-lisp:apply #'common-lisp:make-instance 'terminology-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminology-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminology-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-codes))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-count))
      (common-lisp:list
       (common-lisp:cons "TermCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directionality))
      (common-lisp:list
       (common-lisp:cons "Directionality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-term-count))
      (common-lisp:list
       (common-lisp:cons "SkippedTermCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminology-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype terminology-properties-list ()
   '(trivial-types:proper-list terminology-properties))
 (common-lisp:defun |make-terminology-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list terminology-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition text-size-limit-exceeded-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       text-size-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'text-size-limit-exceeded-exception
                    'text-size-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass text-translation-job-filter common-lisp:nil
                       ((submitted-after-time :initarg :submitted-after-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %text-translation-job-filter-submitted-after-time
                         :initform common-lisp:nil)
                        (submitted-before-time :initarg :submitted-before-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %text-translation-job-filter-submitted-before-time
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %text-translation-job-filter-job-status :initform
                         common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %text-translation-job-filter-job-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'text-translation-job-filter
                    'make-text-translation-job-filter))
 (common-lisp:defun make-text-translation-job-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key submitted-after-time
                     submitted-before-time job-status job-name)
   (common-lisp:apply #'common-lisp:make-instance 'text-translation-job-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submitted-before-time))
      (common-lisp:list
       (common-lisp:cons "SubmittedBeforeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submitted-after-time))
      (common-lisp:list
       (common-lisp:cons "SubmittedAfterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-translation-job-properties common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or translation-settings common-lisp:null)
                         :accessor %text-translation-job-properties-settings
                         :initform common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         %text-translation-job-properties-data-access-role-arn
                         :initform common-lisp:nil)
                        (output-data-config :initarg :output-data-config :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         %text-translation-job-properties-output-data-config
                         :initform common-lisp:nil)
                        (input-data-config :initarg :input-data-config :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         %text-translation-job-properties-input-data-config
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %text-translation-job-properties-end-time :initform
                         common-lisp:nil)
                        (submitted-time :initarg :submitted-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %text-translation-job-properties-submitted-time
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or unbounded-length-string
                                         common-lisp:null)
                         :accessor %text-translation-job-properties-message
                         :initform common-lisp:nil)
                        (parallel-data-names :initarg :parallel-data-names
                         :type
                         (common-lisp:or resource-name-list common-lisp:null)
                         :accessor
                         %text-translation-job-properties-parallel-data-names
                         :initform common-lisp:nil)
                        (terminology-names :initarg :terminology-names :type
                         (common-lisp:or resource-name-list common-lisp:null)
                         :accessor
                         %text-translation-job-properties-terminology-names
                         :initform common-lisp:nil)
                        (target-language-codes :initarg :target-language-codes
                         :type
                         (common-lisp:or target-language-code-string-list
                                         common-lisp:null)
                         :accessor
                         %text-translation-job-properties-target-language-codes
                         :initform common-lisp:nil)
                        (source-language-code :initarg :source-language-code
                         :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor
                         %text-translation-job-properties-source-language-code
                         :initform common-lisp:nil)
                        (job-details :initarg :job-details :type
                         (common-lisp:or job-details common-lisp:null)
                         :accessor %text-translation-job-properties-job-details
                         :initform common-lisp:nil)
                        (job-status :initarg :job-status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %text-translation-job-properties-job-status :initform
                         common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         %text-translation-job-properties-job-name :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %text-translation-job-properties-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'text-translation-job-properties
                    'make-text-translation-job-properties))
 (common-lisp:defun make-text-translation-job-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings data-access-role-arn
                     output-data-config input-data-config end-time
                     submitted-time message parallel-data-names
                     terminology-names target-language-codes
                     source-language-code job-details job-status job-name
                     job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'text-translation-job-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "JobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-codes))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminology-names))
      (common-lisp:list
       (common-lisp:cons "TerminologyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallel-data-names))
      (common-lisp:list
       (common-lisp:cons "ParallelDataNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-time))
      (common-lisp:list
       (common-lisp:cons "SubmittedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-translation-job-properties-list ()
   '(trivial-types:proper-list text-translation-job-properties))
 (common-lisp:defun |make-text-translation-job-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            text-translation-job-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (translate-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       too-many-tags-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-arn)))
(common-lisp:progn
 (common-lisp:defclass translate-text-request common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or translation-settings common-lisp:null)
                         :accessor %translate-text-request-settings :initform
                         common-lisp:nil)
                        (target-language-code :initarg :target-language-code
                         :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor %translate-text-request-target-language-code
                         :initform
                         (common-lisp:error
                          ":target-language-code is required"))
                        (source-language-code :initarg :source-language-code
                         :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor %translate-text-request-source-language-code
                         :initform
                         (common-lisp:error
                          ":source-language-code is required"))
                        (terminology-names :initarg :terminology-names :type
                         (common-lisp:or resource-name-list common-lisp:null)
                         :accessor %translate-text-request-terminology-names
                         :initform common-lisp:nil)
                        (text :initarg :text :type
                         (common-lisp:or bounded-length-string
                                         common-lisp:null)
                         :accessor %translate-text-request-text :initform
                         (common-lisp:error ":text is required"))))
 (common-lisp:export
  (common-lisp:list 'translate-text-request 'make-translate-text-request))
 (common-lisp:defun make-translate-text-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings target-language-code
                     source-language-code terminology-names text)
   (common-lisp:apply #'common-lisp:make-instance 'translate-text-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminology-names))
      (common-lisp:list
       (common-lisp:cons "TerminologyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-code))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass translate-text-response common-lisp:nil
                       ((applied-settings :initarg :applied-settings :type
                         (common-lisp:or translation-settings common-lisp:null)
                         :accessor %translate-text-response-applied-settings
                         :initform common-lisp:nil)
                        (applied-terminologies :initarg :applied-terminologies
                         :type
                         (common-lisp:or applied-terminology-list
                                         common-lisp:null)
                         :accessor
                         %translate-text-response-applied-terminologies
                         :initform common-lisp:nil)
                        (target-language-code :initarg :target-language-code
                         :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor
                         %translate-text-response-target-language-code
                         :initform
                         (common-lisp:error
                          ":target-language-code is required"))
                        (source-language-code :initarg :source-language-code
                         :type
                         (common-lisp:or language-code-string common-lisp:null)
                         :accessor
                         %translate-text-response-source-language-code
                         :initform
                         (common-lisp:error
                          ":source-language-code is required"))
                        (translated-text :initarg :translated-text :type
                         (common-lisp:or translated-text-string
                                         common-lisp:null)
                         :accessor %translate-text-response-translated-text
                         :initform
                         (common-lisp:error ":translated-text is required"))))
 (common-lisp:export
  (common-lisp:list 'translate-text-response 'make-translate-text-response))
 (common-lisp:defun make-translate-text-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key applied-settings applied-terminologies
                     target-language-code source-language-code translated-text)
   (common-lisp:apply #'common-lisp:make-instance 'translate-text-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'translated-text))
      (common-lisp:list
       (common-lisp:cons "TranslatedText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-code))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applied-terminologies))
      (common-lisp:list
       (common-lisp:cons "AppliedTerminologies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-settings))
      (common-lisp:list
       (common-lisp:cons "AppliedSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-response))
   common-lisp:nil))
(common-lisp:deftype translated-text-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass translation-settings common-lisp:nil
                       ((profanity :initarg :profanity :type
                         (common-lisp:or profanity common-lisp:null) :accessor
                         %translation-settings-profanity :initform
                         common-lisp:nil)
                        (formality :initarg :formality :type
                         (common-lisp:or formality common-lisp:null) :accessor
                         %translation-settings-formality :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'translation-settings 'make-translation-settings))
 (common-lisp:defun make-translation-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profanity formality)
   (common-lisp:apply #'common-lisp:make-instance 'translation-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input translation-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input translation-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formality))
      (common-lisp:list
       (common-lisp:cons "Formality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profanity))
      (common-lisp:list
       (common-lisp:cons "Profanity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input translation-settings))
   common-lisp:nil))
(common-lisp:deftype unbounded-length-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-display-language-code-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-display-language-code-exception-message)
      (display-language-code :initarg :display-language-code :initform
       common-lisp:nil :reader
       unsupported-display-language-code-exception-display-language-code)))
 (common-lisp:export
  (common-lisp:list 'unsupported-display-language-code-exception
                    'unsupported-display-language-code-exception-message
                    'unsupported-display-language-code-exception-display-language-code)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-language-pair-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-language-pair-exception-message)
      (source-language-code :initarg :source-language-code :initform
       common-lisp:nil :reader
       unsupported-language-pair-exception-source-language-code)
      (target-language-code :initarg :target-language-code :initform
       common-lisp:nil :reader
       unsupported-language-pair-exception-target-language-code)))
 (common-lisp:export
  (common-lisp:list 'unsupported-language-pair-exception
                    'unsupported-language-pair-exception-message
                    'unsupported-language-pair-exception-source-language-code
                    'unsupported-language-pair-exception-target-language-code)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-parallel-data-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token-string common-lisp:null)
                         :accessor %update-parallel-data-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (parallel-data-config :initarg :parallel-data-config
                         :type
                         (common-lisp:or parallel-data-config common-lisp:null)
                         :accessor
                         %update-parallel-data-request-parallel-data-config
                         :initform
                         (common-lisp:error
                          ":parallel-data-config is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-parallel-data-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-parallel-data-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-parallel-data-request
                    'make-update-parallel-data-request))
 (common-lisp:defun make-update-parallel-data-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token parallel-data-config
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'update-parallel-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-config))
      (common-lisp:list
       (common-lisp:cons "ParallelDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-parallel-data-response common-lisp:nil
                       ((latest-update-attempt-at :initarg
                         :latest-update-attempt-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-parallel-data-response-latest-update-attempt-at
                         :initform common-lisp:nil)
                        (latest-update-attempt-status :initarg
                         :latest-update-attempt-status :type
                         (common-lisp:or parallel-data-status common-lisp:null)
                         :accessor
                         %update-parallel-data-response-latest-update-attempt-status
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or parallel-data-status common-lisp:null)
                         :accessor %update-parallel-data-response-status
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-parallel-data-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-parallel-data-response
                    'make-update-parallel-data-response))
 (common-lisp:defun make-update-parallel-data-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latest-update-attempt-at
                     latest-update-attempt-status status name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-parallel-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-status))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-at))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description parallel-data-config
                     encryption-key client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name description parallel-data-config encryption-key
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-parallel-data))
(common-lisp:progn
 (common-lisp:defun delete-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-parallel-data))
(common-lisp:progn
 (common-lisp:defun delete-terminology
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-terminology-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTerminology"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-terminology))
(common-lisp:progn
 (common-lisp:defun describe-text-translation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-text-translation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTextTranslationJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-text-translation-job))
(common-lisp:progn
 (common-lisp:defun get-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-parallel-data))
(common-lisp:progn
 (common-lisp:defun get-terminology
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name terminology-data-format)
   (common-lisp:declare (common-lisp:ignorable name terminology-data-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-terminology-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetTerminology"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-terminology))
(common-lisp:progn
 (common-lisp:defun import-terminology
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name merge-strategy description
                     terminology-data encryption-key tags)
   (common-lisp:declare
    (common-lisp:ignorable name merge-strategy description terminology-data
     encryption-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-terminology-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportTerminology"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-terminology))
(common-lisp:progn
 (common-lisp:defun list-languages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key display-language-code next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable display-language-code next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-languages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListLanguages"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-languages))
(common-lisp:progn
 (common-lisp:defun list-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-parallel-data))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-terminologies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-terminologies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTerminologies"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-terminologies))
(common-lisp:progn
 (common-lisp:defun list-text-translation-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-text-translation-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTextTranslationJobs"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-text-translation-jobs))
(common-lisp:progn
 (common-lisp:defun start-text-translation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name input-data-config
                     output-data-config data-access-role-arn
                     source-language-code target-language-codes
                     terminology-names parallel-data-names client-token
                     settings)
   (common-lisp:declare
    (common-lisp:ignorable job-name input-data-config output-data-config
     data-access-role-arn source-language-code target-language-codes
     terminology-names parallel-data-names client-token settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-text-translation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartTextTranslationJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-text-translation-job))
(common-lisp:progn
 (common-lisp:defun stop-text-translation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-text-translation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopTextTranslationJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-text-translation-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun translate-text
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key text terminology-names
                     source-language-code target-language-code settings)
   (common-lisp:declare
    (common-lisp:ignorable text terminology-names source-language-code
     target-language-code settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-translate-text-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TranslateText"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'translate-text))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description parallel-data-config
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description parallel-data-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-parallel-data))
