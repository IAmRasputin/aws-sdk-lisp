;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/translate/api
  (:use)
  (:nicknames #:aws/translate)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/translate/api)
(common-lisp:progn
 (common-lisp:defclass translate-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "translate" :protocol
                        :json))
 (common-lisp:export 'translate-request))
(common-lisp:progn
 (common-lisp:define-condition translate-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'translate-error))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConflictException" . conflict-exception)
    ("DetectedLanguageLowConfidenceException"
     . detected-language-low-confidence-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidFilterException" . invalid-filter-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TextSizeLimitExceededException" . text-size-limit-exceeded-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnsupportedDisplayLanguageCodeException"
     . unsupported-display-language-code-exception)
    ("UnsupportedLanguagePairException" . unsupported-language-pair-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (applied-terminology (:copier common-lisp:nil)
      (:conc-name "struct-shape-applied-terminology-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (terms common-lisp:nil :type (common-lisp:or term-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'applied-terminology 'make-applied-terminology))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input applied-terminology))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input applied-terminology))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terms))
      (common-lisp:list
       (common-lisp:cons "Terms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input applied-terminology))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype applied-terminology-list ()
   '(trivial-types:proper-list applied-terminology))
 (common-lisp:defun |make-applied-terminology-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list applied-terminology))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bounded-length-string () 'common-lisp:string)
(common-lisp:deftype client-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-parallel-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-parallel-data-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (parallel-data-config
    (common-lisp:error ":parallel-data-config is required") :type
    (common-lisp:or parallel-data-config common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-parallel-data-request
                    'make-create-parallel-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-config))
      (common-lisp:list
       (common-lisp:cons "ParallelDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-parallel-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-parallel-data-response-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or parallel-data-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-parallel-data-response
                    'make-create-parallel-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-parallel-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-parallel-data-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-parallel-data-request
                    'make-delete-parallel-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-parallel-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-parallel-data-response-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or parallel-data-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-parallel-data-response
                    'make-delete-parallel-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-terminology-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-terminology-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-terminology-request
                    'make-delete-terminology-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-terminology-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-terminology-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-terminology-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-text-translation-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-text-translation-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-text-translation-job-request
                    'make-describe-text-translation-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-text-translation-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-text-translation-job-response-"))
   (text-translation-job-properties common-lisp:nil :type
    (common-lisp:or text-translation-job-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-text-translation-job-response
                    'make-describe-text-translation-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-translation-job-properties))
      (common-lisp:list
       (common-lisp:cons "TextTranslationJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-text-translation-job-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition detected-language-low-confidence-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       detected-language-low-confidence-exception-message)
      (detected-language-code :initarg :detected-language-code :initform
       common-lisp:nil :reader
       detected-language-low-confidence-exception-detected-language-code)))
 (common-lisp:export
  (common-lisp:list 'detected-language-low-confidence-exception
                    'detected-language-low-confidence-exception-message
                    'detected-language-low-confidence-exception-detected-language-code)))
(common-lisp:deftype directionality () 'common-lisp:string)
(common-lisp:deftype display-language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-key-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or encryption-key-type common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or encryption-key-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'encryption-key 'make-encryption-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-key))
   common-lisp:nil))
(common-lisp:deftype encryption-key-id () 'common-lisp:string)
(common-lisp:deftype encryption-key-type () 'common-lisp:string)
(common-lisp:deftype formality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-parallel-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-parallel-data-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-parallel-data-request
                    'make-get-parallel-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-parallel-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-parallel-data-response-"))
   (parallel-data-properties common-lisp:nil :type
    (common-lisp:or parallel-data-properties common-lisp:null))
   (data-location common-lisp:nil :type
    (common-lisp:or parallel-data-data-location common-lisp:null))
   (auxiliary-data-location common-lisp:nil :type
    (common-lisp:or parallel-data-data-location common-lisp:null))
   (latest-update-attempt-auxiliary-data-location common-lisp:nil :type
    (common-lisp:or parallel-data-data-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-parallel-data-response
                    'make-get-parallel-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-properties))
      (common-lisp:list
       (common-lisp:cons "ParallelDataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-location))
      (common-lisp:list
       (common-lisp:cons "DataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auxiliary-data-location))
      (common-lisp:list
       (common-lisp:cons "AuxiliaryDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-auxiliary-data-location))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptAuxiliaryDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-terminology-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-terminology-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (terminology-data-format common-lisp:nil :type
    (common-lisp:or terminology-data-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-terminology-request 'make-get-terminology-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-data-format))
      (common-lisp:list
       (common-lisp:cons "TerminologyDataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-terminology-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-terminology-response-"))
   (terminology-properties common-lisp:nil :type
    (common-lisp:or terminology-properties common-lisp:null))
   (terminology-data-location common-lisp:nil :type
    (common-lisp:or terminology-data-location common-lisp:null))
   (auxiliary-data-location common-lisp:nil :type
    (common-lisp:or terminology-data-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-terminology-response 'make-get-terminology-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-properties))
      (common-lisp:list
       (common-lisp:cons "TerminologyProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-data-location))
      (common-lisp:list
       (common-lisp:cons "TerminologyDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auxiliary-data-location))
      (common-lisp:list
       (common-lisp:cons "AuxiliaryDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-terminology-response))
   common-lisp:nil))
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-terminology-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-terminology-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (merge-strategy (common-lisp:error ":merge-strategy is required") :type
    (common-lisp:or merge-strategy common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (terminology-data (common-lisp:error ":terminology-data is required") :type
    (common-lisp:or terminology-data common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-terminology-request
                    'make-import-terminology-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "MergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminology-data))
      (common-lisp:list
       (common-lisp:cons "TerminologyData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-terminology-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-terminology-response-"))
   (terminology-properties common-lisp:nil :type
    (common-lisp:or terminology-properties common-lisp:null))
   (auxiliary-data-location common-lisp:nil :type
    (common-lisp:or terminology-data-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-terminology-response
                    'make-import-terminology-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-properties))
      (common-lisp:list
       (common-lisp:cons "TerminologyProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auxiliary-data-location))
      (common-lisp:list
       (common-lisp:cons "AuxiliaryDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-terminology-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-data-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-data-config-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (content-type (common-lisp:error ":content-type is required") :type
    (common-lisp:or content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-data-config 'make-input-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-data-config))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-filter-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-filter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-filter-exception
                    'invalid-filter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (job-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-details-"))
   (translated-documents-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (documents-with-errors-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (input-documents-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'translated-documents-count))
      (common-lisp:list
       (common-lisp:cons "TranslatedDocumentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'documents-with-errors-count))
      (common-lisp:list
       (common-lisp:cons "DocumentsWithErrorsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-documents-count))
      (common-lisp:list
       (common-lisp:cons "InputDocumentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (language (:copier common-lisp:nil) (:conc-name "struct-shape-language-"))
   (language-name (common-lisp:error ":language-name is required") :type
    (common-lisp:or localized-name-string common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or language-code-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'language 'make-language))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-name))
      (common-lisp:list
       (common-lisp:cons "LanguageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language))
   common-lisp:nil))
(common-lisp:deftype language-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype language-code-string-list ()
   '(trivial-types:proper-list language-code-string))
 (common-lisp:defun |make-language-code-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype languages-list () '(trivial-types:proper-list language))
 (common-lisp:defun |make-languages-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-languages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-languages-request-"))
   (display-language-code common-lisp:nil :type
    (common-lisp:or display-language-code common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-languages-request 'make-list-languages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-language-code))
      (common-lisp:list
       (common-lisp:cons "DisplayLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-languages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-languages-response-"))
   (languages common-lisp:nil :type
    (common-lisp:or languages-list common-lisp:null))
   (display-language-code common-lisp:nil :type
    (common-lisp:or display-language-code common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-languages-response 'make-list-languages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'languages))
      (common-lisp:list
       (common-lisp:cons "Languages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-language-code))
      (common-lisp:list
       (common-lisp:cons "DisplayLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-languages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-parallel-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-parallel-data-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-parallel-data-request
                    'make-list-parallel-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-parallel-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-parallel-data-response-"))
   (parallel-data-properties-list common-lisp:nil :type
    (common-lisp:or parallel-data-properties-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-parallel-data-response
                    'make-list-parallel-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-properties-list))
      (common-lisp:list
       (common-lisp:cons "ParallelDataPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-terminologies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-terminologies-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-terminologies-request
                    'make-list-terminologies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-terminologies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-terminologies-response-"))
   (terminology-properties-list common-lisp:nil :type
    (common-lisp:or terminology-properties-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-terminologies-response
                    'make-list-terminologies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminology-properties-list))
      (common-lisp:list
       (common-lisp:cons "TerminologyPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-terminologies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-text-translation-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-text-translation-jobs-request-"))
   (filter common-lisp:nil :type
    (common-lisp:or text-translation-job-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-text-translation-jobs-request
                    'make-list-text-translation-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-text-translation-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-text-translation-jobs-response-"))
   (text-translation-job-properties-list common-lisp:nil :type
    (common-lisp:or text-translation-job-properties-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-text-translation-jobs-response
                    'make-list-text-translation-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-translation-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "TextTranslationJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-text-translation-jobs-response))
   common-lisp:nil))
(common-lisp:deftype localized-name-string () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results-integer () 'common-lisp:integer)
(common-lisp:deftype merge-strategy () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (output-data-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-data-config-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-data-config 'make-output-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-data-config))
   common-lisp:nil))
(common-lisp:deftype parallel-data-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (parallel-data-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-parallel-data-config-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or parallel-data-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parallel-data-config 'make-parallel-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parallel-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parallel-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parallel-data-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parallel-data-data-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-parallel-data-data-location-"))
   (repository-type (common-lisp:error ":repository-type is required") :type
    (common-lisp:or string common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parallel-data-data-location
                    'make-parallel-data-data-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-data-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-data-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-type))
      (common-lisp:list
       (common-lisp:cons "RepositoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-data-location))
   common-lisp:nil))
(common-lisp:deftype parallel-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (parallel-data-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-parallel-data-properties-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or parallel-data-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or parallel-data-status common-lisp:null))
   (source-language-code common-lisp:nil :type
    (common-lisp:or language-code-string common-lisp:null))
   (target-language-codes common-lisp:nil :type
    (common-lisp:or language-code-string-list common-lisp:null))
   (parallel-data-config common-lisp:nil :type
    (common-lisp:or parallel-data-config common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or unbounded-length-string common-lisp:null))
   (imported-data-size common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (imported-record-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (failed-record-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (skipped-record-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (latest-update-attempt-status common-lisp:nil :type
    (common-lisp:or parallel-data-status common-lisp:null))
   (latest-update-attempt-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parallel-data-properties 'make-parallel-data-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-codes))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-config))
      (common-lisp:list
       (common-lisp:cons "ParallelDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-data-size))
      (common-lisp:list
       (common-lisp:cons "ImportedDataSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-record-count))
      (common-lisp:list
       (common-lisp:cons "ImportedRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-record-count))
      (common-lisp:list
       (common-lisp:cons "FailedRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skipped-record-count))
      (common-lisp:list
       (common-lisp:cons "SkippedRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-status))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-at))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parallel-data-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parallel-data-properties-list ()
   '(trivial-types:proper-list parallel-data-properties))
 (common-lisp:defun |make-parallel-data-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            parallel-data-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parallel-data-status () 'common-lisp:string)
(common-lisp:deftype profanity () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-name-list ()
   '(trivial-types:proper-list resource-name))
 (common-lisp:defun |make-resource-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-text-translation-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-text-translation-job-request-"))
   (job-name common-lisp:nil :type (common-lisp:or job-name common-lisp:null))
   (input-data-config (common-lisp:error ":input-data-config is required")
    :type (common-lisp:or input-data-config common-lisp:null))
   (output-data-config (common-lisp:error ":output-data-config is required")
    :type (common-lisp:or output-data-config common-lisp:null))
   (data-access-role-arn
    (common-lisp:error ":data-access-role-arn is required") :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (source-language-code
    (common-lisp:error ":source-language-code is required") :type
    (common-lisp:or language-code-string common-lisp:null))
   (target-language-codes
    (common-lisp:error ":target-language-codes is required") :type
    (common-lisp:or target-language-code-string-list common-lisp:null))
   (terminology-names common-lisp:nil :type
    (common-lisp:or resource-name-list common-lisp:null))
   (parallel-data-names common-lisp:nil :type
    (common-lisp:or resource-name-list common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token-string common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or translation-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-text-translation-job-request
                    'make-start-text-translation-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-codes))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminology-names))
      (common-lisp:list
       (common-lisp:cons "TerminologyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallel-data-names))
      (common-lisp:list
       (common-lisp:cons "ParallelDataNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-text-translation-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-text-translation-job-response-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-text-translation-job-response
                    'make-start-text-translation-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-text-translation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-text-translation-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-text-translation-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-text-translation-job-request
                    'make-stop-text-translation-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-text-translation-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-text-translation-job-response-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-text-translation-job-response
                    'make-stop-text-translation-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-text-translation-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-language-code-string-list ()
   '(trivial-types:proper-list language-code-string))
 (common-lisp:defun |make-target-language-code-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (term (:copier common-lisp:nil) (:conc-name "struct-shape-term-"))
   (source-text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (target-text common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'term 'make-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-text))
      (common-lisp:list
       (common-lisp:cons "SourceText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-text))
      (common-lisp:list
       (common-lisp:cons "TargetText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input term))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype term-list () '(trivial-types:proper-list term))
 (common-lisp:defun |make-term-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list term))
   aws-sdk/generator/shape::members))
(common-lisp:deftype terminology-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terminology-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminology-data-"))
   (file (common-lisp:error ":file is required") :type
    (common-lisp:or terminology-file common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or terminology-data-format common-lisp:null))
   (directionality common-lisp:nil :type
    (common-lisp:or directionality common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminology-data 'make-terminology-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input terminology-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input terminology-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "File"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directionality))
      (common-lisp:list
       (common-lisp:cons "Directionality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input terminology-data))
   common-lisp:nil))
(common-lisp:deftype terminology-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terminology-data-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminology-data-location-"))
   (repository-type (common-lisp:error ":repository-type is required") :type
    (common-lisp:or string common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminology-data-location
                    'make-terminology-data-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminology-data-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminology-data-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-type))
      (common-lisp:list
       (common-lisp:cons "RepositoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminology-data-location))
   common-lisp:nil))
(common-lisp:deftype terminology-file ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (terminology-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminology-properties-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or terminology-arn common-lisp:null))
   (source-language-code common-lisp:nil :type
    (common-lisp:or language-code-string common-lisp:null))
   (target-language-codes common-lisp:nil :type
    (common-lisp:or language-code-string-list common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null))
   (size-bytes common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (term-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (directionality common-lisp:nil :type
    (common-lisp:or directionality common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or unbounded-length-string common-lisp:null))
   (skipped-term-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or terminology-data-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminology-properties 'make-terminology-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminology-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminology-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-codes))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-count))
      (common-lisp:list
       (common-lisp:cons "TermCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directionality))
      (common-lisp:list
       (common-lisp:cons "Directionality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-term-count))
      (common-lisp:list
       (common-lisp:cons "SkippedTermCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminology-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype terminology-properties-list ()
   '(trivial-types:proper-list terminology-properties))
 (common-lisp:defun |make-terminology-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list terminology-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition text-size-limit-exceeded-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       text-size-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'text-size-limit-exceeded-exception
                    'text-size-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (text-translation-job-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-translation-job-filter-"))
   (job-name common-lisp:nil :type (common-lisp:or job-name common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (submitted-before-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (submitted-after-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-translation-job-filter
                    'make-text-translation-job-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submitted-before-time))
      (common-lisp:list
       (common-lisp:cons "SubmittedBeforeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submitted-after-time))
      (common-lisp:list
       (common-lisp:cons "SubmittedAfterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (text-translation-job-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-translation-job-properties-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (job-name common-lisp:nil :type (common-lisp:or job-name common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (job-details common-lisp:nil :type
    (common-lisp:or job-details common-lisp:null))
   (source-language-code common-lisp:nil :type
    (common-lisp:or language-code-string common-lisp:null))
   (target-language-codes common-lisp:nil :type
    (common-lisp:or target-language-code-string-list common-lisp:null))
   (terminology-names common-lisp:nil :type
    (common-lisp:or resource-name-list common-lisp:null))
   (parallel-data-names common-lisp:nil :type
    (common-lisp:or resource-name-list common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or unbounded-length-string common-lisp:null))
   (submitted-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or input-data-config common-lisp:null))
   (output-data-config common-lisp:nil :type
    (common-lisp:or output-data-config common-lisp:null))
   (data-access-role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or translation-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-translation-job-properties
                    'make-text-translation-job-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "JobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-codes))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminology-names))
      (common-lisp:list
       (common-lisp:cons "TerminologyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallel-data-names))
      (common-lisp:list
       (common-lisp:cons "ParallelDataNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-time))
      (common-lisp:list
       (common-lisp:cons "SubmittedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-translation-job-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-translation-job-properties-list ()
   '(trivial-types:proper-list text-translation-job-properties))
 (common-lisp:defun |make-text-translation-job-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            text-translation-job-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       too-many-tags-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-arn)))
(common-lisp:progn
 (common-lisp:defstruct
     (translate-text-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-translate-text-request-"))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or bounded-length-string common-lisp:null))
   (terminology-names common-lisp:nil :type
    (common-lisp:or resource-name-list common-lisp:null))
   (source-language-code
    (common-lisp:error ":source-language-code is required") :type
    (common-lisp:or language-code-string common-lisp:null))
   (target-language-code
    (common-lisp:error ":target-language-code is required") :type
    (common-lisp:or language-code-string common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or translation-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'translate-text-request 'make-translate-text-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminology-names))
      (common-lisp:list
       (common-lisp:cons "TerminologyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-code))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (translate-text-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-translate-text-response-"))
   (translated-text (common-lisp:error ":translated-text is required") :type
    (common-lisp:or translated-text-string common-lisp:null))
   (source-language-code
    (common-lisp:error ":source-language-code is required") :type
    (common-lisp:or language-code-string common-lisp:null))
   (target-language-code
    (common-lisp:error ":target-language-code is required") :type
    (common-lisp:or language-code-string common-lisp:null))
   (applied-terminologies common-lisp:nil :type
    (common-lisp:or applied-terminology-list common-lisp:null))
   (applied-settings common-lisp:nil :type
    (common-lisp:or translation-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'translate-text-response 'make-translate-text-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'translated-text))
      (common-lisp:list
       (common-lisp:cons "TranslatedText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-language-code))
      (common-lisp:list
       (common-lisp:cons "SourceLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-language-code))
      (common-lisp:list
       (common-lisp:cons "TargetLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applied-terminologies))
      (common-lisp:list
       (common-lisp:cons "AppliedTerminologies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-settings))
      (common-lisp:list
       (common-lisp:cons "AppliedSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translate-text-response))
   common-lisp:nil))
(common-lisp:deftype translated-text-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (translation-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-translation-settings-"))
   (formality common-lisp:nil :type
    (common-lisp:or formality common-lisp:null))
   (profanity common-lisp:nil :type
    (common-lisp:or profanity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'translation-settings 'make-translation-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input translation-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input translation-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formality))
      (common-lisp:list
       (common-lisp:cons "Formality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profanity))
      (common-lisp:list
       (common-lisp:cons "Profanity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input translation-settings))
   common-lisp:nil))
(common-lisp:deftype unbounded-length-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-display-language-code-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-display-language-code-exception-message)
      (display-language-code :initarg :display-language-code :initform
       common-lisp:nil :reader
       unsupported-display-language-code-exception-display-language-code)))
 (common-lisp:export
  (common-lisp:list 'unsupported-display-language-code-exception
                    'unsupported-display-language-code-exception-message
                    'unsupported-display-language-code-exception-display-language-code)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-language-pair-exception
     (translate-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-language-pair-exception-message)
      (source-language-code :initarg :source-language-code :initform
       common-lisp:nil :reader
       unsupported-language-pair-exception-source-language-code)
      (target-language-code :initarg :target-language-code :initform
       common-lisp:nil :reader
       unsupported-language-pair-exception-target-language-code)))
 (common-lisp:export
  (common-lisp:list 'unsupported-language-pair-exception
                    'unsupported-language-pair-exception-message
                    'unsupported-language-pair-exception-source-language-code
                    'unsupported-language-pair-exception-target-language-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-parallel-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-parallel-data-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (parallel-data-config
    (common-lisp:error ":parallel-data-config is required") :type
    (common-lisp:or parallel-data-config common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-parallel-data-request
                    'make-update-parallel-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-data-config))
      (common-lisp:list
       (common-lisp:cons "ParallelDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-parallel-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-parallel-data-response-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or parallel-data-status common-lisp:null))
   (latest-update-attempt-status common-lisp:nil :type
    (common-lisp:or parallel-data-status common-lisp:null))
   (latest-update-attempt-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-parallel-data-response
                    'make-update-parallel-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-status))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-update-attempt-at))
      (common-lisp:list
       (common-lisp:cons "LatestUpdateAttemptAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-parallel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description parallel-data-config
                     encryption-key client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name description parallel-data-config encryption-key
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-parallel-data))
(common-lisp:progn
 (common-lisp:defun delete-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-parallel-data))
(common-lisp:progn
 (common-lisp:defun delete-terminology
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-terminology-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTerminology"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-terminology))
(common-lisp:progn
 (common-lisp:defun describe-text-translation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-text-translation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTextTranslationJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-text-translation-job))
(common-lisp:progn
 (common-lisp:defun get-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-parallel-data))
(common-lisp:progn
 (common-lisp:defun get-terminology
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name terminology-data-format)
   (common-lisp:declare (common-lisp:ignorable name terminology-data-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-terminology-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetTerminology"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-terminology))
(common-lisp:progn
 (common-lisp:defun import-terminology
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name merge-strategy description
                     terminology-data encryption-key tags)
   (common-lisp:declare
    (common-lisp:ignorable name merge-strategy description terminology-data
     encryption-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-terminology-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportTerminology"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-terminology))
(common-lisp:progn
 (common-lisp:defun list-languages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key display-language-code next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable display-language-code next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-languages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListLanguages"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-languages))
(common-lisp:progn
 (common-lisp:defun list-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-parallel-data))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-terminologies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-terminologies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTerminologies"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-terminologies))
(common-lisp:progn
 (common-lisp:defun list-text-translation-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-text-translation-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTextTranslationJobs"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-text-translation-jobs))
(common-lisp:progn
 (common-lisp:defun start-text-translation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name input-data-config
                     output-data-config data-access-role-arn
                     source-language-code target-language-codes
                     terminology-names parallel-data-names client-token
                     settings)
   (common-lisp:declare
    (common-lisp:ignorable job-name input-data-config output-data-config
     data-access-role-arn source-language-code target-language-codes
     terminology-names parallel-data-names client-token settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-text-translation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartTextTranslationJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-text-translation-job))
(common-lisp:progn
 (common-lisp:defun stop-text-translation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-text-translation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopTextTranslationJob"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-text-translation-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun translate-text
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key text terminology-names
                     source-language-code target-language-code settings)
   (common-lisp:declare
    (common-lisp:ignorable text terminology-names source-language-code
     target-language-code settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-translate-text-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TranslateText"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'translate-text))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-parallel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description parallel-data-config
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description parallel-data-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-parallel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'translate-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateParallelData"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-parallel-data))
