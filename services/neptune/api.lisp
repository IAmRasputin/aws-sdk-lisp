;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/neptune/api
  (:use)
  (:nicknames #:aws/neptune)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/neptune/api)
(common-lisp:progn
 (common-lisp:defclass neptune-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "neptune"))
 (common-lisp:export 'neptune-request))
(common-lisp:progn
 (common-lisp:define-condition neptune-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'neptune-error))
(common-lisp:defvar *error-map*
  '(("AuthorizationNotFoundFault" . authorization-not-found-fault)
    ("CertificateNotFoundFault" . certificate-not-found-fault)
    ("DBClusterAlreadyExistsFault" . dbcluster-already-exists-fault)
    ("DBClusterEndpointAlreadyExistsFault"
     . dbcluster-endpoint-already-exists-fault)
    ("DBClusterEndpointNotFoundFault" . dbcluster-endpoint-not-found-fault)
    ("DBClusterEndpointQuotaExceededFault"
     . dbcluster-endpoint-quota-exceeded-fault)
    ("DBClusterNotFoundFault" . dbcluster-not-found-fault)
    ("DBClusterParameterGroupNotFoundFault"
     . dbcluster-parameter-group-not-found-fault)
    ("DBClusterQuotaExceededFault" . dbcluster-quota-exceeded-fault)
    ("DBClusterRoleAlreadyExistsFault" . dbcluster-role-already-exists-fault)
    ("DBClusterRoleNotFoundFault" . dbcluster-role-not-found-fault)
    ("DBClusterRoleQuotaExceededFault" . dbcluster-role-quota-exceeded-fault)
    ("DBClusterSnapshotAlreadyExistsFault"
     . dbcluster-snapshot-already-exists-fault)
    ("DBClusterSnapshotNotFoundFault" . dbcluster-snapshot-not-found-fault)
    ("DBInstanceAlreadyExistsFault" . dbinstance-already-exists-fault)
    ("DBInstanceNotFoundFault" . dbinstance-not-found-fault)
    ("DBParameterGroupAlreadyExistsFault"
     . dbparameter-group-already-exists-fault)
    ("DBParameterGroupNotFoundFault" . dbparameter-group-not-found-fault)
    ("DBParameterGroupQuotaExceededFault"
     . dbparameter-group-quota-exceeded-fault)
    ("DBSecurityGroupNotFoundFault" . dbsecurity-group-not-found-fault)
    ("DBSnapshotAlreadyExistsFault" . dbsnapshot-already-exists-fault)
    ("DBSnapshotNotFoundFault" . dbsnapshot-not-found-fault)
    ("DBSubnetGroupAlreadyExistsFault" . dbsubnet-group-already-exists-fault)
    ("DBSubnetGroupDoesNotCoverEnoughAZs"
     . dbsubnet-group-does-not-cover-enough-azs)
    ("DBSubnetGroupNotFoundFault" . dbsubnet-group-not-found-fault)
    ("DBSubnetGroupQuotaExceededFault" . dbsubnet-group-quota-exceeded-fault)
    ("DBSubnetQuotaExceededFault" . dbsubnet-quota-exceeded-fault)
    ("DBUpgradeDependencyFailureFault" . dbupgrade-dependency-failure-fault)
    ("DomainNotFoundFault" . domain-not-found-fault)
    ("EventSubscriptionQuotaExceededFault"
     . event-subscription-quota-exceeded-fault)
    ("GlobalClusterAlreadyExistsFault" . global-cluster-already-exists-fault)
    ("GlobalClusterNotFoundFault" . global-cluster-not-found-fault)
    ("GlobalClusterQuotaExceededFault" . global-cluster-quota-exceeded-fault)
    ("InstanceQuotaExceededFault" . instance-quota-exceeded-fault)
    ("InsufficientDBClusterCapacityFault"
     . insufficient-dbcluster-capacity-fault)
    ("InsufficientDBInstanceCapacityFault"
     . insufficient-dbinstance-capacity-fault)
    ("InsufficientStorageClusterCapacityFault"
     . insufficient-storage-cluster-capacity-fault)
    ("InvalidDBClusterEndpointStateFault"
     . invalid-dbcluster-endpoint-state-fault)
    ("InvalidDBClusterSnapshotStateFault"
     . invalid-dbcluster-snapshot-state-fault)
    ("InvalidDBClusterStateFault" . invalid-dbcluster-state-fault)
    ("InvalidDBInstanceStateFault" . invalid-dbinstance-state-fault)
    ("InvalidDBParameterGroupStateFault"
     . invalid-dbparameter-group-state-fault)
    ("InvalidDBSecurityGroupStateFault" . invalid-dbsecurity-group-state-fault)
    ("InvalidDBSnapshotStateFault" . invalid-dbsnapshot-state-fault)
    ("InvalidDBSubnetGroupStateFault" . invalid-dbsubnet-group-state-fault)
    ("InvalidDBSubnetStateFault" . invalid-dbsubnet-state-fault)
    ("InvalidEventSubscriptionStateFault"
     . invalid-event-subscription-state-fault)
    ("InvalidGlobalClusterStateFault" . invalid-global-cluster-state-fault)
    ("InvalidRestoreFault" . invalid-restore-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("KMSKeyNotAccessibleFault" . kmskey-not-accessible-fault)
    ("OptionGroupNotFoundFault" . option-group-not-found-fault)
    ("ProvisionedIopsNotAvailableInAZFault"
     . provisioned-iops-not-available-in-azfault)
    ("ResourceNotFoundFault" . resource-not-found-fault)
    ("SNSInvalidTopicFault" . snsinvalid-topic-fault)
    ("SNSNoAuthorizationFault" . snsno-authorization-fault)
    ("SNSTopicArnNotFoundFault" . snstopic-arn-not-found-fault)
    ("SharedSnapshotQuotaExceededFault" . shared-snapshot-quota-exceeded-fault)
    ("SnapshotQuotaExceededFault" . snapshot-quota-exceeded-fault)
    ("SourceNotFoundFault" . source-not-found-fault)
    ("StorageQuotaExceededFault" . storage-quota-exceeded-fault)
    ("StorageTypeNotSupportedFault" . storage-type-not-supported-fault)
    ("SubnetAlreadyInUse" . subnet-already-in-use)
    ("SubscriptionAlreadyExistFault" . subscription-already-exist-fault)
    ("SubscriptionCategoryNotFoundFault"
     . subscription-category-not-found-fault)
    ("SubscriptionNotFoundFault" . subscription-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-role-to-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-role-to-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-role-to-dbcluster-message
                    'make-add-role-to-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-source-identifier-to-subscription-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-source-identifier-to-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (source-identifier (common-lisp:error ":source-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-source-identifier-to-subscription-message
                    'make-add-source-identifier-to-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-source-identifier-to-subscription-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-source-identifier-to-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-source-identifier-to-subscription-result
                    'make-add-source-identifier-to-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-to-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-to-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-message
                    'make-add-tags-to-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   common-lisp:nil))
(common-lisp:deftype apply-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (apply-pending-maintenance-action-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-pending-maintenance-action-message-"))
   (resource-identifier (common-lisp:error ":resource-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (apply-action (common-lisp:error ":apply-action is required") :type
    (common-lisp:or string common-lisp:null))
   (opt-in-type (common-lisp:error ":opt-in-type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-message
                    'make-apply-pending-maintenance-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-action))
      (common-lisp:list
       (common-lisp:cons "ApplyAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-type))
      (common-lisp:list
       (common-lisp:cons "OptInType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-pending-maintenance-action-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-pending-maintenance-action-result-"))
   (resource-pending-maintenance-actions common-lisp:nil :type
    (common-lisp:or resource-pending-maintenance-actions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-result
                    'make-apply-pending-maintenance-action-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "ResourcePendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-value-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-attribute-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition authorization-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (availability-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-zone-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition certificate-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'certificate-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (character-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-character-set-"))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (character-set-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'character-set 'make-character-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input character-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input character-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'character-set-description))
      (common-lisp:list
       (common-lisp:cons "CharacterSetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input character-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloudwatch-logs-export-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloudwatch-logs-export-configuration-"))
   (enable-log-types common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (disable-log-types common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-logs-export-configuration
                    'make-cloudwatch-logs-export-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-log-types))
      (common-lisp:list
       (common-lisp:cons "EnableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-log-types))
      (common-lisp:list
       (common-lisp:cons "DisableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-pending-modified-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-pending-modified-values-"))
   (pending-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or pending-cloudwatch-logs-exports common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-pending-modified-values
                    'make-cluster-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbcluster-parameter-group-message-"))
   (source-dbcluster-parameter-group-identifier
    (common-lisp:error
     ":source-dbcluster-parameter-group-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbcluster-parameter-group-identifier
    (common-lisp:error
     ":target-dbcluster-parameter-group-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbcluster-parameter-group-description
    (common-lisp:error
     ":target-dbcluster-parameter-group-description is required")
    :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-parameter-group-message
                    'make-copy-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-parameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbcluster-parameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbcluster-parameter-group-result-"))
   (dbcluster-parameter-group common-lisp:nil :type
    (common-lisp:or dbcluster-parameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-parameter-group-result
                    'make-copy-dbcluster-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbcluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbcluster-snapshot-message-"))
   (source-dbcluster-snapshot-identifier
    (common-lisp:error ":source-dbcluster-snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbcluster-snapshot-identifier
    (common-lisp:error ":target-dbcluster-snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pre-signed-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (copy-tags common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-snapshot-message
                    'make-copy-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbcluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbcluster-snapshot-result-"))
   (dbcluster-snapshot common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-snapshot-result
                    'make-copy-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbparameter-group-message-"))
   (source-dbparameter-group-identifier
    (common-lisp:error ":source-dbparameter-group-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbparameter-group-identifier
    (common-lisp:error ":target-dbparameter-group-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbparameter-group-description
    (common-lisp:error ":target-dbparameter-group-description is required")
    :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbparameter-group-message
                    'make-copy-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbparameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbparameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbparameter-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetDBParameterGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbparameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbparameter-group-result-"))
   (dbparameter-group common-lisp:nil :type
    (common-lisp:or dbparameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbparameter-group-result
                    'make-copy-dbparameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-group))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-endpoint-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-endpoint-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-identifier
    (common-lisp:error ":dbcluster-endpoint-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (endpoint-type (common-lisp:error ":endpoint-type is required") :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-endpoint-message
                    'make-create-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-endpoint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-endpoint-output-"))
   (dbcluster-endpoint-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (dbcluster-endpoint-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-endpoint-output
                    'make-create-dbcluster-endpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-resource-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-message-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pre-signed-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or global-cluster-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-message 'make-create-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-source-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-parameter-group-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family
    (common-lisp:error ":dbparameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-parameter-group-message
                    'make-create-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-parameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-parameter-group-result-"))
   (dbcluster-parameter-group common-lisp:nil :type
    (common-lisp:or dbcluster-parameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-parameter-group-result
                    'make-create-dbcluster-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-result 'make-create-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-snapshot-message-"))
   (dbcluster-snapshot-identifier
    (common-lisp:error ":dbcluster-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-snapshot-message
                    'make-create-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-snapshot-result-"))
   (dbcluster-snapshot common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-snapshot-result
                    'make-create-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbinstance-message-"))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-class (common-lisp:error ":dbinstance-class is required") :type
    (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsecurity-groups common-lisp:nil :type
    (common-lisp:or dbsecurity-group-name-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-performance-insights common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-message
                    'make-create-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-result 'make-create-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbparameter-group-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family
    (common-lisp:error ":dbparameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbparameter-group-message
                    'make-create-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbparameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbparameter-group-result-"))
   (dbparameter-group common-lisp:nil :type
    (common-lisp:or dbparameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbparameter-group-result
                    'make-create-dbparameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-group))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbsubnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbsubnet-group-message-"))
   (dbsubnet-group-name (common-lisp:error ":dbsubnet-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (dbsubnet-group-description
    (common-lisp:error ":dbsubnet-group-description is required") :type
    (common-lisp:or string common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-identifier-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbsubnet-group-message
                    'make-create-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbsubnet-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbsubnet-group-result-"))
   (dbsubnet-group common-lisp:nil :type
    (common-lisp:or dbsubnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbsubnet-group-result
                    'make-create-dbsubnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (sns-topic-arn (common-lisp:error ":sns-topic-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (source-ids common-lisp:nil :type
    (common-lisp:or source-ids-list common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-message
                    'make-create-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-result
                    'make-create-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-global-cluster-message-"))
   (global-cluster-identifier
    (common-lisp:error ":global-cluster-identifier is required") :type
    (common-lisp:or global-cluster-identifier common-lisp:null))
   (source-dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-global-cluster-message
                    'make-create-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-global-cluster-result
                    'make-create-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-"))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (percent-progress common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (earliest-restorable-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reader-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-restorable-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-option-group-memberships common-lisp:nil :type
    (common-lisp:or dbcluster-option-group-memberships common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (read-replica-identifiers common-lisp:nil :type
    (common-lisp:or read-replica-identifier-list common-lisp:null))
   (dbcluster-members common-lisp:nil :type
    (common-lisp:or dbcluster-member-list common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or vpc-security-group-membership-list common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (db-cluster-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (associated-roles common-lisp:nil :type
    (common-lisp:or dbcluster-roles common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (clone-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enabled-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or cluster-pending-modified-values common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (cross-account-clone common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (automatic-restart-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration-info common-lisp:null))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or global-cluster-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbcluster 'make-dbcluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earliest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "EarliestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DBClusterOptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-source-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-members))
      (common-lisp:list
       (common-lisp:cons "DBClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clone-group-id))
      (common-lisp:list
       (common-lisp:cons "CloneGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-account-clone))
      (common-lisp:list
       (common-lisp:cons "CrossAccountClone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-restart-time))
      (common-lisp:list
       (common-lisp:cons "AutomaticRestartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-endpoint-"))
   (dbcluster-endpoint-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (dbcluster-endpoint-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint 'make-dbcluster-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-resource-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-endpoint-list ()
   '(trivial-types:proper-list dbcluster-endpoint))
 (common-lisp:defun |make-dbcluster-endpoint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-endpoint-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-endpoint-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-endpoints common-lisp:nil :type
    (common-lisp:or dbcluster-endpoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-message
                    'make-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-endpoints))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-endpoint-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-list () '(trivial-types:proper-list dbcluster))
 (common-lisp:defun |make-dbcluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-member-"))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-cluster-writer common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dbcluster-parameter-group-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-member 'make-dbcluster-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-cluster-writer))
      (common-lisp:list
       (common-lisp:cons "IsClusterWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-member-list ()
   '(trivial-types:proper-list dbcluster-member))
 (common-lisp:defun |make-dbcluster-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbclusters common-lisp:nil :type
    (common-lisp:or dbcluster-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-message 'make-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbclusters))
      (common-lisp:list
       (common-lisp:cons "DBClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-option-group-memberships ()
   '(trivial-types:proper-list dbcluster-option-group-status))
 (common-lisp:defun |make-dbcluster-option-group-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-option-group-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-option-group-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-option-group-status-"))
   (dbcluster-option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-option-group-status
                    'make-dbcluster-option-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-option-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterOptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-parameter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-parameter-group-"))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group
                    'make-dbcluster-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-parameter-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-parameter-group-details-"))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-details
                    'make-dbcluster-parameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-parameter-group-list ()
   '(trivial-types:proper-list dbcluster-parameter-group))
 (common-lisp:defun |make-dbcluster-parameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-parameter-group-name-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-parameter-group-name-message-"))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-name-message
                    'make-dbcluster-parameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-parameter-group-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-parameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-parameter-groups-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-groups common-lisp:nil :type
    (common-lisp:or dbcluster-parameter-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-groups-message
                    'make-dbcluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-role-"))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbcluster-role 'make-dbcluster-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-roles ()
   '(trivial-types:proper-list dbcluster-role))
 (common-lisp:defun |make-dbcluster-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-snapshot (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-snapshot-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (dbcluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (percent-progress common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-snapshot-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-dbcluster-snapshot-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot 'make-dbcluster-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-snapshot-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-snapshot-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-snapshot-attribute-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (attribute-values common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-attribute
                    'make-dbcluster-snapshot-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-values))
      (common-lisp:list
       (common-lisp:cons "AttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-snapshot-attribute-list ()
   '(trivial-types:proper-list dbcluster-snapshot-attribute))
 (common-lisp:defun |make-dbcluster-snapshot-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-snapshot-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-snapshot-attributes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-snapshot-attributes-result-"))
   (dbcluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-snapshot-attributes common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot-attribute-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-attributes-result
                    'make-dbcluster-snapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-snapshot-list ()
   '(trivial-types:proper-list dbcluster-snapshot))
 (common-lisp:defun |make-dbcluster-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-snapshot-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-snapshots common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-message
                    'make-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshots))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-snapshot-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbengine-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbengine-version-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbengine-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbengine-version-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (default-character-set common-lisp:nil :type
    (common-lisp:or character-set common-lisp:null))
   (supported-character-sets common-lisp:nil :type
    (common-lisp:or supported-character-sets-list common-lisp:null))
   (valid-upgrade-target common-lisp:nil :type
    (common-lisp:or valid-upgrade-target-list common-lisp:null))
   (supported-timezones common-lisp:nil :type
    (common-lisp:or supported-timezones-list common-lisp:null))
   (exportable-log-types common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (supports-log-exports-to-cloudwatch-logs common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-read-replica common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-global-databases common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbengine-version 'make-dbengine-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbengine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbengine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-description))
      (common-lisp:list
       (common-lisp:cons "DBEngineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-version-description))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-character-set))
      (common-lisp:list
       (common-lisp:cons "DefaultCharacterSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-character-sets))
      (common-lisp:list
       (common-lisp:cons "SupportedCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-upgrade-target))
      (common-lisp:list
       (common-lisp:cons "ValidUpgradeTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-timezones))
      (common-lisp:list
       (common-lisp:cons "SupportedTimezones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exportable-log-types))
      (common-lisp:list
       (common-lisp:cons "ExportableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-log-exports-to-cloudwatch-logs))
      (common-lisp:list
       (common-lisp:cons "SupportsLogExportsToCloudwatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-read-replica))
      (common-lisp:list
       (common-lisp:cons "SupportsReadReplica"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbengine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbengine-version-list ()
   '(trivial-types:proper-list dbengine-version))
 (common-lisp:defun |make-dbengine-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbengine-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbengine-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbengine-version-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbengine-versions common-lisp:nil :type
    (common-lisp:or dbengine-version-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbengine-version-message 'make-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbengine-versions))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-"))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstance-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or endpoint common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (dbsecurity-groups common-lisp:nil :type
    (common-lisp:or dbsecurity-group-membership-list common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or vpc-security-group-membership-list common-lisp:null))
   (dbparameter-groups common-lisp:nil :type
    (common-lisp:or dbparameter-group-status-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group common-lisp:nil :type
    (common-lisp:or dbsubnet-group common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or pending-modified-values common-lisp:null))
   (latest-restorable-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (multi-az common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (read-replica-source-dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (read-replica-dbinstance-identifiers common-lisp:nil :type
    (common-lisp:or read-replica-dbinstance-identifier-list common-lisp:null))
   (read-replica-dbcluster-identifiers common-lisp:nil :type
    (common-lisp:or read-replica-dbcluster-identifier-list common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-memberships common-lisp:nil :type
    (common-lisp:or option-group-membership-list common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (secondary-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status-infos common-lisp:nil :type
    (common-lisp:or dbinstance-status-info-list common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (db-instance-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cacertificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-memberships common-lisp:nil :type
    (common-lisp:or domain-membership-list common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enhanced-monitoring-resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (performance-insights-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enabled-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbinstance 'make-dbinstance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-status))
      (common-lisp:list
       (common-lisp:cons "DBInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaSourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "OptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SecondaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-infos))
      (common-lisp:list
       (common-lisp:cons "StatusInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-port))
      (common-lisp:list
       (common-lisp:cons "DbInstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-monitoring-resource-arn))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoringResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-enabled))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype dbinstance-list ()
   '(trivial-types:proper-list dbinstance))
 (common-lisp:defun |make-dbinstance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstances common-lisp:nil :type
    (common-lisp:or dbinstance-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-message 'make-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstances))
      (common-lisp:list
       (common-lisp:cons "DBInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance-status-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-status-info-"))
   (status-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (normal common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-status-info 'make-dbinstance-status-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-type))
      (common-lisp:list
       (common-lisp:cons "StatusType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbinstance-status-info-list ()
   '(trivial-types:proper-list dbinstance-status-info))
 (common-lisp:defun |make-dbinstance-status-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance-status-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-group-"))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbparameter-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group 'make-dbparameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbparameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbparameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbparameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-group-details-"))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-details
                    'make-dbparameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbparameter-group-list ()
   '(trivial-types:proper-list dbparameter-group))
 (common-lisp:defun |make-dbparameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbparameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-group-name-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-group-name-message-"))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-name-message
                    'make-dbparameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbparameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-group-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-group-status-"))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-status 'make-dbparameter-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbparameter-group-status-list ()
   '(trivial-types:proper-list dbparameter-group-status))
 (common-lisp:defun |make-dbparameter-group-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbparameter-group-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-groups-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbparameter-groups common-lisp:nil :type
    (common-lisp:or dbparameter-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-groups-message
                    'make-dbparameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsecurity-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsecurity-group-membership-"))
   (dbsecurity-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsecurity-group-membership
                    'make-dbsecurity-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsecurity-group-membership-list ()
   '(trivial-types:proper-list dbsecurity-group-membership))
 (common-lisp:defun |make-dbsecurity-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbsecurity-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dbsecurity-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-dbsecurity-group-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsnapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsnapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsubnet-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsubnet-group-"))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-group-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or subnet-list common-lisp:null))
   (dbsubnet-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbsubnet-group 'make-dbsubnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-does-not-cover-enough-azs
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbsubnet-group-does-not-cover-enough-azs)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsubnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsubnet-group-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbsubnet-groups common-lisp:nil :type
    (common-lisp:or dbsubnet-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsubnet-group-message 'make-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-groups))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbsubnet-groups ()
   '(trivial-types:proper-list dbsubnet-group))
 (common-lisp:defun |make-dbsubnet-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsubnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbupgrade-dependency-failure-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbupgrade-dependency-failure-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-endpoint-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-endpoint-message-"))
   (dbcluster-endpoint-identifier
    (common-lisp:error ":dbcluster-endpoint-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-endpoint-message
                    'make-delete-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-endpoint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-endpoint-output-"))
   (dbcluster-endpoint-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (dbcluster-endpoint-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-endpoint-output
                    'make-delete-dbcluster-endpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-resource-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (skip-final-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (final-dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-message 'make-delete-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-parameter-group-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-parameter-group-message
                    'make-delete-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-result 'make-delete-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-snapshot-message-"))
   (dbcluster-snapshot-identifier
    (common-lisp:error ":dbcluster-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-snapshot-message
                    'make-delete-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-snapshot-result-"))
   (dbcluster-snapshot common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-snapshot-result
                    'make-delete-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (skip-final-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (final-dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-message
                    'make-delete-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-result 'make-delete-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbparameter-group-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbparameter-group-message
                    'make-delete-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbsubnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbsubnet-group-message-"))
   (dbsubnet-group-name (common-lisp:error ":dbsubnet-group-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbsubnet-group-message
                    'make-delete-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-message
                    'make-delete-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-result
                    'make-delete-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-global-cluster-message-"))
   (global-cluster-identifier
    (common-lisp:error ":global-cluster-identifier is required") :type
    (common-lisp:or global-cluster-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-global-cluster-message
                    'make-delete-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-global-cluster-result
                    'make-delete-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-endpoints-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-endpoints-message-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-endpoints-message
                    'make-describe-dbcluster-endpoints-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-parameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-parameter-groups-message-"))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-parameter-groups-message
                    'make-describe-dbcluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-parameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-parameters-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-parameters-message
                    'make-describe-dbcluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-snapshot-attributes-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-dbcluster-snapshot-attributes-message-"))
   (dbcluster-snapshot-identifier
    (common-lisp:error ":dbcluster-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshot-attributes-message
                    'make-describe-dbcluster-snapshot-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-snapshot-attributes-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-dbcluster-snapshot-attributes-result-"))
   (dbcluster-snapshot-attributes-result common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot-attributes-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshot-attributes-result
                    'make-describe-dbcluster-snapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-snapshots-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-snapshots-message-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (include-shared common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-public common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshots-message
                    'make-describe-dbcluster-snapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-shared))
      (common-lisp:list
       (common-lisp:cons "IncludeShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-public))
      (common-lisp:list
       (common-lisp:cons "IncludePublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbclusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbclusters-message-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbclusters-message
                    'make-describe-dbclusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbengine-versions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbengine-versions-message-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (list-supported-character-sets common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (list-supported-timezones common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbengine-versions-message
                    'make-describe-dbengine-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-only))
      (common-lisp:list
       (common-lisp:cons "DefaultOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-supported-character-sets))
      (common-lisp:list
       (common-lisp:cons "ListSupportedCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-supported-timezones))
      (common-lisp:list
       (common-lisp:cons "ListSupportedTimezones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbinstances-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbinstances-message-"))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbinstances-message
                    'make-describe-dbinstances-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbparameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbparameter-groups-message-"))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbparameter-groups-message
                    'make-describe-dbparameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbparameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbparameters-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbparameters-message
                    'make-describe-dbparameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbsubnet-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbsubnet-groups-message-"))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbsubnet-groups-message
                    'make-describe-dbsubnet-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-cluster-parameters-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-engine-default-cluster-parameters-message-"))
   (dbparameter-group-family
    (common-lisp:error ":dbparameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-cluster-parameters-message
                    'make-describe-engine-default-cluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-cluster-parameters-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-engine-default-cluster-parameters-result-"))
   (engine-defaults common-lisp:nil :type
    (common-lisp:or engine-defaults common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-cluster-parameters-result
                    'make-describe-engine-default-cluster-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-parameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-engine-default-parameters-message-"))
   (dbparameter-group-family
    (common-lisp:error ":dbparameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-message
                    'make-describe-engine-default-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-parameters-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-engine-default-parameters-result-"))
   (engine-defaults common-lisp:nil :type
    (common-lisp:or engine-defaults common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-result
                    'make-describe-engine-default-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-categories-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-categories-message-"))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-categories-message
                    'make-describe-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-subscriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-subscriptions-message-"))
   (subscription-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-subscriptions-message
                    'make-describe-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-events-message-"))
   (source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-global-clusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-global-clusters-message-"))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or global-cluster-identifier common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-global-clusters-message
                    'make-describe-global-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-orderable-dbinstance-options-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-orderable-dbinstance-options-message-"))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-orderable-dbinstance-options-message
                    'make-describe-orderable-dbinstance-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pending-maintenance-actions-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-pending-maintenance-actions-message-"))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pending-maintenance-actions-message
                    'make-describe-pending-maintenance-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-valid-dbinstance-modifications-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-valid-dbinstance-modifications-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-valid-dbinstance-modifications-message
                    'make-describe-valid-dbinstance-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-valid-dbinstance-modifications-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-valid-dbinstance-modifications-result-"))
   (valid-dbinstance-modifications-message common-lisp:nil :type
    (common-lisp:or valid-dbinstance-modifications-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-valid-dbinstance-modifications-result
                    'make-describe-valid-dbinstance-modifications-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-dbinstance-modifications-message))
      (common-lisp:list
       (common-lisp:cons "ValidDBInstanceModificationsMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-membership-"))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (fqdn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-membership 'make-domain-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fqdn))
      (common-lisp:list
       (common-lisp:cons "FQDN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamrole-name))
      (common-lisp:list
       (common-lisp:cons "IAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-membership-list ()
   '(trivial-types:proper-list domain-membership))
 (common-lisp:defun |make-domain-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition domain-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'domain-not-found-fault)))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype double-optional () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (double-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-double-range-"))
   (from common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'double-range 'make-double-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input double-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input double-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input double-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype double-range-list ()
   '(trivial-types:proper-list double-range))
 (common-lisp:defun |make-double-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint (:copier common-lisp:nil) (:conc-name "struct-shape-endpoint-"))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (engine-defaults (:copier common-lisp:nil)
      (:conc-name "struct-shape-engine-defaults-"))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'engine-defaults 'make-engine-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (date common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-event-categories-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-categories-map (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-categories-map-"))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-categories-map 'make-event-categories-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-categories-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-map-list ()
   '(trivial-types:proper-list event-categories-map))
 (common-lisp:defun |make-event-categories-map-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-categories-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-categories-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-categories-message-"))
   (event-categories-map-list common-lisp:nil :type
    (common-lisp:or event-categories-map-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-categories-message 'make-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-map-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesMapList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-subscription-"))
   (customer-aws-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cust-subscription-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subscription-creation-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-ids-list common-lisp:nil :type
    (common-lisp:or source-ids-list common-lisp:null))
   (event-categories-list common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (event-subscription-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition event-subscription-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-subscription-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype event-subscriptions-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun |make-event-subscriptions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-subscriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-subscriptions-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-subscriptions-list common-lisp:nil :type
    (common-lisp:or event-subscriptions-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-subscriptions-message
                    'make-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscriptions-list))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-events-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or event-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'events-message 'make-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-dbcluster-message-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-dbcluster-message
                    'make-failover-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-dbcluster-result
                    'make-failover-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-global-cluster-message-"))
   (global-cluster-identifier
    (common-lisp:error ":global-cluster-identifier is required") :type
    (common-lisp:or global-cluster-identifier common-lisp:null))
   (target-db-cluster-identifier
    (common-lisp:error ":target-db-cluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-global-cluster-message
                    'make-failover-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-global-cluster-result
                    'make-failover-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-value-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (global-cluster (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-cluster-"))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or global-cluster-identifier common-lisp:null))
   (global-cluster-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (global-cluster-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (global-cluster-members common-lisp:nil :type
    (common-lisp:or global-cluster-member-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'global-cluster 'make-global-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-members))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-already-exists-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-already-exists-fault)))
(common-lisp:deftype global-cluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype global-cluster-list ()
   '(trivial-types:proper-list global-cluster))
 (common-lisp:defun |make-global-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (global-cluster-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-cluster-member-"))
   (dbcluster-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (readers common-lisp:nil :type
    (common-lisp:or readers-arn-list common-lisp:null))
   (is-writer common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-cluster-member 'make-global-cluster-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readers))
      (common-lisp:list
       (common-lisp:cons "Readers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-writer))
      (common-lisp:list
       (common-lisp:cons "IsWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-cluster-member-list ()
   '(trivial-types:proper-list global-cluster-member))
 (common-lisp:defun |make-global-cluster-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-cluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (global-clusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-clusters-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (global-clusters common-lisp:nil :type
    (common-lisp:or global-cluster-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-clusters-message 'make-global-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-clusters))
      (common-lisp:list
       (common-lisp:cons "GlobalClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition instance-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-dbcluster-capacity-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-dbcluster-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-dbinstance-capacity-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-dbinstance-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-storage-cluster-capacity-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-storage-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-endpoint-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbcluster-endpoint-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-snapshot-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbcluster-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbcluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbinstance-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbinstance-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbparameter-group-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbparameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsecurity-group-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsecurity-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsnapshot-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsnapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-group-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-subscription-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-event-subscription-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-global-cluster-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-global-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-restore-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-restore-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition kmskey-not-accessible-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'kmskey-not-accessible-fault)))
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-type-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-log-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-endpoint-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-endpoint-message-"))
   (dbcluster-endpoint-identifier
    (common-lisp:error ":dbcluster-endpoint-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-endpoint-message
                    'make-modify-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-endpoint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-endpoint-output-"))
   (dbcluster-endpoint-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (dbcluster-endpoint-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-endpoint-output
                    'make-modify-dbcluster-endpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-resource-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (new-dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (cloudwatch-logs-export-configuration common-lisp:nil :type
    (common-lisp:or cloudwatch-logs-export-configuration common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-major-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dbinstance-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-message 'make-modify-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloudwatch-logs-export-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudwatchLogsExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBInstanceParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-parameter-group-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parameters (common-lisp:error ":parameters is required") :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-parameter-group-message
                    'make-modify-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-result 'make-modify-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-snapshot-attribute-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-snapshot-attribute-message-"))
   (dbcluster-snapshot-identifier
    (common-lisp:error ":dbcluster-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (attribute-name (common-lisp:error ":attribute-name is required") :type
    (common-lisp:or string common-lisp:null))
   (values-to-add common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null))
   (values-to-remove common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-snapshot-attribute-message
                    'make-modify-dbcluster-snapshot-attribute-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-add))
      (common-lisp:list
       (common-lisp:cons "ValuesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-remove))
      (common-lisp:list
       (common-lisp:cons "ValuesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-snapshot-attribute-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-snapshot-attribute-result-"))
   (dbcluster-snapshot-attributes-result common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot-attributes-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-snapshot-attribute-result
                    'make-modify-dbcluster-snapshot-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsecurity-groups common-lisp:nil :type
    (common-lisp:or dbsecurity-group-name-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-major-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (new-dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cacertificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbport-number common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-performance-insights common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cloudwatch-logs-export-configuration common-lisp:nil :type
    (common-lisp:or cloudwatch-logs-export-configuration common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbinstance-message
                    'make-modify-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "NewDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbport-number))
      (common-lisp:list
       (common-lisp:cons "DBPortNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloudwatch-logs-export-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudwatchLogsExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbinstance-result 'make-modify-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbparameter-group-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parameters (common-lisp:error ":parameters is required") :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbparameter-group-message
                    'make-modify-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbsubnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbsubnet-group-message-"))
   (dbsubnet-group-name (common-lisp:error ":dbsubnet-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (dbsubnet-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsubnet-group-message
                    'make-modify-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbsubnet-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbsubnet-group-result-"))
   (dbsubnet-group common-lisp:nil :type
    (common-lisp:or dbsubnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsubnet-group-result
                    'make-modify-dbsubnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-message
                    'make-modify-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-event-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-event-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-result
                    'make-modify-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-global-cluster-message-"))
   (global-cluster-identifier
    (common-lisp:error ":global-cluster-identifier is required") :type
    (common-lisp:or global-cluster-identifier common-lisp:null))
   (new-global-cluster-identifier common-lisp:nil :type
    (common-lisp:or global-cluster-identifier common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-major-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-global-cluster-message
                    'make-modify-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewGlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-global-cluster-result
                    'make-modify-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (option-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-group-membership-"))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'option-group-membership 'make-option-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-group-membership-list ()
   '(trivial-types:proper-list option-group-membership))
 (common-lisp:defun |make-option-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition option-group-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'option-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (orderable-dbinstance-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-orderable-dbinstance-option-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null))
   (multi-azcapable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (read-replica-capable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (supports-storage-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (supports-iops common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-enhanced-monitoring common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-performance-insights common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (min-storage-size common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-storage-size common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (min-iops-per-db-instance common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-iops-per-db-instance common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (min-iops-per-gib common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (max-iops-per-gib common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (supports-global-databases common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'orderable-dbinstance-option
                    'make-orderable-dbinstance-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-azcapable))
      (common-lisp:list
       (common-lisp:cons "MultiAZCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-capable))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-encryption))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-iops))
      (common-lisp:list
       (common-lisp:cons "SupportsIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "SupportsEnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "SupportsIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-performance-insights))
      (common-lisp:list
       (common-lisp:cons "SupportsPerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-storage-size))
      (common-lisp:list
       (common-lisp:cons "MinStorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-storage-size))
      (common-lisp:list
       (common-lisp:cons "MaxStorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-iops-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MinIopsPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-iops-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MaxIopsPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iops-per-gib))
      (common-lisp:list
       (common-lisp:cons "MinIopsPerGib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-iops-per-gib))
      (common-lisp:list
       (common-lisp:cons "MaxIopsPerGib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orderable-dbinstance-options-list ()
   '(trivial-types:proper-list orderable-dbinstance-option))
 (common-lisp:defun |make-orderable-dbinstance-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orderable-dbinstance-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (orderable-dbinstance-options-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-orderable-dbinstance-options-message-"))
   (orderable-dbinstance-options common-lisp:nil :type
    (common-lisp:or orderable-dbinstance-options-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'orderable-dbinstance-options-message
                    'make-orderable-dbinstance-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orderable-dbinstance-options))
      (common-lisp:list
       (common-lisp:cons "OrderableDBInstanceOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (apply-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (minimum-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-method common-lisp:nil :type
    (common-lisp:or apply-method common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-method))
      (common-lisp:list
       (common-lisp:cons "ApplyMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-cloudwatch-logs-exports (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-cloudwatch-logs-exports-"))
   (log-types-to-enable common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (log-types-to-disable common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-cloudwatch-logs-exports
                    'make-pending-cloudwatch-logs-exports))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-types-to-enable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-types-to-disable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToDisable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-maintenance-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-maintenance-action-"))
   (action common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auto-applied-after-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (forced-apply-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (opt-in-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-apply-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-action
                    'make-pending-maintenance-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-applied-after-date))
      (common-lisp:list
       (common-lisp:cons "AutoAppliedAfterDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forced-apply-date))
      (common-lisp:list
       (common-lisp:cons "ForcedApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-apply-date))
      (common-lisp:list
       (common-lisp:cons "CurrentApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-action-details ()
   '(trivial-types:proper-list pending-maintenance-action))
 (common-lisp:defun |make-pending-maintenance-action-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-maintenance-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-actions ()
   '(trivial-types:proper-list resource-pending-maintenance-actions))
 (common-lisp:defun |make-pending-maintenance-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-pending-maintenance-actions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-maintenance-actions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-maintenance-actions-message-"))
   (pending-maintenance-actions common-lisp:nil :type
    (common-lisp:or pending-maintenance-actions common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-actions-message
                    'make-pending-maintenance-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-modified-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-modified-values-"))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cacertificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or pending-cloudwatch-logs-exports common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-modified-values 'make-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (promote-read-replica-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-promote-read-replica-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-dbcluster-message
                    'make-promote-read-replica-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (promote-read-replica-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-promote-read-replica-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-dbcluster-result
                    'make-promote-read-replica-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition provisioned-iops-not-available-in-azfault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'provisioned-iops-not-available-in-azfault)))
(common-lisp:progn
 (common-lisp:defstruct
     (range (:copier common-lisp:nil) (:conc-name "struct-shape-range-"))
   (from common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (step common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step))
      (common-lisp:list
       (common-lisp:cons "Step"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype range-list () '(trivial-types:proper-list range))
 (common-lisp:defun |make-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype read-replica-dbcluster-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-read-replica-dbcluster-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype read-replica-dbinstance-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-read-replica-dbinstance-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype read-replica-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-read-replica-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype readers-arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-readers-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (force-failover common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-dbinstance-message
                    'make-reboot-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-failover))
      (common-lisp:list
       (common-lisp:cons "ForceFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-dbinstance-result 'make-reboot-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-from-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-from-global-cluster-message-"))
   (global-cluster-identifier
    (common-lisp:error ":global-cluster-identifier is required") :type
    (common-lisp:or global-cluster-identifier common-lisp:null))
   (db-cluster-identifier
    (common-lisp:error ":db-cluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-from-global-cluster-message
                    'make-remove-from-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-from-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-from-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-from-global-cluster-result
                    'make-remove-from-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-role-from-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-role-from-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-role-from-dbcluster-message
                    'make-remove-role-from-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-source-identifier-from-subscription-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-source-identifier-from-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (source-identifier (common-lisp:error ":source-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-source-identifier-from-subscription-message
                    'make-remove-source-identifier-from-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-source-identifier-from-subscription-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-source-identifier-from-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-source-identifier-from-subscription-result
                    'make-remove-source-identifier-from-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-from-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-from-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-message
                    'make-remove-tags-from-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-dbcluster-parameter-group-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (reset-all-parameters common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-dbcluster-parameter-group-message
                    'make-reset-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-dbparameter-group-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (reset-all-parameters common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-dbparameter-group-message
                    'make-reset-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-pending-maintenance-actions (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-pending-maintenance-actions-"))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-maintenance-action-details common-lisp:nil :type
    (common-lisp:or pending-maintenance-action-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-pending-maintenance-actions
                    'make-resource-pending-maintenance-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-action-details))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-from-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-from-snapshot-message-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (snapshot-identifier (common-lisp:error ":snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-snapshot-message
                    'make-restore-dbcluster-from-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-from-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-from-snapshot-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-snapshot-result
                    'make-restore-dbcluster-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-to-point-in-time-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-to-point-in-time-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (restore-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-dbcluster-identifier
    (common-lisp:error ":source-dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (restore-to-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (use-latest-restorable-time common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-to-point-in-time-message
                    'make-restore-dbcluster-to-point-in-time-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-type))
      (common-lisp:list
       (common-lisp:cons "RestoreType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-to-time))
      (common-lisp:list
       (common-lisp:cons "RestoreToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "UseLatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-to-point-in-time-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-to-point-in-time-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-to-point-in-time-result
                    'make-restore-dbcluster-to-point-in-time-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snsinvalid-topic-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsinvalid-topic-fault)))
(common-lisp:progn
 (common-lisp:define-condition snsno-authorization-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsno-authorization-fault)))
(common-lisp:progn
 (common-lisp:define-condition snstopic-arn-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snstopic-arn-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (serverless-v2scaling-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-serverless-v2scaling-configuration-"))
   (min-capacity common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'serverless-v2scaling-configuration
                    'make-serverless-v2scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (serverless-v2scaling-configuration-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-serverless-v2scaling-configuration-info-"))
   (min-capacity common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'serverless-v2scaling-configuration-info
                    'make-serverless-v2scaling-configuration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition shared-snapshot-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'shared-snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype source-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-source-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition source-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-not-found-fault)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dbcluster-message 'make-start-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dbcluster-result 'make-start-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dbcluster-message 'make-stop-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dbcluster-result 'make-stop-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition storage-quota-exceeded-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition storage-type-not-supported-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-type-not-supported-fault)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subnet (:copier common-lisp:nil) (:conc-name "struct-shape-subnet-"))
   (subnet-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or availability-zone common-lisp:null))
   (subnet-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-already-in-use
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-already-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subscription-already-exist-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-already-exist-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-category-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-category-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-not-found-fault
     (neptune-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype supported-character-sets-list ()
   '(trivial-types:proper-list character-set))
 (common-lisp:defun |make-supported-character-sets-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list character-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype supported-timezones-list ()
   '(trivial-types:proper-list timezone))
 (common-lisp:defun |make-supported-timezones-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timezone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-list-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-list-message-"))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-list-message 'make-tag-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (timezone (:copier common-lisp:nil) (:conc-name "struct-shape-timezone-"))
   (timezone-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'timezone 'make-timezone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timezone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timezone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone-name))
      (common-lisp:list
       (common-lisp:cons "TimezoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timezone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-target-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auto-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-major-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-global-databases common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export (common-lisp:list 'upgrade-target 'make-upgrade-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upgrade-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upgrade-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "IsMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upgrade-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (valid-dbinstance-modifications-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-valid-dbinstance-modifications-message-"))
   (storage common-lisp:nil :type
    (common-lisp:or valid-storage-options-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'valid-dbinstance-modifications-message
                    'make-valid-dbinstance-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (valid-storage-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-valid-storage-options-"))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-size common-lisp:nil :type
    (common-lisp:or range-list common-lisp:null))
   (provisioned-iops common-lisp:nil :type
    (common-lisp:or range-list common-lisp:null))
   (iops-to-storage-ratio common-lisp:nil :type
    (common-lisp:or double-range-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'valid-storage-options 'make-valid-storage-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-size))
      (common-lisp:list
       (common-lisp:cons "StorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned-iops))
      (common-lisp:list
       (common-lisp:cons "ProvisionedIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iops-to-storage-ratio))
      (common-lisp:list
       (common-lisp:cons "IopsToStorageRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype valid-storage-options-list ()
   '(trivial-types:proper-list valid-storage-options))
 (common-lisp:defun |make-valid-storage-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list valid-storage-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype valid-upgrade-target-list ()
   '(trivial-types:proper-list upgrade-target))
 (common-lisp:defun |make-valid-upgrade-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upgrade-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-vpc-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-security-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-security-group-membership-"))
   (vpc-security-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-security-group-membership
                    'make-vpc-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-membership-list ()
   '(trivial-types:proper-list vpc-security-group-membership))
 (common-lisp:defun |make-vpc-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun add-role-to-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-role-to-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddRoleToDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-role-to-dbcluster))
(common-lisp:progn
 (common-lisp:defun add-source-identifier-to-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name source-identifier)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name source-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-source-identifier-to-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddSourceIdentifierToSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "AddSourceIdentifierToSubscriptionResult" *error-map*)))
 (common-lisp:export 'add-source-identifier-to-subscription))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddTagsToResource"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun apply-pending-maintenance-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier apply-action
                     opt-in-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier apply-action opt-in-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-pending-maintenance-action-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ApplyPendingMaintenanceAction"
                                                        "2014-10-31"))
      common-lisp:nil "ApplyPendingMaintenanceActionResult" *error-map*)))
 (common-lisp:export 'apply-pending-maintenance-action))
(common-lisp:progn
 (common-lisp:defun copy-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     source-dbcluster-parameter-group-identifier
                     target-dbcluster-parameter-group-identifier
                     target-dbcluster-parameter-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbcluster-parameter-group-identifier
     target-dbcluster-parameter-group-identifier
     target-dbcluster-parameter-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-copy-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'copy-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun copy-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbcluster-snapshot-identifier
                     target-dbcluster-snapshot-identifier kms-key-id
                     pre-signed-url copy-tags tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbcluster-snapshot-identifier
     target-dbcluster-snapshot-identifier kms-key-id pre-signed-url copy-tags
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbcluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'copy-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun copy-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbparameter-group-identifier
                     target-dbparameter-group-identifier
                     target-dbparameter-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbparameter-group-identifier
     target-dbparameter-group-identifier target-dbparameter-group-description
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBParameterGroupResult" *error-map*)))
 (common-lisp:export 'copy-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun create-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones
                     backup-retention-period character-set-name
                     copy-tags-to-snapshot database-name dbcluster-identifier
                     dbcluster-parameter-group-name vpc-security-group-ids
                     dbsubnet-group-name engine engine-version port
                     master-username master-user-password option-group-name
                     preferred-backup-window preferred-maintenance-window
                     replication-source-identifier tags storage-encrypted
                     kms-key-id pre-signed-url
                     enable-iamdatabase-authentication
                     enable-cloudwatch-logs-exports deletion-protection
                     serverless-v2scaling-configuration
                     global-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones backup-retention-period
     character-set-name copy-tags-to-snapshot database-name
     dbcluster-identifier dbcluster-parameter-group-name vpc-security-group-ids
     dbsubnet-group-name engine engine-version port master-username
     master-user-password option-group-name preferred-backup-window
     preferred-maintenance-window replication-source-identifier tags
     storage-encrypted kms-key-id pre-signed-url
     enable-iamdatabase-authentication enable-cloudwatch-logs-exports
     deletion-protection serverless-v2scaling-configuration
     global-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterResult" *error-map*)))
 (common-lisp:export 'create-dbcluster))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-endpoint-identifier endpoint-type static-members
                     excluded-members tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-endpoint-identifier
     endpoint-type static-members excluded-members tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterEndpointResult" *error-map*)))
 (common-lisp:export 'create-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     dbparameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name
     dbparameter-group-family description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'create-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier
                     dbcluster-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-snapshot-identifier dbcluster-identifier
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'create-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbname dbinstance-identifier
                     allocated-storage dbinstance-class engine master-username
                     master-user-password dbsecurity-groups
                     vpc-security-group-ids availability-zone
                     dbsubnet-group-name preferred-maintenance-window
                     dbparameter-group-name backup-retention-period
                     preferred-backup-window port multi-az engine-version
                     auto-minor-version-upgrade license-model iops
                     option-group-name character-set-name publicly-accessible
                     tags dbcluster-identifier storage-type tde-credential-arn
                     tde-credential-password storage-encrypted kms-key-id
                     domain copy-tags-to-snapshot monitoring-interval
                     monitoring-role-arn domain-iamrole-name promotion-tier
                     timezone enable-iamdatabase-authentication
                     enable-performance-insights performance-insights-kmskey-id
                     enable-cloudwatch-logs-exports deletion-protection)
   (common-lisp:declare
    (common-lisp:ignorable dbname dbinstance-identifier allocated-storage
     dbinstance-class engine master-username master-user-password
     dbsecurity-groups vpc-security-group-ids availability-zone
     dbsubnet-group-name preferred-maintenance-window dbparameter-group-name
     backup-retention-period preferred-backup-window port multi-az
     engine-version auto-minor-version-upgrade license-model iops
     option-group-name character-set-name publicly-accessible tags
     dbcluster-identifier storage-type tde-credential-arn
     tde-credential-password storage-encrypted kms-key-id domain
     copy-tags-to-snapshot monitoring-interval monitoring-role-arn
     domain-iamrole-name promotion-tier timezone
     enable-iamdatabase-authentication enable-performance-insights
     performance-insights-kmskey-id enable-cloudwatch-logs-exports
     deletion-protection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBInstanceResult" *error-map*)))
 (common-lisp:export 'create-dbinstance))
(common-lisp:progn
 (common-lisp:defun create-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name
                     dbparameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name dbparameter-group-family
     description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBParameterGroupResult" *error-map*)))
 (common-lisp:export 'create-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun create-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name
                     dbsubnet-group-description subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name dbsubnet-group-description
     subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBSubnetGroupResult" *error-map*)))
 (common-lisp:export 'create-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun create-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories source-ids enabled tags)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories source-ids enabled tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "CreateEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'create-event-subscription))
(common-lisp:progn
 (common-lisp:defun create-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     source-dbcluster-identifier engine engine-version
                     deletion-protection storage-encrypted)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     source-dbcluster-identifier engine engine-version deletion-protection
     storage-encrypted))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "CreateGlobalClusterResult" *error-map*)))
 (common-lisp:export 'create-global-cluster))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier skip-final-snapshot
                     final-dbsnapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier skip-final-snapshot
     final-dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBClusterResult" *error-map*)))
 (common-lisp:export 'delete-dbcluster))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-endpoint-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-endpoint-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBClusterEndpointResult" *error-map*)))
 (common-lisp:export 'delete-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable dbcluster-parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'delete-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier skip-final-snapshot
                     final-dbsnapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier skip-final-snapshot
     final-dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBInstanceResult" *error-map*)))
 (common-lisp:export 'delete-dbinstance))
(common-lisp:progn
 (common-lisp:defun delete-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name)
   (common-lisp:declare (common-lisp:ignorable dbparameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun delete-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name)
   (common-lisp:declare (common-lisp:ignorable dbsubnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun delete-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name)
   (common-lisp:declare (common-lisp:ignorable subscription-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'delete-event-subscription))
(common-lisp:progn
 (common-lisp:defun delete-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable global-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteGlobalClusterResult" *error-map*)))
 (common-lisp:export 'delete-global-cluster))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-endpoint-identifier filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-endpoint-identifier
     filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-endpoints-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterEndpoints"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterEndpointsResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-parameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterParameterGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterParameterGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name source
                     filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name source filters
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterParametersResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-snapshot-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-snapshot-attributes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterSnapshotAttributes"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterSnapshotAttributesResult"
      *error-map*)))
 (common-lisp:export 'describe-dbcluster-snapshot-attributes))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-snapshot-identifier snapshot-type filters
                     max-records marker include-shared include-public)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-snapshot-identifier
     snapshot-type filters max-records marker include-shared include-public))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-snapshots-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterSnapshots"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterSnapshotsResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-dbclusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbclusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClustersResult" *error-map*)))
 (common-lisp:export 'describe-dbclusters))
(common-lisp:progn
 (common-lisp:defun describe-dbengine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version
                     dbparameter-group-family filters max-records marker
                     default-only list-supported-character-sets
                     list-supported-timezones)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version dbparameter-group-family
     filters max-records marker default-only list-supported-character-sets
     list-supported-timezones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbengine-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBEngineVersions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBEngineVersionsResult" *error-map*)))
 (common-lisp:export 'describe-dbengine-versions))
(common-lisp:progn
 (common-lisp:defun describe-dbinstances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbinstances-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBInstances"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBInstancesResult" *error-map*)))
 (common-lisp:export 'describe-dbinstances))
(common-lisp:progn
 (common-lisp:defun describe-dbparameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbparameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBParameterGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBParameterGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbparameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbparameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name source filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name source filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbparameters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBParametersResult" *error-map*)))
 (common-lisp:export 'describe-dbparameters))
(common-lisp:progn
 (common-lisp:defun describe-dbsubnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbsubnet-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSubnetGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBSubnetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbsubnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-cluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-family filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-family filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-cluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngineDefaultClusterParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEngineDefaultClusterParametersResult"
      *error-map*)))
 (common-lisp:export 'describe-engine-default-cluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-family filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-family filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngineDefaultParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEngineDefaultParametersResult" *error-map*)))
 (common-lisp:export 'describe-engine-default-parameters))
(common-lisp:progn
 (common-lisp:defun describe-event-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type filters)
   (common-lisp:declare (common-lisp:ignorable source-type filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-categories-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventCategories"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventCategoriesResult" *error-map*)))
 (common-lisp:export 'describe-event-categories))
(common-lisp:progn
 (common-lisp:defun describe-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-subscriptions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventSubscriptions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventSubscriptionsResult" *error-map*)))
 (common-lisp:export 'describe-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration event-categories filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration event-categories filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEvents"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventsResult" *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-global-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-global-clusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeGlobalClusters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeGlobalClustersResult" *error-map*)))
 (common-lisp:export 'describe-global-clusters))
(common-lisp:progn
 (common-lisp:defun describe-orderable-dbinstance-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version dbinstance-class
                     license-model vpc filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version dbinstance-class license-model
     vpc filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-orderable-dbinstance-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrderableDBInstanceOptions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeOrderableDBInstanceOptionsResult" *error-map*)))
 (common-lisp:export 'describe-orderable-dbinstance-options))
(common-lisp:progn
 (common-lisp:defun describe-pending-maintenance-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier filters marker
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier filters marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pending-maintenance-actions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePendingMaintenanceActions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribePendingMaintenanceActionsResult" *error-map*)))
 (common-lisp:export 'describe-pending-maintenance-actions))
(common-lisp:progn
 (common-lisp:defun describe-valid-dbinstance-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:declare (common-lisp:ignorable dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-valid-dbinstance-modifications-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeValidDBInstanceModifications"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeValidDBInstanceModificationsResult"
      *error-map*)))
 (common-lisp:export 'describe-valid-dbinstance-modifications))
(common-lisp:progn
 (common-lisp:defun failover-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     target-dbinstance-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier target-dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-failover-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FailoverDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "FailoverDBClusterResult" *error-map*)))
 (common-lisp:export 'failover-dbcluster))
(common-lisp:progn
 (common-lisp:defun failover-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     target-db-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     target-db-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-failover-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FailoverGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "FailoverGlobalClusterResult" *error-map*)))
 (common-lisp:export 'failover-global-cluster))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name filters)
   (common-lisp:declare (common-lisp:ignorable resource-name filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2014-10-31"))
      common-lisp:nil "ListTagsForResourceResult" *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     new-dbcluster-identifier apply-immediately
                     backup-retention-period dbcluster-parameter-group-name
                     vpc-security-group-ids port master-user-password
                     option-group-name preferred-backup-window
                     preferred-maintenance-window
                     enable-iamdatabase-authentication
                     cloudwatch-logs-export-configuration engine-version
                     allow-major-version-upgrade
                     dbinstance-parameter-group-name deletion-protection
                     copy-tags-to-snapshot serverless-v2scaling-configuration)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier new-dbcluster-identifier
     apply-immediately backup-retention-period dbcluster-parameter-group-name
     vpc-security-group-ids port master-user-password option-group-name
     preferred-backup-window preferred-maintenance-window
     enable-iamdatabase-authentication cloudwatch-logs-export-configuration
     engine-version allow-major-version-upgrade dbinstance-parameter-group-name
     deletion-protection copy-tags-to-snapshot
     serverless-v2scaling-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-endpoint-identifier
                     endpoint-type static-members excluded-members)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-endpoint-identifier endpoint-type
     static-members excluded-members))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterEndpointResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-snapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier
                     attribute-name values-to-add values-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-snapshot-identifier attribute-name
     values-to-add values-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-snapshot-attribute-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterSnapshotAttribute"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterSnapshotAttributeResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster-snapshot-attribute))
(common-lisp:progn
 (common-lisp:defun modify-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier allocated-storage
                     dbinstance-class dbsubnet-group-name dbsecurity-groups
                     vpc-security-group-ids apply-immediately
                     master-user-password dbparameter-group-name
                     backup-retention-period preferred-backup-window
                     preferred-maintenance-window multi-az engine-version
                     allow-major-version-upgrade auto-minor-version-upgrade
                     license-model iops option-group-name
                     new-dbinstance-identifier storage-type tde-credential-arn
                     tde-credential-password cacertificate-identifier domain
                     copy-tags-to-snapshot monitoring-interval dbport-number
                     publicly-accessible monitoring-role-arn
                     domain-iamrole-name promotion-tier
                     enable-iamdatabase-authentication
                     enable-performance-insights performance-insights-kmskey-id
                     cloudwatch-logs-export-configuration deletion-protection)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier allocated-storage
     dbinstance-class dbsubnet-group-name dbsecurity-groups
     vpc-security-group-ids apply-immediately master-user-password
     dbparameter-group-name backup-retention-period preferred-backup-window
     preferred-maintenance-window multi-az engine-version
     allow-major-version-upgrade auto-minor-version-upgrade license-model iops
     option-group-name new-dbinstance-identifier storage-type
     tde-credential-arn tde-credential-password cacertificate-identifier domain
     copy-tags-to-snapshot monitoring-interval dbport-number
     publicly-accessible monitoring-role-arn domain-iamrole-name promotion-tier
     enable-iamdatabase-authentication enable-performance-insights
     performance-insights-kmskey-id cloudwatch-logs-export-configuration
     deletion-protection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBInstanceResult" *error-map*)))
 (common-lisp:export 'modify-dbinstance))
(common-lisp:progn
 (common-lisp:defun modify-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBParameterGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun modify-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name
                     dbsubnet-group-description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name dbsubnet-group-description
     subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBSubnetGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun modify-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories enabled)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'modify-event-subscription))
(common-lisp:progn
 (common-lisp:defun modify-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     new-global-cluster-identifier deletion-protection
                     engine-version allow-major-version-upgrade)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     new-global-cluster-identifier deletion-protection engine-version
     allow-major-version-upgrade))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyGlobalClusterResult" *error-map*)))
 (common-lisp:export 'modify-global-cluster))
(common-lisp:progn
 (common-lisp:defun promote-read-replica-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-promote-read-replica-dbcluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PromoteReadReplicaDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "PromoteReadReplicaDBClusterResult" *error-map*)))
 (common-lisp:export 'promote-read-replica-dbcluster))
(common-lisp:progn
 (common-lisp:defun reboot-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier force-failover)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier force-failover))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "RebootDBInstanceResult" *error-map*)))
 (common-lisp:export 'reboot-dbinstance))
(common-lisp:progn
 (common-lisp:defun remove-from-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     db-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier db-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-from-global-cluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveFromGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "RemoveFromGlobalClusterResult" *error-map*)))
 (common-lisp:export 'remove-from-global-cluster))
(common-lisp:progn
 (common-lisp:defun remove-role-from-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-role-from-dbcluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveRoleFromDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-role-from-dbcluster))
(common-lisp:progn
 (common-lisp:defun remove-source-identifier-from-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name source-identifier)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name source-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-source-identifier-from-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveSourceIdentifierFromSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "RemoveSourceIdentifierFromSubscriptionResult"
      *error-map*)))
 (common-lisp:export 'remove-source-identifier-from-subscription))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTagsFromResource"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun reset-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     reset-all-parameters parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ResetDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'reset-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun reset-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name
                     reset-all-parameters parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ResetDBParameterGroupResult" *error-map*)))
 (common-lisp:export 'reset-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones dbcluster-identifier
                     snapshot-identifier engine engine-version port
                     dbsubnet-group-name database-name option-group-name
                     vpc-security-group-ids tags kms-key-id
                     enable-iamdatabase-authentication
                     enable-cloudwatch-logs-exports
                     dbcluster-parameter-group-name deletion-protection
                     copy-tags-to-snapshot serverless-v2scaling-configuration)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones dbcluster-identifier
     snapshot-identifier engine engine-version port dbsubnet-group-name
     database-name option-group-name vpc-security-group-ids tags kms-key-id
     enable-iamdatabase-authentication enable-cloudwatch-logs-exports
     dbcluster-parameter-group-name deletion-protection copy-tags-to-snapshot
     serverless-v2scaling-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbcluster-from-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBClusterFromSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBClusterFromSnapshotResult" *error-map*)))
 (common-lisp:export 'restore-dbcluster-from-snapshot))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-to-point-in-time
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier restore-type
                     source-dbcluster-identifier restore-to-time
                     use-latest-restorable-time port dbsubnet-group-name
                     option-group-name vpc-security-group-ids tags kms-key-id
                     enable-iamdatabase-authentication
                     enable-cloudwatch-logs-exports
                     dbcluster-parameter-group-name deletion-protection
                     serverless-v2scaling-configuration)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier restore-type
     source-dbcluster-identifier restore-to-time use-latest-restorable-time
     port dbsubnet-group-name option-group-name vpc-security-group-ids tags
     kms-key-id enable-iamdatabase-authentication
     enable-cloudwatch-logs-exports dbcluster-parameter-group-name
     deletion-protection serverless-v2scaling-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbcluster-to-point-in-time-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBClusterToPointInTime"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBClusterToPointInTimeResult" *error-map*)))
 (common-lisp:export 'restore-dbcluster-to-point-in-time))
(common-lisp:progn
 (common-lisp:defun start-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "StartDBClusterResult" *error-map*)))
 (common-lisp:export 'start-dbcluster))
(common-lisp:progn
 (common-lisp:defun stop-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'neptune-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "StopDBClusterResult" *error-map*)))
 (common-lisp:export 'stop-dbcluster))
