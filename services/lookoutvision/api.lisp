;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lookoutvision/api
  (:use)
  (:nicknames #:aws/lookoutvision)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lookoutvision/api)
(common-lisp:progn
 (common-lisp:defclass lookoutvision-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "lookoutvision" :protocol
                        :rest-json))
 (common-lisp:export 'lookoutvision-request))
(common-lisp:progn
 (common-lisp:define-condition lookoutvision-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lookoutvision-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass anomaly common-lisp:nil
                       ((pixel-anomaly :initarg :pixel-anomaly :type
                         (common-lisp:or pixel-anomaly common-lisp:null)
                         :accessor %anomaly-pixel-anomaly :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or anomaly-name common-lisp:null)
                         :accessor %anomaly-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'anomaly 'make-anomaly))
 (common-lisp:defun make-anomaly
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pixel-anomaly name)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pixel-anomaly))
      (common-lisp:list
       (common-lisp:cons "PixelAnomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly))
   common-lisp:nil))
(common-lisp:deftype anomaly-class-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomaly-list () '(trivial-types:proper-list anomaly))
 (common-lisp:defun |make-anomaly-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly))
   aws-sdk/generator/shape::members))
(common-lisp:deftype anomaly-mask ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype anomaly-name () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype color () 'common-lisp:string)
(common-lisp:deftype compiler-options () 'common-lisp:string)
(common-lisp:deftype component-description () 'common-lisp:string)
(common-lisp:deftype component-name () 'common-lisp:string)
(common-lisp:deftype component-version () 'common-lisp:string)
(common-lisp:deftype component-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-dataset-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-dataset-request-client-token
                         :initform common-lisp:nil)
                        (dataset-source :initarg :dataset-source :type
                         (common-lisp:or dataset-source common-lisp:null)
                         :accessor %create-dataset-request-dataset-source
                         :initform common-lisp:nil)
                        (dataset-type :initarg :dataset-type :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor %create-dataset-request-dataset-type
                         :initform
                         (common-lisp:error ":dataset-type is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %create-dataset-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-dataset-request 'make-create-dataset-request))
 (common-lisp:defun make-create-dataset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token dataset-source dataset-type
                     project-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-source))
      (common-lisp:list
       (common-lisp:cons "DatasetSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-response common-lisp:nil
                       ((dataset-metadata :initarg :dataset-metadata :type
                         (common-lisp:or dataset-metadata common-lisp:null)
                         :accessor %create-dataset-response-dataset-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dataset-response 'make-create-dataset-response))
 (common-lisp:defun make-create-dataset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataset-metadata)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-metadata))
      (common-lisp:list
       (common-lisp:cons "DatasetMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-model-request-tags :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %create-model-request-kms-key-id :initform
                         common-lisp:nil)
                        (output-config :initarg :output-config :type
                         (common-lisp:or output-config common-lisp:null)
                         :accessor %create-model-request-output-config
                         :initform
                         (common-lisp:error ":output-config is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-model-request-client-token :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or model-description-message
                                         common-lisp:null)
                         :accessor %create-model-request-description :initform
                         common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %create-model-request-project-name :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-model-request 'make-create-model-request))
 (common-lisp:defun make-create-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags kms-key-id output-config
                     client-token description project-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-response common-lisp:nil
                       ((model-metadata :initarg :model-metadata :type
                         (common-lisp:or model-metadata common-lisp:null)
                         :accessor %create-model-response-model-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-model-response 'make-create-model-response))
 (common-lisp:defun make-create-model-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-metadata)
   (common-lisp:apply #'common-lisp:make-instance 'create-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-metadata))
      (common-lisp:list
       (common-lisp:cons "ModelMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-project-request-client-token
                         :initform common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %create-project-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defun make-create-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token project-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-response common-lisp:nil
                       ((project-metadata :initarg :project-metadata :type
                         (common-lisp:or project-metadata common-lisp:null)
                         :accessor %create-project-response-project-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-project-response 'make-create-project-response))
 (common-lisp:defun make-create-project-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-metadata)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-metadata))
      (common-lisp:list
       (common-lisp:cons "ProjectMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   common-lisp:nil))
(common-lisp:deftype dataset-changes ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass dataset-description common-lisp:nil
                       ((image-stats :initarg :image-stats :type
                         (common-lisp:or dataset-image-stats common-lisp:null)
                         :accessor %dataset-description-image-stats :initform
                         common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or dataset-status-message
                                         common-lisp:null)
                         :accessor %dataset-description-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or dataset-status common-lisp:null)
                         :accessor %dataset-description-status :initform
                         common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %dataset-description-last-updated-timestamp :initform
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %dataset-description-creation-timestamp :initform
                         common-lisp:nil)
                        (dataset-type :initarg :dataset-type :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor %dataset-description-dataset-type :initform
                         common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %dataset-description-project-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dataset-description 'make-dataset-description))
 (common-lisp:defun make-dataset-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-stats status-message status
                     last-updated-timestamp creation-timestamp dataset-type
                     project-name)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-stats))
      (common-lisp:list
       (common-lisp:cons "ImageStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-description))
   common-lisp:nil))
(common-lisp:deftype dataset-entry () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dataset-entry-list ()
   '(trivial-types:proper-list dataset-entry))
 (common-lisp:defun |make-dataset-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-ground-truth-manifest common-lisp:nil
                       ((s3object :initarg :s3object :type
                         (common-lisp:or input-s3object common-lisp:null)
                         :accessor %dataset-ground-truth-manifest-s3object
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dataset-ground-truth-manifest
                    'make-dataset-ground-truth-manifest))
 (common-lisp:defun make-dataset-ground-truth-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3object)
   (common-lisp:apply #'common-lisp:make-instance
                      'dataset-ground-truth-manifest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-ground-truth-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-ground-truth-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "S3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-ground-truth-manifest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-image-stats common-lisp:nil
                       ((anomaly :initarg :anomaly :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %dataset-image-stats-anomaly :initform
                         common-lisp:nil)
                        (normal :initarg :normal :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %dataset-image-stats-normal :initform common-lisp:nil)
                        (labeled :initarg :labeled :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %dataset-image-stats-labeled :initform
                         common-lisp:nil)
                        (total :initarg :total :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %dataset-image-stats-total :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dataset-image-stats 'make-dataset-image-stats))
 (common-lisp:defun make-dataset-image-stats
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly normal labeled total)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-image-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-image-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-image-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeled))
      (common-lisp:list
       (common-lisp:cons "Labeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly))
      (common-lisp:list
       (common-lisp:cons "Anomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-image-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-metadata common-lisp:nil
                       ((status-message :initarg :status-message :type
                         (common-lisp:or dataset-status-message
                                         common-lisp:null)
                         :accessor %dataset-metadata-status-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or dataset-status common-lisp:null)
                         :accessor %dataset-metadata-status :initform
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %dataset-metadata-creation-timestamp :initform
                         common-lisp:nil)
                        (dataset-type :initarg :dataset-type :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor %dataset-metadata-dataset-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dataset-metadata 'make-dataset-metadata))
 (common-lisp:defun make-dataset-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status creation-timestamp
                     dataset-type)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-metadata-list ()
   '(trivial-types:proper-list dataset-metadata))
 (common-lisp:defun |make-dataset-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-source common-lisp:nil
                       ((ground-truth-manifest :initarg :ground-truth-manifest
                         :type
                         (common-lisp:or dataset-ground-truth-manifest
                                         common-lisp:null)
                         :accessor %dataset-source-ground-truth-manifest
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dataset-source 'make-dataset-source))
 (common-lisp:defun make-dataset-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ground-truth-manifest)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ground-truth-manifest))
      (common-lisp:list
       (common-lisp:cons "GroundTruthManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-source))
   common-lisp:nil))
(common-lisp:deftype dataset-status () 'common-lisp:string)
(common-lisp:deftype dataset-status-message () 'common-lisp:string)
(common-lisp:deftype dataset-type () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-dataset-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-dataset-request-client-token
                         :initform common-lisp:nil)
                        (dataset-type :initarg :dataset-type :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor %delete-dataset-request-dataset-type
                         :initform
                         (common-lisp:error ":dataset-type is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %delete-dataset-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defun make-delete-dataset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token dataset-type project-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-dataset-response 'make-delete-dataset-response))
 (common-lisp:defun make-delete-dataset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-model-request-client-token :initform
                         common-lisp:nil)
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version-no-latest
                                         common-lisp:null)
                         :accessor %delete-model-request-model-version
                         :initform
                         (common-lisp:error ":model-version is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %delete-model-request-project-name :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-model-request 'make-delete-model-request))
 (common-lisp:defun make-delete-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token model-version project-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-response common-lisp:nil
                       ((model-arn :initarg :model-arn :type
                         (common-lisp:or model-arn common-lisp:null) :accessor
                         %delete-model-response-model-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-model-response 'make-delete-model-response))
 (common-lisp:defun make-delete-model-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-project-request-client-token
                         :initform common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %delete-project-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defun make-delete-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token project-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-response common-lisp:nil
                       ((project-arn :initarg :project-arn :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor %delete-project-response-project-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-project-response 'make-delete-project-response))
 (common-lisp:defun make-delete-project-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-request common-lisp:nil
                       ((dataset-type :initarg :dataset-type :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor %describe-dataset-request-dataset-type
                         :initform
                         (common-lisp:error ":dataset-type is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %describe-dataset-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-request 'make-describe-dataset-request))
 (common-lisp:defun make-describe-dataset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataset-type project-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-response common-lisp:nil
                       ((dataset-description :initarg :dataset-description
                         :type
                         (common-lisp:or dataset-description common-lisp:null)
                         :accessor
                         %describe-dataset-response-dataset-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-response
                    'make-describe-dataset-response))
 (common-lisp:defun make-describe-dataset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataset-description)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "DatasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-packaging-job-request common-lisp:nil
                       ((job-name :initarg :job-name :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor
                         %describe-model-packaging-job-request-job-name
                         :initform (common-lisp:error ":job-name is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         %describe-model-packaging-job-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-model-packaging-job-request
                    'make-describe-model-packaging-job-request))
 (common-lisp:defun make-describe-model-packaging-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-name project-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-model-packaging-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-packaging-job-response common-lisp:nil
                       ((model-packaging-description :initarg
                         :model-packaging-description :type
                         (common-lisp:or model-packaging-description
                                         common-lisp:null)
                         :accessor
                         %describe-model-packaging-job-response-model-packaging-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-model-packaging-job-response
                    'make-describe-model-packaging-job-response))
 (common-lisp:defun make-describe-model-packaging-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-packaging-description)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-model-packaging-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-packaging-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-request common-lisp:nil
                       ((model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %describe-model-request-model-version
                         :initform
                         (common-lisp:error ":model-version is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %describe-model-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-model-request 'make-describe-model-request))
 (common-lisp:defun make-describe-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-version project-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-model-response common-lisp:nil
                       ((model-description :initarg :model-description :type
                         (common-lisp:or model-description common-lisp:null)
                         :accessor %describe-model-response-model-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-model-response 'make-describe-model-response))
 (common-lisp:defun make-describe-model-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-description)
   (common-lisp:apply #'common-lisp:make-instance 'describe-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-description))
      (common-lisp:list
       (common-lisp:cons "ModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-request common-lisp:nil
                       ((project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %describe-project-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-project-request 'make-describe-project-request))
 (common-lisp:defun make-describe-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-response common-lisp:nil
                       ((project-description :initarg :project-description
                         :type
                         (common-lisp:or project-description common-lisp:null)
                         :accessor
                         %describe-project-response-project-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-project-response
                    'make-describe-project-response))
 (common-lisp:defun make-describe-project-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-description)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "ProjectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-anomalies-request common-lisp:nil
                       ((content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %detect-anomalies-request-content-type
                         :initform
                         (common-lisp:error ":content-type is required"))
                        (body :initarg :body :type
                         (common-lisp:or stream common-lisp:null) :accessor
                         %detect-anomalies-request-body :initform
                         (common-lisp:error ":body is required"))
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %detect-anomalies-request-model-version
                         :initform
                         (common-lisp:error ":model-version is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %detect-anomalies-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'detect-anomalies-request 'make-detect-anomalies-request))
 (common-lisp:defun make-detect-anomalies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type body model-version
                     project-name)
   (common-lisp:apply #'common-lisp:make-instance 'detect-anomalies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'body))))
(common-lisp:progn
 (common-lisp:defclass detect-anomalies-response common-lisp:nil
                       ((detect-anomaly-result :initarg :detect-anomaly-result
                         :type
                         (common-lisp:or detect-anomaly-result
                                         common-lisp:null)
                         :accessor
                         %detect-anomalies-response-detect-anomaly-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detect-anomalies-response
                    'make-detect-anomalies-response))
 (common-lisp:defun make-detect-anomalies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detect-anomaly-result)
   (common-lisp:apply #'common-lisp:make-instance 'detect-anomalies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detect-anomaly-result))
      (common-lisp:list
       (common-lisp:cons "DetectAnomalyResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomalies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-anomaly-result common-lisp:nil
                       ((anomaly-mask :initarg :anomaly-mask :type
                         (common-lisp:or anomaly-mask common-lisp:null)
                         :accessor %detect-anomaly-result-anomaly-mask
                         :initform common-lisp:nil)
                        (anomalies :initarg :anomalies :type
                         (common-lisp:or anomaly-list common-lisp:null)
                         :accessor %detect-anomaly-result-anomalies :initform
                         common-lisp:nil)
                        (confidence :initarg :confidence :type
                         (common-lisp:or float common-lisp:null) :accessor
                         %detect-anomaly-result-confidence :initform
                         common-lisp:nil)
                        (is-anomalous :initarg :is-anomalous :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %detect-anomaly-result-is-anomalous :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or image-source common-lisp:null)
                         :accessor %detect-anomaly-result-source :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detect-anomaly-result 'make-detect-anomaly-result))
 (common-lisp:defun make-detect-anomaly-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anomaly-mask anomalies confidence
                     is-anomalous source)
   (common-lisp:apply #'common-lisp:make-instance 'detect-anomaly-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomaly-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomaly-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-anomalous))
      (common-lisp:list
       (common-lisp:cons "IsAnomalous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomalies))
      (common-lisp:list
       (common-lisp:cons "Anomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-mask))
      (common-lisp:list
       (common-lisp:cons "AnomalyMask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-anomaly-result))
   common-lisp:nil))
(common-lisp:deftype exception-string () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass greengrass-configuration common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %greengrass-configuration-tags :initform
                         common-lisp:nil)
                        (component-description :initarg :component-description
                         :type
                         (common-lisp:or component-description
                                         common-lisp:null)
                         :accessor
                         %greengrass-configuration-component-description
                         :initform common-lisp:nil)
                        (component-version :initarg :component-version :type
                         (common-lisp:or component-version common-lisp:null)
                         :accessor %greengrass-configuration-component-version
                         :initform common-lisp:nil)
                        (component-name :initarg :component-name :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %greengrass-configuration-component-name
                         :initform
                         (common-lisp:error ":component-name is required"))
                        (s3output-location :initarg :s3output-location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %greengrass-configuration-s3output-location :initform
                         (common-lisp:error ":s3output-location is required"))
                        (target-platform :initarg :target-platform :type
                         (common-lisp:or target-platform common-lisp:null)
                         :accessor %greengrass-configuration-target-platform
                         :initform common-lisp:nil)
                        (target-device :initarg :target-device :type
                         (common-lisp:or target-device common-lisp:null)
                         :accessor %greengrass-configuration-target-device
                         :initform common-lisp:nil)
                        (compiler-options :initarg :compiler-options :type
                         (common-lisp:or compiler-options common-lisp:null)
                         :accessor %greengrass-configuration-compiler-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'greengrass-configuration 'make-greengrass-configuration))
 (common-lisp:defun make-greengrass-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags component-description
                     component-version component-name s3output-location
                     target-platform target-device compiler-options)
   (common-lisp:apply #'common-lisp:make-instance 'greengrass-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compiler-options))
      (common-lisp:list
       (common-lisp:cons "CompilerOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-device))
      (common-lisp:list
       (common-lisp:cons "TargetDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-platform))
      (common-lisp:list
       (common-lisp:cons "TargetPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-location))
      (common-lisp:list
       (common-lisp:cons "S3OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-version))
      (common-lisp:list
       (common-lisp:cons "ComponentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-description))
      (common-lisp:list
       (common-lisp:cons "ComponentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass greengrass-output-details common-lisp:nil
                       ((component-version :initarg :component-version :type
                         (common-lisp:or component-version common-lisp:null)
                         :accessor %greengrass-output-details-component-version
                         :initform common-lisp:nil)
                        (component-name :initarg :component-name :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %greengrass-output-details-component-name
                         :initform common-lisp:nil)
                        (component-version-arn :initarg :component-version-arn
                         :type
                         (common-lisp:or component-version-arn
                                         common-lisp:null)
                         :accessor
                         %greengrass-output-details-component-version-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'greengrass-output-details
                    'make-greengrass-output-details))
 (common-lisp:defun make-greengrass-output-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-version component-name
                     component-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'greengrass-output-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-output-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-output-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-version-arn))
      (common-lisp:list
       (common-lisp:cons "ComponentVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-version))
      (common-lisp:list
       (common-lisp:cons "ComponentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          greengrass-output-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-source common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or image-source-type common-lisp:null)
                         :accessor %image-source-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image-source 'make-image-source))
 (common-lisp:defun make-image-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'image-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-source))
   common-lisp:nil))
(common-lisp:deftype image-source-type () 'common-lisp:string)
(common-lisp:deftype inference-units () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass input-s3object common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor %input-s3object-version-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor %input-s3object-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %input-s3object-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export (common-lisp:list 'input-s3object 'make-input-s3object))
 (common-lisp:defun make-input-s3object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'input-s3object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-s3object))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype is-labeled () 'common-lisp:boolean)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-dataset-entries-request common-lisp:nil
                       ((source-ref-contains :initarg :source-ref-contains
                         :type (common-lisp:or query-string common-lisp:null)
                         :accessor
                         %list-dataset-entries-request-source-ref-contains
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-dataset-entries-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-dataset-entries-request-next-token
                         :initform common-lisp:nil)
                        (after-creation-date :initarg :after-creation-date
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         %list-dataset-entries-request-after-creation-date
                         :initform common-lisp:nil)
                        (before-creation-date :initarg :before-creation-date
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         %list-dataset-entries-request-before-creation-date
                         :initform common-lisp:nil)
                        (anomaly-class :initarg :anomaly-class :type
                         (common-lisp:or anomaly-class-filter common-lisp:null)
                         :accessor %list-dataset-entries-request-anomaly-class
                         :initform common-lisp:nil)
                        (labeled :initarg :labeled :type
                         (common-lisp:or is-labeled common-lisp:null) :accessor
                         %list-dataset-entries-request-labeled :initform
                         common-lisp:nil)
                        (dataset-type :initarg :dataset-type :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor %list-dataset-entries-request-dataset-type
                         :initform
                         (common-lisp:error ":dataset-type is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %list-dataset-entries-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-dataset-entries-request
                    'make-list-dataset-entries-request))
 (common-lisp:defun make-list-dataset-entries-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-ref-contains max-results
                     next-token after-creation-date before-creation-date
                     anomaly-class labeled dataset-type project-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-dataset-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-entries-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-dataset-entries-response-next-token
                         :initform common-lisp:nil)
                        (dataset-entries :initarg :dataset-entries :type
                         (common-lisp:or dataset-entry-list common-lisp:null)
                         :accessor
                         %list-dataset-entries-response-dataset-entries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-dataset-entries-response
                    'make-list-dataset-entries-response))
 (common-lisp:defun make-list-dataset-entries-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token dataset-entries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataset-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-entries))
      (common-lisp:list
       (common-lisp:cons "DatasetEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-packaging-jobs-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-model-packaging-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-model-packaging-jobs-request-next-token
                         :initform common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         %list-model-packaging-jobs-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-model-packaging-jobs-request
                    'make-list-model-packaging-jobs-request))
 (common-lisp:defun make-list-model-packaging-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token project-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-packaging-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-packaging-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-model-packaging-jobs-response-next-token
                         :initform common-lisp:nil)
                        (model-packaging-jobs :initarg :model-packaging-jobs
                         :type
                         (common-lisp:or model-packaging-jobs-list
                                         common-lisp:null)
                         :accessor
                         %list-model-packaging-jobs-response-model-packaging-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-model-packaging-jobs-response
                    'make-list-model-packaging-jobs-response))
 (common-lisp:defun make-list-model-packaging-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token model-packaging-jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-packaging-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-jobs))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packaging-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-models-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-models-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-models-request-next-token :initform
                         common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %list-models-request-project-name :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-models-request 'make-list-models-request))
 (common-lisp:defun make-list-models-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token project-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-models-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-models-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-models-response-next-token :initform
                         common-lisp:nil)
                        (models :initarg :models :type
                         (common-lisp:or model-metadata-list common-lisp:null)
                         :accessor %list-models-response-models :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-models-response 'make-list-models-response))
 (common-lisp:defun make-list-models-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token models)
   (common-lisp:apply #'common-lisp:make-instance 'list-models-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-models-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-models-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-models-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %list-projects-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-projects-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defun make-list-projects-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-projects-response-next-token :initform
                         common-lisp:nil)
                        (projects :initarg :projects :type
                         (common-lisp:or project-metadata-list
                                         common-lisp:null)
                         :accessor %list-projects-response-projects :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-projects-response 'make-list-projects-response))
 (common-lisp:defun make-list-projects-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token projects)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projects))
      (common-lisp:list
       (common-lisp:cons "Projects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype model-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-description common-lisp:nil
                       ((max-inference-units :initarg :max-inference-units
                         :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor %model-description-max-inference-units
                         :initform common-lisp:nil)
                        (min-inference-units :initarg :min-inference-units
                         :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor %model-description-min-inference-units
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %model-description-kms-key-id :initform
                         common-lisp:nil)
                        (evaluation-end-timestamp :initarg
                         :evaluation-end-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %model-description-evaluation-end-timestamp :initform
                         common-lisp:nil)
                        (evaluation-result :initarg :evaluation-result :type
                         (common-lisp:or output-s3object common-lisp:null)
                         :accessor %model-description-evaluation-result
                         :initform common-lisp:nil)
                        (evaluation-manifest :initarg :evaluation-manifest
                         :type
                         (common-lisp:or output-s3object common-lisp:null)
                         :accessor %model-description-evaluation-manifest
                         :initform common-lisp:nil)
                        (output-config :initarg :output-config :type
                         (common-lisp:or output-config common-lisp:null)
                         :accessor %model-description-output-config :initform
                         common-lisp:nil)
                        (performance :initarg :performance :type
                         (common-lisp:or model-performance common-lisp:null)
                         :accessor %model-description-performance :initform
                         common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or model-status-message common-lisp:null)
                         :accessor %model-description-status-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or model-status common-lisp:null)
                         :accessor %model-description-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or model-description-message
                                         common-lisp:null)
                         :accessor %model-description-description :initform
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %model-description-creation-timestamp :initform
                         common-lisp:nil)
                        (model-arn :initarg :model-arn :type
                         (common-lisp:or model-arn common-lisp:null) :accessor
                         %model-description-model-arn :initform
                         common-lisp:nil)
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %model-description-model-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-description 'make-model-description))
 (common-lisp:defun make-model-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-inference-units min-inference-units
                     kms-key-id evaluation-end-timestamp evaluation-result
                     evaluation-manifest output-config performance
                     status-message status description creation-timestamp
                     model-arn model-version)
   (common-lisp:apply #'common-lisp:make-instance 'model-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance))
      (common-lisp:list
       (common-lisp:cons "Performance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-manifest))
      (common-lisp:list
       (common-lisp:cons "EvaluationManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-result))
      (common-lisp:list
       (common-lisp:cons "EvaluationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EvaluationEndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-inference-units))
      (common-lisp:list
       (common-lisp:cons "MinInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-inference-units))
      (common-lisp:list
       (common-lisp:cons "MaxInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-description))
   common-lisp:nil))
(common-lisp:deftype model-description-message () 'common-lisp:string)
(common-lisp:deftype model-hosting-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-metadata common-lisp:nil
                       ((performance :initarg :performance :type
                         (common-lisp:or model-performance common-lisp:null)
                         :accessor %model-metadata-performance :initform
                         common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or model-status-message common-lisp:null)
                         :accessor %model-metadata-status-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or model-status common-lisp:null)
                         :accessor %model-metadata-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or model-description-message
                                         common-lisp:null)
                         :accessor %model-metadata-description :initform
                         common-lisp:nil)
                        (model-arn :initarg :model-arn :type
                         (common-lisp:or model-arn common-lisp:null) :accessor
                         %model-metadata-model-arn :initform common-lisp:nil)
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %model-metadata-model-version :initform
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %model-metadata-creation-timestamp :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'model-metadata 'make-model-metadata))
 (common-lisp:defun make-model-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key performance status-message status
                     description model-arn model-version creation-timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'model-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance))
      (common-lisp:list
       (common-lisp:cons "Performance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-metadata-list ()
   '(trivial-types:proper-list model-metadata))
 (common-lisp:defun |make-model-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass model-packaging-configuration common-lisp:nil
                       ((greengrass :initarg :greengrass :type
                         (common-lisp:or greengrass-configuration
                                         common-lisp:null)
                         :accessor %model-packaging-configuration-greengrass
                         :initform
                         (common-lisp:error ":greengrass is required"))))
 (common-lisp:export
  (common-lisp:list 'model-packaging-configuration
                    'make-model-packaging-configuration))
 (common-lisp:defun make-model-packaging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key greengrass)
   (common-lisp:apply #'common-lisp:make-instance
                      'model-packaging-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass))
      (common-lisp:list
       (common-lisp:cons "Greengrass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass model-packaging-description common-lisp:nil
                       ((last-updated-timestamp :initarg
                         :last-updated-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %model-packaging-description-last-updated-timestamp
                         :initform common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %model-packaging-description-creation-timestamp
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or model-packaging-status-message
                                         common-lisp:null)
                         :accessor %model-packaging-description-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or model-packaging-job-status
                                         common-lisp:null)
                         :accessor %model-packaging-description-status
                         :initform common-lisp:nil)
                        (model-packaging-output-details :initarg
                         :model-packaging-output-details :type
                         (common-lisp:or model-packaging-output-details
                                         common-lisp:null)
                         :accessor
                         %model-packaging-description-model-packaging-output-details
                         :initform common-lisp:nil)
                        (model-packaging-method :initarg
                         :model-packaging-method :type
                         (common-lisp:or model-packaging-method
                                         common-lisp:null)
                         :accessor
                         %model-packaging-description-model-packaging-method
                         :initform common-lisp:nil)
                        (model-packaging-job-description :initarg
                         :model-packaging-job-description :type
                         (common-lisp:or model-packaging-job-description
                                         common-lisp:null)
                         :accessor
                         %model-packaging-description-model-packaging-job-description
                         :initform common-lisp:nil)
                        (model-packaging-configuration :initarg
                         :model-packaging-configuration :type
                         (common-lisp:or model-packaging-configuration
                                         common-lisp:null)
                         :accessor
                         %model-packaging-description-model-packaging-configuration
                         :initform common-lisp:nil)
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %model-packaging-description-model-version
                         :initform common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %model-packaging-description-project-name
                         :initform common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor %model-packaging-description-job-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-packaging-description
                    'make-model-packaging-description))
 (common-lisp:defun make-model-packaging-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-timestamp creation-timestamp
                     status-message status model-packaging-output-details
                     model-packaging-method model-packaging-job-description
                     model-packaging-configuration model-version project-name
                     job-name)
   (common-lisp:apply #'common-lisp:make-instance 'model-packaging-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-configuration))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-job-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingJobDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-method))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-output-details))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingOutputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-description))
   common-lisp:nil))
(common-lisp:deftype model-packaging-job-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-packaging-job-metadata common-lisp:nil
                       ((last-updated-timestamp :initarg
                         :last-updated-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %model-packaging-job-metadata-last-updated-timestamp
                         :initform common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %model-packaging-job-metadata-creation-timestamp
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or model-packaging-status-message
                                         common-lisp:null)
                         :accessor %model-packaging-job-metadata-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or model-packaging-job-status
                                         common-lisp:null)
                         :accessor %model-packaging-job-metadata-status
                         :initform common-lisp:nil)
                        (model-packaging-method :initarg
                         :model-packaging-method :type
                         (common-lisp:or model-packaging-method
                                         common-lisp:null)
                         :accessor
                         %model-packaging-job-metadata-model-packaging-method
                         :initform common-lisp:nil)
                        (model-packaging-job-description :initarg
                         :model-packaging-job-description :type
                         (common-lisp:or model-packaging-job-description
                                         common-lisp:null)
                         :accessor
                         %model-packaging-job-metadata-model-packaging-job-description
                         :initform common-lisp:nil)
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %model-packaging-job-metadata-model-version
                         :initform common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %model-packaging-job-metadata-project-name
                         :initform common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor %model-packaging-job-metadata-job-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-packaging-job-metadata
                    'make-model-packaging-job-metadata))
 (common-lisp:defun make-model-packaging-job-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-timestamp creation-timestamp
                     status-message status model-packaging-method
                     model-packaging-job-description model-version project-name
                     job-name)
   (common-lisp:apply #'common-lisp:make-instance 'model-packaging-job-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-job-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-job-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-job-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingJobDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-packaging-method))
      (common-lisp:list
       (common-lisp:cons "ModelPackagingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-job-metadata))
   common-lisp:nil))
(common-lisp:deftype model-packaging-job-name () 'common-lisp:string)
(common-lisp:deftype model-packaging-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype model-packaging-jobs-list ()
   '(trivial-types:proper-list model-packaging-job-metadata))
 (common-lisp:defun |make-model-packaging-jobs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-packaging-job-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype model-packaging-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-packaging-output-details common-lisp:nil
                       ((greengrass :initarg :greengrass :type
                         (common-lisp:or greengrass-output-details
                                         common-lisp:null)
                         :accessor %model-packaging-output-details-greengrass
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-packaging-output-details
                    'make-model-packaging-output-details))
 (common-lisp:defun make-model-packaging-output-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key greengrass)
   (common-lisp:apply #'common-lisp:make-instance
                      'model-packaging-output-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-output-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-output-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass))
      (common-lisp:list
       (common-lisp:cons "Greengrass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-packaging-output-details))
   common-lisp:nil))
(common-lisp:deftype model-packaging-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-performance common-lisp:nil
                       ((precision :initarg :precision :type
                         (common-lisp:or float common-lisp:null) :accessor
                         %model-performance-precision :initform
                         common-lisp:nil)
                        (recall :initarg :recall :type
                         (common-lisp:or float common-lisp:null) :accessor
                         %model-performance-recall :initform common-lisp:nil)
                        (f1score :initarg :f1score :type
                         (common-lisp:or float common-lisp:null) :accessor
                         %model-performance-f1score :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-performance 'make-model-performance))
 (common-lisp:defun make-model-performance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key precision recall f1score)
   (common-lisp:apply #'common-lisp:make-instance 'model-performance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'f1score))
      (common-lisp:list
       (common-lisp:cons "F1Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recall))
      (common-lisp:list
       (common-lisp:cons "Recall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "Precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-performance))
   common-lisp:nil))
(common-lisp:deftype model-status () 'common-lisp:string)
(common-lisp:deftype model-status-message () 'common-lisp:string)
(common-lisp:deftype model-version () 'common-lisp:string)
(common-lisp:deftype model-version-no-latest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-config common-lisp:nil
                       ((s3location :initarg :s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %output-config-s3location :initform
                         (common-lisp:error ":s3location is required"))))
 (common-lisp:export (common-lisp:list 'output-config 'make-output-config))
 (common-lisp:defun make-output-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3location)
   (common-lisp:apply #'common-lisp:make-instance 'output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "S3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-s3object common-lisp:nil
                       ((key :initarg :key :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor %output-s3object-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %output-s3object-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export (common-lisp:list 'output-s3object 'make-output-s3object))
 (common-lisp:defun make-output-s3object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'output-s3object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-s3object))
   common-lisp:nil))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pixel-anomaly common-lisp:nil
                       ((color :initarg :color :type
                         (common-lisp:or color common-lisp:null) :accessor
                         %pixel-anomaly-color :initform common-lisp:nil)
                        (total-percentage-area :initarg :total-percentage-area
                         :type (common-lisp:or float common-lisp:null)
                         :accessor %pixel-anomaly-total-percentage-area
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'pixel-anomaly 'make-pixel-anomaly))
 (common-lisp:defun make-pixel-anomaly
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key color total-percentage-area)
   (common-lisp:apply #'common-lisp:make-instance 'pixel-anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pixel-anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pixel-anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-percentage-area))
      (common-lisp:list
       (common-lisp:cons "TotalPercentageArea"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pixel-anomaly))
   common-lisp:nil))
(common-lisp:deftype project-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass project-description common-lisp:nil
                       ((datasets :initarg :datasets :type
                         (common-lisp:or dataset-metadata-list
                                         common-lisp:null)
                         :accessor %project-description-datasets :initform
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %project-description-creation-timestamp :initform
                         common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %project-description-project-name :initform
                         common-lisp:nil)
                        (project-arn :initarg :project-arn :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor %project-description-project-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'project-description 'make-project-description))
 (common-lisp:defun make-project-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key datasets creation-timestamp project-name
                     project-arn)
   (common-lisp:apply #'common-lisp:make-instance 'project-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasets))
      (common-lisp:list
       (common-lisp:cons "Datasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass project-metadata common-lisp:nil
                       ((creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %project-metadata-creation-timestamp :initform
                         common-lisp:nil)
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %project-metadata-project-name :initform
                         common-lisp:nil)
                        (project-arn :initarg :project-arn :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor %project-metadata-project-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'project-metadata 'make-project-metadata))
 (common-lisp:defun make-project-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-timestamp project-name
                     project-arn)
   (common-lisp:apply #'common-lisp:make-instance 'project-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-metadata-list ()
   '(trivial-types:proper-list project-metadata))
 (common-lisp:defun |make-project-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor %s3location-prefix :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3location-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:defclass start-model-packaging-job-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-model-packaging-job-request-client-token
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or model-packaging-job-description
                                         common-lisp:null)
                         :accessor
                         %start-model-packaging-job-request-description
                         :initform common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or model-packaging-configuration
                                         common-lisp:null)
                         :accessor
                         %start-model-packaging-job-request-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))
                        (job-name :initarg :job-name :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor %start-model-packaging-job-request-job-name
                         :initform common-lisp:nil)
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         %start-model-packaging-job-request-model-version
                         :initform
                         (common-lisp:error ":model-version is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor
                         %start-model-packaging-job-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-model-packaging-job-request
                    'make-start-model-packaging-job-request))
 (common-lisp:defun make-start-model-packaging-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token description configuration
                     job-name model-version project-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-model-packaging-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-model-packaging-job-response common-lisp:nil
                       ((job-name :initarg :job-name :type
                         (common-lisp:or model-packaging-job-name
                                         common-lisp:null)
                         :accessor %start-model-packaging-job-response-job-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-model-packaging-job-response
                    'make-start-model-packaging-job-response))
 (common-lisp:defun make-start-model-packaging-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-model-packaging-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-model-packaging-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-model-request common-lisp:nil
                       ((max-inference-units :initarg :max-inference-units
                         :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor %start-model-request-max-inference-units
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %start-model-request-client-token :initform
                         common-lisp:nil)
                        (min-inference-units :initarg :min-inference-units
                         :type
                         (common-lisp:or inference-units common-lisp:null)
                         :accessor %start-model-request-min-inference-units
                         :initform
                         (common-lisp:error
                          ":min-inference-units is required"))
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %start-model-request-model-version :initform
                         (common-lisp:error ":model-version is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %start-model-request-project-name :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-model-request 'make-start-model-request))
 (common-lisp:defun make-start-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-inference-units client-token
                     min-inference-units model-version project-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-inference-units))
      (common-lisp:list
       (common-lisp:cons "MinInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-inference-units))
      (common-lisp:list
       (common-lisp:cons "MaxInferenceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-model-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or model-hosting-status common-lisp:null)
                         :accessor %start-model-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-model-response 'make-start-model-response))
 (common-lisp:defun make-start-model-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'start-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-model-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %stop-model-request-client-token :initform
                         common-lisp:nil)
                        (model-version :initarg :model-version :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor %stop-model-request-model-version :initform
                         (common-lisp:error ":model-version is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %stop-model-request-project-name :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-model-request 'make-stop-model-request))
 (common-lisp:defun make-stop-model-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token model-version project-name)
   (common-lisp:apply #'common-lisp:make-instance 'stop-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-model-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or model-hosting-status common-lisp:null)
                         :accessor %stop-model-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-model-response 'make-stop-model-response))
 (common-lisp:defun make-stop-model-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'stop-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-model-response))
   common-lisp:nil))
(common-lisp:deftype stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-arn () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-device () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-platform common-lisp:nil
                       ((accelerator :initarg :accelerator :type
                         (common-lisp:or target-platform-accelerator
                                         common-lisp:null)
                         :accessor %target-platform-accelerator :initform
                         common-lisp:nil)
                        (arch :initarg :arch :type
                         (common-lisp:or target-platform-arch common-lisp:null)
                         :accessor %target-platform-arch :initform
                         (common-lisp:error ":arch is required"))
                        (os :initarg :os :type
                         (common-lisp:or target-platform-os common-lisp:null)
                         :accessor %target-platform-os :initform
                         (common-lisp:error ":os is required"))))
 (common-lisp:export (common-lisp:list 'target-platform 'make-target-platform))
 (common-lisp:defun make-target-platform
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accelerator arch os)
   (common-lisp:apply #'common-lisp:make-instance 'target-platform
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "Os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arch))
      (common-lisp:list
       (common-lisp:cons "Arch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-platform))
   common-lisp:nil))
(common-lisp:deftype target-platform-accelerator () 'common-lisp:string)
(common-lisp:deftype target-platform-arch () 'common-lisp:string)
(common-lisp:deftype target-platform-os () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or tag-arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-entries-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-dataset-entries-request-client-token
                         :initform common-lisp:nil)
                        (changes :initarg :changes :type
                         (common-lisp:or dataset-changes common-lisp:null)
                         :accessor %update-dataset-entries-request-changes
                         :initform (common-lisp:error ":changes is required"))
                        (dataset-type :initarg :dataset-type :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor %update-dataset-entries-request-dataset-type
                         :initform
                         (common-lisp:error ":dataset-type is required"))
                        (project-name :initarg :project-name :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %update-dataset-entries-request-project-name
                         :initform
                         (common-lisp:error ":project-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-dataset-entries-request
                    'make-update-dataset-entries-request))
 (common-lisp:defun make-update-dataset-entries-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token changes dataset-type
                     project-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dataset-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amzn-Client-Token"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changes))
      (common-lisp:list
       (common-lisp:cons "Changes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-entries-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or dataset-status common-lisp:null)
                         :accessor %update-dataset-entries-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-dataset-entries-response
                    'make-update-dataset-entries-response))
 (common-lisp:defun make-update-dataset-entries-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dataset-entries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (lookoutvision-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type dataset-source
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name dataset-type dataset-source
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "CreateDataset"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dataset))
(common-lisp:progn
 (common-lisp:defun create-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name description client-token
                     output-config kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable project-name description client-token output-config
     kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "CreateModel"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name client-token)
   (common-lisp:declare (common-lisp:ignorable project-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2020-11-20/projects"
                                                        "CreateProject"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name dataset-type client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-type))))
                                                        "DeleteDataset"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun delete-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "DeleteModel"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name client-token)
   (common-lisp:declare (common-lisp:ignorable project-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "DeleteProject"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun describe-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type)
   (common-lisp:declare (common-lisp:ignorable project-name dataset-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-type))))
                                                        "DescribeDataset"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dataset))
(common-lisp:progn
 (common-lisp:defun describe-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version)
   (common-lisp:declare (common-lisp:ignorable project-name model-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "DescribeModel"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model))
(common-lisp:progn
 (common-lisp:defun describe-model-packaging-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name job-name)
   (common-lisp:declare (common-lisp:ignorable project-name job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-model-packaging-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/modelpackagingjobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-name))))
                                                        "DescribeModelPackagingJob"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-packaging-job))
(common-lisp:progn
 (common-lisp:defun describe-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name)
   (common-lisp:declare (common-lisp:ignorable project-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "DescribeProject"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-project))
(common-lisp:progn
 (common-lisp:defun detect-anomalies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version body
                     content-type)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version body content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-anomalies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A/detect"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "DetectAnomalies"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detect-anomalies))
(common-lisp:progn
 (common-lisp:defun list-dataset-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type labeled
                     anomaly-class before-creation-date after-creation-date
                     next-token max-results source-ref-contains)
   (common-lisp:declare
    (common-lisp:ignorable project-name dataset-type labeled anomaly-class
     before-creation-date after-creation-date next-token max-results
     source-ref-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dataset-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets/~A/entries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-type))))
                                                        "ListDatasetEntries"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dataset-entries))
(common-lisp:progn
 (common-lisp:defun list-model-packaging-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-model-packaging-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/modelpackagingjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "ListModelPackagingJobs"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-packaging-jobs))
(common-lisp:progn
 (common-lisp:defun list-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "ListModels"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-models))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2020-11-20/projects"
                                                        "ListProjects"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version
                     min-inference-units client-token max-inference-units)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version min-inference-units
     client-token max-inference-units))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "StartModel"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-model))
(common-lisp:progn
 (common-lisp:defun start-model-packaging-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version job-name
                     configuration description client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version job-name configuration
     description client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-model-packaging-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/modelpackagingjobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))))
                                                        "StartModelPackagingJob"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-model-packaging-job))
(common-lisp:progn
 (common-lisp:defun stop-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name model-version client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name model-version client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/models/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'model-version))))
                                                        "StopModel"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-model))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-dataset-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name dataset-type changes
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-name dataset-type changes client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dataset-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lookoutvision-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-11-20/projects/~A/datasets/~A/entries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-type))))
                                                        "UpdateDatasetEntries"
                                                        "2020-11-20"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dataset-entries))
