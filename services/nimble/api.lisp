;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/nimble/api
  (:use)
  (:nicknames #:aws/nimble)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/nimble/api)
(common-lisp:progn
 (common-lisp:defclass nimble-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "nimble" :protocol
                        :rest-json))
 (common-lisp:export 'nimble-request))
(common-lisp:progn
 (common-lisp:define-condition nimble-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'nimble-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-eulas-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %accept-eulas-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (eula-ids :initarg :|eulaIds| :type
                         (common-lisp:or eula-id-list common-lisp:null)
                         :accessor %accept-eulas-request-eula-ids :initform
                         common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %accept-eulas-request-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-eulas-request 'make-accept-eulas-request))
 (common-lisp:defun make-accept-eulas-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id eula-ids client-token)
   (common-lisp:apply #'common-lisp:make-instance 'accept-eulas-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-ids))
      (common-lisp:list
       (common-lisp:cons "eulaIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-eulas-response common-lisp:nil
                       ((eula-acceptances :initarg :|eulaAcceptances| :type
                         (common-lisp:or eula-acceptance-list common-lisp:null)
                         :accessor %accept-eulas-response-eula-acceptances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-eulas-response 'make-accept-eulas-response))
 (common-lisp:defun make-accept-eulas-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key eula-acceptances)
   (common-lisp:apply #'common-lisp:make-instance 'accept-eulas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptances))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (nimble-error)
     ((code :initarg :|code| :initform common-lisp:nil :reader
       access-denied-exception-code)
      (context :initarg :|context| :initform common-lisp:nil :reader
       access-denied-exception-context)
      (message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-context
                    'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass active-directory-computer-attribute common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or
                          active-directory-computer-attribute-value
                          common-lisp:null)
                         :accessor %active-directory-computer-attribute-value
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or
                          active-directory-computer-attribute-name
                          common-lisp:null)
                         :accessor %active-directory-computer-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'active-directory-computer-attribute
                    'make-active-directory-computer-attribute))
 (common-lisp:defun make-active-directory-computer-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'active-directory-computer-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-directory-computer-attribute-list ()
   '(trivial-types:proper-list active-directory-computer-attribute))
 (common-lisp:defun |make-active-directory-computer-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            active-directory-computer-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype active-directory-computer-attribute-name ()
  'common-lisp:string)
(common-lisp:deftype active-directory-computer-attribute-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass active-directory-configuration common-lisp:nil
                       ((organizational-unit-distinguished-name :initarg
                         :|organizationalUnitDistinguishedName| :type
                         (common-lisp:or
                          active-directory-organizational-unit-distinguished-name
                          common-lisp:null)
                         :accessor
                         %active-directory-configuration-organizational-unit-distinguished-name
                         :initform common-lisp:nil)
                        (directory-id :initarg :|directoryId| :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %active-directory-configuration-directory-id
                         :initform common-lisp:nil)
                        (computer-attributes :initarg :|computerAttributes|
                         :type
                         (common-lisp:or
                          active-directory-computer-attribute-list
                          common-lisp:null)
                         :accessor
                         %active-directory-configuration-computer-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'active-directory-configuration
                    'make-active-directory-configuration))
 (common-lisp:defun make-active-directory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit-distinguished-name
                     directory-id computer-attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'active-directory-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "computerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "directoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "organizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   common-lisp:nil))
(common-lisp:deftype active-directory-dns-ip-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype active-directory-dns-ip-address-list ()
   '(trivial-types:proper-list active-directory-dns-ip-address))
 (common-lisp:defun |make-active-directory-dns-ip-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            active-directory-dns-ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype active-directory-organizational-unit-distinguished-name ()
  'common-lisp:string)
(common-lisp:deftype automatic-termination-mode () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compute-farm-configuration common-lisp:nil
                       ((endpoint :initarg :|endpoint| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %compute-farm-configuration-endpoint
                         :initform common-lisp:nil)
                        (active-directory-user :initarg :|activeDirectoryUser|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %compute-farm-configuration-active-directory-user
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compute-farm-configuration
                    'make-compute-farm-configuration))
 (common-lisp:defun make-compute-farm-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint active-directory-user)
   (common-lisp:apply #'common-lisp:make-instance 'compute-farm-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-user))
      (common-lisp:list
       (common-lisp:cons "activeDirectoryUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (nimble-error)
     ((code :initarg :|code| :initform common-lisp:nil :reader
       conflict-exception-code)
      (context :initarg :|context| :initform common-lisp:nil :reader
       conflict-exception-context)
      (message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-context 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-launch-profile-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-launch-profile-request-tags :initform
                         common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-launch-profile-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (studio-component-ids :initarg :|studioComponentIds|
                         :type
                         (common-lisp:or
                          launch-profile-studio-component-id-list
                          common-lisp:null)
                         :accessor
                         %create-launch-profile-request-studio-component-ids
                         :initform
                         (common-lisp:error ":studiocomponentids is required"))
                        (stream-configuration :initarg :|streamConfiguration|
                         :type
                         (common-lisp:or stream-configuration-create
                                         common-lisp:null)
                         :accessor
                         %create-launch-profile-request-stream-configuration
                         :initform
                         (common-lisp:error
                          ":streamconfiguration is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or launch-profile-name common-lisp:null)
                         :accessor %create-launch-profile-request-name
                         :initform (common-lisp:error ":name is required"))
                        (launch-profile-protocol-versions :initarg
                         :|launchProfileProtocolVersions| :type
                         (common-lisp:or launch-profile-protocol-version-list
                                         common-lisp:null)
                         :accessor
                         %create-launch-profile-request-launch-profile-protocol-versions
                         :initform
                         (common-lisp:error
                          ":launchprofileprotocolversions is required"))
                        (ec2subnet-ids :initarg :|ec2SubnetIds| :type
                         (common-lisp:or ec2subnet-id-list common-lisp:null)
                         :accessor %create-launch-profile-request-ec2subnet-ids
                         :initform
                         (common-lisp:error ":ec2subnetids is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or launch-profile-description
                                         common-lisp:null)
                         :accessor %create-launch-profile-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-launch-profile-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-launch-profile-request
                    'make-create-launch-profile-request))
 (common-lisp:defun make-create-launch-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags studio-id studio-component-ids
                     stream-configuration name launch-profile-protocol-versions
                     ec2subnet-ids description client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-launch-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-launch-profile-response common-lisp:nil
                       ((launch-profile :initarg :|launchProfile| :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         %create-launch-profile-response-launch-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-launch-profile-response
                    'make-create-launch-profile-response))
 (common-lisp:defun make-create-launch-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-launch-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-image-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-streaming-image-request-tags :initform
                         common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-image-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or streaming-image-name common-lisp:null)
                         :accessor %create-streaming-image-request-name
                         :initform (common-lisp:error ":name is required"))
                        (ec2image-id :initarg :|ec2ImageId| :type
                         (common-lisp:or ec2image-id common-lisp:null)
                         :accessor %create-streaming-image-request-ec2image-id
                         :initform
                         (common-lisp:error ":ec2imageid is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or streaming-image-description
                                         common-lisp:null)
                         :accessor %create-streaming-image-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-streaming-image-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-image-request
                    'make-create-streaming-image-request))
 (common-lisp:defun make-create-streaming-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags studio-id name ec2image-id
                     description client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2image-id))
      (common-lisp:list
       (common-lisp:cons "ec2ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-image-response common-lisp:nil
                       ((streaming-image :initarg :|streamingImage| :type
                         (common-lisp:or streaming-image common-lisp:null)
                         :accessor
                         %create-streaming-image-response-streaming-image
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-image-response
                    'make-create-streaming-image-response))
 (common-lisp:defun make-create-streaming-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-image)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-session-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-streaming-session-request-tags :initform
                         common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-session-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (streaming-image-id :initarg :|streamingImageId| :type
                         (common-lisp:or streaming-image-id common-lisp:null)
                         :accessor
                         %create-streaming-session-request-streaming-image-id
                         :initform common-lisp:nil)
                        (owned-by :initarg :|ownedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-session-request-owned-by :initform
                         common-lisp:nil)
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-session-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))
                        (ec2instance-type :initarg :|ec2InstanceType| :type
                         (common-lisp:or streaming-instance-type
                                         common-lisp:null)
                         :accessor
                         %create-streaming-session-request-ec2instance-type
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-streaming-session-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-request
                    'make-create-streaming-session-request))
 (common-lisp:defun make-create-streaming-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags studio-id streaming-image-id
                     owned-by launch-profile-id ec2instance-type client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-session-response common-lisp:nil
                       ((session :initarg :|session| :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor %create-streaming-session-response-session
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-response
                    'make-create-streaming-session-response))
 (common-lisp:defun make-create-streaming-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-session-stream-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-session-stream-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-session-stream-request-session-id
                         :initform
                         (common-lisp:error ":sessionid is required"))
                        (expiration-in-seconds :initarg :|expirationInSeconds|
                         :type
                         (common-lisp:or
                          streaming-session-stream-expiration-in-seconds
                          common-lisp:null)
                         :accessor
                         %create-streaming-session-stream-request-expiration-in-seconds
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-streaming-session-stream-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-stream-request
                    'make-create-streaming-session-stream-request))
 (common-lisp:defun make-create-streaming-session-stream-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id session-id
                     expiration-in-seconds client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-session-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expiration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "expirationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-session-stream-response common-lisp:nil
                       ((stream :initarg :|stream| :type
                         (common-lisp:or streaming-session-stream
                                         common-lisp:null)
                         :accessor
                         %create-streaming-session-stream-response-stream
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-stream-response
                    'make-create-streaming-session-stream-response))
 (common-lisp:defun make-create-streaming-session-stream-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-session-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-component-request common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or studio-component-type
                                         common-lisp:null)
                         :accessor %create-studio-component-request-type
                         :initform (common-lisp:error ":type is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-studio-component-request-tags :initform
                         common-lisp:nil)
                        (subtype :initarg :|subtype| :type
                         (common-lisp:or studio-component-subtype
                                         common-lisp:null)
                         :accessor %create-studio-component-request-subtype
                         :initform common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-studio-component-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (secure-initialization-role-arn :initarg
                         :|secureInitializationRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-studio-component-request-secure-initialization-role-arn
                         :initform common-lisp:nil)
                        (script-parameters :initarg :|scriptParameters| :type
                         (common-lisp:or
                          studio-component-script-parameter-key-value-list
                          common-lisp:null)
                         :accessor
                         %create-studio-component-request-script-parameters
                         :initform common-lisp:nil)
                        (runtime-role-arn :initarg :|runtimeRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-studio-component-request-runtime-role-arn
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor %create-studio-component-request-name
                         :initform (common-lisp:error ":name is required"))
                        (initialization-scripts :initarg
                         :|initializationScripts| :type
                         (common-lisp:or
                          studio-component-initialization-script-list
                          common-lisp:null)
                         :accessor
                         %create-studio-component-request-initialization-scripts
                         :initform common-lisp:nil)
                        (ec2security-group-ids :initarg :|ec2SecurityGroupIds|
                         :type
                         (common-lisp:or
                          studio-component-security-group-id-list
                          common-lisp:null)
                         :accessor
                         %create-studio-component-request-ec2security-group-ids
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or studio-component-description
                                         common-lisp:null)
                         :accessor %create-studio-component-request-description
                         :initform common-lisp:nil)
                        (configuration :initarg :|configuration| :type
                         (common-lisp:or studio-component-configuration
                                         common-lisp:null)
                         :accessor
                         %create-studio-component-request-configuration
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-studio-component-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-studio-component-request
                    'make-create-studio-component-request))
 (common-lisp:defun make-create-studio-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type tags subtype studio-id
                     secure-initialization-role-arn script-parameters
                     runtime-role-arn name initialization-scripts
                     ec2security-group-ids description configuration
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-studio-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-component-response common-lisp:nil
                       ((studio-component :initarg :|studioComponent| :type
                         (common-lisp:or studio-component common-lisp:null)
                         :accessor
                         %create-studio-component-response-studio-component
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-studio-component-response
                    'make-create-studio-component-response))
 (common-lisp:defun make-create-studio-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-component)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-studio-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-request common-lisp:nil
                       ((user-role-arn :initarg :|userRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-studio-request-user-role-arn :initform
                         (common-lisp:error ":userrolearn is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-studio-request-tags :initform common-lisp:nil)
                        (studio-name :initarg :|studioName| :type
                         (common-lisp:or studio-name common-lisp:null)
                         :accessor %create-studio-request-studio-name :initform
                         (common-lisp:error ":studioname is required"))
                        (studio-encryption-configuration :initarg
                         :|studioEncryptionConfiguration| :type
                         (common-lisp:or studio-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %create-studio-request-studio-encryption-configuration
                         :initform common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or studio-display-name common-lisp:null)
                         :accessor %create-studio-request-display-name
                         :initform
                         (common-lisp:error ":displayname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-studio-request-client-token
                         :initform common-lisp:nil)
                        (admin-role-arn :initarg :|adminRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-studio-request-admin-role-arn :initform
                         (common-lisp:error ":adminrolearn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-studio-request 'make-create-studio-request))
 (common-lisp:defun make-create-studio-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-role-arn tags studio-name
                     studio-encryption-configuration display-name client-token
                     admin-role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-studio-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "studioEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-name))
      (common-lisp:list
       (common-lisp:cons "studioName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-studio-response common-lisp:nil
                       ((studio :initarg :|studio| :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         %create-studio-response-studio :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-studio-response 'make-create-studio-response))
 (common-lisp:defun make-create-studio-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio)
   (common-lisp:apply #'common-lisp:make-instance 'create-studio-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-profile-member-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-launch-profile-member-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-launch-profile-member-request-principal-id
                         :initform
                         (common-lisp:error ":principalid is required"))
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-launch-profile-member-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %delete-launch-profile-member-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-member-request
                    'make-delete-launch-profile-member-request))
 (common-lisp:defun make-delete-launch-profile-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id principal-id launch-profile-id
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-profile-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-profile-member-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-member-response
                    'make-delete-launch-profile-member-response))
 (common-lisp:defun make-delete-launch-profile-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-profile-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-profile-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-launch-profile-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-launch-profile-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-launch-profile-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-request
                    'make-delete-launch-profile-request))
 (common-lisp:defun make-delete-launch-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id launch-profile-id client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-profile-response common-lisp:nil
                       ((launch-profile :initarg :|launchProfile| :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         %delete-launch-profile-response-launch-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-response
                    'make-delete-launch-profile-response))
 (common-lisp:defun make-delete-launch-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-image-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-streaming-image-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (streaming-image-id :initarg :|streamingImageId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-streaming-image-request-streaming-image-id
                         :initform
                         (common-lisp:error ":streamingimageid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-streaming-image-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-image-request
                    'make-delete-streaming-image-request))
 (common-lisp:defun make-delete-streaming-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id streaming-image-id
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-image-response common-lisp:nil
                       ((streaming-image :initarg :|streamingImage| :type
                         (common-lisp:or streaming-image common-lisp:null)
                         :accessor
                         %delete-streaming-image-response-streaming-image
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-image-response
                    'make-delete-streaming-image-response))
 (common-lisp:defun make-delete-streaming-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-image)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-session-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-streaming-session-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-streaming-session-request-session-id :initform
                         (common-lisp:error ":sessionid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %delete-streaming-session-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-session-request
                    'make-delete-streaming-session-request))
 (common-lisp:defun make-delete-streaming-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id session-id client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-session-response common-lisp:nil
                       ((session :initarg :|session| :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor %delete-streaming-session-response-session
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-session-response
                    'make-delete-streaming-session-response))
 (common-lisp:defun make-delete-streaming-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-component-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-studio-component-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (studio-component-id :initarg :|studioComponentId|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-studio-component-request-studio-component-id
                         :initform
                         (common-lisp:error ":studiocomponentid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %delete-studio-component-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-component-request
                    'make-delete-studio-component-request))
 (common-lisp:defun make-delete-studio-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id studio-component-id
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-studio-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-component-response common-lisp:nil
                       ((studio-component :initarg :|studioComponent| :type
                         (common-lisp:or studio-component common-lisp:null)
                         :accessor
                         %delete-studio-component-response-studio-component
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-component-response
                    'make-delete-studio-component-response))
 (common-lisp:defun make-delete-studio-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-component)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-studio-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-member-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-studio-member-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-studio-member-request-principal-id :initform
                         (common-lisp:error ":principalid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-studio-member-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-member-request
                    'make-delete-studio-member-request))
 (common-lisp:defun make-delete-studio-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id principal-id client-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-studio-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-member-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-studio-member-response
                    'make-delete-studio-member-response))
 (common-lisp:defun make-delete-studio-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-studio-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-studio-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %delete-studio-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-request 'make-delete-studio-request))
 (common-lisp:defun make-delete-studio-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id client-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-studio-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-studio-response common-lisp:nil
                       ((studio :initarg :|studio| :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         %delete-studio-response-studio :initform
                         (common-lisp:error ":studio is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-studio-response 'make-delete-studio-response))
 (common-lisp:defun make-delete-studio-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio)
   (common-lisp:apply #'common-lisp:make-instance 'delete-studio-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   common-lisp:nil))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:deftype ec2image-id () 'common-lisp:string)
(common-lisp:deftype ec2subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ec2subnet-id-list ()
   '(trivial-types:proper-list ec2subnet-id))
 (common-lisp:defun |make-ec2subnet-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass eula common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %eula-updated-at :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or eula-name common-lisp:null) :accessor
                         %eula-name :initform common-lisp:nil)
                        (eula-id :initarg :|eulaId| :type
                         (common-lisp:or eula-id common-lisp:null) :accessor
                         %eula-eula-id :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %eula-created-at :initform common-lisp:nil)
                        (content :initarg :|content| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %eula-content :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'eula 'make-eula))
 (common-lisp:defun make-eula
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at name eula-id created-at
                     content)
   (common-lisp:apply #'common-lisp:make-instance 'eula
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eula))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eula))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-id))
      (common-lisp:list
       (common-lisp:cons "eulaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eula))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass eula-acceptance common-lisp:nil
                       ((eula-id :initarg :|eulaId| :type
                         (common-lisp:or eula-id common-lisp:null) :accessor
                         %eula-acceptance-eula-id :initform common-lisp:nil)
                        (eula-acceptance-id :initarg :|eulaAcceptanceId| :type
                         (common-lisp:or eula-acceptance-id common-lisp:null)
                         :accessor %eula-acceptance-eula-acceptance-id
                         :initform common-lisp:nil)
                        (acceptee-id :initarg :|accepteeId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %eula-acceptance-acceptee-id :initform
                         common-lisp:nil)
                        (accepted-by :initarg :|acceptedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %eula-acceptance-accepted-by :initform
                         common-lisp:nil)
                        (accepted-at :initarg :|acceptedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %eula-acceptance-accepted-at :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'eula-acceptance 'make-eula-acceptance))
 (common-lisp:defun make-eula-acceptance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key eula-id eula-acceptance-id acceptee-id
                     accepted-by accepted-at)
   (common-lisp:apply #'common-lisp:make-instance 'eula-acceptance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eula-acceptance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eula-acceptance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted-at))
      (common-lisp:list
       (common-lisp:cons "acceptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted-by))
      (common-lisp:list
       (common-lisp:cons "acceptedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptee-id))
      (common-lisp:list
       (common-lisp:cons "accepteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptance-id))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-id))
      (common-lisp:list
       (common-lisp:cons "eulaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eula-acceptance))
   common-lisp:nil))
(common-lisp:deftype eula-acceptance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eula-acceptance-list ()
   '(trivial-types:proper-list eula-acceptance))
 (common-lisp:defun |make-eula-acceptance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eula-acceptance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype eula-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eula-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-eula-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype eula-list () '(trivial-types:proper-list eula))
 (common-lisp:defun |make-eula-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eula))
   aws-sdk/generator/shape::members))
(common-lisp:deftype eula-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exception-context () 'common-lisp:hash-table)
 (common-lisp:defun |make-exception-context|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass get-eula-request common-lisp:nil
                       ((eula-id :initarg :|eulaId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-eula-request-eula-id :initform
                         (common-lisp:error ":eulaid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-eula-request 'make-get-eula-request))
 (common-lisp:defun make-get-eula-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key eula-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-eula-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-eula-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-eula-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-eula-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-eula-response common-lisp:nil
                       ((eula :initarg :|eula| :type
                         (common-lisp:or eula common-lisp:null) :accessor
                         %get-eula-response-eula :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-eula-response 'make-get-eula-response))
 (common-lisp:defun make-get-eula-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key eula)
   (common-lisp:apply #'common-lisp:make-instance 'get-eula-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-eula-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-eula-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula))
      (common-lisp:list
       (common-lisp:cons "eula"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-eula-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-details-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-details-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-details-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-details-request
                    'make-get-launch-profile-details-request))
 (common-lisp:defun make-get-launch-profile-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id launch-profile-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-details-response common-lisp:nil
                       ((studio-component-summaries :initarg
                         :|studioComponentSummaries| :type
                         (common-lisp:or studio-component-summary-list
                                         common-lisp:null)
                         :accessor
                         %get-launch-profile-details-response-studio-component-summaries
                         :initform common-lisp:nil)
                        (streaming-images :initarg :|streamingImages| :type
                         (common-lisp:or streaming-image-list common-lisp:null)
                         :accessor
                         %get-launch-profile-details-response-streaming-images
                         :initform common-lisp:nil)
                        (launch-profile :initarg :|launchProfile| :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         %get-launch-profile-details-response-launch-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-details-response
                    'make-get-launch-profile-details-response))
 (common-lisp:defun make-get-launch-profile-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-component-summaries
                     streaming-images launch-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-images))
      (common-lisp:list
       (common-lisp:cons "streamingImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-summaries))
      (common-lisp:list
       (common-lisp:cons "studioComponentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-initialization-request
                       common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-initialization-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (platform :initarg :|platform| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-initialization-request-platform
                         :initform (common-lisp:error ":platform is required"))
                        (launch-purpose :initarg :|launchPurpose| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-initialization-request-launch-purpose
                         :initform
                         (common-lisp:error ":launchpurpose is required"))
                        (launch-profile-protocol-versions :initarg
                         :|launchProfileProtocolVersions| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %get-launch-profile-initialization-request-launch-profile-protocol-versions
                         :initform
                         (common-lisp:error
                          ":launchprofileprotocolversions is required"))
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-initialization-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-initialization-request
                    'make-get-launch-profile-initialization-request))
 (common-lisp:defun make-get-launch-profile-initialization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id platform launch-purpose
                     launch-profile-protocol-versions launch-profile-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-initialization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-initialization-response
                       common-lisp:nil
                       ((launch-profile-initialization :initarg
                         :|launchProfileInitialization| :type
                         (common-lisp:or launch-profile-initialization
                                         common-lisp:null)
                         :accessor
                         %get-launch-profile-initialization-response-launch-profile-initialization
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-initialization-response
                    'make-get-launch-profile-initialization-response))
 (common-lisp:defun make-get-launch-profile-initialization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-profile-initialization)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-initialization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-initialization))
      (common-lisp:list
       (common-lisp:cons "launchProfileInitialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-member-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-member-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-member-request-principal-id
                         :initform
                         (common-lisp:error ":principalid is required"))
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-member-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-member-request
                    'make-get-launch-profile-member-request))
 (common-lisp:defun make-get-launch-profile-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id principal-id launch-profile-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-member-response common-lisp:nil
                       ((member :initarg :|member| :type
                         (common-lisp:or launch-profile-membership
                                         common-lisp:null)
                         :accessor %get-launch-profile-member-response-member
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-member-response
                    'make-get-launch-profile-member-response))
 (common-lisp:defun make-get-launch-profile-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-profile-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-launch-profile-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-request
                    'make-get-launch-profile-request))
 (common-lisp:defun make-get-launch-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id launch-profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-launch-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-launch-profile-response common-lisp:nil
                       ((launch-profile :initarg :|launchProfile| :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor %get-launch-profile-response-launch-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-response
                    'make-get-launch-profile-response))
 (common-lisp:defun make-get-launch-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-profile)
   (common-lisp:apply #'common-lisp:make-instance 'get-launch-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-image-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-image-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (streaming-image-id :initarg :|streamingImageId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-image-request-streaming-image-id
                         :initform
                         (common-lisp:error ":streamingimageid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-streaming-image-request
                    'make-get-streaming-image-request))
 (common-lisp:defun make-get-streaming-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id streaming-image-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-streaming-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-image-response common-lisp:nil
                       ((streaming-image :initarg :|streamingImage| :type
                         (common-lisp:or streaming-image common-lisp:null)
                         :accessor
                         %get-streaming-image-response-streaming-image
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-image-response
                    'make-get-streaming-image-response))
 (common-lisp:defun make-get-streaming-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-image)
   (common-lisp:apply #'common-lisp:make-instance 'get-streaming-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-backup-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-session-backup-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (backup-id :initarg :|backupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-session-backup-request-backup-id
                         :initform
                         (common-lisp:error ":backupid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-backup-request
                    'make-get-streaming-session-backup-request))
 (common-lisp:defun make-get-streaming-session-backup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id backup-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-backup-response common-lisp:nil
                       ((streaming-session-backup :initarg
                         :|streamingSessionBackup| :type
                         (common-lisp:or streaming-session-backup
                                         common-lisp:null)
                         :accessor
                         %get-streaming-session-backup-response-streaming-session-backup
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-backup-response
                    'make-get-streaming-session-backup-response))
 (common-lisp:defun make-get-streaming-session-backup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-session-backup)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-session-backup))
      (common-lisp:list
       (common-lisp:cons "streamingSessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-session-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-session-request-session-id :initform
                         (common-lisp:error ":sessionid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-request
                    'make-get-streaming-session-request))
 (common-lisp:defun make-get-streaming-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id session-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-response common-lisp:nil
                       ((session :initarg :|session| :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor %get-streaming-session-response-session
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-response
                    'make-get-streaming-session-response))
 (common-lisp:defun make-get-streaming-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-stream-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-session-stream-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (stream-id :initarg :|streamId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-session-stream-request-stream-id
                         :initform (common-lisp:error ":streamid is required"))
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-streaming-session-stream-request-session-id
                         :initform
                         (common-lisp:error ":sessionid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-stream-request
                    'make-get-streaming-session-stream-request))
 (common-lisp:defun make-get-streaming-session-stream-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id stream-id session-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-session-stream-response common-lisp:nil
                       ((stream :initarg :|stream| :type
                         (common-lisp:or streaming-session-stream
                                         common-lisp:null)
                         :accessor
                         %get-streaming-session-stream-response-stream
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-stream-response
                    'make-get-streaming-session-stream-response))
 (common-lisp:defun make-get-streaming-session-stream-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-session-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-component-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-studio-component-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (studio-component-id :initarg :|studioComponentId|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %get-studio-component-request-studio-component-id
                         :initform
                         (common-lisp:error
                          ":studiocomponentid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-studio-component-request
                    'make-get-studio-component-request))
 (common-lisp:defun make-get-studio-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id studio-component-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-component-response common-lisp:nil
                       ((studio-component :initarg :|studioComponent| :type
                         (common-lisp:or studio-component common-lisp:null)
                         :accessor
                         %get-studio-component-response-studio-component
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-studio-component-response
                    'make-get-studio-component-response))
 (common-lisp:defun make-get-studio-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-component)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-studio-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-member-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-studio-member-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-studio-member-request-principal-id :initform
                         (common-lisp:error ":principalid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-studio-member-request
                    'make-get-studio-member-request))
 (common-lisp:defun make-get-studio-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id principal-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-member-response common-lisp:nil
                       ((member :initarg :|member| :type
                         (common-lisp:or studio-membership common-lisp:null)
                         :accessor %get-studio-member-response-member :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-studio-member-response
                    'make-get-studio-member-response))
 (common-lisp:defun make-get-studio-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-studio-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-studio-request 'make-get-studio-request))
 (common-lisp:defun make-get-studio-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-studio-response common-lisp:nil
                       ((studio :initarg :|studio| :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         %get-studio-response-studio :initform
                         (common-lisp:error ":studio is required"))))
 (common-lisp:export
  (common-lisp:list 'get-studio-response 'make-get-studio-response))
 (common-lisp:defun make-get-studio-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio)
   (common-lisp:apply #'common-lisp:make-instance 'get-studio-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (nimble-error)
     ((code :initarg :|code| :initform common-lisp:nil :reader
       internal-server-error-exception-code)
      (context :initarg :|context| :initform common-lisp:nil :reader
       internal-server-error-exception-context)
      (message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-code
                    'internal-server-error-exception-context
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass launch-profile common-lisp:nil
                       ((validation-results :initarg :|validationResults| :type
                         (common-lisp:or validation-results common-lisp:null)
                         :accessor %launch-profile-validation-results :initform
                         common-lisp:nil)
                        (updated-by :initarg :|updatedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-profile-updated-by :initform common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %launch-profile-updated-at :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %launch-profile-tags :initform common-lisp:nil)
                        (studio-component-ids :initarg :|studioComponentIds|
                         :type
                         (common-lisp:or
                          launch-profile-studio-component-id-list
                          common-lisp:null)
                         :accessor %launch-profile-studio-component-ids
                         :initform common-lisp:nil)
                        (stream-configuration :initarg :|streamConfiguration|
                         :type
                         (common-lisp:or stream-configuration common-lisp:null)
                         :accessor %launch-profile-stream-configuration
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-profile-status-message :initform
                         common-lisp:nil)
                        (status-code :initarg :|statusCode| :type
                         (common-lisp:or launch-profile-status-code
                                         common-lisp:null)
                         :accessor %launch-profile-status-code :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or launch-profile-state common-lisp:null)
                         :accessor %launch-profile-state :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or launch-profile-name common-lisp:null)
                         :accessor %launch-profile-name :initform
                         common-lisp:nil)
                        (launch-profile-protocol-versions :initarg
                         :|launchProfileProtocolVersions| :type
                         (common-lisp:or launch-profile-protocol-version-list
                                         common-lisp:null)
                         :accessor
                         %launch-profile-launch-profile-protocol-versions
                         :initform common-lisp:nil)
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or launch-profile-id common-lisp:null)
                         :accessor %launch-profile-launch-profile-id :initform
                         common-lisp:nil)
                        (ec2subnet-ids :initarg :|ec2SubnetIds| :type
                         (common-lisp:or ec2subnet-id-list common-lisp:null)
                         :accessor %launch-profile-ec2subnet-ids :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or launch-profile-description
                                         common-lisp:null)
                         :accessor %launch-profile-description :initform
                         common-lisp:nil)
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-profile-created-by :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %launch-profile-created-at :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-profile-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'launch-profile 'make-launch-profile))
 (common-lisp:defun make-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-results updated-by updated-at
                     tags studio-component-ids stream-configuration
                     status-message status-code state name
                     launch-profile-protocol-versions launch-profile-id
                     ec2subnet-ids description created-by created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'launch-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-results))
      (common-lisp:list
       (common-lisp:cons "validationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-profile))
   common-lisp:nil))
(common-lisp:deftype launch-profile-description () 'common-lisp:string)
(common-lisp:deftype launch-profile-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-profile-initialization common-lisp:nil
                       ((user-initialization-scripts :initarg
                         :|userInitializationScripts| :type
                         (common-lisp:or
                          launch-profile-initialization-script-list
                          common-lisp:null)
                         :accessor
                         %launch-profile-initialization-user-initialization-scripts
                         :initform common-lisp:nil)
                        (system-initialization-scripts :initarg
                         :|systemInitializationScripts| :type
                         (common-lisp:or
                          launch-profile-initialization-script-list
                          common-lisp:null)
                         :accessor
                         %launch-profile-initialization-system-initialization-scripts
                         :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or launch-profile-platform
                                         common-lisp:null)
                         :accessor %launch-profile-initialization-platform
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or launch-profile-name common-lisp:null)
                         :accessor %launch-profile-initialization-name
                         :initform common-lisp:nil)
                        (launch-purpose :initarg :|launchPurpose| :type
                         (common-lisp:or launch-purpose common-lisp:null)
                         :accessor
                         %launch-profile-initialization-launch-purpose
                         :initform common-lisp:nil)
                        (launch-profile-protocol-version :initarg
                         :|launchProfileProtocolVersion| :type
                         (common-lisp:or launch-profile-protocol-version
                                         common-lisp:null)
                         :accessor
                         %launch-profile-initialization-launch-profile-protocol-version
                         :initform common-lisp:nil)
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or launch-profile-id common-lisp:null)
                         :accessor
                         %launch-profile-initialization-launch-profile-id
                         :initform common-lisp:nil)
                        (ec2security-group-ids :initarg :|ec2SecurityGroupIds|
                         :type
                         (common-lisp:or launch-profile-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         %launch-profile-initialization-ec2security-group-ids
                         :initform common-lisp:nil)
                        (active-directory :initarg :|activeDirectory| :type
                         (common-lisp:or
                          launch-profile-initialization-active-directory
                          common-lisp:null)
                         :accessor
                         %launch-profile-initialization-active-directory
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization
                    'make-launch-profile-initialization))
 (common-lisp:defun make-launch-profile-initialization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-initialization-scripts
                     system-initialization-scripts platform name launch-purpose
                     launch-profile-protocol-version launch-profile-id
                     ec2security-group-ids active-directory)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-profile-initialization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-directory))
      (common-lisp:list
       (common-lisp:cons "activeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-version))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-purpose))
      (common-lisp:list
       (common-lisp:cons "launchPurpose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "systemInitializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "userInitializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-profile-initialization-active-directory
                       common-lisp:nil
                       ((studio-component-name :initarg :|studioComponentName|
                         :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor
                         %launch-profile-initialization-active-directory-studio-component-name
                         :initform common-lisp:nil)
                        (studio-component-id :initarg :|studioComponentId|
                         :type
                         (common-lisp:or studio-component-id common-lisp:null)
                         :accessor
                         %launch-profile-initialization-active-directory-studio-component-id
                         :initform common-lisp:nil)
                        (organizational-unit-distinguished-name :initarg
                         :|organizationalUnitDistinguishedName| :type
                         (common-lisp:or
                          active-directory-organizational-unit-distinguished-name
                          common-lisp:null)
                         :accessor
                         %launch-profile-initialization-active-directory-organizational-unit-distinguished-name
                         :initform common-lisp:nil)
                        (dns-ip-addresses :initarg :|dnsIpAddresses| :type
                         (common-lisp:or active-directory-dns-ip-address-list
                                         common-lisp:null)
                         :accessor
                         %launch-profile-initialization-active-directory-dns-ip-addresses
                         :initform common-lisp:nil)
                        (directory-name :initarg :|directoryName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-profile-initialization-active-directory-directory-name
                         :initform common-lisp:nil)
                        (directory-id :initarg :|directoryId| :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %launch-profile-initialization-active-directory-directory-id
                         :initform common-lisp:nil)
                        (computer-attributes :initarg :|computerAttributes|
                         :type
                         (common-lisp:or
                          active-directory-computer-attribute-list
                          common-lisp:null)
                         :accessor
                         %launch-profile-initialization-active-directory-computer-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization-active-directory
                    'make-launch-profile-initialization-active-directory))
 (common-lisp:defun make-launch-profile-initialization-active-directory
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-component-name studio-component-id
                     organizational-unit-distinguished-name dns-ip-addresses
                     directory-name directory-id computer-attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-profile-initialization-active-directory
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "computerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "directoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "directoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "dnsIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "organizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-name))
      (common-lisp:list
       (common-lisp:cons "studioComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-profile-initialization-script common-lisp:nil
                       ((studio-component-name :initarg :|studioComponentName|
                         :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor
                         %launch-profile-initialization-script-studio-component-name
                         :initform common-lisp:nil)
                        (studio-component-id :initarg :|studioComponentId|
                         :type
                         (common-lisp:or studio-component-id common-lisp:null)
                         :accessor
                         %launch-profile-initialization-script-studio-component-id
                         :initform common-lisp:nil)
                        (secure-initialization-role-arn :initarg
                         :|secureInitializationRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %launch-profile-initialization-script-secure-initialization-role-arn
                         :initform common-lisp:nil)
                        (script :initarg :|script| :type
                         (common-lisp:or
                          studio-component-initialization-script-content
                          common-lisp:null)
                         :accessor %launch-profile-initialization-script-script
                         :initform common-lisp:nil)
                        (runtime-role-arn :initarg :|runtimeRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %launch-profile-initialization-script-runtime-role-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization-script
                    'make-launch-profile-initialization-script))
 (common-lisp:defun make-launch-profile-initialization-script
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-component-name studio-component-id
                     secure-initialization-role-arn script runtime-role-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-profile-initialization-script
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-name))
      (common-lisp:list
       (common-lisp:cons "studioComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-profile-initialization-script-list ()
   '(trivial-types:proper-list launch-profile-initialization-script))
 (common-lisp:defun |make-launch-profile-initialization-script-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-initialization-script))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-profile-list ()
   '(trivial-types:proper-list launch-profile))
 (common-lisp:defun |make-launch-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass launch-profile-membership common-lisp:nil
                       ((sid :initarg :|sid| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-profile-membership-sid :initform
                         common-lisp:nil)
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-profile-membership-principal-id :initform
                         common-lisp:nil)
                        (persona :initarg :|persona| :type
                         (common-lisp:or launch-profile-persona
                                         common-lisp:null)
                         :accessor %launch-profile-membership-persona :initform
                         common-lisp:nil)
                        (identity-store-id :initarg :|identityStoreId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-profile-membership-identity-store-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-profile-membership
                    'make-launch-profile-membership))
 (common-lisp:defun make-launch-profile-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sid principal-id persona
                     identity-store-id)
   (common-lisp:apply #'common-lisp:make-instance 'launch-profile-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-profile-membership-list ()
   '(trivial-types:proper-list launch-profile-membership))
 (common-lisp:defun |make-launch-profile-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-name () 'common-lisp:string)
(common-lisp:deftype launch-profile-persona () 'common-lisp:string)
(common-lisp:deftype launch-profile-platform () 'common-lisp:string)
(common-lisp:deftype launch-profile-protocol-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-protocol-version-list ()
   '(trivial-types:proper-list launch-profile-protocol-version))
 (common-lisp:defun |make-launch-profile-protocol-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-protocol-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-profile-security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-launch-profile-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-state-list ()
   '(trivial-types:proper-list launch-profile-state))
 (common-lisp:defun |make-launch-profile-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-profile-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-studio-component-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-launch-profile-studio-component-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-validation-state () 'common-lisp:string)
(common-lisp:deftype launch-profile-validation-status-code ()
  'common-lisp:string)
(common-lisp:deftype launch-profile-validation-status-message ()
  'common-lisp:string)
(common-lisp:deftype launch-profile-validation-type () 'common-lisp:string)
(common-lisp:deftype launch-purpose () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass license-service-configuration common-lisp:nil
                       ((endpoint :initarg :|endpoint| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %license-service-configuration-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'license-service-configuration
                    'make-license-service-configuration))
 (common-lisp:defun make-license-service-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'license-service-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   common-lisp:nil))
(common-lisp:deftype linux-mount-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-eula-acceptances-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-eula-acceptances-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-eula-acceptances-request-next-token :initform
                         common-lisp:nil)
                        (eula-ids :initarg :|eulaIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-eula-acceptances-request-eula-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-eula-acceptances-request
                    'make-list-eula-acceptances-request))
 (common-lisp:defun make-list-eula-acceptances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id next-token eula-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-eula-acceptances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-eula-acceptances-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-eula-acceptances-response-next-token :initform
                         common-lisp:nil)
                        (eula-acceptances :initarg :|eulaAcceptances| :type
                         (common-lisp:or eula-acceptance-list common-lisp:null)
                         :accessor
                         %list-eula-acceptances-response-eula-acceptances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-eula-acceptances-response
                    'make-list-eula-acceptances-response))
 (common-lisp:defun make-list-eula-acceptances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token eula-acceptances)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-eula-acceptances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptances))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-eulas-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-eulas-request-next-token :initform
                         common-lisp:nil)
                        (eula-ids :initarg :|eulaIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-eulas-request-eula-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-eulas-request 'make-list-eulas-request))
 (common-lisp:defun make-list-eulas-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token eula-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-eulas-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-eulas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-eulas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-eulas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-eulas-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-eulas-response-next-token :initform
                         common-lisp:nil)
                        (eulas :initarg :|eulas| :type
                         (common-lisp:or eula-list common-lisp:null) :accessor
                         %list-eulas-response-eulas :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-eulas-response 'make-list-eulas-response))
 (common-lisp:defun make-list-eulas-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token eulas)
   (common-lisp:apply #'common-lisp:make-instance 'list-eulas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-eulas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-eulas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eulas))
      (common-lisp:list
       (common-lisp:cons "eulas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-eulas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-profile-members-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-launch-profile-members-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-launch-profile-members-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-launch-profile-members-request-max-results
                         :initform common-lisp:nil)
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-launch-profile-members-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-launch-profile-members-request
                    'make-list-launch-profile-members-request))
 (common-lisp:defun make-list-launch-profile-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id next-token max-results
                     launch-profile-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-launch-profile-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-profile-members-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-launch-profile-members-response-next-token
                         :initform common-lisp:nil)
                        (members :initarg :|members| :type
                         (common-lisp:or launch-profile-membership-list
                                         common-lisp:null)
                         :accessor
                         %list-launch-profile-members-response-members
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-launch-profile-members-response
                    'make-list-launch-profile-members-response))
 (common-lisp:defun make-list-launch-profile-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token members)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-launch-profile-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-profiles-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-launch-profiles-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (states :initarg :|states| :type
                         (common-lisp:or launch-profile-state-list
                                         common-lisp:null)
                         :accessor %list-launch-profiles-request-states
                         :initform common-lisp:nil)
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-launch-profiles-request-principal-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-launch-profiles-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-launch-profiles-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-launch-profiles-request
                    'make-list-launch-profiles-request))
 (common-lisp:defun make-list-launch-profiles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id states principal-id next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-launch-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-launch-profiles-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-launch-profiles-response-next-token :initform
                         common-lisp:nil)
                        (launch-profiles :initarg :|launchProfiles| :type
                         (common-lisp:or launch-profile-list common-lisp:null)
                         :accessor
                         %list-launch-profiles-response-launch-profiles
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-launch-profiles-response
                    'make-list-launch-profiles-response))
 (common-lisp:defun make-list-launch-profiles-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token launch-profiles)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-launch-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profiles))
      (common-lisp:list
       (common-lisp:cons "launchProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-images-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-images-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (owner :initarg :|owner| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-images-request-owner :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-images-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-images-request
                    'make-list-streaming-images-request))
 (common-lisp:defun make-list-streaming-images-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id owner next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-images-response common-lisp:nil
                       ((streaming-images :initarg :|streamingImages| :type
                         (common-lisp:or streaming-image-list common-lisp:null)
                         :accessor
                         %list-streaming-images-response-streaming-images
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-images-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-images-response
                    'make-list-streaming-images-response))
 (common-lisp:defun make-list-streaming-images-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-images next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-images-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-images))
      (common-lisp:list
       (common-lisp:cons "streamingImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-session-backups-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-session-backups-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (owned-by :initarg :|ownedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-session-backups-request-owned-by
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-session-backups-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-session-backups-request
                    'make-list-streaming-session-backups-request))
 (common-lisp:defun make-list-streaming-session-backups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id owned-by next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-session-backups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-session-backups-response common-lisp:nil
                       ((streaming-session-backups :initarg
                         :|streamingSessionBackups| :type
                         (common-lisp:or streaming-session-backup-list
                                         common-lisp:null)
                         :accessor
                         %list-streaming-session-backups-response-streaming-session-backups
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-session-backups-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-session-backups-response
                    'make-list-streaming-session-backups-response))
 (common-lisp:defun make-list-streaming-session-backups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-session-backups next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-session-backups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-session-backups))
      (common-lisp:list
       (common-lisp:cons "streamingSessionBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-sessions-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-sessions-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (session-ids :initarg :|sessionIds| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-sessions-request-session-ids :initform
                         common-lisp:nil)
                        (owned-by :initarg :|ownedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-sessions-request-owned-by :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-sessions-request-next-token :initform
                         common-lisp:nil)
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-sessions-request-created-by :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-sessions-request
                    'make-list-streaming-sessions-request))
 (common-lisp:defun make-list-streaming-sessions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id session-ids owned-by next-token
                     created-by)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-sessions-response common-lisp:nil
                       ((sessions :initarg :|sessions| :type
                         (common-lisp:or streaming-session-list
                                         common-lisp:null)
                         :accessor %list-streaming-sessions-response-sessions
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-streaming-sessions-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-sessions-response
                    'make-list-streaming-sessions-response))
 (common-lisp:defun make-list-streaming-sessions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sessions next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-components-request common-lisp:nil
                       ((types :initarg :|types| :type
                         (common-lisp:or studio-component-type-list
                                         common-lisp:null)
                         :accessor %list-studio-components-request-types
                         :initform common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-studio-components-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (states :initarg :|states| :type
                         (common-lisp:or studio-component-state-list
                                         common-lisp:null)
                         :accessor %list-studio-components-request-states
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-studio-components-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-studio-components-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-studio-components-request
                    'make-list-studio-components-request))
 (common-lisp:defun make-list-studio-components-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key types studio-id states next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-studio-components-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-components-response common-lisp:nil
                       ((studio-components :initarg :|studioComponents| :type
                         (common-lisp:or studio-component-list
                                         common-lisp:null)
                         :accessor
                         %list-studio-components-response-studio-components
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-studio-components-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-studio-components-response
                    'make-list-studio-components-response))
 (common-lisp:defun make-list-studio-components-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-components next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-studio-components-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-components))
      (common-lisp:list
       (common-lisp:cons "studioComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-members-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-studio-members-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-studio-members-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-studio-members-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-studio-members-request
                    'make-list-studio-members-request))
 (common-lisp:defun make-list-studio-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-studio-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studio-members-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-studio-members-response-next-token :initform
                         common-lisp:nil)
                        (members :initarg :|members| :type
                         (common-lisp:or studio-membership-list
                                         common-lisp:null)
                         :accessor %list-studio-members-response-members
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-studio-members-response
                    'make-list-studio-members-response))
 (common-lisp:defun make-list-studio-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token members)
   (common-lisp:apply #'common-lisp:make-instance 'list-studio-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studios-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-studios-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-studios-request 'make-list-studios-request))
 (common-lisp:defun make-list-studios-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-studios-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-studios-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-studios-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-studios-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-studios-response common-lisp:nil
                       ((studios :initarg :|studios| :type
                         (common-lisp:or studio-list common-lisp:null)
                         :accessor %list-studios-response-studios :initform
                         (common-lisp:error ":studios is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-studios-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-studios-response 'make-list-studios-response))
 (common-lisp:defun make-list-studios-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studios next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-studios-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studios))
      (common-lisp:list
       (common-lisp:cons "studios"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass new-launch-profile-member common-lisp:nil
                       ((principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %new-launch-profile-member-principal-id :initform
                         (common-lisp:error ":principalid is required"))
                        (persona :initarg :|persona| :type
                         (common-lisp:or launch-profile-persona
                                         common-lisp:null)
                         :accessor %new-launch-profile-member-persona :initform
                         (common-lisp:error ":persona is required"))))
 (common-lisp:export
  (common-lisp:list 'new-launch-profile-member
                    'make-new-launch-profile-member))
 (common-lisp:defun make-new-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-id persona)
   (common-lisp:apply #'common-lisp:make-instance 'new-launch-profile-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype new-launch-profile-member-list ()
   '(trivial-types:proper-list new-launch-profile-member))
 (common-lisp:defun |make-new-launch-profile-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            new-launch-profile-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass new-studio-member common-lisp:nil
                       ((principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %new-studio-member-principal-id :initform
                         (common-lisp:error ":principalid is required"))
                        (persona :initarg :|persona| :type
                         (common-lisp:or studio-persona common-lisp:null)
                         :accessor %new-studio-member-persona :initform
                         (common-lisp:error ":persona is required"))))
 (common-lisp:export
  (common-lisp:list 'new-studio-member 'make-new-studio-member))
 (common-lisp:defun make-new-studio-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-id persona)
   (common-lisp:apply #'common-lisp:make-instance 'new-studio-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input new-studio-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input new-studio-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input new-studio-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype new-studio-member-list ()
   '(trivial-types:proper-list new-studio-member))
 (common-lisp:defun |make-new-studio-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list new-studio-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-launch-profile-members-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-launch-profile-members-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (members :initarg :|members| :type
                         (common-lisp:or new-launch-profile-member-list
                                         common-lisp:null)
                         :accessor %put-launch-profile-members-request-members
                         :initform (common-lisp:error ":members is required"))
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-launch-profile-members-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))
                        (identity-store-id :initarg :|identityStoreId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-launch-profile-members-request-identity-store-id
                         :initform
                         (common-lisp:error ":identitystoreid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %put-launch-profile-members-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-launch-profile-members-request
                    'make-put-launch-profile-members-request))
 (common-lisp:defun make-put-launch-profile-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id members launch-profile-id
                     identity-store-id client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-launch-profile-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-launch-profile-members-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-launch-profile-members-response
                    'make-put-launch-profile-members-response))
 (common-lisp:defun make-put-launch-profile-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-launch-profile-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-studio-members-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-studio-members-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (members :initarg :|members| :type
                         (common-lisp:or new-studio-member-list
                                         common-lisp:null)
                         :accessor %put-studio-members-request-members
                         :initform (common-lisp:error ":members is required"))
                        (identity-store-id :initarg :|identityStoreId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-studio-members-request-identity-store-id
                         :initform
                         (common-lisp:error ":identitystoreid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %put-studio-members-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-studio-members-request
                    'make-put-studio-members-request))
 (common-lisp:defun make-put-studio-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id members identity-store-id
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance 'put-studio-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-studio-members-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-studio-members-response
                    'make-put-studio-members-response))
 (common-lisp:defun make-put-studio-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-studio-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (nimble-error)
     ((code :initarg :|code| :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (context :initarg :|context| :initform common-lisp:nil :reader
       resource-not-found-exception-context)
      (message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-code
                    'resource-not-found-exception-context
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype script-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass script-parameter-key-value common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or script-parameter-value
                                         common-lisp:null)
                         :accessor %script-parameter-key-value-value :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or script-parameter-key common-lisp:null)
                         :accessor %script-parameter-key-value-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'script-parameter-key-value
                    'make-script-parameter-key-value))
 (common-lisp:defun make-script-parameter-key-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'script-parameter-key-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   common-lisp:nil))
(common-lisp:deftype script-parameter-value () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (nimble-error)
     ((code :initarg :|code| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-code)
      (context :initarg :|context| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-context)
      (message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-code
                    'service-quota-exceeded-exception-context
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype session-backup-mode () 'common-lisp:string)
(common-lisp:deftype session-persistence-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass shared-file-system-configuration common-lisp:nil
                       ((windows-mount-drive :initarg :|windowsMountDrive|
                         :type
                         (common-lisp:or windows-mount-drive common-lisp:null)
                         :accessor
                         %shared-file-system-configuration-windows-mount-drive
                         :initform common-lisp:nil)
                        (share-name :initarg :|shareName| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %shared-file-system-configuration-share-name
                         :initform common-lisp:nil)
                        (linux-mount-point :initarg :|linuxMountPoint| :type
                         (common-lisp:or linux-mount-point common-lisp:null)
                         :accessor
                         %shared-file-system-configuration-linux-mount-point
                         :initform common-lisp:nil)
                        (file-system-id :initarg :|fileSystemId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %shared-file-system-configuration-file-system-id
                         :initform common-lisp:nil)
                        (endpoint :initarg :|endpoint| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %shared-file-system-configuration-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'shared-file-system-configuration
                    'make-shared-file-system-configuration))
 (common-lisp:defun make-shared-file-system-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key windows-mount-drive share-name
                     linux-mount-point file-system-id endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'shared-file-system-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux-mount-point))
      (common-lisp:list
       (common-lisp:cons "linuxMountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-name))
      (common-lisp:list
       (common-lisp:cons "shareName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows-mount-drive))
      (common-lisp:list
       (common-lisp:cons "windowsMountDrive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-streaming-session-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-streaming-session-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-streaming-session-request-session-id :initform
                         (common-lisp:error ":sessionid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-streaming-session-request-client-token
                         :initform common-lisp:nil)
                        (backup-id :initarg :|backupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-streaming-session-request-backup-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-streaming-session-request
                    'make-start-streaming-session-request))
 (common-lisp:defun make-start-streaming-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id session-id client-token
                     backup-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "backupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-streaming-session-response common-lisp:nil
                       ((session :initarg :|session| :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor %start-streaming-session-response-session
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-streaming-session-response
                    'make-start-streaming-session-response))
 (common-lisp:defun make-start-streaming-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-studio-ssoconfiguration-repair-request
                       common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-studio-ssoconfiguration-repair-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-studio-ssoconfiguration-repair-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-studio-ssoconfiguration-repair-request
                    'make-start-studio-ssoconfiguration-repair-request))
 (common-lisp:defun make-start-studio-ssoconfiguration-repair-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-studio-ssoconfiguration-repair-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-studio-ssoconfiguration-repair-response
                       common-lisp:nil
                       ((studio :initarg :|studio| :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         %start-studio-ssoconfiguration-repair-response-studio
                         :initform (common-lisp:error ":studio is required"))))
 (common-lisp:export
  (common-lisp:list 'start-studio-ssoconfiguration-repair-response
                    'make-start-studio-ssoconfiguration-repair-response))
 (common-lisp:defun make-start-studio-ssoconfiguration-repair-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-studio-ssoconfiguration-repair-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-streaming-session-request common-lisp:nil
                       ((volume-retention-mode :initarg :|volumeRetentionMode|
                         :type
                         (common-lisp:or volume-retention-mode
                                         common-lisp:null)
                         :accessor
                         %stop-streaming-session-request-volume-retention-mode
                         :initform common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-streaming-session-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-streaming-session-request-session-id :initform
                         (common-lisp:error ":sessionid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %stop-streaming-session-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-streaming-session-request
                    'make-stop-streaming-session-request))
 (common-lisp:defun make-stop-streaming-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-retention-mode studio-id
                     session-id client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-streaming-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-retention-mode))
      (common-lisp:list
       (common-lisp:cons "volumeRetentionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-streaming-session-response common-lisp:nil
                       ((session :initarg :|session| :type
                         (common-lisp:or streaming-session common-lisp:null)
                         :accessor %stop-streaming-session-response-session
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-streaming-session-response
                    'make-stop-streaming-session-response))
 (common-lisp:defun make-stop-streaming-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-streaming-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-configuration common-lisp:nil
                       ((volume-configuration :initarg :|volumeConfiguration|
                         :type
                         (common-lisp:or volume-configuration common-lisp:null)
                         :accessor %stream-configuration-volume-configuration
                         :initform common-lisp:nil)
                        (streaming-image-ids :initarg :|streamingImageIds|
                         :type
                         (common-lisp:or streaming-image-id-list
                                         common-lisp:null)
                         :accessor %stream-configuration-streaming-image-ids
                         :initform
                         (common-lisp:error ":streamingimageids is required"))
                        (session-storage :initarg :|sessionStorage| :type
                         (common-lisp:or stream-configuration-session-storage
                                         common-lisp:null)
                         :accessor %stream-configuration-session-storage
                         :initform common-lisp:nil)
                        (session-persistence-mode :initarg
                         :|sessionPersistenceMode| :type
                         (common-lisp:or session-persistence-mode
                                         common-lisp:null)
                         :accessor
                         %stream-configuration-session-persistence-mode
                         :initform common-lisp:nil)
                        (session-backup :initarg :|sessionBackup| :type
                         (common-lisp:or stream-configuration-session-backup
                                         common-lisp:null)
                         :accessor %stream-configuration-session-backup
                         :initform common-lisp:nil)
                        (max-stopped-session-length-in-minutes :initarg
                         :|maxStoppedSessionLengthInMinutes| :type
                         (common-lisp:or
                          stream-configuration-max-stopped-session-length-in-minutes
                          common-lisp:null)
                         :accessor
                         %stream-configuration-max-stopped-session-length-in-minutes
                         :initform common-lisp:nil)
                        (max-session-length-in-minutes :initarg
                         :|maxSessionLengthInMinutes| :type
                         (common-lisp:or
                          stream-configuration-max-session-length-in-minutes
                          common-lisp:null)
                         :accessor
                         %stream-configuration-max-session-length-in-minutes
                         :initform common-lisp:nil)
                        (ec2instance-types :initarg :|ec2InstanceTypes| :type
                         (common-lisp:or streaming-instance-type-list
                                         common-lisp:null)
                         :accessor %stream-configuration-ec2instance-types
                         :initform
                         (common-lisp:error ":ec2instancetypes is required"))
                        (clipboard-mode :initarg :|clipboardMode| :type
                         (common-lisp:or streaming-clipboard-mode
                                         common-lisp:null)
                         :accessor %stream-configuration-clipboard-mode
                         :initform
                         (common-lisp:error ":clipboardmode is required"))
                        (automatic-termination-mode :initarg
                         :|automaticTerminationMode| :type
                         (common-lisp:or automatic-termination-mode
                                         common-lisp:null)
                         :accessor
                         %stream-configuration-automatic-termination-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stream-configuration 'make-stream-configuration))
 (common-lisp:defun make-stream-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-configuration streaming-image-ids
                     session-storage session-persistence-mode session-backup
                     max-stopped-session-length-in-minutes
                     max-session-length-in-minutes ec2instance-types
                     clipboard-mode automatic-termination-mode)
   (common-lisp:apply #'common-lisp:make-instance 'stream-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clipboard-mode))
      (common-lisp:list
       (common-lisp:cons "clipboardMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-types))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-stopped-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxStoppedSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-backup))
      (common-lisp:list
       (common-lisp:cons "sessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-storage))
      (common-lisp:list
       (common-lisp:cons "sessionStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-ids))
      (common-lisp:list
       (common-lisp:cons "streamingImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-configuration-create common-lisp:nil
                       ((volume-configuration :initarg :|volumeConfiguration|
                         :type
                         (common-lisp:or volume-configuration common-lisp:null)
                         :accessor
                         %stream-configuration-create-volume-configuration
                         :initform common-lisp:nil)
                        (streaming-image-ids :initarg :|streamingImageIds|
                         :type
                         (common-lisp:or streaming-image-id-list
                                         common-lisp:null)
                         :accessor
                         %stream-configuration-create-streaming-image-ids
                         :initform
                         (common-lisp:error ":streamingimageids is required"))
                        (session-storage :initarg :|sessionStorage| :type
                         (common-lisp:or stream-configuration-session-storage
                                         common-lisp:null)
                         :accessor %stream-configuration-create-session-storage
                         :initform common-lisp:nil)
                        (session-persistence-mode :initarg
                         :|sessionPersistenceMode| :type
                         (common-lisp:or session-persistence-mode
                                         common-lisp:null)
                         :accessor
                         %stream-configuration-create-session-persistence-mode
                         :initform common-lisp:nil)
                        (session-backup :initarg :|sessionBackup| :type
                         (common-lisp:or stream-configuration-session-backup
                                         common-lisp:null)
                         :accessor %stream-configuration-create-session-backup
                         :initform common-lisp:nil)
                        (max-stopped-session-length-in-minutes :initarg
                         :|maxStoppedSessionLengthInMinutes| :type
                         (common-lisp:or
                          stream-configuration-max-stopped-session-length-in-minutes
                          common-lisp:null)
                         :accessor
                         %stream-configuration-create-max-stopped-session-length-in-minutes
                         :initform common-lisp:nil)
                        (max-session-length-in-minutes :initarg
                         :|maxSessionLengthInMinutes| :type
                         (common-lisp:or
                          stream-configuration-max-session-length-in-minutes
                          common-lisp:null)
                         :accessor
                         %stream-configuration-create-max-session-length-in-minutes
                         :initform common-lisp:nil)
                        (ec2instance-types :initarg :|ec2InstanceTypes| :type
                         (common-lisp:or streaming-instance-type-list
                                         common-lisp:null)
                         :accessor
                         %stream-configuration-create-ec2instance-types
                         :initform
                         (common-lisp:error ":ec2instancetypes is required"))
                        (clipboard-mode :initarg :|clipboardMode| :type
                         (common-lisp:or streaming-clipboard-mode
                                         common-lisp:null)
                         :accessor %stream-configuration-create-clipboard-mode
                         :initform
                         (common-lisp:error ":clipboardmode is required"))
                        (automatic-termination-mode :initarg
                         :|automaticTerminationMode| :type
                         (common-lisp:or automatic-termination-mode
                                         common-lisp:null)
                         :accessor
                         %stream-configuration-create-automatic-termination-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-create
                    'make-stream-configuration-create))
 (common-lisp:defun make-stream-configuration-create
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-configuration streaming-image-ids
                     session-storage session-persistence-mode session-backup
                     max-stopped-session-length-in-minutes
                     max-session-length-in-minutes ec2instance-types
                     clipboard-mode automatic-termination-mode)
   (common-lisp:apply #'common-lisp:make-instance 'stream-configuration-create
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clipboard-mode))
      (common-lisp:list
       (common-lisp:cons "clipboardMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-types))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-stopped-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxStoppedSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-backup))
      (common-lisp:list
       (common-lisp:cons "sessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-storage))
      (common-lisp:list
       (common-lisp:cons "sessionStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-ids))
      (common-lisp:list
       (common-lisp:cons "streamingImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   common-lisp:nil))
(common-lisp:deftype stream-configuration-max-backups-to-retain ()
  'common-lisp:integer)
(common-lisp:deftype stream-configuration-max-session-length-in-minutes ()
  'common-lisp:integer)
(common-lisp:deftype stream-configuration-max-stopped-session-length-in-minutes
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass stream-configuration-session-backup common-lisp:nil
                       ((mode :initarg :|mode| :type
                         (common-lisp:or session-backup-mode common-lisp:null)
                         :accessor %stream-configuration-session-backup-mode
                         :initform common-lisp:nil)
                        (max-backups-to-retain :initarg :|maxBackupsToRetain|
                         :type
                         (common-lisp:or
                          stream-configuration-max-backups-to-retain
                          common-lisp:null)
                         :accessor
                         %stream-configuration-session-backup-max-backups-to-retain
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-session-backup
                    'make-stream-configuration-session-backup))
 (common-lisp:defun make-stream-configuration-session-backup
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mode max-backups-to-retain)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-configuration-session-backup
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-backups-to-retain))
      (common-lisp:list
       (common-lisp:cons "maxBackupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-configuration-session-storage common-lisp:nil
                       ((root :initarg :|root| :type
                         (common-lisp:or streaming-session-storage-root
                                         common-lisp:null)
                         :accessor %stream-configuration-session-storage-root
                         :initform common-lisp:nil)
                        (mode :initarg :|mode| :type
                         (common-lisp:or streaming-session-storage-mode-list
                                         common-lisp:null)
                         :accessor %stream-configuration-session-storage-mode
                         :initform (common-lisp:error ":mode is required"))))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-session-storage
                    'make-stream-configuration-session-storage))
 (common-lisp:defun make-stream-configuration-session-storage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root mode)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-configuration-session-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root))
      (common-lisp:list
       (common-lisp:cons "root"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   common-lisp:nil))
(common-lisp:deftype streaming-clipboard-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass streaming-image common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %streaming-image-tags :initform common-lisp:nil)
                        (streaming-image-id :initarg :|streamingImageId| :type
                         (common-lisp:or streaming-image-id common-lisp:null)
                         :accessor %streaming-image-streaming-image-id
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-image-status-message :initform
                         common-lisp:nil)
                        (status-code :initarg :|statusCode| :type
                         (common-lisp:or streaming-image-status-code
                                         common-lisp:null)
                         :accessor %streaming-image-status-code :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or streaming-image-state
                                         common-lisp:null)
                         :accessor %streaming-image-state :initform
                         common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or streaming-image-platform
                                         common-lisp:null)
                         :accessor %streaming-image-platform :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or streaming-image-owner
                                         common-lisp:null)
                         :accessor %streaming-image-owner :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or streaming-image-name common-lisp:null)
                         :accessor %streaming-image-name :initform
                         common-lisp:nil)
                        (eula-ids :initarg :|eulaIds| :type
                         (common-lisp:or eula-id-list common-lisp:null)
                         :accessor %streaming-image-eula-ids :initform
                         common-lisp:nil)
                        (encryption-configuration :initarg
                         :|encryptionConfiguration| :type
                         (common-lisp:or
                          streaming-image-encryption-configuration
                          common-lisp:null)
                         :accessor %streaming-image-encryption-configuration
                         :initform common-lisp:nil)
                        (ec2image-id :initarg :|ec2ImageId| :type
                         (common-lisp:or ec2image-id common-lisp:null)
                         :accessor %streaming-image-ec2image-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or streaming-image-description
                                         common-lisp:null)
                         :accessor %streaming-image-description :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-image-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'streaming-image 'make-streaming-image))
 (common-lisp:defun make-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags streaming-image-id status-message
                     status-code state platform owner name eula-ids
                     encryption-configuration ec2image-id description arn)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-image
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input streaming-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input streaming-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2image-id))
      (common-lisp:list
       (common-lisp:cons "ec2ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-ids))
      (common-lisp:list
       (common-lisp:cons "eulaIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input streaming-image))
   common-lisp:nil))
(common-lisp:deftype streaming-image-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass streaming-image-encryption-configuration common-lisp:nil
                       ((key-type :initarg :|keyType| :type
                         (common-lisp:or
                          streaming-image-encryption-configuration-key-type
                          common-lisp:null)
                         :accessor
                         %streaming-image-encryption-configuration-key-type
                         :initform (common-lisp:error ":keytype is required"))
                        (key-arn :initarg :|keyArn| :type
                         (common-lisp:or
                          streaming-image-encryption-configuration-key-arn
                          common-lisp:null)
                         :accessor
                         %streaming-image-encryption-configuration-key-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'streaming-image-encryption-configuration
                    'make-streaming-image-encryption-configuration))
 (common-lisp:defun make-streaming-image-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-type key-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-image-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "keyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype streaming-image-encryption-configuration-key-arn ()
  'common-lisp:string)
(common-lisp:deftype streaming-image-encryption-configuration-key-type ()
  'common-lisp:string)
(common-lisp:deftype streaming-image-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-image-id-list ()
   '(trivial-types:proper-list streaming-image-id))
 (common-lisp:defun |make-streaming-image-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-image-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype streaming-image-list ()
   '(trivial-types:proper-list streaming-image))
 (common-lisp:defun |make-streaming-image-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-image-name () 'common-lisp:string)
(common-lisp:deftype streaming-image-owner () 'common-lisp:string)
(common-lisp:deftype streaming-image-platform () 'common-lisp:string)
(common-lisp:deftype streaming-image-state () 'common-lisp:string)
(common-lisp:deftype streaming-image-status-code () 'common-lisp:string)
(common-lisp:deftype streaming-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-instance-type-list ()
   '(trivial-types:proper-list streaming-instance-type))
 (common-lisp:defun |make-streaming-instance-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass streaming-session common-lisp:nil
                       ((volume-retention-mode :initarg :|volumeRetentionMode|
                         :type
                         (common-lisp:or volume-retention-mode
                                         common-lisp:null)
                         :accessor %streaming-session-volume-retention-mode
                         :initform common-lisp:nil)
                        (volume-configuration :initarg :|volumeConfiguration|
                         :type
                         (common-lisp:or volume-configuration common-lisp:null)
                         :accessor %streaming-session-volume-configuration
                         :initform common-lisp:nil)
                        (updated-by :initarg :|updatedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-updated-by :initform
                         common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-updated-at :initform
                         common-lisp:nil)
                        (terminate-at :initarg :|terminateAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-terminate-at :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %streaming-session-tags :initform common-lisp:nil)
                        (streaming-image-id :initarg :|streamingImageId| :type
                         (common-lisp:or streaming-image-id common-lisp:null)
                         :accessor %streaming-session-streaming-image-id
                         :initform common-lisp:nil)
                        (stopped-by :initarg :|stoppedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-stopped-by :initform
                         common-lisp:nil)
                        (stopped-at :initarg :|stoppedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-stopped-at :initform
                         common-lisp:nil)
                        (stop-at :initarg :|stopAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-stop-at :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-status-message :initform
                         common-lisp:nil)
                        (status-code :initarg :|statusCode| :type
                         (common-lisp:or streaming-session-status-code
                                         common-lisp:null)
                         :accessor %streaming-session-status-code :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or streaming-session-state
                                         common-lisp:null)
                         :accessor %streaming-session-state :initform
                         common-lisp:nil)
                        (started-from-backup-id :initarg :|startedFromBackupId|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %streaming-session-started-from-backup-id
                         :initform common-lisp:nil)
                        (started-by :initarg :|startedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-started-by :initform
                         common-lisp:nil)
                        (started-at :initarg :|startedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-started-at :initform
                         common-lisp:nil)
                        (session-persistence-mode :initarg
                         :|sessionPersistenceMode| :type
                         (common-lisp:or session-persistence-mode
                                         common-lisp:null)
                         :accessor %streaming-session-session-persistence-mode
                         :initform common-lisp:nil)
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or streaming-session-id common-lisp:null)
                         :accessor %streaming-session-session-id :initform
                         common-lisp:nil)
                        (owned-by :initarg :|ownedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-owned-by :initform common-lisp:nil)
                        (max-backups-to-retain :initarg :|maxBackupsToRetain|
                         :type
                         (common-lisp:or
                          stream-configuration-max-backups-to-retain
                          common-lisp:null)
                         :accessor %streaming-session-max-backups-to-retain
                         :initform common-lisp:nil)
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-launch-profile-id :initform
                         common-lisp:nil)
                        (ec2instance-type :initarg :|ec2InstanceType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-ec2instance-type :initform
                         common-lisp:nil)
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-created-by :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-created-at :initform
                         common-lisp:nil)
                        (backup-mode :initarg :|backupMode| :type
                         (common-lisp:or session-backup-mode common-lisp:null)
                         :accessor %streaming-session-backup-mode :initform
                         common-lisp:nil)
                        (automatic-termination-mode :initarg
                         :|automaticTerminationMode| :type
                         (common-lisp:or automatic-termination-mode
                                         common-lisp:null)
                         :accessor
                         %streaming-session-automatic-termination-mode
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'streaming-session 'make-streaming-session))
 (common-lisp:defun make-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-retention-mode
                     volume-configuration updated-by updated-at terminate-at
                     tags streaming-image-id stopped-by stopped-at stop-at
                     status-message status-code state started-from-backup-id
                     started-by started-at session-persistence-mode session-id
                     owned-by max-backups-to-retain launch-profile-id
                     ec2instance-type created-by created-at backup-mode
                     automatic-termination-mode arn)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input streaming-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input streaming-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-mode))
      (common-lisp:list
       (common-lisp:cons "backupMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-backups-to-retain))
      (common-lisp:list
       (common-lisp:cons "maxBackupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'started-from-backup-id))
      (common-lisp:list
       (common-lisp:cons "startedFromBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-at))
      (common-lisp:list
       (common-lisp:cons "stopAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-by))
      (common-lisp:list
       (common-lisp:cons "stoppedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-at))
      (common-lisp:list
       (common-lisp:cons "terminateAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-retention-mode))
      (common-lisp:list
       (common-lisp:cons "volumeRetentionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input streaming-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass streaming-session-backup common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %streaming-session-backup-tags :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-backup-status-message :initform
                         common-lisp:nil)
                        (status-code :initarg :|statusCode| :type
                         (common-lisp:or streaming-session-status-code
                                         common-lisp:null)
                         :accessor %streaming-session-backup-status-code
                         :initform common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or streaming-session-state
                                         common-lisp:null)
                         :accessor %streaming-session-backup-state :initform
                         common-lisp:nil)
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or streaming-session-id common-lisp:null)
                         :accessor %streaming-session-backup-session-id
                         :initform common-lisp:nil)
                        (owned-by :initarg :|ownedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-backup-owned-by :initform
                         common-lisp:nil)
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-backup-launch-profile-id :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-backup-created-at :initform
                         common-lisp:nil)
                        (backup-id :initarg :|backupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-backup-backup-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-backup-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'streaming-session-backup 'make-streaming-session-backup))
 (common-lisp:defun make-streaming-session-backup
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status-message status-code state
                     session-id owned-by launch-profile-id created-at backup-id
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-session-backup
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "backupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype streaming-session-backup-list ()
   '(trivial-types:proper-list streaming-session-backup))
 (common-lisp:defun |make-streaming-session-backup-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            streaming-session-backup))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-session-list ()
   '(trivial-types:proper-list streaming-session))
 (common-lisp:defun |make-streaming-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-session-state () 'common-lisp:string)
(common-lisp:deftype streaming-session-status-code () 'common-lisp:string)
(common-lisp:deftype streaming-session-storage-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-session-storage-mode-list ()
   '(trivial-types:proper-list streaming-session-storage-mode))
 (common-lisp:defun |make-streaming-session-storage-mode-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            streaming-session-storage-mode))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass streaming-session-storage-root common-lisp:nil
                       ((windows :initarg :|windows| :type
                         (common-lisp:or
                          streaming-session-storage-root-path-windows
                          common-lisp:null)
                         :accessor %streaming-session-storage-root-windows
                         :initform common-lisp:nil)
                        (linux :initarg :|linux| :type
                         (common-lisp:or
                          streaming-session-storage-root-path-linux
                          common-lisp:null)
                         :accessor %streaming-session-storage-root-linux
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'streaming-session-storage-root
                    'make-streaming-session-storage-root))
 (common-lisp:defun make-streaming-session-storage-root
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key windows linux)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-session-storage-root
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux))
      (common-lisp:list
       (common-lisp:cons "linux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows))
      (common-lisp:list
       (common-lisp:cons "windows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   common-lisp:nil))
(common-lisp:deftype streaming-session-storage-root-path-linux ()
  'common-lisp:string)
(common-lisp:deftype streaming-session-storage-root-path-windows ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass streaming-session-stream common-lisp:nil
                       ((url :initarg :|url| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %streaming-session-stream-url :initform
                         common-lisp:nil)
                        (stream-id :initarg :|streamId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-stream-stream-id :initform
                         common-lisp:nil)
                        (status-code :initarg :|statusCode| :type
                         (common-lisp:or streaming-session-stream-status-code
                                         common-lisp:null)
                         :accessor %streaming-session-stream-status-code
                         :initform common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or streaming-session-stream-state
                                         common-lisp:null)
                         :accessor %streaming-session-stream-state :initform
                         common-lisp:nil)
                        (owned-by :initarg :|ownedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-stream-owned-by :initform
                         common-lisp:nil)
                        (expires-at :initarg :|expiresAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-stream-expires-at :initform
                         common-lisp:nil)
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %streaming-session-stream-created-by :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %streaming-session-stream-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'streaming-session-stream 'make-streaming-session-stream))
 (common-lisp:defun make-streaming-session-stream
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url stream-id status-code state owned-by
                     expires-at created-by created-at)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-session-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   common-lisp:nil))
(common-lisp:deftype streaming-session-stream-expiration-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype streaming-session-stream-state () 'common-lisp:string)
(common-lisp:deftype streaming-session-stream-status-code ()
  'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass studio common-lisp:nil
                       ((user-role-arn :initarg :|userRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %studio-user-role-arn :initform common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %studio-updated-at :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %studio-tags :initform common-lisp:nil)
                        (studio-url :initarg :|studioUrl| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-studio-url :initform common-lisp:nil)
                        (studio-name :initarg :|studioName| :type
                         (common-lisp:or studio-name common-lisp:null)
                         :accessor %studio-studio-name :initform
                         common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-studio-id :initform common-lisp:nil)
                        (studio-encryption-configuration :initarg
                         :|studioEncryptionConfiguration| :type
                         (common-lisp:or studio-encryption-configuration
                                         common-lisp:null)
                         :accessor %studio-studio-encryption-configuration
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-status-message :initform common-lisp:nil)
                        (status-code :initarg :|statusCode| :type
                         (common-lisp:or studio-status-code common-lisp:null)
                         :accessor %studio-status-code :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or studio-state common-lisp:null)
                         :accessor %studio-state :initform common-lisp:nil)
                        (sso-client-id :initarg :|ssoClientId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-sso-client-id :initform common-lisp:nil)
                        (home-region :initarg :|homeRegion| :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %studio-home-region :initform common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or studio-display-name common-lisp:null)
                         :accessor %studio-display-name :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %studio-created-at :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-arn :initform common-lisp:nil)
                        (admin-role-arn :initarg :|adminRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %studio-admin-role-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'studio 'make-studio))
 (common-lisp:defun make-studio
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-role-arn updated-at tags studio-url
                     studio-name studio-id studio-encryption-configuration
                     status-message status-code state sso-client-id home-region
                     display-name created-at arn admin-role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'studio
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "homeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso-client-id))
      (common-lisp:list
       (common-lisp:cons "ssoClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "studioEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "studioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-name))
      (common-lisp:list
       (common-lisp:cons "studioName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-url))
      (common-lisp:list
       (common-lisp:cons "studioUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass studio-component common-lisp:nil
                       ((updated-by :initarg :|updatedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-component-updated-by :initform
                         common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %studio-component-updated-at :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or studio-component-type
                                         common-lisp:null)
                         :accessor %studio-component-type :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %studio-component-tags :initform common-lisp:nil)
                        (subtype :initarg :|subtype| :type
                         (common-lisp:or studio-component-subtype
                                         common-lisp:null)
                         :accessor %studio-component-subtype :initform
                         common-lisp:nil)
                        (studio-component-id :initarg :|studioComponentId|
                         :type
                         (common-lisp:or studio-component-id common-lisp:null)
                         :accessor %studio-component-studio-component-id
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-component-status-message :initform
                         common-lisp:nil)
                        (status-code :initarg :|statusCode| :type
                         (common-lisp:or studio-component-status-code
                                         common-lisp:null)
                         :accessor %studio-component-status-code :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or studio-component-state
                                         common-lisp:null)
                         :accessor %studio-component-state :initform
                         common-lisp:nil)
                        (secure-initialization-role-arn :initarg
                         :|secureInitializationRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %studio-component-secure-initialization-role-arn
                         :initform common-lisp:nil)
                        (script-parameters :initarg :|scriptParameters| :type
                         (common-lisp:or
                          studio-component-script-parameter-key-value-list
                          common-lisp:null)
                         :accessor %studio-component-script-parameters
                         :initform common-lisp:nil)
                        (runtime-role-arn :initarg :|runtimeRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %studio-component-runtime-role-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor %studio-component-name :initform
                         common-lisp:nil)
                        (initialization-scripts :initarg
                         :|initializationScripts| :type
                         (common-lisp:or
                          studio-component-initialization-script-list
                          common-lisp:null)
                         :accessor %studio-component-initialization-scripts
                         :initform common-lisp:nil)
                        (ec2security-group-ids :initarg :|ec2SecurityGroupIds|
                         :type
                         (common-lisp:or
                          studio-component-security-group-id-list
                          common-lisp:null)
                         :accessor %studio-component-ec2security-group-ids
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or studio-component-description
                                         common-lisp:null)
                         :accessor %studio-component-description :initform
                         common-lisp:nil)
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-component-created-by :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %studio-component-created-at :initform
                         common-lisp:nil)
                        (configuration :initarg :|configuration| :type
                         (common-lisp:or studio-component-configuration
                                         common-lisp:null)
                         :accessor %studio-component-configuration :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-component-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'studio-component 'make-studio-component))
 (common-lisp:defun make-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-by updated-at type tags subtype
                     studio-component-id status-message status-code state
                     secure-initialization-role-arn script-parameters
                     runtime-role-arn name initialization-scripts
                     ec2security-group-ids description created-by created-at
                     configuration arn)
   (common-lisp:apply #'common-lisp:make-instance 'studio-component
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass studio-component-configuration common-lisp:nil
                       ((shared-file-system-configuration :initarg
                         :|sharedFileSystemConfiguration| :type
                         (common-lisp:or shared-file-system-configuration
                                         common-lisp:null)
                         :accessor
                         %studio-component-configuration-shared-file-system-configuration
                         :initform common-lisp:nil)
                        (license-service-configuration :initarg
                         :|licenseServiceConfiguration| :type
                         (common-lisp:or license-service-configuration
                                         common-lisp:null)
                         :accessor
                         %studio-component-configuration-license-service-configuration
                         :initform common-lisp:nil)
                        (compute-farm-configuration :initarg
                         :|computeFarmConfiguration| :type
                         (common-lisp:or compute-farm-configuration
                                         common-lisp:null)
                         :accessor
                         %studio-component-configuration-compute-farm-configuration
                         :initform common-lisp:nil)
                        (active-directory-configuration :initarg
                         :|activeDirectoryConfiguration| :type
                         (common-lisp:or active-directory-configuration
                                         common-lisp:null)
                         :accessor
                         %studio-component-configuration-active-directory-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'studio-component-configuration
                    'make-studio-component-configuration))
 (common-lisp:defun make-studio-component-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-file-system-configuration
                     license-service-configuration compute-farm-configuration
                     active-directory-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'studio-component-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "activeDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compute-farm-configuration))
      (common-lisp:list
       (common-lisp:cons "computeFarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-service-configuration))
      (common-lisp:list
       (common-lisp:cons "licenseServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-file-system-configuration))
      (common-lisp:list
       (common-lisp:cons "sharedFileSystemConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   common-lisp:nil))
(common-lisp:deftype studio-component-description () 'common-lisp:string)
(common-lisp:deftype studio-component-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass studio-component-initialization-script common-lisp:nil
                       ((script :initarg :|script| :type
                         (common-lisp:or
                          studio-component-initialization-script-content
                          common-lisp:null)
                         :accessor
                         %studio-component-initialization-script-script
                         :initform common-lisp:nil)
                        (run-context :initarg :|runContext| :type
                         (common-lisp:or
                          studio-component-initialization-script-run-context
                          common-lisp:null)
                         :accessor
                         %studio-component-initialization-script-run-context
                         :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or launch-profile-platform
                                         common-lisp:null)
                         :accessor
                         %studio-component-initialization-script-platform
                         :initform common-lisp:nil)
                        (launch-profile-protocol-version :initarg
                         :|launchProfileProtocolVersion| :type
                         (common-lisp:or launch-profile-protocol-version
                                         common-lisp:null)
                         :accessor
                         %studio-component-initialization-script-launch-profile-protocol-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'studio-component-initialization-script
                    'make-studio-component-initialization-script))
 (common-lisp:defun make-studio-component-initialization-script
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script run-context platform
                     launch-profile-protocol-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'studio-component-initialization-script
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-version))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-context))
      (common-lisp:list
       (common-lisp:cons "runContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   common-lisp:nil))
(common-lisp:deftype studio-component-initialization-script-content ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-initialization-script-list ()
   '(trivial-types:proper-list studio-component-initialization-script))
 (common-lisp:defun |make-studio-component-initialization-script-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            studio-component-initialization-script))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-initialization-script-run-context ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-list ()
   '(trivial-types:proper-list studio-component))
 (common-lisp:defun |make-studio-component-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-script-parameter-key-value-list ()
   '(trivial-types:proper-list script-parameter-key-value))
 (common-lisp:defun |make-studio-component-script-parameter-key-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            script-parameter-key-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype studio-component-security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-studio-component-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-state-list ()
   '(trivial-types:proper-list studio-component-state))
 (common-lisp:defun |make-studio-component-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-status-code () 'common-lisp:string)
(common-lisp:deftype studio-component-subtype () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass studio-component-summary common-lisp:nil
                       ((updated-by :initarg :|updatedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-component-summary-updated-by :initform
                         common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %studio-component-summary-updated-at :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or studio-component-type
                                         common-lisp:null)
                         :accessor %studio-component-summary-type :initform
                         common-lisp:nil)
                        (subtype :initarg :|subtype| :type
                         (common-lisp:or studio-component-subtype
                                         common-lisp:null)
                         :accessor %studio-component-summary-subtype :initform
                         common-lisp:nil)
                        (studio-component-id :initarg :|studioComponentId|
                         :type
                         (common-lisp:or studio-component-id common-lisp:null)
                         :accessor
                         %studio-component-summary-studio-component-id
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor %studio-component-summary-name :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or studio-component-description
                                         common-lisp:null)
                         :accessor %studio-component-summary-description
                         :initform common-lisp:nil)
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-component-summary-created-by :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %studio-component-summary-created-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'studio-component-summary 'make-studio-component-summary))
 (common-lisp:defun make-studio-component-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-by updated-at type subtype
                     studio-component-id name description created-by
                     created-at)
   (common-lisp:apply #'common-lisp:make-instance 'studio-component-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype studio-component-summary-list ()
   '(trivial-types:proper-list studio-component-summary))
 (common-lisp:defun |make-studio-component-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            studio-component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-type-list ()
   '(trivial-types:proper-list studio-component-type))
 (common-lisp:defun |make-studio-component-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass studio-encryption-configuration common-lisp:nil
                       ((key-type :initarg :|keyType| :type
                         (common-lisp:or
                          studio-encryption-configuration-key-type
                          common-lisp:null)
                         :accessor %studio-encryption-configuration-key-type
                         :initform (common-lisp:error ":keytype is required"))
                        (key-arn :initarg :|keyArn| :type
                         (common-lisp:or
                          studio-encryption-configuration-key-arn
                          common-lisp:null)
                         :accessor %studio-encryption-configuration-key-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'studio-encryption-configuration
                    'make-studio-encryption-configuration))
 (common-lisp:defun make-studio-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-type key-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'studio-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "keyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype studio-encryption-configuration-key-arn ()
  'common-lisp:string)
(common-lisp:deftype studio-encryption-configuration-key-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-list () '(trivial-types:proper-list studio))
 (common-lisp:defun |make-studio-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass studio-membership common-lisp:nil
                       ((sid :initarg :|sid| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-membership-sid :initform common-lisp:nil)
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-membership-principal-id :initform
                         common-lisp:nil)
                        (persona :initarg :|persona| :type
                         (common-lisp:or studio-persona common-lisp:null)
                         :accessor %studio-membership-persona :initform
                         common-lisp:nil)
                        (identity-store-id :initarg :|identityStoreId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %studio-membership-identity-store-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'studio-membership 'make-studio-membership))
 (common-lisp:defun make-studio-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sid principal-id persona
                     identity-store-id)
   (common-lisp:apply #'common-lisp:make-instance 'studio-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype studio-membership-list ()
   '(trivial-types:proper-list studio-membership))
 (common-lisp:defun |make-studio-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-name () 'common-lisp:string)
(common-lisp:deftype studio-persona () 'common-lisp:string)
(common-lisp:deftype studio-state () 'common-lisp:string)
(common-lisp:deftype studio-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (nimble-error)
     ((code :initarg :|code| :initform common-lisp:nil :reader
       throttling-exception-code)
      (context :initarg :|context| :initform common-lisp:nil :reader
       throttling-exception-context)
      (message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-code
                    'throttling-exception-context
                    'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-profile-member-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-launch-profile-member-request-studio-id
                         :initform (common-lisp:error ":studioid is required"))
                        (principal-id :initarg :|principalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-launch-profile-member-request-principal-id
                         :initform
                         (common-lisp:error ":principalid is required"))
                        (persona :initarg :|persona| :type
                         (common-lisp:or launch-profile-persona
                                         common-lisp:null)
                         :accessor
                         %update-launch-profile-member-request-persona
                         :initform (common-lisp:error ":persona is required"))
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-launch-profile-member-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-launch-profile-member-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-member-request
                    'make-update-launch-profile-member-request))
 (common-lisp:defun make-update-launch-profile-member-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id principal-id persona
                     launch-profile-id client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-profile-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-profile-member-response common-lisp:nil
                       ((member :initarg :|member| :type
                         (common-lisp:or launch-profile-membership
                                         common-lisp:null)
                         :accessor
                         %update-launch-profile-member-response-member
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-member-response
                    'make-update-launch-profile-member-response))
 (common-lisp:defun make-update-launch-profile-member-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-profile-member-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-profile-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-launch-profile-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (studio-component-ids :initarg :|studioComponentIds|
                         :type
                         (common-lisp:or
                          launch-profile-studio-component-id-list
                          common-lisp:null)
                         :accessor
                         %update-launch-profile-request-studio-component-ids
                         :initform common-lisp:nil)
                        (stream-configuration :initarg :|streamConfiguration|
                         :type
                         (common-lisp:or stream-configuration-create
                                         common-lisp:null)
                         :accessor
                         %update-launch-profile-request-stream-configuration
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or launch-profile-name common-lisp:null)
                         :accessor %update-launch-profile-request-name
                         :initform common-lisp:nil)
                        (launch-profile-protocol-versions :initarg
                         :|launchProfileProtocolVersions| :type
                         (common-lisp:or launch-profile-protocol-version-list
                                         common-lisp:null)
                         :accessor
                         %update-launch-profile-request-launch-profile-protocol-versions
                         :initform common-lisp:nil)
                        (launch-profile-id :initarg :|launchProfileId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-launch-profile-request-launch-profile-id
                         :initform
                         (common-lisp:error ":launchprofileid is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or launch-profile-description
                                         common-lisp:null)
                         :accessor %update-launch-profile-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-launch-profile-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-request
                    'make-update-launch-profile-request))
 (common-lisp:defun make-update-launch-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id studio-component-ids
                     stream-configuration name launch-profile-protocol-versions
                     launch-profile-id description client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-profile-response common-lisp:nil
                       ((launch-profile :initarg :|launchProfile| :type
                         (common-lisp:or launch-profile common-lisp:null)
                         :accessor
                         %update-launch-profile-response-launch-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-response
                    'make-update-launch-profile-response))
 (common-lisp:defun make-update-launch-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-streaming-image-request common-lisp:nil
                       ((studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-streaming-image-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (streaming-image-id :initarg :|streamingImageId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-streaming-image-request-streaming-image-id
                         :initform
                         (common-lisp:error ":streamingimageid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or streaming-image-name common-lisp:null)
                         :accessor %update-streaming-image-request-name
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or streaming-image-description
                                         common-lisp:null)
                         :accessor %update-streaming-image-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-streaming-image-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-streaming-image-request
                    'make-update-streaming-image-request))
 (common-lisp:defun make-update-streaming-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-id streaming-image-id name
                     description client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-streaming-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-streaming-image-response common-lisp:nil
                       ((streaming-image :initarg :|streamingImage| :type
                         (common-lisp:or streaming-image common-lisp:null)
                         :accessor
                         %update-streaming-image-response-streaming-image
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-streaming-image-response
                    'make-update-streaming-image-response))
 (common-lisp:defun make-update-streaming-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-image)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-streaming-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-component-request common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or studio-component-type
                                         common-lisp:null)
                         :accessor %update-studio-component-request-type
                         :initform common-lisp:nil)
                        (subtype :initarg :|subtype| :type
                         (common-lisp:or studio-component-subtype
                                         common-lisp:null)
                         :accessor %update-studio-component-request-subtype
                         :initform common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-studio-component-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (studio-component-id :initarg :|studioComponentId|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-studio-component-request-studio-component-id
                         :initform
                         (common-lisp:error ":studiocomponentid is required"))
                        (secure-initialization-role-arn :initarg
                         :|secureInitializationRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-studio-component-request-secure-initialization-role-arn
                         :initform common-lisp:nil)
                        (script-parameters :initarg :|scriptParameters| :type
                         (common-lisp:or
                          studio-component-script-parameter-key-value-list
                          common-lisp:null)
                         :accessor
                         %update-studio-component-request-script-parameters
                         :initform common-lisp:nil)
                        (runtime-role-arn :initarg :|runtimeRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-studio-component-request-runtime-role-arn
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or studio-component-name
                                         common-lisp:null)
                         :accessor %update-studio-component-request-name
                         :initform common-lisp:nil)
                        (initialization-scripts :initarg
                         :|initializationScripts| :type
                         (common-lisp:or
                          studio-component-initialization-script-list
                          common-lisp:null)
                         :accessor
                         %update-studio-component-request-initialization-scripts
                         :initform common-lisp:nil)
                        (ec2security-group-ids :initarg :|ec2SecurityGroupIds|
                         :type
                         (common-lisp:or
                          studio-component-security-group-id-list
                          common-lisp:null)
                         :accessor
                         %update-studio-component-request-ec2security-group-ids
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or studio-component-description
                                         common-lisp:null)
                         :accessor %update-studio-component-request-description
                         :initform common-lisp:nil)
                        (configuration :initarg :|configuration| :type
                         (common-lisp:or studio-component-configuration
                                         common-lisp:null)
                         :accessor
                         %update-studio-component-request-configuration
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-studio-component-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-studio-component-request
                    'make-update-studio-component-request))
 (common-lisp:defun make-update-studio-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type subtype studio-id
                     studio-component-id secure-initialization-role-arn
                     script-parameters runtime-role-arn name
                     initialization-scripts ec2security-group-ids description
                     configuration client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-studio-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-component-response common-lisp:nil
                       ((studio-component :initarg :|studioComponent| :type
                         (common-lisp:or studio-component common-lisp:null)
                         :accessor
                         %update-studio-component-response-studio-component
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-studio-component-response
                    'make-update-studio-component-response))
 (common-lisp:defun make-update-studio-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio-component)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-studio-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-request common-lisp:nil
                       ((user-role-arn :initarg :|userRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-studio-request-user-role-arn :initform
                         common-lisp:nil)
                        (studio-id :initarg :|studioId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-studio-request-studio-id :initform
                         (common-lisp:error ":studioid is required"))
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or studio-display-name common-lisp:null)
                         :accessor %update-studio-request-display-name
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-studio-request-client-token
                         :initform common-lisp:nil)
                        (admin-role-arn :initarg :|adminRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-studio-request-admin-role-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-studio-request 'make-update-studio-request))
 (common-lisp:defun make-update-studio-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-role-arn studio-id display-name
                     client-token admin-role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-studio-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-studio-response common-lisp:nil
                       ((studio :initarg :|studio| :type
                         (common-lisp:or studio common-lisp:null) :accessor
                         %update-studio-response-studio :initform
                         (common-lisp:error ":studio is required"))))
 (common-lisp:export
  (common-lisp:list 'update-studio-response 'make-update-studio-response))
 (common-lisp:defun make-update-studio-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key studio)
   (common-lisp:apply #'common-lisp:make-instance 'update-studio-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (nimble-error)
     ((code :initarg :|code| :initform common-lisp:nil :reader
       validation-exception-code)
      (context :initarg :|context| :initform common-lisp:nil :reader
       validation-exception-context)
      (message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-code
                    'validation-exception-context
                    'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass validation-result common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or launch-profile-validation-type
                                         common-lisp:null)
                         :accessor %validation-result-type :initform
                         (common-lisp:error ":type is required"))
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or
                          launch-profile-validation-status-message
                          common-lisp:null)
                         :accessor %validation-result-status-message :initform
                         (common-lisp:error ":statusmessage is required"))
                        (status-code :initarg :|statusCode| :type
                         (common-lisp:or launch-profile-validation-status-code
                                         common-lisp:null)
                         :accessor %validation-result-status-code :initform
                         (common-lisp:error ":statuscode is required"))
                        (state :initarg :|state| :type
                         (common-lisp:or launch-profile-validation-state
                                         common-lisp:null)
                         :accessor %validation-result-state :initform
                         (common-lisp:error ":state is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-result 'make-validation-result))
 (common-lisp:defun make-validation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type status-message status-code state)
   (common-lisp:apply #'common-lisp:make-instance 'validation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-results ()
   '(trivial-types:proper-list validation-result))
 (common-lisp:defun |make-validation-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass volume-configuration common-lisp:nil
                       ((throughput :initarg :|throughput| :type
                         (common-lisp:or volume-throughput-in-mi-bs
                                         common-lisp:null)
                         :accessor %volume-configuration-throughput :initform
                         common-lisp:nil)
                        (size :initarg :|size| :type
                         (common-lisp:or volume-size-in-gi-b common-lisp:null)
                         :accessor %volume-configuration-size :initform
                         common-lisp:nil)
                        (iops :initarg :|iops| :type
                         (common-lisp:or volume-iops common-lisp:null)
                         :accessor %volume-configuration-iops :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'volume-configuration 'make-volume-configuration))
 (common-lisp:defun make-volume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key throughput size iops)
   (common-lisp:apply #'common-lisp:make-instance 'volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-configuration))
   common-lisp:nil))
(common-lisp:deftype volume-iops () 'common-lisp:integer)
(common-lisp:deftype volume-retention-mode () 'common-lisp:string)
(common-lisp:deftype volume-size-in-gi-b () 'common-lisp:integer)
(common-lisp:deftype volume-throughput-in-mi-bs () 'common-lisp:integer)
(common-lisp:deftype windows-mount-drive () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-eulas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token eula-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token eula-ids studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-eulas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/eula-acceptances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "AcceptEulas"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-eulas))
(common-lisp:progn
 (common-lisp:defun create-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description ec2subnet-ids
                     launch-profile-protocol-versions name stream-configuration
                     studio-component-ids studio-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description ec2subnet-ids
     launch-profile-protocol-versions name stream-configuration
     studio-component-ids studio-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateLaunchProfile"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-launch-profile))
(common-lisp:progn
 (common-lisp:defun create-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description ec2image-id name
                     studio-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description ec2image-id name studio-id
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStreamingImage"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-image))
(common-lisp:progn
 (common-lisp:defun create-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token ec2instance-type
                     launch-profile-id owned-by streaming-image-id studio-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token ec2instance-type launch-profile-id
     owned-by streaming-image-id studio-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-session))
(common-lisp:progn
 (common-lisp:defun create-streaming-session-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token expiration-in-seconds
                     session-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token expiration-in-seconds session-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-streaming-session-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/streams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "CreateStreamingSessionStream"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-session-stream))
(common-lisp:progn
 (common-lisp:defun create-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-role-arn client-token display-name
                     studio-encryption-configuration studio-name tags
                     user-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable admin-role-arn client-token display-name
     studio-encryption-configuration studio-name tags user-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2020-08-01/studios"
                                                        "CreateStudio"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-studio))
(common-lisp:progn
 (common-lisp:defun create-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token configuration description
                     ec2security-group-ids initialization-scripts name
                     runtime-role-arn script-parameters
                     secure-initialization-role-arn studio-id subtype tags
                     type)
   (common-lisp:declare
    (common-lisp:ignorable client-token configuration description
     ec2security-group-ids initialization-scripts name runtime-role-arn
     script-parameters secure-initialization-role-arn studio-id subtype tags
     type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStudioComponent"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-studio-component))
(common-lisp:progn
 (common-lisp:defun delete-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "DeleteLaunchProfile"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch-profile))
(common-lisp:progn
 (common-lisp:defun delete-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id
                     principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id principal-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "DeleteLaunchProfileMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun delete-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token streaming-image-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token streaming-image-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "DeleteStreamingImage"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-streaming-image))
(common-lisp:progn
 (common-lisp:defun delete-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token session-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "DeleteStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-streaming-session))
(common-lisp:progn
 (common-lisp:defun delete-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-id)
   (common-lisp:declare (common-lisp:ignorable client-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "DeleteStudio"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-studio))
(common-lisp:progn
 (common-lisp:defun delete-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-component-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token studio-component-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "DeleteStudioComponent"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-studio-component))
(common-lisp:progn
 (common-lisp:defun delete-studio-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "DeleteStudioMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-studio-member))
(common-lisp:progn
 (common-lisp:defun get-eula
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-id)
   (common-lisp:declare (common-lisp:ignorable eula-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-eula-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/eulas/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'eula-id))))
                                                        "GetEula"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-eula))
(common-lisp:progn
 (common-lisp:defun get-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id studio-id)
   (common-lisp:declare (common-lisp:ignorable launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfile"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-profile))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id studio-id)
   (common-lisp:declare (common-lisp:ignorable launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfileDetails"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-profile-details))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-initialization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id
                     launch-profile-protocol-versions launch-purpose platform
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id launch-profile-protocol-versions
     launch-purpose platform studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-initialization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/init"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfileInitialization"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-profile-initialization))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "GetLaunchProfileMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun get-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key streaming-image-id studio-id)
   (common-lisp:declare (common-lisp:ignorable streaming-image-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "GetStreamingImage"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-image))
(common-lisp:progn
 (common-lisp:defun get-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id studio-id)
   (common-lisp:declare (common-lisp:ignorable session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-session))
(common-lisp:progn
 (common-lisp:defun get-streaming-session-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id studio-id)
   (common-lisp:declare (common-lisp:ignorable backup-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-streaming-session-backup-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-session-backups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-id))))
                                                        "GetStreamingSessionBackup"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-session-backup))
(common-lisp:progn
 (common-lisp:defun get-streaming-session-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id stream-id studio-id)
   (common-lisp:declare (common-lisp:ignorable session-id stream-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-streaming-session-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "GetStreamingSessionStream"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-session-stream))
(common-lisp:progn
 (common-lisp:defun get-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id)
   (common-lisp:declare (common-lisp:ignorable studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "GetStudio"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-studio))
(common-lisp:progn
 (common-lisp:defun get-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-component-id studio-id)
   (common-lisp:declare (common-lisp:ignorable studio-component-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "GetStudioComponent"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-studio-component))
(common-lisp:progn
 (common-lisp:defun get-studio-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-id studio-id)
   (common-lisp:declare (common-lisp:ignorable principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "GetStudioMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-studio-member))
(common-lisp:progn
 (common-lisp:defun list-eula-acceptances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-ids next-token studio-id)
   (common-lisp:declare (common-lisp:ignorable eula-ids next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-eula-acceptances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/eula-acceptances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListEulaAcceptances"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-eula-acceptances))
(common-lisp:progn
 (common-lisp:defun list-eulas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-ids next-token)
   (common-lisp:declare (common-lisp:ignorable eula-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-eulas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2020-08-01/eulas"
                                                        "ListEulas"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-eulas))
(common-lisp:progn
 (common-lisp:defun list-launch-profile-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id max-results next-token
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id max-results next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-launch-profile-members-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "ListLaunchProfileMembers"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-launch-profile-members))
(common-lisp:progn
 (common-lisp:defun list-launch-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token principal-id
                     states studio-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token principal-id states
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-launch-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListLaunchProfiles"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-launch-profiles))
(common-lisp:progn
 (common-lisp:defun list-streaming-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token owner studio-id)
   (common-lisp:declare (common-lisp:ignorable next-token owner studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streaming-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingImages"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streaming-images))
(common-lisp:progn
 (common-lisp:defun list-streaming-session-backups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token owned-by studio-id)
   (common-lisp:declare (common-lisp:ignorable next-token owned-by studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-streaming-session-backups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-session-backups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingSessionBackups"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streaming-session-backups))
(common-lisp:progn
 (common-lisp:defun list-streaming-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key created-by next-token owned-by
                     session-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable created-by next-token owned-by session-ids
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streaming-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingSessions"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streaming-sessions))
(common-lisp:progn
 (common-lisp:defun list-studio-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token states studio-id
                     types)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token states studio-id types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studio-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStudioComponents"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-studio-components))
(common-lisp:progn
 (common-lisp:defun list-studio-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token studio-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studio-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStudioMembers"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-studio-members))
(common-lisp:progn
 (common-lisp:defun list-studios
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studios-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2020-08-01/studios"
                                                        "ListStudios"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-studios))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-launch-profile-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-store-id
                     launch-profile-id members studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-store-id launch-profile-id
     members studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-launch-profile-members-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "PutLaunchProfileMembers"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-launch-profile-members))
(common-lisp:progn
 (common-lisp:defun put-studio-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-store-id members
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-store-id members studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-studio-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "PutStudioMembers"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-studio-members))
(common-lisp:progn
 (common-lisp:defun start-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id client-token session-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable backup-id client-token session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "StartStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-streaming-session))
(common-lisp:progn
 (common-lisp:defun start-studio-ssoconfiguration-repair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-id)
   (common-lisp:declare (common-lisp:ignorable client-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-studio-ssoconfiguration-repair-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/sso-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "StartStudioSSOConfigurationRepair"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-studio-ssoconfiguration-repair))
(common-lisp:progn
 (common-lisp:defun stop-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token session-id studio-id
                     volume-retention-mode)
   (common-lisp:declare
    (common-lisp:ignorable client-token session-id studio-id
     volume-retention-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "StopStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-streaming-session))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     launch-profile-id launch-profile-protocol-versions name
                     stream-configuration studio-component-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token description launch-profile-id
     launch-profile-protocol-versions name stream-configuration
     studio-component-ids studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "UpdateLaunchProfile"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-launch-profile))
(common-lisp:progn
 (common-lisp:defun update-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id persona
                     principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id persona principal-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "UpdateLaunchProfileMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun update-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description name
                     streaming-image-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token description name streaming-image-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "UpdateStreamingImage"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-streaming-image))
(common-lisp:progn
 (common-lisp:defun update-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-role-arn client-token display-name
                     studio-id user-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable admin-role-arn client-token display-name studio-id
     user-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "UpdateStudio"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-studio))
(common-lisp:progn
 (common-lisp:defun update-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token configuration description
                     ec2security-group-ids initialization-scripts name
                     runtime-role-arn script-parameters
                     secure-initialization-role-arn studio-component-id
                     studio-id subtype type)
   (common-lisp:declare
    (common-lisp:ignorable client-token configuration description
     ec2security-group-ids initialization-scripts name runtime-role-arn
     script-parameters secure-initialization-role-arn studio-component-id
     studio-id subtype type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "UpdateStudioComponent"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-studio-component))
