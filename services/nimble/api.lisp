;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/nimble/api
  (:use)
  (:nicknames #:aws/nimble)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/nimble/api)
(common-lisp:progn
 (common-lisp:defclass nimble-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "nimble" :protocol
                        :rest-json))
 (common-lisp:export 'nimble-request))
(common-lisp:progn
 (common-lisp:define-condition nimble-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'nimble-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-eulas-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-eulas-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (eula-ids common-lisp:nil :type
    (common-lisp:or eula-id-list common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-eulas-request 'make-accept-eulas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-ids))
      (common-lisp:list
       (common-lisp:cons "eulaIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-eulas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-eulas-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-eulas-response-"))
   (eula-acceptances common-lisp:nil :type
    (common-lisp:or eula-acceptance-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-eulas-response 'make-accept-eulas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptances))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-eulas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       access-denied-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-context
                    'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (active-directory-computer-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-active-directory-computer-attribute-"))
   (name common-lisp:nil :type
    (common-lisp:or active-directory-computer-attribute-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or active-directory-computer-attribute-value
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'active-directory-computer-attribute
                    'make-active-directory-computer-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-computer-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-directory-computer-attribute-list ()
   '(trivial-types:proper-list active-directory-computer-attribute))
 (common-lisp:defun |make-active-directory-computer-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            active-directory-computer-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype active-directory-computer-attribute-name ()
  'common-lisp:string)
(common-lisp:deftype active-directory-computer-attribute-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (active-directory-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-active-directory-configuration-"))
   (computer-attributes common-lisp:nil :type
    (common-lisp:or active-directory-computer-attribute-list common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (organizational-unit-distinguished-name common-lisp:nil :type
    (common-lisp:or active-directory-organizational-unit-distinguished-name
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'active-directory-configuration
                    'make-active-directory-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "computerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "directoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "organizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-configuration))
   common-lisp:nil))
(common-lisp:deftype active-directory-dns-ip-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype active-directory-dns-ip-address-list ()
   '(trivial-types:proper-list active-directory-dns-ip-address))
 (common-lisp:defun |make-active-directory-dns-ip-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            active-directory-dns-ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype active-directory-organizational-unit-distinguished-name ()
  'common-lisp:string)
(common-lisp:deftype automatic-termination-mode () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (compute-farm-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-compute-farm-configuration-"))
   (active-directory-user common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compute-farm-configuration
                    'make-compute-farm-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-user))
      (common-lisp:list
       (common-lisp:cons "activeDirectoryUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-farm-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       conflict-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       conflict-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-context 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-launch-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-launch-profile-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or launch-profile-description common-lisp:null))
   (ec2subnet-ids (common-lisp:error ":ec2subnetids is required") :type
    (common-lisp:or ec2subnet-id-list common-lisp:null))
   (launch-profile-protocol-versions
    (common-lisp:error ":launchprofileprotocolversions is required") :type
    (common-lisp:or launch-profile-protocol-version-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or launch-profile-name common-lisp:null))
   (stream-configuration (common-lisp:error ":streamconfiguration is required")
    :type (common-lisp:or stream-configuration-create common-lisp:null))
   (studio-component-ids (common-lisp:error ":studiocomponentids is required")
    :type
    (common-lisp:or launch-profile-studio-component-id-list common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-launch-profile-request
                    'make-create-launch-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-launch-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-launch-profile-response-"))
   (launch-profile common-lisp:nil :type
    (common-lisp:or launch-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-launch-profile-response
                    'make-create-launch-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-streaming-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-streaming-image-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or streaming-image-description common-lisp:null))
   (ec2image-id (common-lisp:error ":ec2imageid is required") :type
    (common-lisp:or ec2image-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or streaming-image-name common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-image-request
                    'make-create-streaming-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2image-id))
      (common-lisp:list
       (common-lisp:cons "ec2ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-streaming-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-streaming-image-response-"))
   (streaming-image common-lisp:nil :type
    (common-lisp:or streaming-image common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-image-response
                    'make-create-streaming-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-streaming-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-streaming-session-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (ec2instance-type common-lisp:nil :type
    (common-lisp:or streaming-instance-type common-lisp:null))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (owned-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (streaming-image-id common-lisp:nil :type
    (common-lisp:or streaming-image-id common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-request
                    'make-create-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-streaming-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-streaming-session-response-"))
   (session common-lisp:nil :type
    (common-lisp:or streaming-session common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-response
                    'make-create-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-streaming-session-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-streaming-session-stream-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (expiration-in-seconds common-lisp:nil :type
    (common-lisp:or streaming-session-stream-expiration-in-seconds
                    common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-stream-request
                    'make-create-streaming-session-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expiration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "expirationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-streaming-session-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-streaming-session-stream-response-"))
   (stream common-lisp:nil :type
    (common-lisp:or streaming-session-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-session-stream-response
                    'make-create-streaming-session-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-session-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-studio-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-studio-component-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or studio-component-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or studio-component-description common-lisp:null))
   (ec2security-group-ids common-lisp:nil :type
    (common-lisp:or studio-component-security-group-id-list common-lisp:null))
   (initialization-scripts common-lisp:nil :type
    (common-lisp:or studio-component-initialization-script-list
                    common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or studio-component-name common-lisp:null))
   (runtime-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (script-parameters common-lisp:nil :type
    (common-lisp:or studio-component-script-parameter-key-value-list
                    common-lisp:null))
   (secure-initialization-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null))
   (subtype common-lisp:nil :type
    (common-lisp:or studio-component-subtype common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or studio-component-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-studio-component-request
                    'make-create-studio-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-studio-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-studio-component-response-"))
   (studio-component common-lisp:nil :type
    (common-lisp:or studio-component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-studio-component-response
                    'make-create-studio-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-studio-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-studio-request-"))
   (admin-role-arn (common-lisp:error ":adminrolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or studio-display-name common-lisp:null))
   (studio-encryption-configuration common-lisp:nil :type
    (common-lisp:or studio-encryption-configuration common-lisp:null))
   (studio-name (common-lisp:error ":studioname is required") :type
    (common-lisp:or studio-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (user-role-arn (common-lisp:error ":userrolearn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-studio-request 'make-create-studio-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "studioEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-name))
      (common-lisp:list
       (common-lisp:cons "studioName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-studio-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-studio-response-"))
   (studio common-lisp:nil :type (common-lisp:or studio common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-studio-response 'make-create-studio-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-profile-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-launch-profile-member-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-id (common-lisp:error ":principalid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-member-request
                    'make-delete-launch-profile-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-profile-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-launch-profile-member-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-member-response
                    'make-delete-launch-profile-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-launch-profile-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-request
                    'make-delete-launch-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-launch-profile-response-"))
   (launch-profile common-lisp:nil :type
    (common-lisp:or launch-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-profile-response
                    'make-delete-launch-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-streaming-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-streaming-image-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (streaming-image-id (common-lisp:error ":streamingimageid is required")
    :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-image-request
                    'make-delete-streaming-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-streaming-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-streaming-image-response-"))
   (streaming-image common-lisp:nil :type
    (common-lisp:or streaming-image common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-image-response
                    'make-delete-streaming-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-streaming-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-streaming-session-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-session-request
                    'make-delete-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-streaming-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-streaming-session-response-"))
   (session common-lisp:nil :type
    (common-lisp:or streaming-session common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-session-response
                    'make-delete-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-studio-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-studio-component-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (studio-component-id (common-lisp:error ":studiocomponentid is required")
    :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-component-request
                    'make-delete-studio-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-studio-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-studio-component-response-"))
   (studio-component common-lisp:nil :type
    (common-lisp:or studio-component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-component-response
                    'make-delete-studio-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-studio-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-studio-member-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (principal-id (common-lisp:error ":principalid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-member-request
                    'make-delete-studio-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-studio-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-studio-member-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-studio-member-response
                    'make-delete-studio-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-studio-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-studio-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-request 'make-delete-studio-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-studio-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-studio-response-"))
   (studio (common-lisp:error ":studio is required") :type
    (common-lisp:or studio common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-response 'make-delete-studio-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-response))
   common-lisp:nil))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:deftype ec2image-id () 'common-lisp:string)
(common-lisp:deftype ec2subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ec2subnet-id-list ()
   '(trivial-types:proper-list ec2subnet-id))
 (common-lisp:defun |make-ec2subnet-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (eula (:copier common-lisp:nil) (:conc-name "struct-shape-eula-"))
   (content common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (eula-id common-lisp:nil :type (common-lisp:or eula-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or eula-name common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'eula 'make-eula))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eula))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eula))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-id))
      (common-lisp:list
       (common-lisp:cons "eulaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eula))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (eula-acceptance (:copier common-lisp:nil)
      (:conc-name "struct-shape-eula-acceptance-"))
   (accepted-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (accepted-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (acceptee-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (eula-acceptance-id common-lisp:nil :type
    (common-lisp:or eula-acceptance-id common-lisp:null))
   (eula-id common-lisp:nil :type (common-lisp:or eula-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'eula-acceptance 'make-eula-acceptance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eula-acceptance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eula-acceptance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted-at))
      (common-lisp:list
       (common-lisp:cons "acceptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted-by))
      (common-lisp:list
       (common-lisp:cons "acceptedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptee-id))
      (common-lisp:list
       (common-lisp:cons "accepteeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptance-id))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-id))
      (common-lisp:list
       (common-lisp:cons "eulaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eula-acceptance))
   common-lisp:nil))
(common-lisp:deftype eula-acceptance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eula-acceptance-list ()
   '(trivial-types:proper-list eula-acceptance))
 (common-lisp:defun |make-eula-acceptance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eula-acceptance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype eula-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eula-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-eula-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype eula-list () '(trivial-types:proper-list eula))
 (common-lisp:defun |make-eula-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list eula))
   aws-sdk/generator/shape::members))
(common-lisp:deftype eula-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exception-context () 'common-lisp:hash-table)
 (common-lisp:defun |make-exception-context|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-eula-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-eula-request-"))
   (eula-id (common-lisp:error ":eulaid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-eula-request 'make-get-eula-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-eula-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-eula-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-eula-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-eula-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-eula-response-"))
   (eula common-lisp:nil :type (common-lisp:or eula common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-eula-response 'make-get-eula-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-eula-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-eula-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula))
      (common-lisp:list
       (common-lisp:cons "eula"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-eula-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-profile-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-profile-details-request-"))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-details-request
                    'make-get-launch-profile-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-profile-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-profile-details-response-"))
   (launch-profile common-lisp:nil :type
    (common-lisp:or launch-profile common-lisp:null))
   (streaming-images common-lisp:nil :type
    (common-lisp:or streaming-image-list common-lisp:null))
   (studio-component-summaries common-lisp:nil :type
    (common-lisp:or studio-component-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-details-response
                    'make-get-launch-profile-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-images))
      (common-lisp:list
       (common-lisp:cons "streamingImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-summaries))
      (common-lisp:list
       (common-lisp:cons "studioComponentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-profile-initialization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-profile-initialization-request-"))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (launch-profile-protocol-versions
    (common-lisp:error ":launchprofileprotocolversions is required") :type
    (common-lisp:or string-list common-lisp:null))
   (launch-purpose (common-lisp:error ":launchpurpose is required") :type
    (common-lisp:or string common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-initialization-request
                    'make-get-launch-profile-initialization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-profile-initialization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-profile-initialization-response-"))
   (launch-profile-initialization common-lisp:nil :type
    (common-lisp:or launch-profile-initialization common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-initialization-response
                    'make-get-launch-profile-initialization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-initialization))
      (common-lisp:list
       (common-lisp:cons "launchProfileInitialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-initialization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-profile-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-profile-member-request-"))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-id (common-lisp:error ":principalid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-member-request
                    'make-get-launch-profile-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-profile-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-profile-member-response-"))
   (member common-lisp:nil :type
    (common-lisp:or launch-profile-membership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-member-response
                    'make-get-launch-profile-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-profile-request-"))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-request
                    'make-get-launch-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-profile-response-"))
   (launch-profile common-lisp:nil :type
    (common-lisp:or launch-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-profile-response
                    'make-get-launch-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-streaming-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-streaming-image-request-"))
   (streaming-image-id (common-lisp:error ":streamingimageid is required")
    :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-image-request
                    'make-get-streaming-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-streaming-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-streaming-image-response-"))
   (streaming-image common-lisp:nil :type
    (common-lisp:or streaming-image common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-image-response
                    'make-get-streaming-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-streaming-session-backup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-streaming-session-backup-request-"))
   (backup-id (common-lisp:error ":backupid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-backup-request
                    'make-get-streaming-session-backup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-streaming-session-backup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-streaming-session-backup-response-"))
   (streaming-session-backup common-lisp:nil :type
    (common-lisp:or streaming-session-backup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-backup-response
                    'make-get-streaming-session-backup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-session-backup))
      (common-lisp:list
       (common-lisp:cons "streamingSessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-backup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-streaming-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-streaming-session-request-"))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-request
                    'make-get-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-streaming-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-streaming-session-response-"))
   (session common-lisp:nil :type
    (common-lisp:or streaming-session common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-response
                    'make-get-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-streaming-session-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-streaming-session-stream-request-"))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or string common-lisp:null))
   (stream-id (common-lisp:error ":streamid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-stream-request
                    'make-get-streaming-session-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-streaming-session-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-streaming-session-stream-response-"))
   (stream common-lisp:nil :type
    (common-lisp:or streaming-session-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-session-stream-response
                    'make-get-streaming-session-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-session-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-studio-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-studio-component-request-"))
   (studio-component-id (common-lisp:error ":studiocomponentid is required")
    :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-studio-component-request
                    'make-get-studio-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-studio-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-studio-component-response-"))
   (studio-component common-lisp:nil :type
    (common-lisp:or studio-component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-studio-component-response
                    'make-get-studio-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-studio-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-studio-member-request-"))
   (principal-id (common-lisp:error ":principalid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-studio-member-request
                    'make-get-studio-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-studio-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-studio-member-response-"))
   (member common-lisp:nil :type
    (common-lisp:or studio-membership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-studio-member-response
                    'make-get-studio-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-studio-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-studio-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-studio-request-"))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-studio-request 'make-get-studio-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-studio-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-studio-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-studio-response-"))
   (studio (common-lisp:error ":studio is required") :type
    (common-lisp:or studio common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-studio-response 'make-get-studio-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       internal-server-error-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       internal-server-error-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-code
                    'internal-server-error-exception-context
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-profile-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or launch-profile-description common-lisp:null))
   (ec2subnet-ids common-lisp:nil :type
    (common-lisp:or ec2subnet-id-list common-lisp:null))
   (launch-profile-id common-lisp:nil :type
    (common-lisp:or launch-profile-id common-lisp:null))
   (launch-profile-protocol-versions common-lisp:nil :type
    (common-lisp:or launch-profile-protocol-version-list common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or launch-profile-name common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or launch-profile-state common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or launch-profile-status-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (stream-configuration common-lisp:nil :type
    (common-lisp:or stream-configuration common-lisp:null))
   (studio-component-ids common-lisp:nil :type
    (common-lisp:or launch-profile-studio-component-id-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (validation-results common-lisp:nil :type
    (common-lisp:or validation-results common-lisp:null)))
 (common-lisp:export (common-lisp:list 'launch-profile 'make-launch-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2subnet-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-results))
      (common-lisp:list
       (common-lisp:cons "validationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-profile))
   common-lisp:nil))
(common-lisp:deftype launch-profile-description () 'common-lisp:string)
(common-lisp:deftype launch-profile-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (launch-profile-initialization (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-profile-initialization-"))
   (active-directory common-lisp:nil :type
    (common-lisp:or launch-profile-initialization-active-directory
                    common-lisp:null))
   (ec2security-group-ids common-lisp:nil :type
    (common-lisp:or launch-profile-security-group-id-list common-lisp:null))
   (launch-profile-id common-lisp:nil :type
    (common-lisp:or launch-profile-id common-lisp:null))
   (launch-profile-protocol-version common-lisp:nil :type
    (common-lisp:or launch-profile-protocol-version common-lisp:null))
   (launch-purpose common-lisp:nil :type
    (common-lisp:or launch-purpose common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or launch-profile-name common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or launch-profile-platform common-lisp:null))
   (system-initialization-scripts common-lisp:nil :type
    (common-lisp:or launch-profile-initialization-script-list
                    common-lisp:null))
   (user-initialization-scripts common-lisp:nil :type
    (common-lisp:or launch-profile-initialization-script-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization
                    'make-launch-profile-initialization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-directory))
      (common-lisp:list
       (common-lisp:cons "activeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-version))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-purpose))
      (common-lisp:list
       (common-lisp:cons "launchPurpose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "systemInitializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "userInitializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-profile-initialization-active-directory (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-launch-profile-initialization-active-directory-"))
   (computer-attributes common-lisp:nil :type
    (common-lisp:or active-directory-computer-attribute-list common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (directory-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dns-ip-addresses common-lisp:nil :type
    (common-lisp:or active-directory-dns-ip-address-list common-lisp:null))
   (organizational-unit-distinguished-name common-lisp:nil :type
    (common-lisp:or active-directory-organizational-unit-distinguished-name
                    common-lisp:null))
   (studio-component-id common-lisp:nil :type
    (common-lisp:or studio-component-id common-lisp:null))
   (studio-component-name common-lisp:nil :type
    (common-lisp:or studio-component-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization-active-directory
                    'make-launch-profile-initialization-active-directory))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "computerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "directoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "directoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "dnsIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "organizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-name))
      (common-lisp:list
       (common-lisp:cons "studioComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-active-directory))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-profile-initialization-script (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-profile-initialization-script-"))
   (runtime-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (script common-lisp:nil :type
    (common-lisp:or studio-component-initialization-script-content
                    common-lisp:null))
   (secure-initialization-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (studio-component-id common-lisp:nil :type
    (common-lisp:or studio-component-id common-lisp:null))
   (studio-component-name common-lisp:nil :type
    (common-lisp:or studio-component-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-profile-initialization-script
                    'make-launch-profile-initialization-script))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-name))
      (common-lisp:list
       (common-lisp:cons "studioComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-initialization-script))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-profile-initialization-script-list ()
   '(trivial-types:proper-list launch-profile-initialization-script))
 (common-lisp:defun |make-launch-profile-initialization-script-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-initialization-script))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-profile-list ()
   '(trivial-types:proper-list launch-profile))
 (common-lisp:defun |make-launch-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-profile-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-profile-membership-"))
   (identity-store-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (persona common-lisp:nil :type
    (common-lisp:or launch-profile-persona common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sid common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-profile-membership
                    'make-launch-profile-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-profile-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-profile-membership-list ()
   '(trivial-types:proper-list launch-profile-membership))
 (common-lisp:defun |make-launch-profile-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-name () 'common-lisp:string)
(common-lisp:deftype launch-profile-persona () 'common-lisp:string)
(common-lisp:deftype launch-profile-platform () 'common-lisp:string)
(common-lisp:deftype launch-profile-protocol-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-protocol-version-list ()
   '(trivial-types:proper-list launch-profile-protocol-version))
 (common-lisp:defun |make-launch-profile-protocol-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-profile-protocol-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-profile-security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-launch-profile-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-state-list ()
   '(trivial-types:proper-list launch-profile-state))
 (common-lisp:defun |make-launch-profile-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-profile-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-profile-studio-component-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-launch-profile-studio-component-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-profile-validation-state () 'common-lisp:string)
(common-lisp:deftype launch-profile-validation-status-code ()
  'common-lisp:string)
(common-lisp:deftype launch-profile-validation-status-message ()
  'common-lisp:string)
(common-lisp:deftype launch-profile-validation-type () 'common-lisp:string)
(common-lisp:deftype launch-purpose () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (license-service-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-service-configuration-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'license-service-configuration
                    'make-license-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-service-configuration))
   common-lisp:nil))
(common-lisp:deftype linux-mount-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-eula-acceptances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-eula-acceptances-request-"))
   (eula-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-eula-acceptances-request
                    'make-list-eula-acceptances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-eula-acceptances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-eula-acceptances-response-"))
   (eula-acceptances common-lisp:nil :type
    (common-lisp:or eula-acceptance-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-eula-acceptances-response
                    'make-list-eula-acceptances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-acceptances))
      (common-lisp:list
       (common-lisp:cons "eulaAcceptances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eula-acceptances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-eulas-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-eulas-request-"))
   (eula-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-eulas-request 'make-list-eulas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-eulas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-eulas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-eulas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-eulas-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-eulas-response-"))
   (eulas common-lisp:nil :type (common-lisp:or eula-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-eulas-response 'make-list-eulas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-eulas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-eulas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eulas))
      (common-lisp:list
       (common-lisp:cons "eulas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-eulas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-launch-profile-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-launch-profile-members-request-"))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-launch-profile-members-request
                    'make-list-launch-profile-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-launch-profile-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-launch-profile-members-response-"))
   (members common-lisp:nil :type
    (common-lisp:or launch-profile-membership-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-launch-profile-members-response
                    'make-list-launch-profile-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profile-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-launch-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-launch-profiles-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (states common-lisp:nil :type
    (common-lisp:or launch-profile-state-list common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-launch-profiles-request
                    'make-list-launch-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-launch-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-launch-profiles-response-"))
   (launch-profiles common-lisp:nil :type
    (common-lisp:or launch-profile-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-launch-profiles-response
                    'make-list-launch-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profiles))
      (common-lisp:list
       (common-lisp:cons "launchProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streaming-images-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streaming-images-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-images-request
                    'make-list-streaming-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streaming-images-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streaming-images-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (streaming-images common-lisp:nil :type
    (common-lisp:or streaming-image-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-images-response
                    'make-list-streaming-images-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-images))
      (common-lisp:list
       (common-lisp:cons "streamingImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streaming-session-backups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streaming-session-backups-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owned-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-session-backups-request
                    'make-list-streaming-session-backups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streaming-session-backups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streaming-session-backups-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (streaming-session-backups common-lisp:nil :type
    (common-lisp:or streaming-session-backup-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-session-backups-response
                    'make-list-streaming-session-backups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-session-backups))
      (common-lisp:list
       (common-lisp:cons "streamingSessionBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-session-backups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streaming-sessions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streaming-sessions-request-"))
   (created-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owned-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (session-ids common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-sessions-request
                    'make-list-streaming-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-streaming-sessions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-streaming-sessions-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sessions common-lisp:nil :type
    (common-lisp:or streaming-session-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-sessions-response
                    'make-list-streaming-sessions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-studio-components-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-studio-components-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (states common-lisp:nil :type
    (common-lisp:or studio-component-state-list common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null))
   (types common-lisp:nil :type
    (common-lisp:or studio-component-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-studio-components-request
                    'make-list-studio-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-studio-components-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-studio-components-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studio-components common-lisp:nil :type
    (common-lisp:or studio-component-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-studio-components-response
                    'make-list-studio-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-components))
      (common-lisp:list
       (common-lisp:cons "studioComponents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-studio-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-studio-members-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-studio-members-request
                    'make-list-studio-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-studio-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-studio-members-response-"))
   (members common-lisp:nil :type
    (common-lisp:or studio-membership-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-studio-members-response
                    'make-list-studio-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-studios-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-studios-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-studios-request 'make-list-studios-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-studios-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-studios-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-studios-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-studios-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-studios-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studios (common-lisp:error ":studios is required") :type
    (common-lisp:or studio-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-studios-response 'make-list-studios-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studios))
      (common-lisp:list
       (common-lisp:cons "studios"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studios-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (new-launch-profile-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-new-launch-profile-member-"))
   (persona (common-lisp:error ":persona is required") :type
    (common-lisp:or launch-profile-persona common-lisp:null))
   (principal-id (common-lisp:error ":principalid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-launch-profile-member
                    'make-new-launch-profile-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-launch-profile-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype new-launch-profile-member-list ()
   '(trivial-types:proper-list new-launch-profile-member))
 (common-lisp:defun |make-new-launch-profile-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            new-launch-profile-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (new-studio-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-new-studio-member-"))
   (persona (common-lisp:error ":persona is required") :type
    (common-lisp:or studio-persona common-lisp:null))
   (principal-id (common-lisp:error ":principalid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-studio-member 'make-new-studio-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input new-studio-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input new-studio-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input new-studio-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype new-studio-member-list ()
   '(trivial-types:proper-list new-studio-member))
 (common-lisp:defun |make-new-studio-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list new-studio-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-launch-profile-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-launch-profile-members-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (identity-store-id (common-lisp:error ":identitystoreid is required") :type
    (common-lisp:or string common-lisp:null))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (members (common-lisp:error ":members is required") :type
    (common-lisp:or new-launch-profile-member-list common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-launch-profile-members-request
                    'make-put-launch-profile-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-launch-profile-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-launch-profile-members-response-")))
 (common-lisp:export
  (common-lisp:list 'put-launch-profile-members-response
                    'make-put-launch-profile-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-profile-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-studio-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-studio-members-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (identity-store-id (common-lisp:error ":identitystoreid is required") :type
    (common-lisp:or string common-lisp:null))
   (members (common-lisp:error ":members is required") :type
    (common-lisp:or new-studio-member-list common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-studio-members-request
                    'make-put-studio-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-studio-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-studio-members-response-")))
 (common-lisp:export
  (common-lisp:list 'put-studio-members-response
                    'make-put-studio-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-studio-members-response))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       resource-not-found-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-code
                    'resource-not-found-exception-context
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype script-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (script-parameter-key-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-script-parameter-key-value-"))
   (key common-lisp:nil :type
    (common-lisp:or script-parameter-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or script-parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'script-parameter-key-value
                    'make-script-parameter-key-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          script-parameter-key-value))
   common-lisp:nil))
(common-lisp:deftype script-parameter-value () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       service-quota-exceeded-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-code
                    'service-quota-exceeded-exception-context
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype session-backup-mode () 'common-lisp:string)
(common-lisp:deftype session-persistence-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (shared-file-system-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-shared-file-system-configuration-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null))
   (file-system-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (linux-mount-point common-lisp:nil :type
    (common-lisp:or linux-mount-point common-lisp:null))
   (share-name common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null))
   (windows-mount-drive common-lisp:nil :type
    (common-lisp:or windows-mount-drive common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'shared-file-system-configuration
                    'make-shared-file-system-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux-mount-point))
      (common-lisp:list
       (common-lisp:cons "linuxMountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-name))
      (common-lisp:list
       (common-lisp:cons "shareName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows-mount-drive))
      (common-lisp:list
       (common-lisp:cons "windowsMountDrive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shared-file-system-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-streaming-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-streaming-session-request-"))
   (backup-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-streaming-session-request
                    'make-start-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "backupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-streaming-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-streaming-session-response-"))
   (session common-lisp:nil :type
    (common-lisp:or streaming-session common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-streaming-session-response
                    'make-start-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-studio-ssoconfiguration-repair-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-studio-ssoconfiguration-repair-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-studio-ssoconfiguration-repair-request
                    'make-start-studio-ssoconfiguration-repair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-studio-ssoconfiguration-repair-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-studio-ssoconfiguration-repair-response-"))
   (studio (common-lisp:error ":studio is required") :type
    (common-lisp:or studio common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-studio-ssoconfiguration-repair-response
                    'make-start-studio-ssoconfiguration-repair-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-studio-ssoconfiguration-repair-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-streaming-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-streaming-session-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null))
   (volume-retention-mode common-lisp:nil :type
    (common-lisp:or volume-retention-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-streaming-session-request
                    'make-stop-streaming-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-retention-mode))
      (common-lisp:list
       (common-lisp:cons "volumeRetentionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-streaming-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-streaming-session-response-"))
   (session common-lisp:nil :type
    (common-lisp:or streaming-session common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-streaming-session-response
                    'make-stop-streaming-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-streaming-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stream-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-configuration-"))
   (automatic-termination-mode common-lisp:nil :type
    (common-lisp:or automatic-termination-mode common-lisp:null))
   (clipboard-mode (common-lisp:error ":clipboardmode is required") :type
    (common-lisp:or streaming-clipboard-mode common-lisp:null))
   (ec2instance-types (common-lisp:error ":ec2instancetypes is required") :type
    (common-lisp:or streaming-instance-type-list common-lisp:null))
   (max-session-length-in-minutes common-lisp:nil :type
    (common-lisp:or stream-configuration-max-session-length-in-minutes
                    common-lisp:null))
   (max-stopped-session-length-in-minutes common-lisp:nil :type
    (common-lisp:or stream-configuration-max-stopped-session-length-in-minutes
                    common-lisp:null))
   (session-backup common-lisp:nil :type
    (common-lisp:or stream-configuration-session-backup common-lisp:null))
   (session-persistence-mode common-lisp:nil :type
    (common-lisp:or session-persistence-mode common-lisp:null))
   (session-storage common-lisp:nil :type
    (common-lisp:or stream-configuration-session-storage common-lisp:null))
   (streaming-image-ids (common-lisp:error ":streamingimageids is required")
    :type (common-lisp:or streaming-image-id-list common-lisp:null))
   (volume-configuration common-lisp:nil :type
    (common-lisp:or volume-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-configuration 'make-stream-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clipboard-mode))
      (common-lisp:list
       (common-lisp:cons "clipboardMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-types))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-stopped-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxStoppedSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-backup))
      (common-lisp:list
       (common-lisp:cons "sessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-storage))
      (common-lisp:list
       (common-lisp:cons "sessionStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-ids))
      (common-lisp:list
       (common-lisp:cons "streamingImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stream-configuration-create (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-configuration-create-"))
   (automatic-termination-mode common-lisp:nil :type
    (common-lisp:or automatic-termination-mode common-lisp:null))
   (clipboard-mode (common-lisp:error ":clipboardmode is required") :type
    (common-lisp:or streaming-clipboard-mode common-lisp:null))
   (ec2instance-types (common-lisp:error ":ec2instancetypes is required") :type
    (common-lisp:or streaming-instance-type-list common-lisp:null))
   (max-session-length-in-minutes common-lisp:nil :type
    (common-lisp:or stream-configuration-max-session-length-in-minutes
                    common-lisp:null))
   (max-stopped-session-length-in-minutes common-lisp:nil :type
    (common-lisp:or stream-configuration-max-stopped-session-length-in-minutes
                    common-lisp:null))
   (session-backup common-lisp:nil :type
    (common-lisp:or stream-configuration-session-backup common-lisp:null))
   (session-persistence-mode common-lisp:nil :type
    (common-lisp:or session-persistence-mode common-lisp:null))
   (session-storage common-lisp:nil :type
    (common-lisp:or stream-configuration-session-storage common-lisp:null))
   (streaming-image-ids (common-lisp:error ":streamingimageids is required")
    :type (common-lisp:or streaming-image-id-list common-lisp:null))
   (volume-configuration common-lisp:nil :type
    (common-lisp:or volume-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-create
                    'make-stream-configuration-create))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clipboard-mode))
      (common-lisp:list
       (common-lisp:cons "clipboardMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-types))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-stopped-session-length-in-minutes))
      (common-lisp:list
       (common-lisp:cons "maxStoppedSessionLengthInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-backup))
      (common-lisp:list
       (common-lisp:cons "sessionBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-storage))
      (common-lisp:list
       (common-lisp:cons "sessionStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-ids))
      (common-lisp:list
       (common-lisp:cons "streamingImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-create))
   common-lisp:nil))
(common-lisp:deftype stream-configuration-max-backups-to-retain ()
  'common-lisp:integer)
(common-lisp:deftype stream-configuration-max-session-length-in-minutes ()
  'common-lisp:integer)
(common-lisp:deftype stream-configuration-max-stopped-session-length-in-minutes
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (stream-configuration-session-backup (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-configuration-session-backup-"))
   (max-backups-to-retain common-lisp:nil :type
    (common-lisp:or stream-configuration-max-backups-to-retain
                    common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or session-backup-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-session-backup
                    'make-stream-configuration-session-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-backups-to-retain))
      (common-lisp:list
       (common-lisp:cons "maxBackupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stream-configuration-session-storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-configuration-session-storage-"))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or streaming-session-storage-mode-list common-lisp:null))
   (root common-lisp:nil :type
    (common-lisp:or streaming-session-storage-root common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-configuration-session-storage
                    'make-stream-configuration-session-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root))
      (common-lisp:list
       (common-lisp:cons "root"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-configuration-session-storage))
   common-lisp:nil))
(common-lisp:deftype streaming-clipboard-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (streaming-image (:copier common-lisp:nil)
      (:conc-name "struct-shape-streaming-image-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or streaming-image-description common-lisp:null))
   (ec2image-id common-lisp:nil :type
    (common-lisp:or ec2image-id common-lisp:null))
   (encryption-configuration common-lisp:nil :type
    (common-lisp:or streaming-image-encryption-configuration common-lisp:null))
   (eula-ids common-lisp:nil :type
    (common-lisp:or eula-id-list common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or streaming-image-name common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or streaming-image-owner common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or streaming-image-platform common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or streaming-image-state common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or streaming-image-status-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (streaming-image-id common-lisp:nil :type
    (common-lisp:or streaming-image-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'streaming-image 'make-streaming-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input streaming-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input streaming-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2image-id))
      (common-lisp:list
       (common-lisp:cons "ec2ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eula-ids))
      (common-lisp:list
       (common-lisp:cons "eulaIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input streaming-image))
   common-lisp:nil))
(common-lisp:deftype streaming-image-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (streaming-image-encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-streaming-image-encryption-configuration-"))
   (key-arn common-lisp:nil :type
    (common-lisp:or streaming-image-encryption-configuration-key-arn
                    common-lisp:null))
   (key-type (common-lisp:error ":keytype is required") :type
    (common-lisp:or streaming-image-encryption-configuration-key-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'streaming-image-encryption-configuration
                    'make-streaming-image-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "keyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-image-encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype streaming-image-encryption-configuration-key-arn ()
  'common-lisp:string)
(common-lisp:deftype streaming-image-encryption-configuration-key-type ()
  'common-lisp:string)
(common-lisp:deftype streaming-image-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-image-id-list ()
   '(trivial-types:proper-list streaming-image-id))
 (common-lisp:defun |make-streaming-image-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-image-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype streaming-image-list ()
   '(trivial-types:proper-list streaming-image))
 (common-lisp:defun |make-streaming-image-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-image-name () 'common-lisp:string)
(common-lisp:deftype streaming-image-owner () 'common-lisp:string)
(common-lisp:deftype streaming-image-platform () 'common-lisp:string)
(common-lisp:deftype streaming-image-state () 'common-lisp:string)
(common-lisp:deftype streaming-image-status-code () 'common-lisp:string)
(common-lisp:deftype streaming-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-instance-type-list ()
   '(trivial-types:proper-list streaming-instance-type))
 (common-lisp:defun |make-streaming-instance-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (streaming-session (:copier common-lisp:nil)
      (:conc-name "struct-shape-streaming-session-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (automatic-termination-mode common-lisp:nil :type
    (common-lisp:or automatic-termination-mode common-lisp:null))
   (backup-mode common-lisp:nil :type
    (common-lisp:or session-backup-mode common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (launch-profile-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-backups-to-retain common-lisp:nil :type
    (common-lisp:or stream-configuration-max-backups-to-retain
                    common-lisp:null))
   (owned-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or streaming-session-id common-lisp:null))
   (session-persistence-mode common-lisp:nil :type
    (common-lisp:or session-persistence-mode common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (started-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (started-from-backup-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or streaming-session-state common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or streaming-session-status-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (stop-at common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (stopped-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (stopped-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (streaming-image-id common-lisp:nil :type
    (common-lisp:or streaming-image-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (terminate-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-configuration common-lisp:nil :type
    (common-lisp:or volume-configuration common-lisp:null))
   (volume-retention-mode common-lisp:nil :type
    (common-lisp:or volume-retention-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'streaming-session 'make-streaming-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input streaming-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input streaming-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-termination-mode))
      (common-lisp:list
       (common-lisp:cons "automaticTerminationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-mode))
      (common-lisp:list
       (common-lisp:cons "backupMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-backups-to-retain))
      (common-lisp:list
       (common-lisp:cons "maxBackupsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-persistence-mode))
      (common-lisp:list
       (common-lisp:cons "sessionPersistenceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'started-from-backup-id))
      (common-lisp:list
       (common-lisp:cons "startedFromBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-at))
      (common-lisp:list
       (common-lisp:cons "stopAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-by))
      (common-lisp:list
       (common-lisp:cons "stoppedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image-id))
      (common-lisp:list
       (common-lisp:cons "streamingImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-at))
      (common-lisp:list
       (common-lisp:cons "terminateAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configuration))
      (common-lisp:list
       (common-lisp:cons "volumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-retention-mode))
      (common-lisp:list
       (common-lisp:cons "volumeRetentionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input streaming-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (streaming-session-backup (:copier common-lisp:nil)
      (:conc-name "struct-shape-streaming-session-backup-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (backup-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (launch-profile-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (owned-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or streaming-session-id common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or streaming-session-state common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or streaming-session-status-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'streaming-session-backup 'make-streaming-session-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "backupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile-id))
      (common-lisp:list
       (common-lisp:cons "launchProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype streaming-session-backup-list ()
   '(trivial-types:proper-list streaming-session-backup))
 (common-lisp:defun |make-streaming-session-backup-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            streaming-session-backup))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-session-list ()
   '(trivial-types:proper-list streaming-session))
 (common-lisp:defun |make-streaming-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list streaming-session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype streaming-session-state () 'common-lisp:string)
(common-lisp:deftype streaming-session-status-code () 'common-lisp:string)
(common-lisp:deftype streaming-session-storage-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype streaming-session-storage-mode-list ()
   '(trivial-types:proper-list streaming-session-storage-mode))
 (common-lisp:defun |make-streaming-session-storage-mode-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            streaming-session-storage-mode))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (streaming-session-storage-root (:copier common-lisp:nil)
      (:conc-name "struct-shape-streaming-session-storage-root-"))
   (linux common-lisp:nil :type
    (common-lisp:or streaming-session-storage-root-path-linux
                    common-lisp:null))
   (windows common-lisp:nil :type
    (common-lisp:or streaming-session-storage-root-path-windows
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'streaming-session-storage-root
                    'make-streaming-session-storage-root))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux))
      (common-lisp:list
       (common-lisp:cons "linux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows))
      (common-lisp:list
       (common-lisp:cons "windows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-storage-root))
   common-lisp:nil))
(common-lisp:deftype streaming-session-storage-root-path-linux ()
  'common-lisp:string)
(common-lisp:deftype streaming-session-storage-root-path-windows ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (streaming-session-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-streaming-session-stream-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (expires-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (owned-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or streaming-session-stream-state common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or streaming-session-stream-status-code common-lisp:null))
   (stream-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'streaming-session-stream 'make-streaming-session-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-session-stream))
   common-lisp:nil))
(common-lisp:deftype streaming-session-stream-expiration-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype streaming-session-stream-state () 'common-lisp:string)
(common-lisp:deftype streaming-session-stream-status-code ()
  'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (studio (:copier common-lisp:nil) (:conc-name "struct-shape-studio-"))
   (admin-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or studio-display-name common-lisp:null))
   (home-region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (sso-client-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or studio-state common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or studio-status-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (studio-encryption-configuration common-lisp:nil :type
    (common-lisp:or studio-encryption-configuration common-lisp:null))
   (studio-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (studio-name common-lisp:nil :type
    (common-lisp:or studio-name common-lisp:null))
   (studio-url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (user-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'studio 'make-studio))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "homeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso-client-id))
      (common-lisp:list
       (common-lisp:cons "ssoClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "studioEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-id))
      (common-lisp:list
       (common-lisp:cons "studioId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-name))
      (common-lisp:list
       (common-lisp:cons "studioName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-url))
      (common-lisp:list
       (common-lisp:cons "studioUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (studio-component (:copier common-lisp:nil)
      (:conc-name "struct-shape-studio-component-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or studio-component-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or studio-component-description common-lisp:null))
   (ec2security-group-ids common-lisp:nil :type
    (common-lisp:or studio-component-security-group-id-list common-lisp:null))
   (initialization-scripts common-lisp:nil :type
    (common-lisp:or studio-component-initialization-script-list
                    common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or studio-component-name common-lisp:null))
   (runtime-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (script-parameters common-lisp:nil :type
    (common-lisp:or studio-component-script-parameter-key-value-list
                    common-lisp:null))
   (secure-initialization-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or studio-component-state common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or studio-component-status-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (studio-component-id common-lisp:nil :type
    (common-lisp:or studio-component-id common-lisp:null))
   (subtype common-lisp:nil :type
    (common-lisp:or studio-component-subtype common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or studio-component-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-by common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'studio-component 'make-studio-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (studio-component-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-studio-component-configuration-"))
   (active-directory-configuration common-lisp:nil :type
    (common-lisp:or active-directory-configuration common-lisp:null))
   (compute-farm-configuration common-lisp:nil :type
    (common-lisp:or compute-farm-configuration common-lisp:null))
   (license-service-configuration common-lisp:nil :type
    (common-lisp:or license-service-configuration common-lisp:null))
   (shared-file-system-configuration common-lisp:nil :type
    (common-lisp:or shared-file-system-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'studio-component-configuration
                    'make-studio-component-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "activeDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compute-farm-configuration))
      (common-lisp:list
       (common-lisp:cons "computeFarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-service-configuration))
      (common-lisp:list
       (common-lisp:cons "licenseServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-file-system-configuration))
      (common-lisp:list
       (common-lisp:cons "sharedFileSystemConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-configuration))
   common-lisp:nil))
(common-lisp:deftype studio-component-description () 'common-lisp:string)
(common-lisp:deftype studio-component-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (studio-component-initialization-script (:copier common-lisp:nil)
      (:conc-name "struct-shape-studio-component-initialization-script-"))
   (launch-profile-protocol-version common-lisp:nil :type
    (common-lisp:or launch-profile-protocol-version common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or launch-profile-platform common-lisp:null))
   (run-context common-lisp:nil :type
    (common-lisp:or studio-component-initialization-script-run-context
                    common-lisp:null))
   (script common-lisp:nil :type
    (common-lisp:or studio-component-initialization-script-content
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'studio-component-initialization-script
                    'make-studio-component-initialization-script))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-version))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-context))
      (common-lisp:list
       (common-lisp:cons "runContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-initialization-script))
   common-lisp:nil))
(common-lisp:deftype studio-component-initialization-script-content ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-initialization-script-list ()
   '(trivial-types:proper-list studio-component-initialization-script))
 (common-lisp:defun |make-studio-component-initialization-script-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            studio-component-initialization-script))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-initialization-script-run-context ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-list ()
   '(trivial-types:proper-list studio-component))
 (common-lisp:defun |make-studio-component-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-script-parameter-key-value-list ()
   '(trivial-types:proper-list script-parameter-key-value))
 (common-lisp:defun |make-studio-component-script-parameter-key-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            script-parameter-key-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype studio-component-security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-studio-component-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-state-list ()
   '(trivial-types:proper-list studio-component-state))
 (common-lisp:defun |make-studio-component-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-status-code () 'common-lisp:string)
(common-lisp:deftype studio-component-subtype () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (studio-component-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-studio-component-summary-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or studio-component-description common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or studio-component-name common-lisp:null))
   (studio-component-id common-lisp:nil :type
    (common-lisp:or studio-component-id common-lisp:null))
   (subtype common-lisp:nil :type
    (common-lisp:or studio-component-subtype common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or studio-component-type common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-by common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'studio-component-summary 'make-studio-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component-id))
      (common-lisp:list
       (common-lisp:cons "studioComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "updatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype studio-component-summary-list ()
   '(trivial-types:proper-list studio-component-summary))
 (common-lisp:defun |make-studio-component-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            studio-component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-component-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-component-type-list ()
   '(trivial-types:proper-list studio-component-type))
 (common-lisp:defun |make-studio-component-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-component-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (studio-encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-studio-encryption-configuration-"))
   (key-arn common-lisp:nil :type
    (common-lisp:or studio-encryption-configuration-key-arn common-lisp:null))
   (key-type (common-lisp:error ":keytype is required") :type
    (common-lisp:or studio-encryption-configuration-key-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'studio-encryption-configuration
                    'make-studio-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "keyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype studio-encryption-configuration-key-arn ()
  'common-lisp:string)
(common-lisp:deftype studio-encryption-configuration-key-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-list () '(trivial-types:proper-list studio))
 (common-lisp:defun |make-studio-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (studio-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-studio-membership-"))
   (identity-store-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (persona common-lisp:nil :type
    (common-lisp:or studio-persona common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sid common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'studio-membership 'make-studio-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input studio-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input studio-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-store-id))
      (common-lisp:list
       (common-lisp:cons "identityStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input studio-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype studio-membership-list ()
   '(trivial-types:proper-list studio-membership))
 (common-lisp:defun |make-studio-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list studio-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype studio-name () 'common-lisp:string)
(common-lisp:deftype studio-persona () 'common-lisp:string)
(common-lisp:deftype studio-state () 'common-lisp:string)
(common-lisp:deftype studio-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       throttling-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       throttling-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-code
                    'throttling-exception-context
                    'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-profile-member-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-launch-profile-member-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (persona (common-lisp:error ":persona is required") :type
    (common-lisp:or launch-profile-persona common-lisp:null))
   (principal-id (common-lisp:error ":principalid is required") :type
    (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-member-request
                    'make-update-launch-profile-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persona))
      (common-lisp:list
       (common-lisp:cons "persona"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-profile-member-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-launch-profile-member-response-"))
   (member common-lisp:nil :type
    (common-lisp:or launch-profile-membership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-member-response
                    'make-update-launch-profile-member-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member))
      (common-lisp:list
       (common-lisp:cons "member"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-member-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-launch-profile-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or launch-profile-description common-lisp:null))
   (launch-profile-id (common-lisp:error ":launchprofileid is required") :type
    (common-lisp:or string common-lisp:null))
   (launch-profile-protocol-versions common-lisp:nil :type
    (common-lisp:or launch-profile-protocol-version-list common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or launch-profile-name common-lisp:null))
   (stream-configuration common-lisp:nil :type
    (common-lisp:or stream-configuration-create common-lisp:null))
   (studio-component-ids common-lisp:nil :type
    (common-lisp:or launch-profile-studio-component-id-list common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-request
                    'make-update-launch-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-profile-protocol-versions))
      (common-lisp:list
       (common-lisp:cons "launchProfileProtocolVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "streamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-component-ids))
      (common-lisp:list
       (common-lisp:cons "studioComponentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-launch-profile-response-"))
   (launch-profile common-lisp:nil :type
    (common-lisp:or launch-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-profile-response
                    'make-update-launch-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-profile))
      (common-lisp:list
       (common-lisp:cons "launchProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-streaming-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-streaming-image-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or streaming-image-description common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or streaming-image-name common-lisp:null))
   (streaming-image-id (common-lisp:error ":streamingimageid is required")
    :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-streaming-image-request
                    'make-update-streaming-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-streaming-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-streaming-image-response-"))
   (streaming-image common-lisp:nil :type
    (common-lisp:or streaming-image common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-streaming-image-response
                    'make-update-streaming-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-image))
      (common-lisp:list
       (common-lisp:cons "streamingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-studio-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-studio-component-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or studio-component-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or studio-component-description common-lisp:null))
   (ec2security-group-ids common-lisp:nil :type
    (common-lisp:or studio-component-security-group-id-list common-lisp:null))
   (initialization-scripts common-lisp:nil :type
    (common-lisp:or studio-component-initialization-script-list
                    common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or studio-component-name common-lisp:null))
   (runtime-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (script-parameters common-lisp:nil :type
    (common-lisp:or studio-component-script-parameter-key-value-list
                    common-lisp:null))
   (secure-initialization-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (studio-component-id (common-lisp:error ":studiocomponentid is required")
    :type (common-lisp:or string common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null))
   (subtype common-lisp:nil :type
    (common-lisp:or studio-component-subtype common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or studio-component-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-studio-component-request
                    'make-update-studio-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-ids))
      (common-lisp:list
       (common-lisp:cons "ec2SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-scripts))
      (common-lisp:list
       (common-lisp:cons "initializationScripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-role-arn))
      (common-lisp:list
       (common-lisp:cons "runtimeRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-parameters))
      (common-lisp:list
       (common-lisp:cons "scriptParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secure-initialization-role-arn))
      (common-lisp:list
       (common-lisp:cons "secureInitializationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-studio-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-studio-component-response-"))
   (studio-component common-lisp:nil :type
    (common-lisp:or studio-component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-studio-component-response
                    'make-update-studio-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio-component))
      (common-lisp:list
       (common-lisp:cons "studioComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-studio-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-studio-request-"))
   (admin-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or studio-display-name common-lisp:null))
   (studio-id (common-lisp:error ":studioid is required") :type
    (common-lisp:or string common-lisp:null))
   (user-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-studio-request 'make-update-studio-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:cons "X-Amz-Client-Token" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-role-arn))
      (common-lisp:list
       (common-lisp:cons "adminRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-role-arn))
      (common-lisp:list
       (common-lisp:cons "userRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-studio-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-studio-response-"))
   (studio (common-lisp:error ":studio is required") :type
    (common-lisp:or studio common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-studio-response 'make-update-studio-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'studio))
      (common-lisp:list
       (common-lisp:cons "studio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-studio-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (nimble-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       validation-exception-code)
      (context :initarg :context :initform common-lisp:nil :reader
       validation-exception-context)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-code
                    'validation-exception-context
                    'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-result-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or launch-profile-validation-state common-lisp:null))
   (status-code (common-lisp:error ":statuscode is required") :type
    (common-lisp:or launch-profile-validation-status-code common-lisp:null))
   (status-message (common-lisp:error ":statusmessage is required") :type
    (common-lisp:or launch-profile-validation-status-message common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or launch-profile-validation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-result 'make-validation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-results ()
   '(trivial-types:proper-list validation-result))
 (common-lisp:defun |make-validation-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (volume-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-configuration-"))
   (iops common-lisp:nil :type (common-lisp:or volume-iops common-lisp:null))
   (size common-lisp:nil :type
    (common-lisp:or volume-size-in-gi-b common-lisp:null))
   (throughput common-lisp:nil :type
    (common-lisp:or volume-throughput-in-mi-bs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'volume-configuration 'make-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-configuration))
   common-lisp:nil))
(common-lisp:deftype volume-iops () 'common-lisp:integer)
(common-lisp:deftype volume-retention-mode () 'common-lisp:string)
(common-lisp:deftype volume-size-in-gi-b () 'common-lisp:integer)
(common-lisp:deftype volume-throughput-in-mi-bs () 'common-lisp:integer)
(common-lisp:deftype windows-mount-drive () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-eulas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token eula-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token eula-ids studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-eulas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/eula-acceptances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "AcceptEulas"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-eulas))
(common-lisp:progn
 (common-lisp:defun create-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description ec2subnet-ids
                     launch-profile-protocol-versions name stream-configuration
                     studio-component-ids studio-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description ec2subnet-ids
     launch-profile-protocol-versions name stream-configuration
     studio-component-ids studio-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateLaunchProfile"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-launch-profile))
(common-lisp:progn
 (common-lisp:defun create-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description ec2image-id name
                     studio-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description ec2image-id name studio-id
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStreamingImage"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-image))
(common-lisp:progn
 (common-lisp:defun create-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token ec2instance-type
                     launch-profile-id owned-by streaming-image-id studio-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token ec2instance-type launch-profile-id
     owned-by streaming-image-id studio-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-session))
(common-lisp:progn
 (common-lisp:defun create-streaming-session-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token expiration-in-seconds
                     session-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token expiration-in-seconds session-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-streaming-session-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/streams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "CreateStreamingSessionStream"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-session-stream))
(common-lisp:progn
 (common-lisp:defun create-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-role-arn client-token display-name
                     studio-encryption-configuration studio-name tags
                     user-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable admin-role-arn client-token display-name
     studio-encryption-configuration studio-name tags user-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2020-08-01/studios"
                                                        "CreateStudio"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-studio))
(common-lisp:progn
 (common-lisp:defun create-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token configuration description
                     ec2security-group-ids initialization-scripts name
                     runtime-role-arn script-parameters
                     secure-initialization-role-arn studio-id subtype tags
                     type)
   (common-lisp:declare
    (common-lisp:ignorable client-token configuration description
     ec2security-group-ids initialization-scripts name runtime-role-arn
     script-parameters secure-initialization-role-arn studio-id subtype tags
     type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "CreateStudioComponent"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-studio-component))
(common-lisp:progn
 (common-lisp:defun delete-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "DeleteLaunchProfile"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch-profile))
(common-lisp:progn
 (common-lisp:defun delete-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id
                     principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id principal-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "DeleteLaunchProfileMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun delete-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token streaming-image-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token streaming-image-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "DeleteStreamingImage"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-streaming-image))
(common-lisp:progn
 (common-lisp:defun delete-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token session-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "DeleteStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-streaming-session))
(common-lisp:progn
 (common-lisp:defun delete-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-id)
   (common-lisp:declare (common-lisp:ignorable client-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "DeleteStudio"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-studio))
(common-lisp:progn
 (common-lisp:defun delete-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-component-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token studio-component-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "DeleteStudioComponent"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-studio-component))
(common-lisp:progn
 (common-lisp:defun delete-studio-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-studio-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "DeleteStudioMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-studio-member))
(common-lisp:progn
 (common-lisp:defun get-eula
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-id)
   (common-lisp:declare (common-lisp:ignorable eula-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-eula-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/eulas/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'eula-id))))
                                                        "GetEula"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-eula))
(common-lisp:progn
 (common-lisp:defun get-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id studio-id)
   (common-lisp:declare (common-lisp:ignorable launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfile"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-profile))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id studio-id)
   (common-lisp:declare (common-lisp:ignorable launch-profile-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfileDetails"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-profile-details))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-initialization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id
                     launch-profile-protocol-versions launch-purpose platform
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id launch-profile-protocol-versions
     launch-purpose platform studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-initialization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/init"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "GetLaunchProfileInitialization"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-profile-initialization))
(common-lisp:progn
 (common-lisp:defun get-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "GetLaunchProfileMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun get-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key streaming-image-id studio-id)
   (common-lisp:declare (common-lisp:ignorable streaming-image-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "GetStreamingImage"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-image))
(common-lisp:progn
 (common-lisp:defun get-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id studio-id)
   (common-lisp:declare (common-lisp:ignorable session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-session))
(common-lisp:progn
 (common-lisp:defun get-streaming-session-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id studio-id)
   (common-lisp:declare (common-lisp:ignorable backup-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-streaming-session-backup-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-session-backups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backup-id))))
                                                        "GetStreamingSessionBackup"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-session-backup))
(common-lisp:progn
 (common-lisp:defun get-streaming-session-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id stream-id studio-id)
   (common-lisp:declare (common-lisp:ignorable session-id stream-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-streaming-session-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "GetStreamingSessionStream"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-session-stream))
(common-lisp:progn
 (common-lisp:defun get-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-id)
   (common-lisp:declare (common-lisp:ignorable studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "GetStudio"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-studio))
(common-lisp:progn
 (common-lisp:defun get-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-component-id studio-id)
   (common-lisp:declare (common-lisp:ignorable studio-component-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "GetStudioComponent"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-studio-component))
(common-lisp:progn
 (common-lisp:defun get-studio-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-id studio-id)
   (common-lisp:declare (common-lisp:ignorable principal-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-studio-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "GetStudioMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-studio-member))
(common-lisp:progn
 (common-lisp:defun list-eula-acceptances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-ids next-token studio-id)
   (common-lisp:declare (common-lisp:ignorable eula-ids next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-eula-acceptances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/eula-acceptances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListEulaAcceptances"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-eula-acceptances))
(common-lisp:progn
 (common-lisp:defun list-eulas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key eula-ids next-token)
   (common-lisp:declare (common-lisp:ignorable eula-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-eulas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2020-08-01/eulas"
                                                        "ListEulas"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-eulas))
(common-lisp:progn
 (common-lisp:defun list-launch-profile-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-profile-id max-results next-token
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-profile-id max-results next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-launch-profile-members-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "ListLaunchProfileMembers"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-launch-profile-members))
(common-lisp:progn
 (common-lisp:defun list-launch-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token principal-id
                     states studio-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token principal-id states
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-launch-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListLaunchProfiles"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-launch-profiles))
(common-lisp:progn
 (common-lisp:defun list-streaming-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token owner studio-id)
   (common-lisp:declare (common-lisp:ignorable next-token owner studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streaming-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingImages"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streaming-images))
(common-lisp:progn
 (common-lisp:defun list-streaming-session-backups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token owned-by studio-id)
   (common-lisp:declare (common-lisp:ignorable next-token owned-by studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-streaming-session-backups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-session-backups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingSessionBackups"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streaming-session-backups))
(common-lisp:progn
 (common-lisp:defun list-streaming-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key created-by next-token owned-by
                     session-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable created-by next-token owned-by session-ids
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streaming-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStreamingSessions"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streaming-sessions))
(common-lisp:progn
 (common-lisp:defun list-studio-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token states studio-id
                     types)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token states studio-id types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studio-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStudioComponents"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-studio-components))
(common-lisp:progn
 (common-lisp:defun list-studio-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token studio-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studio-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "ListStudioMembers"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-studio-members))
(common-lisp:progn
 (common-lisp:defun list-studios
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-studios-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2020-08-01/studios"
                                                        "ListStudios"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-studios))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-launch-profile-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-store-id
                     launch-profile-id members studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-store-id launch-profile-id
     members studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-launch-profile-members-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "PutLaunchProfileMembers"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-launch-profile-members))
(common-lisp:progn
 (common-lisp:defun put-studio-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-store-id members
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-store-id members studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-studio-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/membership"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "PutStudioMembers"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-studio-members))
(common-lisp:progn
 (common-lisp:defun start-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id client-token session-id
                     studio-id)
   (common-lisp:declare
    (common-lisp:ignorable backup-id client-token session-id studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "StartStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-streaming-session))
(common-lisp:progn
 (common-lisp:defun start-studio-ssoconfiguration-repair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token studio-id)
   (common-lisp:declare (common-lisp:ignorable client-token studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-studio-ssoconfiguration-repair-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/sso-configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "StartStudioSSOConfigurationRepair"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-studio-ssoconfiguration-repair))
(common-lisp:progn
 (common-lisp:defun stop-streaming-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token session-id studio-id
                     volume-retention-mode)
   (common-lisp:declare
    (common-lisp:ignorable client-token session-id studio-id
     volume-retention-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-streaming-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-sessions/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "StopStreamingSession"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-streaming-session))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-launch-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     launch-profile-id launch-profile-protocol-versions name
                     stream-configuration studio-component-ids studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token description launch-profile-id
     launch-profile-protocol-versions name stream-configuration
     studio-component-ids studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-launch-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))))
                                                        "UpdateLaunchProfile"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-launch-profile))
(common-lisp:progn
 (common-lisp:defun update-launch-profile-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token launch-profile-id persona
                     principal-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token launch-profile-id persona principal-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-launch-profile-member-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/launch-profiles/~A/membership/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'launch-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "UpdateLaunchProfileMember"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-launch-profile-member))
(common-lisp:progn
 (common-lisp:defun update-streaming-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description name
                     streaming-image-id studio-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token description name streaming-image-id
     studio-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-streaming-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/streaming-images/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'streaming-image-id))))
                                                        "UpdateStreamingImage"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-streaming-image))
(common-lisp:progn
 (common-lisp:defun update-studio
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-role-arn client-token display-name
                     studio-id user-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable admin-role-arn client-token display-name studio-id
     user-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-studio-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))))
                                                        "UpdateStudio"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-studio))
(common-lisp:progn
 (common-lisp:defun update-studio-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token configuration description
                     ec2security-group-ids initialization-scripts name
                     runtime-role-arn script-parameters
                     secure-initialization-role-arn studio-component-id
                     studio-id subtype type)
   (common-lisp:declare
    (common-lisp:ignorable client-token configuration description
     ec2security-group-ids initialization-scripts name runtime-role-arn
     script-parameters secure-initialization-role-arn studio-component-id
     studio-id subtype type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-studio-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'nimble-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-08-01/studios/~A/studio-components/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'studio-component-id))))
                                                        "UpdateStudioComponent"
                                                        "2020-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-studio-component))
