;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/managedblockchain-query/api
  (:use)
  (:nicknames #:aws/managedblockchain-query)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/managedblockchain-query/api)
(common-lisp:progn
 (common-lisp:define-condition managedblockchain-query-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'managedblockchain-query-error))
(common-lisp:progn
 (common-lisp:defclass managedblockchain-query-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "managedblockchain-query"
                        :api-version "2023-05-04" :host-prefix
                        "managedblockchain-query" :signing-name
                        "managedblockchain-query" :global-host
                        common-lisp:nil))
 (common-lisp:export 'managedblockchain-query-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (managedblockchain-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-contract (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-contract-"))
   (contract-identifier (common-lisp:error ":contractidentifier is required")
    :type (common-lisp:or contract-identifier common-lisp:null))
   (token-standard (common-lisp:error ":tokenstandard is required") :type
    (common-lisp:or query-token-standard common-lisp:null))
   (deployer-address (common-lisp:error ":deployeraddress is required") :type
    (common-lisp:or chain-address common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-contract 'make-asset-contract))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-contract))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-contract))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-identifier))
      (common-lisp:list
       (common-lisp:cons "contractIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-standard))
      (common-lisp:list
       (common-lisp:cons "tokenStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployer-address))
      (common-lisp:list
       (common-lisp:cons "deployerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-contract))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-contract-list ()
   '(trivial-types:proper-list asset-contract))
 (common-lisp:defun make-asset-contract-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-contract))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-token-balance-error-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-token-balance-error-item-"))
   (token-identifier common-lisp:nil :type
    (common-lisp:or token-identifier common-lisp:null))
   (owner-identifier common-lisp:nil :type
    (common-lisp:or owner-identifier common-lisp:null))
   (at-blockchain-instant common-lisp:nil :type
    (common-lisp:or blockchain-instant common-lisp:null))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or string common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or string common-lisp:null))
   (error-type (common-lisp:error ":errortype is required") :type
    (common-lisp:or error-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-token-balance-error-item
                    'make-batch-get-token-balance-error-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-error-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-error-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-identifier))
      (common-lisp:list
       (common-lisp:cons "tokenIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-identifier))
      (common-lisp:list
       (common-lisp:cons "ownerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-blockchain-instant))
      (common-lisp:list
       (common-lisp:cons "atBlockchainInstant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "errorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-error-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-token-balance-errors ()
   '(trivial-types:proper-list batch-get-token-balance-error-item))
 (common-lisp:defun make-batch-get-token-balance-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-token-balance-error-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-token-balance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-token-balance-input-"))
   (get-token-balance-inputs common-lisp:nil :type
    (common-lisp:or get-token-balance-input-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-token-balance-input
                    'make-batch-get-token-balance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-token-balance-inputs))
      (common-lisp:list
       (common-lisp:cons "getTokenBalanceInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-token-balance-input-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-token-balance-input-item-"))
   (token-identifier (common-lisp:error ":tokenidentifier is required") :type
    (common-lisp:or token-identifier common-lisp:null))
   (owner-identifier (common-lisp:error ":owneridentifier is required") :type
    (common-lisp:or owner-identifier common-lisp:null))
   (at-blockchain-instant common-lisp:nil :type
    (common-lisp:or blockchain-instant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-token-balance-input-item
                    'make-batch-get-token-balance-input-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-input-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-input-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-identifier))
      (common-lisp:list
       (common-lisp:cons "tokenIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-identifier))
      (common-lisp:list
       (common-lisp:cons "ownerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-blockchain-instant))
      (common-lisp:list
       (common-lisp:cons "atBlockchainInstant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-input-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-token-balance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-token-balance-output-"))
   (token-balances (common-lisp:error ":tokenbalances is required") :type
    (common-lisp:or batch-get-token-balance-output-list common-lisp:null))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-get-token-balance-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-token-balance-output
                    'make-batch-get-token-balance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-balances))
      (common-lisp:list
       (common-lisp:cons "tokenBalances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-token-balance-output-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-token-balance-output-item-"))
   (owner-identifier common-lisp:nil :type
    (common-lisp:or owner-identifier common-lisp:null))
   (token-identifier common-lisp:nil :type
    (common-lisp:or token-identifier common-lisp:null))
   (balance (common-lisp:error ":balance is required") :type
    (common-lisp:or string common-lisp:null))
   (at-blockchain-instant
    (common-lisp:error ":atblockchaininstant is required") :type
    (common-lisp:or blockchain-instant common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or blockchain-instant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-token-balance-output-item
                    'make-batch-get-token-balance-output-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-output-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-output-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-identifier))
      (common-lisp:list
       (common-lisp:cons "ownerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-identifier))
      (common-lisp:list
       (common-lisp:cons "tokenIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'balance))
      (common-lisp:list
       (common-lisp:cons "balance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-blockchain-instant))
      (common-lisp:list
       (common-lisp:cons "atBlockchainInstant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-token-balance-output-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-token-balance-output-list ()
   '(trivial-types:proper-list batch-get-token-balance-output-item))
 (common-lisp:defun make-batch-get-token-balance-output-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-token-balance-output-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype block-hash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (blockchain-instant (:copier common-lisp:nil)
      (:conc-name "struct-shape-blockchain-instant-"))
   (time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blockchain-instant 'make-blockchain-instant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blockchain-instant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blockchain-instant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blockchain-instant))
   common-lisp:nil))
(common-lisp:deftype chain-address () 'common-lisp:string)
(common-lisp:deftype confirmation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (confirmation-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirmation-status-filter-"))
   (include (common-lisp:error ":include is required") :type
    (common-lisp:or confirmation-status-include-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirmation-status-filter
                    'make-confirmation-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirmation-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirmation-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirmation-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype confirmation-status-include-list ()
   '(trivial-types:proper-list confirmation-status))
 (common-lisp:defun make-confirmation-status-include-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list confirmation-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (contract-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-contract-filter-"))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (token-standard (common-lisp:error ":tokenstandard is required") :type
    (common-lisp:or query-token-standard common-lisp:null))
   (deployer-address (common-lisp:error ":deployeraddress is required") :type
    (common-lisp:or chain-address common-lisp:null)))
 (common-lisp:export (common-lisp:list 'contract-filter 'make-contract-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contract-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contract-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-standard))
      (common-lisp:list
       (common-lisp:cons "tokenStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployer-address))
      (common-lisp:list
       (common-lisp:cons "deployerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contract-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (contract-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-contract-identifier-"))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (contract-address (common-lisp:error ":contractaddress is required") :type
    (common-lisp:or chain-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contract-identifier 'make-contract-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contract-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contract-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-address))
      (common-lisp:list
       (common-lisp:cons "contractAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contract-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (contract-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-contract-metadata-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (symbol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (decimals common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contract-metadata 'make-contract-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contract-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contract-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'symbol))
      (common-lisp:list
       (common-lisp:cons "symbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimals))
      (common-lisp:list
       (common-lisp:cons "decimals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contract-metadata))
   common-lisp:nil))
(common-lisp:deftype error-type () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-contract-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-contract-input-"))
   (contract-identifier (common-lisp:error ":contractidentifier is required")
    :type (common-lisp:or contract-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-contract-input 'make-get-asset-contract-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-contract-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-contract-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-identifier))
      (common-lisp:list
       (common-lisp:cons "contractIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-contract-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-contract-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-contract-output-"))
   (contract-identifier (common-lisp:error ":contractidentifier is required")
    :type (common-lisp:or contract-identifier common-lisp:null))
   (token-standard (common-lisp:error ":tokenstandard is required") :type
    (common-lisp:or query-token-standard common-lisp:null))
   (deployer-address (common-lisp:error ":deployeraddress is required") :type
    (common-lisp:or chain-address common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or contract-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-contract-output
                    'make-get-asset-contract-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-contract-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-contract-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-identifier))
      (common-lisp:list
       (common-lisp:cons "contractIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-standard))
      (common-lisp:list
       (common-lisp:cons "tokenStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployer-address))
      (common-lisp:list
       (common-lisp:cons "deployerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-contract-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-token-balance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-token-balance-input-"))
   (token-identifier (common-lisp:error ":tokenidentifier is required") :type
    (common-lisp:or token-identifier common-lisp:null))
   (owner-identifier (common-lisp:error ":owneridentifier is required") :type
    (common-lisp:or owner-identifier common-lisp:null))
   (at-blockchain-instant common-lisp:nil :type
    (common-lisp:or blockchain-instant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-token-balance-input 'make-get-token-balance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-token-balance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-token-balance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-identifier))
      (common-lisp:list
       (common-lisp:cons "tokenIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-identifier))
      (common-lisp:list
       (common-lisp:cons "ownerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-blockchain-instant))
      (common-lisp:list
       (common-lisp:cons "atBlockchainInstant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-token-balance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-token-balance-input-list ()
   '(trivial-types:proper-list batch-get-token-balance-input-item))
 (common-lisp:defun make-get-token-balance-input-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-token-balance-input-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-token-balance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-token-balance-output-"))
   (owner-identifier common-lisp:nil :type
    (common-lisp:or owner-identifier common-lisp:null))
   (token-identifier common-lisp:nil :type
    (common-lisp:or token-identifier common-lisp:null))
   (balance (common-lisp:error ":balance is required") :type
    (common-lisp:or string common-lisp:null))
   (at-blockchain-instant
    (common-lisp:error ":atblockchaininstant is required") :type
    (common-lisp:or blockchain-instant common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or blockchain-instant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-token-balance-output 'make-get-token-balance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-token-balance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-token-balance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-identifier))
      (common-lisp:list
       (common-lisp:cons "ownerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-identifier))
      (common-lisp:list
       (common-lisp:cons "tokenIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'balance))
      (common-lisp:list
       (common-lisp:cons "balance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-blockchain-instant))
      (common-lisp:list
       (common-lisp:cons "atBlockchainInstant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-token-balance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transaction-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transaction-input-"))
   (transaction-hash (common-lisp:error ":transactionhash is required") :type
    (common-lisp:or query-transaction-hash common-lisp:null))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transaction-input 'make-get-transaction-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transaction-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transaction-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-hash))
      (common-lisp:list
       (common-lisp:cons "transactionHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transaction-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transaction-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transaction-output-"))
   (transaction (common-lisp:error ":transaction is required") :type
    (common-lisp:or transaction common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transaction-output 'make-get-transaction-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transaction-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transaction-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction))
      (common-lisp:list
       (common-lisp:cons "transaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transaction-output))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (managedblockchain-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-contracts-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-contracts-input-"))
   (contract-filter (common-lisp:error ":contractfilter is required") :type
    (common-lisp:or contract-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-asset-contracts-input-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-contracts-input
                    'make-list-asset-contracts-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-contracts-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-contracts-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-filter))
      (common-lisp:list
       (common-lisp:cons "contractFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-contracts-input))
   common-lisp:nil))
(common-lisp:deftype list-asset-contracts-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-contracts-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-contracts-output-"))
   (contracts (common-lisp:error ":contracts is required") :type
    (common-lisp:or asset-contract-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-contracts-output
                    'make-list-asset-contracts-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-contracts-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-contracts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contracts))
      (common-lisp:list
       (common-lisp:cons "contracts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-contracts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-token-balances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-token-balances-input-"))
   (owner-filter common-lisp:nil :type
    (common-lisp:or owner-filter common-lisp:null))
   (token-filter (common-lisp:error ":tokenfilter is required") :type
    (common-lisp:or token-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-token-balances-input-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-token-balances-input
                    'make-list-token-balances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-token-balances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-token-balances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-filter))
      (common-lisp:list
       (common-lisp:cons "ownerFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-filter))
      (common-lisp:list
       (common-lisp:cons "tokenFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-token-balances-input))
   common-lisp:nil))
(common-lisp:deftype list-token-balances-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-token-balances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-token-balances-output-"))
   (token-balances (common-lisp:error ":tokenbalances is required") :type
    (common-lisp:or token-balance-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-token-balances-output
                    'make-list-token-balances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-token-balances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-token-balances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-balances))
      (common-lisp:list
       (common-lisp:cons "tokenBalances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-token-balances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transaction-events-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transaction-events-input-"))
   (transaction-hash (common-lisp:error ":transactionhash is required") :type
    (common-lisp:or query-transaction-hash common-lisp:null))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-transaction-events-input-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transaction-events-input
                    'make-list-transaction-events-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transaction-events-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transaction-events-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-hash))
      (common-lisp:list
       (common-lisp:cons "transactionHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transaction-events-input))
   common-lisp:nil))
(common-lisp:deftype list-transaction-events-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-transaction-events-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transaction-events-output-"))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or transaction-event-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transaction-events-output
                    'make-list-transaction-events-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transaction-events-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transaction-events-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transaction-events-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transactions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transactions-input-"))
   (address (common-lisp:error ":address is required") :type
    (common-lisp:or chain-address common-lisp:null))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (from-blockchain-instant common-lisp:nil :type
    (common-lisp:or blockchain-instant common-lisp:null))
   (to-blockchain-instant common-lisp:nil :type
    (common-lisp:or blockchain-instant common-lisp:null))
   (sort common-lisp:nil :type
    (common-lisp:or list-transactions-sort common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-transactions-input-max-results-integer
                    common-lisp:null))
   (confirmation-status-filter common-lisp:nil :type
    (common-lisp:or confirmation-status-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transactions-input 'make-list-transactions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-blockchain-instant))
      (common-lisp:list
       (common-lisp:cons "fromBlockchainInstant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'to-blockchain-instant))
      (common-lisp:list
       (common-lisp:cons "toBlockchainInstant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-status-filter))
      (common-lisp:list
       (common-lisp:cons "confirmationStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-input))
   common-lisp:nil))
(common-lisp:deftype list-transactions-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-transactions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transactions-output-"))
   (transactions (common-lisp:error ":transactions is required") :type
    (common-lisp:or transaction-output-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transactions-output 'make-list-transactions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transactions))
      (common-lisp:list
       (common-lisp:cons "transactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transactions-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transactions-sort-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-transactions-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transactions-sort 'make-list-transactions-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transactions-sort))
   common-lisp:nil))
(common-lisp:deftype list-transactions-sort-by () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (owner-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-owner-filter-"))
   (address (common-lisp:error ":address is required") :type
    (common-lisp:or chain-address common-lisp:null)))
 (common-lisp:export (common-lisp:list 'owner-filter 'make-owner-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input owner-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input owner-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input owner-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (owner-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-owner-identifier-"))
   (address (common-lisp:error ":address is required") :type
    (common-lisp:or chain-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'owner-identifier 'make-owner-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input owner-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input owner-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input owner-identifier))
   common-lisp:nil))
(common-lisp:deftype query-network () 'common-lisp:string)
(common-lisp:deftype query-token-id () 'common-lisp:string)
(common-lisp:deftype query-token-standard () 'common-lisp:string)
(common-lisp:deftype query-transaction-event-type () 'common-lisp:string)
(common-lisp:deftype query-transaction-hash () 'common-lisp:string)
(common-lisp:deftype quota-code () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (managedblockchain-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype service-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (managedblockchain-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code
                    'service-quota-exceeded-exception-quota-code)))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (managedblockchain-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-service-code
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (token-balance (:copier common-lisp:nil)
      (:conc-name "struct-shape-token-balance-"))
   (owner-identifier common-lisp:nil :type
    (common-lisp:or owner-identifier common-lisp:null))
   (token-identifier common-lisp:nil :type
    (common-lisp:or token-identifier common-lisp:null))
   (balance (common-lisp:error ":balance is required") :type
    (common-lisp:or string common-lisp:null))
   (at-blockchain-instant
    (common-lisp:error ":atblockchaininstant is required") :type
    (common-lisp:or blockchain-instant common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or blockchain-instant common-lisp:null)))
 (common-lisp:export (common-lisp:list 'token-balance 'make-token-balance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input token-balance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input token-balance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-identifier))
      (common-lisp:list
       (common-lisp:cons "ownerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-identifier))
      (common-lisp:list
       (common-lisp:cons "tokenIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'balance))
      (common-lisp:list
       (common-lisp:cons "balance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-blockchain-instant))
      (common-lisp:list
       (common-lisp:cons "atBlockchainInstant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input token-balance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype token-balance-list ()
   '(trivial-types:proper-list token-balance))
 (common-lisp:defun make-token-balance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list token-balance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (token-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-token-filter-"))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (contract-address common-lisp:nil :type
    (common-lisp:or chain-address common-lisp:null))
   (token-id common-lisp:nil :type
    (common-lisp:or query-token-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'token-filter 'make-token-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input token-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input token-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-address))
      (common-lisp:list
       (common-lisp:cons "contractAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "tokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input token-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (token-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-token-identifier-"))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (contract-address common-lisp:nil :type
    (common-lisp:or chain-address common-lisp:null))
   (token-id common-lisp:nil :type
    (common-lisp:or query-token-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'token-identifier 'make-token-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input token-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input token-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-address))
      (common-lisp:list
       (common-lisp:cons "contractAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "tokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input token-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transaction (:copier common-lisp:nil)
      (:conc-name "struct-shape-transaction-"))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (block-hash common-lisp:nil :type
    (common-lisp:or block-hash common-lisp:null))
   (transaction-hash (common-lisp:error ":transactionhash is required") :type
    (common-lisp:or query-transaction-hash common-lisp:null))
   (block-number common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (transaction-timestamp
    (common-lisp:error ":transactiontimestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (transaction-index (common-lisp:error ":transactionindex is required") :type
    (common-lisp:or long common-lisp:null))
   (number-of-transactions
    (common-lisp:error ":numberoftransactions is required") :type
    (common-lisp:or long common-lisp:null))
   (to (common-lisp:error ":to is required") :type
    (common-lisp:or chain-address common-lisp:null))
   (from common-lisp:nil :type (common-lisp:or chain-address common-lisp:null))
   (contract-address common-lisp:nil :type
    (common-lisp:or chain-address common-lisp:null))
   (gas-used common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cumulative-gas-used common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (effective-gas-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (signature-v common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (signature-r common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (signature-s common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (transaction-fee common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (confirmation-status common-lisp:nil :type
    (common-lisp:or confirmation-status common-lisp:null))
   (execution-status common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transaction 'make-transaction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transaction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transaction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-hash))
      (common-lisp:list
       (common-lisp:cons "blockHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-hash))
      (common-lisp:list
       (common-lisp:cons "transactionHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-number))
      (common-lisp:list
       (common-lisp:cons "blockNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transaction-timestamp))
      (common-lisp:list
       (common-lisp:cons "transactionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-index))
      (common-lisp:list
       (common-lisp:cons "transactionIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-transactions))
      (common-lisp:list
       (common-lisp:cons "numberOfTransactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "to"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "from"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-address))
      (common-lisp:list
       (common-lisp:cons "contractAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gas-used))
      (common-lisp:list
       (common-lisp:cons "gasUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cumulative-gas-used))
      (common-lisp:list
       (common-lisp:cons "cumulativeGasUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-gas-price))
      (common-lisp:list
       (common-lisp:cons "effectiveGasPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-v))
      (common-lisp:list
       (common-lisp:cons "signatureV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-r))
      (common-lisp:list
       (common-lisp:cons "signatureR"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-s))
      (common-lisp:list
       (common-lisp:cons "signatureS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-fee))
      (common-lisp:list
       (common-lisp:cons "transactionFee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-status))
      (common-lisp:list
       (common-lisp:cons "confirmationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-status))
      (common-lisp:list
       (common-lisp:cons "executionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transaction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transaction-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-transaction-event-"))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (transaction-hash (common-lisp:error ":transactionhash is required") :type
    (common-lisp:or query-transaction-hash common-lisp:null))
   (event-type (common-lisp:error ":eventtype is required") :type
    (common-lisp:or query-transaction-event-type common-lisp:null))
   (from common-lisp:nil :type (common-lisp:or chain-address common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or chain-address common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (contract-address common-lisp:nil :type
    (common-lisp:or chain-address common-lisp:null))
   (token-id common-lisp:nil :type
    (common-lisp:or query-token-id common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vout-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transaction-event 'make-transaction-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transaction-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transaction-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-hash))
      (common-lisp:list
       (common-lisp:cons "transactionHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "from"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "to"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contract-address))
      (common-lisp:list
       (common-lisp:cons "contractAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "tokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vout-index))
      (common-lisp:list
       (common-lisp:cons "voutIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transaction-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transaction-event-list ()
   '(trivial-types:proper-list transaction-event))
 (common-lisp:defun make-transaction-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transaction-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (transaction-output-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-transaction-output-item-"))
   (transaction-hash (common-lisp:error ":transactionhash is required") :type
    (common-lisp:or query-transaction-hash common-lisp:null))
   (network (common-lisp:error ":network is required") :type
    (common-lisp:or query-network common-lisp:null))
   (transaction-timestamp
    (common-lisp:error ":transactiontimestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (confirmation-status common-lisp:nil :type
    (common-lisp:or confirmation-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transaction-output-item 'make-transaction-output-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transaction-output-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transaction-output-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-hash))
      (common-lisp:list
       (common-lisp:cons "transactionHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transaction-timestamp))
      (common-lisp:list
       (common-lisp:cons "transactionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-status))
      (common-lisp:list
       (common-lisp:cons "confirmationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transaction-output-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transaction-output-list ()
   '(trivial-types:proper-list transaction-output-item))
 (common-lisp:defun make-transaction-output-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transaction-output-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (managedblockchain-query-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-get-token-balance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key get-token-balance-inputs)
   (common-lisp:declare (common-lisp:ignorable get-token-balance-inputs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-token-balance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-query-request aws-sdk/generator/operation::input
        "POST" "/batch-get-token-balance" "BatchGetTokenBalance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-token-balance))
(common-lisp:progn
 (common-lisp:defun get-asset-contract
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contract-identifier)
   (common-lisp:declare (common-lisp:ignorable contract-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-asset-contract-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-query-request aws-sdk/generator/operation::input
        "POST" "/get-asset-contract" "GetAssetContract"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-asset-contract))
(common-lisp:progn
 (common-lisp:defun get-token-balance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token-identifier owner-identifier
                     at-blockchain-instant)
   (common-lisp:declare
    (common-lisp:ignorable token-identifier owner-identifier
     at-blockchain-instant))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-token-balance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-query-request aws-sdk/generator/operation::input
        "POST" "/get-token-balance" "GetTokenBalance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-token-balance))
(common-lisp:progn
 (common-lisp:defun get-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-hash network)
   (common-lisp:declare (common-lisp:ignorable transaction-hash network))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-transaction-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-query-request aws-sdk/generator/operation::input
        "POST" "/get-transaction" "GetTransaction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-transaction))
(common-lisp:progn
 (common-lisp:defun list-asset-contracts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contract-filter next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable contract-filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-contracts-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-query-request aws-sdk/generator/operation::input
        "POST" "/list-asset-contracts" "ListAssetContracts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-asset-contracts))
(common-lisp:progn
 (common-lisp:defun list-token-balances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner-filter token-filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable owner-filter token-filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-token-balances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-query-request aws-sdk/generator/operation::input
        "POST" "/list-token-balances" "ListTokenBalances"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-token-balances))
(common-lisp:progn
 (common-lisp:defun list-transaction-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transaction-hash network next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable transaction-hash network next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-transaction-events-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-query-request aws-sdk/generator/operation::input
        "POST" "/list-transaction-events" "ListTransactionEvents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-transaction-events))
(common-lisp:progn
 (common-lisp:defun list-transactions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address network from-blockchain-instant
                     to-blockchain-instant sort next-token max-results
                     confirmation-status-filter)
   (common-lisp:declare
    (common-lisp:ignorable address network from-blockchain-instant
     to-blockchain-instant sort next-token max-results
     confirmation-status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-transactions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'managedblockchain-query-request aws-sdk/generator/operation::input
        "POST" "/list-transactions" "ListTransactions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-transactions))
