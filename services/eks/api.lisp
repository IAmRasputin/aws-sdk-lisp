;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/eks/api
  (:use)
  (:nicknames #:aws/eks)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/eks/api)
(common-lisp:progn
 (common-lisp:defclass eks-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "eks" :protocol :rest-json))
 (common-lisp:export 'eks-request))
(common-lisp:progn
 (common-lisp:define-condition eks-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'eks-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ClientException" . client-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourcePropagationDelayException"
     . resource-propagation-delay-exception)
    ("ServerException" . server-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("UnsupportedAvailabilityZoneException"
     . unsupported-availability-zone-exception)))
(common-lisp:deftype amitypes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (eks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass addon common-lisp:nil
                       ((configuration-values :initarg :|configurationValues|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %addon-configuration-values :initform
                         common-lisp:nil)
                        (marketplace-information :initarg
                         :|marketplaceInformation| :type
                         (common-lisp:or marketplace-information
                                         common-lisp:null)
                         :accessor %addon-marketplace-information :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-owner :initform common-lisp:nil)
                        (publisher :initarg :|publisher| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-publisher :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %addon-tags :initform common-lisp:nil)
                        (service-account-role-arn :initarg
                         :|serviceAccountRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-service-account-role-arn :initform
                         common-lisp:nil)
                        (modified-at :initarg :|modifiedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %addon-modified-at :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %addon-created-at :initform common-lisp:nil)
                        (addon-arn :initarg :|addonArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-addon-arn :initform common-lisp:nil)
                        (health :initarg :|health| :type
                         (common-lisp:or addon-health common-lisp:null)
                         :accessor %addon-health :initform common-lisp:nil)
                        (addon-version :initarg :|addonVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-addon-version :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or addon-status common-lisp:null)
                         :accessor %addon-status :initform common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor %addon-cluster-name :initform
                         common-lisp:nil)
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-addon-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'addon 'make-addon))
 (common-lisp:defun make-addon
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-values
                     marketplace-information owner publisher tags
                     service-account-role-arn modified-at created-at addon-arn
                     health addon-version status cluster-name addon-name)
   (common-lisp:apply #'common-lisp:make-instance 'addon
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-arn))
      (common-lisp:list
       (common-lisp:cons "addonArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-information))
      (common-lisp:list
       (common-lisp:cons "marketplaceInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass addon-health common-lisp:nil
                       ((issues :initarg :|issues| :type
                         (common-lisp:or addon-issue-list common-lisp:null)
                         :accessor %addon-health-issues :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'addon-health 'make-addon-health))
 (common-lisp:defun make-addon-health
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key issues)
   (common-lisp:apply #'common-lisp:make-instance 'addon-health
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass addon-info common-lisp:nil
                       ((marketplace-information :initarg
                         :|marketplaceInformation| :type
                         (common-lisp:or marketplace-information
                                         common-lisp:null)
                         :accessor %addon-info-marketplace-information
                         :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-info-owner :initform common-lisp:nil)
                        (publisher :initarg :|publisher| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-info-publisher :initform common-lisp:nil)
                        (addon-versions :initarg :|addonVersions| :type
                         (common-lisp:or addon-version-info-list
                                         common-lisp:null)
                         :accessor %addon-info-addon-versions :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-info-type :initform common-lisp:nil)
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-info-addon-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'addon-info 'make-addon-info))
 (common-lisp:defun make-addon-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marketplace-information owner publisher
                     addon-versions type addon-name)
   (common-lisp:apply #'common-lisp:make-instance 'addon-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-versions))
      (common-lisp:list
       (common-lisp:cons "addonVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-information))
      (common-lisp:list
       (common-lisp:cons "marketplaceInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass addon-issue common-lisp:nil
                       ((resource-ids :initarg :|resourceIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %addon-issue-resource-ids :initform
                         common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-issue-message :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or addon-issue-code common-lisp:null)
                         :accessor %addon-issue-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'addon-issue 'make-addon-issue))
 (common-lisp:defun make-addon-issue
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-ids message code)
   (common-lisp:apply #'common-lisp:make-instance 'addon-issue
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-issue))
   common-lisp:nil))
(common-lisp:deftype addon-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype addon-issue-list ()
   '(trivial-types:proper-list addon-issue))
 (common-lisp:defun |make-addon-issue-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-issue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype addon-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass addon-version-info common-lisp:nil
                       ((requires-configuration :initarg
                         :|requiresConfiguration| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %addon-version-info-requires-configuration :initform
                         common-lisp:nil)
                        (compatibilities :initarg :|compatibilities| :type
                         (common-lisp:or compatibilities common-lisp:null)
                         :accessor %addon-version-info-compatibilities
                         :initform common-lisp:nil)
                        (architecture :initarg :|architecture| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %addon-version-info-architecture :initform
                         common-lisp:nil)
                        (addon-version :initarg :|addonVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %addon-version-info-addon-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'addon-version-info 'make-addon-version-info))
 (common-lisp:defun make-addon-version-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key requires-configuration compatibilities
                     architecture addon-version)
   (common-lisp:apply #'common-lisp:make-instance 'addon-version-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibilities))
      (common-lisp:list
       (common-lisp:cons "compatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-configuration))
      (common-lisp:list
       (common-lisp:cons "requiresConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype addon-version-info-list ()
   '(trivial-types:proper-list addon-version-info))
 (common-lisp:defun |make-addon-version-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-version-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype addons () '(trivial-types:proper-list addon-info))
 (common-lisp:defun |make-addons|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-encryption-config-request common-lisp:nil
                       ((client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %associate-encryption-config-request-client-request-token
                         :initform common-lisp:nil)
                        (encryption-config :initarg :|encryptionConfig| :type
                         (common-lisp:or encryption-config-list
                                         common-lisp:null)
                         :accessor
                         %associate-encryption-config-request-encryption-config
                         :initform
                         (common-lisp:error ":encryptionconfig is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-encryption-config-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-encryption-config-request
                    'make-associate-encryption-config-request))
 (common-lisp:defun make-associate-encryption-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token encryption-config
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-encryption-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-encryption-config-response common-lisp:nil
                       ((update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %associate-encryption-config-response-update :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-encryption-config-response
                    'make-associate-encryption-config-response))
 (common-lisp:defun make-associate-encryption-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-encryption-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-identity-provider-config-request
                       common-lisp:nil
                       ((client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %associate-identity-provider-config-request-client-request-token
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %associate-identity-provider-config-request-tags
                         :initform common-lisp:nil)
                        (oidc :initarg :|oidc| :type
                         (common-lisp:or oidc-identity-provider-config-request
                                         common-lisp:null)
                         :accessor
                         %associate-identity-provider-config-request-oidc
                         :initform (common-lisp:error ":oidc is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-identity-provider-config-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-identity-provider-config-request
                    'make-associate-identity-provider-config-request))
 (common-lisp:defun make-associate-identity-provider-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token tags oidc
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-identity-provider-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-identity-provider-config-response
                       common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %associate-identity-provider-config-response-tags
                         :initform common-lisp:nil)
                        (update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %associate-identity-provider-config-response-update
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-identity-provider-config-response
                    'make-associate-identity-provider-config-response))
 (common-lisp:defun make-associate-identity-provider-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags update)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-identity-provider-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %auto-scaling-group-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defun make-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun |make-auto-scaling-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (eks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype capacity () 'common-lisp:integer)
(common-lisp:deftype capacity-types () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((data :initarg :|data| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-data :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defun make-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition client-exception
     (eks-error)
     ((cluster-name :initarg :|clusterName| :initform common-lisp:nil :reader
       client-exception-cluster-name)
      (nodegroup-name :initarg :|nodegroupName| :initform common-lisp:nil
       :reader client-exception-nodegroup-name)
      (addon-name :initarg :|addonName| :initform common-lisp:nil :reader
       client-exception-addon-name)
      (message :initarg :|message| :initform common-lisp:nil :reader
       client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'client-exception-cluster-name
                    'client-exception-nodegroup-name
                    'client-exception-addon-name 'client-exception-message)))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((outpost-config :initarg :|outpostConfig| :type
                         (common-lisp:or outpost-config-response
                                         common-lisp:null)
                         :accessor %cluster-outpost-config :initform
                         common-lisp:nil)
                        (health :initarg :|health| :type
                         (common-lisp:or cluster-health common-lisp:null)
                         :accessor %cluster-health :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-id :initform common-lisp:nil)
                        (connector-config :initarg :|connectorConfig| :type
                         (common-lisp:or connector-config-response
                                         common-lisp:null)
                         :accessor %cluster-connector-config :initform
                         common-lisp:nil)
                        (encryption-config :initarg :|encryptionConfig| :type
                         (common-lisp:or encryption-config-list
                                         common-lisp:null)
                         :accessor %cluster-encryption-config :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %cluster-tags :initform common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-platform-version :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %cluster-client-request-token :initform
                         common-lisp:nil)
                        (certificate-authority :initarg :|certificateAuthority|
                         :type (common-lisp:or certificate common-lisp:null)
                         :accessor %cluster-certificate-authority :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or cluster-status common-lisp:null)
                         :accessor %cluster-status :initform common-lisp:nil)
                        (identity :initarg :|identity| :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         %cluster-identity :initform common-lisp:nil)
                        (logging :initarg :|logging| :type
                         (common-lisp:or logging common-lisp:null) :accessor
                         %cluster-logging :initform common-lisp:nil)
                        (kubernetes-network-config :initarg
                         :|kubernetesNetworkConfig| :type
                         (common-lisp:or kubernetes-network-config-response
                                         common-lisp:null)
                         :accessor %cluster-kubernetes-network-config :initform
                         common-lisp:nil)
                        (resources-vpc-config :initarg :|resourcesVpcConfig|
                         :type
                         (common-lisp:or vpc-config-response common-lisp:null)
                         :accessor %cluster-resources-vpc-config :initform
                         common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-role-arn :initform common-lisp:nil)
                        (endpoint :initarg :|endpoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-endpoint :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-version :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %cluster-created-at :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-arn :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defun make-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outpost-config health id connector-config
                     encryption-config tags platform-version
                     client-request-token certificate-authority status identity
                     logging kubernetes-network-config resources-vpc-config
                     role-arn endpoint version created-at arn name)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-network-config))
      (common-lisp:list
       (common-lisp:cons "kubernetesNetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority))
      (common-lisp:list
       (common-lisp:cons "certificateAuthority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-config))
      (common-lisp:list
       (common-lisp:cons "connectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-config))
      (common-lisp:list
       (common-lisp:cons "outpostConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-health common-lisp:nil
                       ((issues :initarg :|issues| :type
                         (common-lisp:or cluster-issue-list common-lisp:null)
                         :accessor %cluster-health-issues :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster-health 'make-cluster-health))
 (common-lisp:defun make-cluster-health
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key issues)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-health
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-issue common-lisp:nil
                       ((resource-ids :initarg :|resourceIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %cluster-issue-resource-ids :initform
                         common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-issue-message :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or cluster-issue-code common-lisp:null)
                         :accessor %cluster-issue-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster-issue 'make-cluster-issue))
 (common-lisp:defun make-cluster-issue
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-ids message code)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-issue
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-issue))
   common-lisp:nil))
(common-lisp:deftype cluster-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-issue-list ()
   '(trivial-types:proper-list cluster-issue))
 (common-lisp:defun |make-cluster-issue-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-issue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cluster-name () 'common-lisp:string)
(common-lisp:deftype cluster-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compatibilities ()
   '(trivial-types:proper-list compatibility))
 (common-lisp:defun |make-compatibilities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatibility))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compatibility common-lisp:nil
                       ((default-version :initarg :|defaultVersion| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %compatibility-default-version :initform
                         common-lisp:nil)
                        (platform-versions :initarg :|platformVersions| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %compatibility-platform-versions :initform
                         common-lisp:nil)
                        (cluster-version :initarg :|clusterVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %compatibility-cluster-version :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'compatibility 'make-compatibility))
 (common-lisp:defun make-compatibility
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-version platform-versions
                     cluster-version)
   (common-lisp:apply #'common-lisp:make-instance 'compatibility
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compatibility))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compatibility))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "clusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-versions))
      (common-lisp:list
       (common-lisp:cons "platformVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version))
      (common-lisp:list
       (common-lisp:cons "defaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compatibility))
   common-lisp:nil))
(common-lisp:deftype connector-config-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connector-config-request common-lisp:nil
                       ((provider :initarg :|provider| :type
                         (common-lisp:or connector-config-provider
                                         common-lisp:null)
                         :accessor %connector-config-request-provider :initform
                         (common-lisp:error ":provider is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %connector-config-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))))
 (common-lisp:export
  (common-lisp:list 'connector-config-request 'make-connector-config-request))
 (common-lisp:defun make-connector-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provider role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'connector-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connector-config-response common-lisp:nil
                       ((role-arn :initarg :|roleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %connector-config-response-role-arn :initform
                         common-lisp:nil)
                        (provider :initarg :|provider| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %connector-config-response-provider :initform
                         common-lisp:nil)
                        (activation-expiry :initarg :|activationExpiry| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %connector-config-response-activation-expiry :initform
                         common-lisp:nil)
                        (activation-code :initarg :|activationCode| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %connector-config-response-activation-code :initform
                         common-lisp:nil)
                        (activation-id :initarg :|activationId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %connector-config-response-activation-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connector-config-response
                    'make-connector-config-response))
 (common-lisp:defun make-connector-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn provider activation-expiry
                     activation-code activation-id)
   (common-lisp:apply #'common-lisp:make-instance 'connector-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-id))
      (common-lisp:list
       (common-lisp:cons "activationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-code))
      (common-lisp:list
       (common-lisp:cons "activationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-expiry))
      (common-lisp:list
       (common-lisp:cons "activationExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass control-plane-placement-request common-lisp:nil
                       ((group-name :initarg :|groupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %control-plane-placement-request-group-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'control-plane-placement-request
                    'make-control-plane-placement-request))
 (common-lisp:defun make-control-plane-placement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'control-plane-placement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass control-plane-placement-response common-lisp:nil
                       ((group-name :initarg :|groupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %control-plane-placement-response-group-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'control-plane-placement-response
                    'make-control-plane-placement-response))
 (common-lisp:defun make-control-plane-placement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'control-plane-placement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-addon-request common-lisp:nil
                       ((configuration-values :initarg :|configurationValues|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %create-addon-request-configuration-values
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-addon-request-tags :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %create-addon-request-client-request-token
                         :initform common-lisp:nil)
                        (resolve-conflicts :initarg :|resolveConflicts| :type
                         (common-lisp:or resolve-conflicts common-lisp:null)
                         :accessor %create-addon-request-resolve-conflicts
                         :initform common-lisp:nil)
                        (service-account-role-arn :initarg
                         :|serviceAccountRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-addon-request-service-account-role-arn
                         :initform common-lisp:nil)
                        (addon-version :initarg :|addonVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-addon-request-addon-version :initform
                         common-lisp:nil)
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-addon-request-addon-name :initform
                         (common-lisp:error ":addonname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor %create-addon-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'create-addon-request 'make-create-addon-request))
 (common-lisp:defun make-create-addon-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-values tags
                     client-request-token resolve-conflicts
                     service-account-role-arn addon-version addon-name
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-addon-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-addon-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolve-conflicts))
      (common-lisp:list
       (common-lisp:cons "resolveConflicts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-addon-response common-lisp:nil
                       ((addon :initarg :|addon| :type
                         (common-lisp:or addon common-lisp:null) :accessor
                         %create-addon-response-addon :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-addon-response 'make-create-addon-response))
 (common-lisp:defun make-create-addon-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key addon)
   (common-lisp:apply #'common-lisp:make-instance 'create-addon-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((outpost-config :initarg :|outpostConfig| :type
                         (common-lisp:or outpost-config-request
                                         common-lisp:null)
                         :accessor %create-cluster-request-outpost-config
                         :initform common-lisp:nil)
                        (encryption-config :initarg :|encryptionConfig| :type
                         (common-lisp:or encryption-config-list
                                         common-lisp:null)
                         :accessor %create-cluster-request-encryption-config
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-cluster-request-tags :initform
                         common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %create-cluster-request-client-request-token
                         :initform common-lisp:nil)
                        (logging :initarg :|logging| :type
                         (common-lisp:or logging common-lisp:null) :accessor
                         %create-cluster-request-logging :initform
                         common-lisp:nil)
                        (kubernetes-network-config :initarg
                         :|kubernetesNetworkConfig| :type
                         (common-lisp:or kubernetes-network-config-request
                                         common-lisp:null)
                         :accessor
                         %create-cluster-request-kubernetes-network-config
                         :initform common-lisp:nil)
                        (resources-vpc-config :initarg :|resourcesVpcConfig|
                         :type
                         (common-lisp:or vpc-config-request common-lisp:null)
                         :accessor %create-cluster-request-resources-vpc-config
                         :initform
                         (common-lisp:error ":resourcesvpcconfig is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor %create-cluster-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defun make-create-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outpost-config encryption-config tags
                     client-request-token logging kubernetes-network-config
                     resources-vpc-config role-arn version name)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-network-config))
      (common-lisp:list
       (common-lisp:cons "kubernetesNetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-config))
      (common-lisp:list
       (common-lisp:cons "outpostConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %create-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defun make-create-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fargate-profile-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-fargate-profile-request-tags :initform
                         common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-fargate-profile-request-client-request-token
                         :initform common-lisp:nil)
                        (selectors :initarg :|selectors| :type
                         (common-lisp:or fargate-profile-selectors
                                         common-lisp:null)
                         :accessor %create-fargate-profile-request-selectors
                         :initform common-lisp:nil)
                        (subnets :initarg :|subnets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-fargate-profile-request-subnets
                         :initform common-lisp:nil)
                        (pod-execution-role-arn :initarg :|podExecutionRoleArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-fargate-profile-request-pod-execution-role-arn
                         :initform
                         (common-lisp:error
                          ":podexecutionrolearn is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-fargate-profile-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))
                        (fargate-profile-name :initarg :|fargateProfileName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-fargate-profile-request-fargate-profile-name
                         :initform
                         (common-lisp:error
                          ":fargateprofilename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-fargate-profile-request
                    'make-create-fargate-profile-request))
 (common-lisp:defun make-create-fargate-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-request-token selectors
                     subnets pod-execution-role-arn cluster-name
                     fargate-profile-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-fargate-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-name))
      (common-lisp:list
       (common-lisp:cons "fargateProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pod-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "podExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectors))
      (common-lisp:list
       (common-lisp:cons "selectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fargate-profile-response common-lisp:nil
                       ((fargate-profile :initarg :|fargateProfile| :type
                         (common-lisp:or fargate-profile common-lisp:null)
                         :accessor
                         %create-fargate-profile-response-fargate-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-fargate-profile-response
                    'make-create-fargate-profile-response))
 (common-lisp:defun make-create-fargate-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fargate-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-fargate-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-nodegroup-request common-lisp:nil
                       ((release-version :initarg :|releaseVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-nodegroup-request-release-version :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-nodegroup-request-version :initform
                         common-lisp:nil)
                        (capacity-type :initarg :|capacityType| :type
                         (common-lisp:or capacity-types common-lisp:null)
                         :accessor %create-nodegroup-request-capacity-type
                         :initform common-lisp:nil)
                        (update-config :initarg :|updateConfig| :type
                         (common-lisp:or nodegroup-update-config
                                         common-lisp:null)
                         :accessor %create-nodegroup-request-update-config
                         :initform common-lisp:nil)
                        (launch-template :initarg :|launchTemplate| :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor %create-nodegroup-request-launch-template
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-nodegroup-request-client-request-token
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-nodegroup-request-tags :initform
                         common-lisp:nil)
                        (taints :initarg :|taints| :type
                         (common-lisp:or |taintsList| common-lisp:null)
                         :accessor %create-nodegroup-request-taints :initform
                         common-lisp:nil)
                        (labels :initarg :|labels| :type
                         (common-lisp:or |labelsMap| common-lisp:null)
                         :accessor %create-nodegroup-request-labels :initform
                         common-lisp:nil)
                        (node-role :initarg :|nodeRole| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-nodegroup-request-node-role :initform
                         (common-lisp:error ":noderole is required"))
                        (remote-access :initarg :|remoteAccess| :type
                         (common-lisp:or remote-access-config common-lisp:null)
                         :accessor %create-nodegroup-request-remote-access
                         :initform common-lisp:nil)
                        (ami-type :initarg :|amiType| :type
                         (common-lisp:or amitypes common-lisp:null) :accessor
                         %create-nodegroup-request-ami-type :initform
                         common-lisp:nil)
                        (instance-types :initarg :|instanceTypes| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-nodegroup-request-instance-types
                         :initform common-lisp:nil)
                        (subnets :initarg :|subnets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-nodegroup-request-subnets :initform
                         (common-lisp:error ":subnets is required"))
                        (disk-size :initarg :|diskSize| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %create-nodegroup-request-disk-size
                         :initform common-lisp:nil)
                        (scaling-config :initarg :|scalingConfig| :type
                         (common-lisp:or nodegroup-scaling-config
                                         common-lisp:null)
                         :accessor %create-nodegroup-request-scaling-config
                         :initform common-lisp:nil)
                        (nodegroup-name :initarg :|nodegroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-nodegroup-request-nodegroup-name :initform
                         (common-lisp:error ":nodegroupname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-nodegroup-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'create-nodegroup-request 'make-create-nodegroup-request))
 (common-lisp:defun make-create-nodegroup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key release-version version capacity-type
                     update-config launch-template client-request-token tags
                     taints labels node-role remote-access ami-type
                     instance-types subnets disk-size scaling-config
                     nodegroup-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-nodegroup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-name))
      (common-lisp:list
       (common-lisp:cons "nodegroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size))
      (common-lisp:list
       (common-lisp:cons "diskSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-type))
      (common-lisp:list
       (common-lisp:cons "amiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-access))
      (common-lisp:list
       (common-lisp:cons "remoteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "nodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-type))
      (common-lisp:list
       (common-lisp:cons "capacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-nodegroup-response common-lisp:nil
                       ((nodegroup :initarg :|nodegroup| :type
                         (common-lisp:or nodegroup common-lisp:null) :accessor
                         %create-nodegroup-response-nodegroup :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-nodegroup-response
                    'make-create-nodegroup-response))
 (common-lisp:defun make-create-nodegroup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nodegroup)
   (common-lisp:apply #'common-lisp:make-instance 'create-nodegroup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-addon-request common-lisp:nil
                       ((preserve :initarg :|preserve| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %delete-addon-request-preserve :initform
                         common-lisp:nil)
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-addon-request-addon-name :initform
                         (common-lisp:error ":addonname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor %delete-addon-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-addon-request 'make-delete-addon-request))
 (common-lisp:defun make-delete-addon-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preserve addon-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-addon-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-addon-response common-lisp:nil
                       ((addon :initarg :|addon| :type
                         (common-lisp:or addon common-lisp:null) :accessor
                         %delete-addon-response-addon :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-addon-response 'make-delete-addon-response))
 (common-lisp:defun make-delete-addon-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key addon)
   (common-lisp:apply #'common-lisp:make-instance 'delete-addon-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-cluster-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defun make-delete-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %delete-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defun make-delete-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fargate-profile-request common-lisp:nil
                       ((fargate-profile-name :initarg :|fargateProfileName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-fargate-profile-request-fargate-profile-name
                         :initform
                         (common-lisp:error ":fargateprofilename is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-fargate-profile-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fargate-profile-request
                    'make-delete-fargate-profile-request))
 (common-lisp:defun make-delete-fargate-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fargate-profile-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-fargate-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fargate-profile-response common-lisp:nil
                       ((fargate-profile :initarg :|fargateProfile| :type
                         (common-lisp:or fargate-profile common-lisp:null)
                         :accessor
                         %delete-fargate-profile-response-fargate-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-fargate-profile-response
                    'make-delete-fargate-profile-response))
 (common-lisp:defun make-delete-fargate-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fargate-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-fargate-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-nodegroup-request common-lisp:nil
                       ((nodegroup-name :initarg :|nodegroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-nodegroup-request-nodegroup-name :initform
                         (common-lisp:error ":nodegroupname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-nodegroup-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-nodegroup-request 'make-delete-nodegroup-request))
 (common-lisp:defun make-delete-nodegroup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nodegroup-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-nodegroup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-nodegroup-response common-lisp:nil
                       ((nodegroup :initarg :|nodegroup| :type
                         (common-lisp:or nodegroup common-lisp:null) :accessor
                         %delete-nodegroup-response-nodegroup :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-nodegroup-response
                    'make-delete-nodegroup-response))
 (common-lisp:defun make-delete-nodegroup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nodegroup)
   (common-lisp:apply #'common-lisp:make-instance 'delete-nodegroup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-cluster-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deregister-cluster-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-cluster-request
                    'make-deregister-cluster-request))
 (common-lisp:defun make-deregister-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-cluster-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %deregister-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-cluster-response
                    'make-deregister-cluster-response))
 (common-lisp:defun make-deregister-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-configuration-request common-lisp:nil
                       ((addon-version :initarg :|addonVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-configuration-request-addon-version
                         :initform
                         (common-lisp:error ":addonversion is required"))
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-configuration-request-addon-name
                         :initform
                         (common-lisp:error ":addonname is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-addon-configuration-request
                    'make-describe-addon-configuration-request))
 (common-lisp:defun make-describe-addon-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key addon-version addon-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-addon-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-configuration-response common-lisp:nil
                       ((configuration-schema :initarg :|configurationSchema|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-addon-configuration-response-configuration-schema
                         :initform common-lisp:nil)
                        (addon-version :initarg :|addonVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-configuration-response-addon-version
                         :initform common-lisp:nil)
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-configuration-response-addon-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-configuration-response
                    'make-describe-addon-configuration-response))
 (common-lisp:defun make-describe-addon-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-schema addon-version
                     addon-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-addon-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-schema))
      (common-lisp:list
       (common-lisp:cons "configurationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-request common-lisp:nil
                       ((addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-request-addon-name :initform
                         (common-lisp:error ":addonname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor %describe-addon-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-addon-request 'make-describe-addon-request))
 (common-lisp:defun make-describe-addon-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key addon-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-addon-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-response common-lisp:nil
                       ((addon :initarg :|addon| :type
                         (common-lisp:or addon common-lisp:null) :accessor
                         %describe-addon-response-addon :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-response 'make-describe-addon-response))
 (common-lisp:defun make-describe-addon-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key addon)
   (common-lisp:apply #'common-lisp:make-instance 'describe-addon-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-addon-versions-request common-lisp:nil
                       ((owners :initarg :|owners| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-addon-versions-request-owners
                         :initform common-lisp:nil)
                        (publishers :initarg :|publishers| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-addon-versions-request-publishers
                         :initform common-lisp:nil)
                        (types :initarg :|types| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-addon-versions-request-types
                         :initform common-lisp:nil)
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-versions-request-addon-name :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-versions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          describe-addon-versions-request-max-results
                          common-lisp:null)
                         :accessor %describe-addon-versions-request-max-results
                         :initform common-lisp:nil)
                        (kubernetes-version :initarg :|kubernetesVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-versions-request-kubernetes-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-versions-request
                    'make-describe-addon-versions-request))
 (common-lisp:defun make-describe-addon-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owners publishers types addon-name
                     next-token max-results kubernetes-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-addon-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   common-lisp:nil))
(common-lisp:deftype describe-addon-versions-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-addon-versions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-addon-versions-response-next-token :initform
                         common-lisp:nil)
                        (addons :initarg :|addons| :type
                         (common-lisp:or addons common-lisp:null) :accessor
                         %describe-addon-versions-response-addons :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-versions-response
                    'make-describe-addon-versions-response))
 (common-lisp:defun make-describe-addon-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token addons)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-addon-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addons))
      (common-lisp:list
       (common-lisp:cons "addons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-cluster-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-request 'make-describe-cluster-request))
 (common-lisp:defun make-describe-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %describe-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-response
                    'make-describe-cluster-response))
 (common-lisp:defun make-describe-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fargate-profile-request common-lisp:nil
                       ((fargate-profile-name :initarg :|fargateProfileName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-fargate-profile-request-fargate-profile-name
                         :initform
                         (common-lisp:error ":fargateprofilename is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-fargate-profile-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fargate-profile-request
                    'make-describe-fargate-profile-request))
 (common-lisp:defun make-describe-fargate-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fargate-profile-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fargate-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fargate-profile-response common-lisp:nil
                       ((fargate-profile :initarg :|fargateProfile| :type
                         (common-lisp:or fargate-profile common-lisp:null)
                         :accessor
                         %describe-fargate-profile-response-fargate-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fargate-profile-response
                    'make-describe-fargate-profile-response))
 (common-lisp:defun make-describe-fargate-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fargate-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fargate-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-provider-config-request
                       common-lisp:nil
                       ((identity-provider-config :initarg
                         :|identityProviderConfig| :type
                         (common-lisp:or identity-provider-config
                                         common-lisp:null)
                         :accessor
                         %describe-identity-provider-config-request-identity-provider-config
                         :initform
                         (common-lisp:error
                          ":identityproviderconfig is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-identity-provider-config-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-identity-provider-config-request
                    'make-describe-identity-provider-config-request))
 (common-lisp:defun make-describe-identity-provider-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider-config cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-provider-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-provider-config-response
                       common-lisp:nil
                       ((identity-provider-config :initarg
                         :|identityProviderConfig| :type
                         (common-lisp:or identity-provider-config-response
                                         common-lisp:null)
                         :accessor
                         %describe-identity-provider-config-response-identity-provider-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-identity-provider-config-response
                    'make-describe-identity-provider-config-response))
 (common-lisp:defun make-describe-identity-provider-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-provider-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-nodegroup-request common-lisp:nil
                       ((nodegroup-name :initarg :|nodegroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-nodegroup-request-nodegroup-name :initform
                         (common-lisp:error ":nodegroupname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-nodegroup-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-nodegroup-request
                    'make-describe-nodegroup-request))
 (common-lisp:defun make-describe-nodegroup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nodegroup-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-nodegroup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-nodegroup-response common-lisp:nil
                       ((nodegroup :initarg :|nodegroup| :type
                         (common-lisp:or nodegroup common-lisp:null) :accessor
                         %describe-nodegroup-response-nodegroup :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-nodegroup-response
                    'make-describe-nodegroup-response))
 (common-lisp:defun make-describe-nodegroup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nodegroup)
   (common-lisp:apply #'common-lisp:make-instance 'describe-nodegroup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-update-request common-lisp:nil
                       ((addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-update-request-addon-name :initform
                         common-lisp:nil)
                        (nodegroup-name :initarg :|nodegroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-update-request-nodegroup-name :initform
                         common-lisp:nil)
                        (update-id :initarg :|updateId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-update-request-update-id :initform
                         (common-lisp:error ":updateid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-update-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-update-request 'make-describe-update-request))
 (common-lisp:defun make-describe-update-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key addon-name nodegroup-name update-id name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-update-response common-lisp:nil
                       ((update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %describe-update-response-update :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-update-response 'make-describe-update-response))
 (common-lisp:defun make-describe-update-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update)
   (common-lisp:apply #'common-lisp:make-instance 'describe-update-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-identity-provider-config-request
                       common-lisp:nil
                       ((client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %disassociate-identity-provider-config-request-client-request-token
                         :initform common-lisp:nil)
                        (identity-provider-config :initarg
                         :|identityProviderConfig| :type
                         (common-lisp:or identity-provider-config
                                         common-lisp:null)
                         :accessor
                         %disassociate-identity-provider-config-request-identity-provider-config
                         :initform
                         (common-lisp:error
                          ":identityproviderconfig is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-identity-provider-config-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-identity-provider-config-request
                    'make-disassociate-identity-provider-config-request))
 (common-lisp:defun make-disassociate-identity-provider-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token
                     identity-provider-config cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-identity-provider-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-identity-provider-config-response
                       common-lisp:nil
                       ((update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %disassociate-identity-provider-config-response-update
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-identity-provider-config-response
                    'make-disassociate-identity-provider-config-response))
 (common-lisp:defun make-disassociate-identity-provider-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-identity-provider-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-config common-lisp:nil
                       ((provider :initarg :|provider| :type
                         (common-lisp:or provider common-lisp:null) :accessor
                         %encryption-config-provider :initform common-lisp:nil)
                        (resources :initarg :|resources| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %encryption-config-resources :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'encryption-config 'make-encryption-config))
 (common-lisp:defun make-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provider resources)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype encryption-config-list ()
   '(trivial-types:proper-list encryption-config))
 (common-lisp:defun |make-encryption-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list encryption-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((resource-ids :initarg :|resourceIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %error-detail-resource-ids :initform
                         common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %error-detail-error-message :initform common-lisp:nil)
                        (error-code :initarg :|errorCode| :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %error-detail-error-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defun make-error-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-ids error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-details ()
   '(trivial-types:proper-list error-detail))
 (common-lisp:defun |make-error-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fargate-profile common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %fargate-profile-tags :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or fargate-profile-status
                                         common-lisp:null)
                         :accessor %fargate-profile-status :initform
                         common-lisp:nil)
                        (selectors :initarg :|selectors| :type
                         (common-lisp:or fargate-profile-selectors
                                         common-lisp:null)
                         :accessor %fargate-profile-selectors :initform
                         common-lisp:nil)
                        (subnets :initarg :|subnets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %fargate-profile-subnets :initform
                         common-lisp:nil)
                        (pod-execution-role-arn :initarg :|podExecutionRoleArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %fargate-profile-pod-execution-role-arn
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fargate-profile-created-at :initform common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fargate-profile-cluster-name :initform
                         common-lisp:nil)
                        (fargate-profile-arn :initarg :|fargateProfileArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %fargate-profile-fargate-profile-arn
                         :initform common-lisp:nil)
                        (fargate-profile-name :initarg :|fargateProfileName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %fargate-profile-fargate-profile-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fargate-profile 'make-fargate-profile))
 (common-lisp:defun make-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status selectors subnets
                     pod-execution-role-arn created-at cluster-name
                     fargate-profile-arn fargate-profile-name)
   (common-lisp:apply #'common-lisp:make-instance 'fargate-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fargate-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fargate-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-name))
      (common-lisp:list
       (common-lisp:cons "fargateProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile-arn))
      (common-lisp:list
       (common-lisp:cons "fargateProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pod-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "podExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectors))
      (common-lisp:list
       (common-lisp:cons "selectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fargate-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fargate-profile-label () 'common-lisp:hash-table)
 (common-lisp:defun |make-fargate-profile-label|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass fargate-profile-selector common-lisp:nil
                       ((labels :initarg :|labels| :type
                         (common-lisp:or fargate-profile-label
                                         common-lisp:null)
                         :accessor %fargate-profile-selector-labels :initform
                         common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fargate-profile-selector-namespace :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fargate-profile-selector 'make-fargate-profile-selector))
 (common-lisp:defun make-fargate-profile-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key labels namespace)
   (common-lisp:apply #'common-lisp:make-instance 'fargate-profile-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fargate-profile-selectors ()
   '(trivial-types:proper-list fargate-profile-selector))
 (common-lisp:defun |make-fargate-profile-selectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fargate-profile-selector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fargate-profile-status () 'common-lisp:string)
(common-lisp:deftype fargate-profiles-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass identity common-lisp:nil
                       ((oidc :initarg :|oidc| :type
                         (common-lisp:or oidc common-lisp:null) :accessor
                         %identity-oidc :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'identity 'make-identity))
 (common-lisp:defun make-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key oidc)
   (common-lisp:apply #'common-lisp:make-instance 'identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-provider-config common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %identity-provider-config-name :initform
                         (common-lisp:error ":name is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %identity-provider-config-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'identity-provider-config 'make-identity-provider-config))
 (common-lisp:defun make-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name type)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-provider-config-response common-lisp:nil
                       ((oidc :initarg :|oidc| :type
                         (common-lisp:or oidc-identity-provider-config
                                         common-lisp:null)
                         :accessor %identity-provider-config-response-oidc
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'identity-provider-config-response
                    'make-identity-provider-config-response))
 (common-lisp:defun make-identity-provider-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key oidc)
   (common-lisp:apply #'common-lisp:make-instance
                      'identity-provider-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-provider-configs ()
   '(trivial-types:proper-list identity-provider-config))
 (common-lisp:defun |make-identity-provider-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            identity-provider-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype include-clusters-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-include-clusters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (eks-error)
     ((cluster-name :initarg :|clusterName| :initform common-lisp:nil :reader
       invalid-parameter-exception-cluster-name)
      (nodegroup-name :initarg :|nodegroupName| :initform common-lisp:nil
       :reader invalid-parameter-exception-nodegroup-name)
      (fargate-profile-name :initarg :|fargateProfileName| :initform
       common-lisp:nil :reader
       invalid-parameter-exception-fargate-profile-name)
      (addon-name :initarg :|addonName| :initform common-lisp:nil :reader
       invalid-parameter-exception-addon-name)
      (message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-cluster-name
                    'invalid-parameter-exception-nodegroup-name
                    'invalid-parameter-exception-fargate-profile-name
                    'invalid-parameter-exception-addon-name
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (eks-error)
     ((cluster-name :initarg :|clusterName| :initform common-lisp:nil :reader
       invalid-request-exception-cluster-name)
      (nodegroup-name :initarg :|nodegroupName| :initform common-lisp:nil
       :reader invalid-request-exception-nodegroup-name)
      (addon-name :initarg :|addonName| :initform common-lisp:nil :reader
       invalid-request-exception-addon-name)
      (message :initarg :|message| :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-cluster-name
                    'invalid-request-exception-nodegroup-name
                    'invalid-request-exception-addon-name
                    'invalid-request-exception-message)))
(common-lisp:deftype ip-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass issue common-lisp:nil
                       ((resource-ids :initarg :|resourceIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %issue-resource-ids :initform
                         common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %issue-message :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or nodegroup-issue-code common-lisp:null)
                         :accessor %issue-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'issue 'make-issue))
 (common-lisp:defun make-issue
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-ids message code)
   (common-lisp:apply #'common-lisp:make-instance 'issue
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issue))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype issue-list () '(trivial-types:proper-list issue))
 (common-lisp:defun |make-issue-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list issue))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kubernetes-network-config-request common-lisp:nil
                       ((ip-family :initarg :|ipFamily| :type
                         (common-lisp:or ip-family common-lisp:null) :accessor
                         %kubernetes-network-config-request-ip-family :initform
                         common-lisp:nil)
                        (service-ipv4cidr :initarg :|serviceIpv4Cidr| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %kubernetes-network-config-request-service-ipv4cidr
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kubernetes-network-config-request
                    'make-kubernetes-network-config-request))
 (common-lisp:defun make-kubernetes-network-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-family service-ipv4cidr)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-network-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv4cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv4Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-family))
      (common-lisp:list
       (common-lisp:cons "ipFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kubernetes-network-config-response common-lisp:nil
                       ((ip-family :initarg :|ipFamily| :type
                         (common-lisp:or ip-family common-lisp:null) :accessor
                         %kubernetes-network-config-response-ip-family
                         :initform common-lisp:nil)
                        (service-ipv6cidr :initarg :|serviceIpv6Cidr| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %kubernetes-network-config-response-service-ipv6cidr
                         :initform common-lisp:nil)
                        (service-ipv4cidr :initarg :|serviceIpv4Cidr| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %kubernetes-network-config-response-service-ipv4cidr
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kubernetes-network-config-response
                    'make-kubernetes-network-config-response))
 (common-lisp:defun make-kubernetes-network-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-family service-ipv6cidr
                     service-ipv4cidr)
   (common-lisp:apply #'common-lisp:make-instance
                      'kubernetes-network-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv4cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv4Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv6cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv6Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-family))
      (common-lisp:list
       (common-lisp:cons "ipFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-template-specification common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-template-specification-id :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-template-specification-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %launch-template-specification-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-template-specification
                    'make-launch-template-specification))
 (common-lisp:defun make-launch-template-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-template-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-addons-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-addons-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-addons-request-max-results
                                         common-lisp:null)
                         :accessor %list-addons-request-max-results :initform
                         common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor %list-addons-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'list-addons-request 'make-list-addons-request))
 (common-lisp:defun make-list-addons-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-addons-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-addons-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-addons-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-addons-request))
   common-lisp:nil))
(common-lisp:deftype list-addons-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-addons-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-addons-response-next-token :initform
                         common-lisp:nil)
                        (addons :initarg :|addons| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-addons-response-addons :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-addons-response 'make-list-addons-response))
 (common-lisp:defun make-list-addons-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token addons)
   (common-lisp:apply #'common-lisp:make-instance 'list-addons-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-addons-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-addons-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addons))
      (common-lisp:list
       (common-lisp:cons "addons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-addons-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-request common-lisp:nil
                       ((include :initarg :|include| :type
                         (common-lisp:or include-clusters-list
                                         common-lisp:null)
                         :accessor %list-clusters-request-include :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-clusters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-clusters-request-max-results
                                         common-lisp:null)
                         :accessor %list-clusters-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defun make-list-clusters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:deftype list-clusters-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-clusters-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-clusters-response-next-token :initform
                         common-lisp:nil)
                        (clusters :initarg :|clusters| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-clusters-response-clusters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-response 'make-list-clusters-response))
 (common-lisp:defun make-list-clusters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token clusters)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fargate-profiles-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-fargate-profiles-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or fargate-profiles-request-max-results
                                         common-lisp:null)
                         :accessor %list-fargate-profiles-request-max-results
                         :initform common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-fargate-profiles-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fargate-profiles-request
                    'make-list-fargate-profiles-request))
 (common-lisp:defun make-list-fargate-profiles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fargate-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fargate-profiles-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-fargate-profiles-response-next-token :initform
                         common-lisp:nil)
                        (fargate-profile-names :initarg :|fargateProfileNames|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %list-fargate-profiles-response-fargate-profile-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fargate-profiles-response
                    'make-list-fargate-profiles-response))
 (common-lisp:defun make-list-fargate-profiles-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fargate-profile-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fargate-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-names))
      (common-lisp:list
       (common-lisp:cons "fargateProfileNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-provider-configs-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-identity-provider-configs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-identity-provider-configs-request-max-results
                          common-lisp:null)
                         :accessor
                         %list-identity-provider-configs-request-max-results
                         :initform common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-identity-provider-configs-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'list-identity-provider-configs-request
                    'make-list-identity-provider-configs-request))
 (common-lisp:defun make-list-identity-provider-configs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-provider-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   common-lisp:nil))
(common-lisp:deftype list-identity-provider-configs-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-identity-provider-configs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-identity-provider-configs-response-next-token
                         :initform common-lisp:nil)
                        (identity-provider-configs :initarg
                         :|identityProviderConfigs| :type
                         (common-lisp:or identity-provider-configs
                                         common-lisp:null)
                         :accessor
                         %list-identity-provider-configs-response-identity-provider-configs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-identity-provider-configs-response
                    'make-list-identity-provider-configs-response))
 (common-lisp:defun make-list-identity-provider-configs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token identity-provider-configs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-provider-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-configs))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-nodegroups-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-nodegroups-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-nodegroups-request-max-results
                                         common-lisp:null)
                         :accessor %list-nodegroups-request-max-results
                         :initform common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-nodegroups-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'list-nodegroups-request 'make-list-nodegroups-request))
 (common-lisp:defun make-list-nodegroups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodegroups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   common-lisp:nil))
(common-lisp:deftype list-nodegroups-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-nodegroups-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-nodegroups-response-next-token :initform
                         common-lisp:nil)
                        (nodegroups :initarg :|nodegroups| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-nodegroups-response-nodegroups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-nodegroups-response 'make-list-nodegroups-response))
 (common-lisp:defun make-list-nodegroups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token nodegroups)
   (common-lisp:apply #'common-lisp:make-instance 'list-nodegroups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroups))
      (common-lisp:list
       (common-lisp:cons "nodegroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-updates-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-updates-request-max-results
                                         common-lisp:null)
                         :accessor %list-updates-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-updates-request-next-token :initform
                         common-lisp:nil)
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-updates-request-addon-name :initform
                         common-lisp:nil)
                        (nodegroup-name :initarg :|nodegroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-updates-request-nodegroup-name :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-updates-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-updates-request 'make-list-updates-request))
 (common-lisp:defun make-list-updates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token addon-name
                     nodegroup-name name)
   (common-lisp:apply #'common-lisp:make-instance 'list-updates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-updates-request))
   common-lisp:nil))
(common-lisp:deftype list-updates-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-updates-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-updates-response-next-token :initform
                         common-lisp:nil)
                        (update-ids :initarg :|updateIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-updates-response-update-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-updates-response 'make-list-updates-response))
 (common-lisp:defun make-list-updates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token update-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-updates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-ids))
      (common-lisp:list
       (common-lisp:cons "updateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-setup common-lisp:nil
                       ((enabled :initarg :|enabled| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %log-setup-enabled :initform
                         common-lisp:nil)
                        (types :initarg :|types| :type
                         (common-lisp:or log-types common-lisp:null) :accessor
                         %log-setup-types :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'log-setup 'make-log-setup))
 (common-lisp:defun make-log-setup
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled types)
   (common-lisp:apply #'common-lisp:make-instance 'log-setup
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-setup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-setup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-setup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-setups () '(trivial-types:proper-list log-setup))
 (common-lisp:defun |make-log-setups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-setup))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-types () '(trivial-types:proper-list log-type))
 (common-lisp:defun |make-log-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass logging common-lisp:nil
                       ((cluster-logging :initarg :|clusterLogging| :type
                         (common-lisp:or log-setups common-lisp:null) :accessor
                         %logging-cluster-logging :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'logging 'make-logging))
 (common-lisp:defun make-logging
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-logging)
   (common-lisp:apply #'common-lisp:make-instance 'logging
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-logging))
      (common-lisp:list
       (common-lisp:cons "clusterLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass marketplace-information common-lisp:nil
                       ((product-url :initarg :|productUrl| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %marketplace-information-product-url :initform
                         common-lisp:nil)
                        (product-id :initarg :|productId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %marketplace-information-product-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'marketplace-information 'make-marketplace-information))
 (common-lisp:defun make-marketplace-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-url product-id)
   (common-lisp:apply #'common-lisp:make-instance 'marketplace-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "productId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-url))
      (common-lisp:list
       (common-lisp:cons "productUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nodegroup common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %nodegroup-tags :initform common-lisp:nil)
                        (launch-template :initarg :|launchTemplate| :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor %nodegroup-launch-template :initform
                         common-lisp:nil)
                        (update-config :initarg :|updateConfig| :type
                         (common-lisp:or nodegroup-update-config
                                         common-lisp:null)
                         :accessor %nodegroup-update-config :initform
                         common-lisp:nil)
                        (health :initarg :|health| :type
                         (common-lisp:or nodegroup-health common-lisp:null)
                         :accessor %nodegroup-health :initform common-lisp:nil)
                        (disk-size :initarg :|diskSize| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %nodegroup-disk-size :initform
                         common-lisp:nil)
                        (resources :initarg :|resources| :type
                         (common-lisp:or nodegroup-resources common-lisp:null)
                         :accessor %nodegroup-resources :initform
                         common-lisp:nil)
                        (taints :initarg :|taints| :type
                         (common-lisp:or |taintsList| common-lisp:null)
                         :accessor %nodegroup-taints :initform common-lisp:nil)
                        (labels :initarg :|labels| :type
                         (common-lisp:or |labelsMap| common-lisp:null)
                         :accessor %nodegroup-labels :initform common-lisp:nil)
                        (node-role :initarg :|nodeRole| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %nodegroup-node-role :initform common-lisp:nil)
                        (ami-type :initarg :|amiType| :type
                         (common-lisp:or amitypes common-lisp:null) :accessor
                         %nodegroup-ami-type :initform common-lisp:nil)
                        (remote-access :initarg :|remoteAccess| :type
                         (common-lisp:or remote-access-config common-lisp:null)
                         :accessor %nodegroup-remote-access :initform
                         common-lisp:nil)
                        (subnets :initarg :|subnets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %nodegroup-subnets :initform
                         common-lisp:nil)
                        (instance-types :initarg :|instanceTypes| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %nodegroup-instance-types :initform
                         common-lisp:nil)
                        (scaling-config :initarg :|scalingConfig| :type
                         (common-lisp:or nodegroup-scaling-config
                                         common-lisp:null)
                         :accessor %nodegroup-scaling-config :initform
                         common-lisp:nil)
                        (capacity-type :initarg :|capacityType| :type
                         (common-lisp:or capacity-types common-lisp:null)
                         :accessor %nodegroup-capacity-type :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or nodegroup-status common-lisp:null)
                         :accessor %nodegroup-status :initform common-lisp:nil)
                        (modified-at :initarg :|modifiedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %nodegroup-modified-at :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %nodegroup-created-at :initform common-lisp:nil)
                        (release-version :initarg :|releaseVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %nodegroup-release-version :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %nodegroup-version :initform common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %nodegroup-cluster-name :initform common-lisp:nil)
                        (nodegroup-arn :initarg :|nodegroupArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %nodegroup-nodegroup-arn :initform common-lisp:nil)
                        (nodegroup-name :initarg :|nodegroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %nodegroup-nodegroup-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'nodegroup 'make-nodegroup))
 (common-lisp:defun make-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags launch-template update-config health
                     disk-size resources taints labels node-role ami-type
                     remote-access subnets instance-types scaling-config
                     capacity-type status modified-at created-at
                     release-version version cluster-name nodegroup-arn
                     nodegroup-name)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-name))
      (common-lisp:list
       (common-lisp:cons "nodegroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-arn))
      (common-lisp:list
       (common-lisp:cons "nodegroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-type))
      (common-lisp:list
       (common-lisp:cons "capacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-access))
      (common-lisp:list
       (common-lisp:cons "remoteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-type))
      (common-lisp:list
       (common-lisp:cons "amiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "nodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size))
      (common-lisp:list
       (common-lisp:cons "diskSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nodegroup-health common-lisp:nil
                       ((issues :initarg :|issues| :type
                         (common-lisp:or issue-list common-lisp:null) :accessor
                         %nodegroup-health-issues :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nodegroup-health 'make-nodegroup-health))
 (common-lisp:defun make-nodegroup-health
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key issues)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup-health
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup-health))
   common-lisp:nil))
(common-lisp:deftype nodegroup-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass nodegroup-resources common-lisp:nil
                       ((remote-access-security-group :initarg
                         :|remoteAccessSecurityGroup| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %nodegroup-resources-remote-access-security-group
                         :initform common-lisp:nil)
                        (auto-scaling-groups :initarg :|autoScalingGroups|
                         :type
                         (common-lisp:or auto-scaling-group-list
                                         common-lisp:null)
                         :accessor %nodegroup-resources-auto-scaling-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nodegroup-resources 'make-nodegroup-resources))
 (common-lisp:defun make-nodegroup-resources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remote-access-security-group
                     auto-scaling-groups)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-security-group))
      (common-lisp:list
       (common-lisp:cons "remoteAccessSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nodegroup-scaling-config common-lisp:nil
                       ((desired-size :initarg :|desiredSize| :type
                         (common-lisp:or zero-capacity common-lisp:null)
                         :accessor %nodegroup-scaling-config-desired-size
                         :initform common-lisp:nil)
                        (max-size :initarg :|maxSize| :type
                         (common-lisp:or capacity common-lisp:null) :accessor
                         %nodegroup-scaling-config-max-size :initform
                         common-lisp:nil)
                        (min-size :initarg :|minSize| :type
                         (common-lisp:or zero-capacity common-lisp:null)
                         :accessor %nodegroup-scaling-config-min-size :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nodegroup-scaling-config 'make-nodegroup-scaling-config))
 (common-lisp:defun make-nodegroup-scaling-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key desired-size max-size min-size)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup-scaling-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "minSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "maxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-size))
      (common-lisp:list
       (common-lisp:cons "desiredSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   common-lisp:nil))
(common-lisp:deftype nodegroup-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass nodegroup-update-config common-lisp:nil
                       ((max-unavailable-percentage :initarg
                         :|maxUnavailablePercentage| :type
                         (common-lisp:or percent-capacity common-lisp:null)
                         :accessor
                         %nodegroup-update-config-max-unavailable-percentage
                         :initform common-lisp:nil)
                        (max-unavailable :initarg :|maxUnavailable| :type
                         (common-lisp:or non-zero-integer common-lisp:null)
                         :accessor %nodegroup-update-config-max-unavailable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nodegroup-update-config 'make-nodegroup-update-config))
 (common-lisp:defun make-nodegroup-update-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-unavailable-percentage
                     max-unavailable)
   (common-lisp:apply #'common-lisp:make-instance 'nodegroup-update-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-unavailable))
      (common-lisp:list
       (common-lisp:cons "maxUnavailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-unavailable-percentage))
      (common-lisp:list
       (common-lisp:cons "maxUnavailablePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   common-lisp:nil))
(common-lisp:deftype non-zero-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (eks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass oidc common-lisp:nil
                       ((issuer :initarg :|issuer| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-issuer :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'oidc 'make-oidc))
 (common-lisp:defun make-oidc
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key issuer)
   (common-lisp:apply #'common-lisp:make-instance 'oidc
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oidc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oidc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oidc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass oidc-identity-provider-config common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or |configStatus| common-lisp:null)
                         :accessor %oidc-identity-provider-config-status
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %oidc-identity-provider-config-tags :initform
                         common-lisp:nil)
                        (required-claims :initarg :|requiredClaims| :type
                         (common-lisp:or |requiredClaimsMap| common-lisp:null)
                         :accessor
                         %oidc-identity-provider-config-required-claims
                         :initform common-lisp:nil)
                        (groups-prefix :initarg :|groupsPrefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-groups-prefix :initform
                         common-lisp:nil)
                        (groups-claim :initarg :|groupsClaim| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-groups-claim :initform
                         common-lisp:nil)
                        (username-prefix :initarg :|usernamePrefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-username-prefix
                         :initform common-lisp:nil)
                        (username-claim :initarg :|usernameClaim| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-username-claim
                         :initform common-lisp:nil)
                        (client-id :initarg :|clientId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-client-id :initform
                         common-lisp:nil)
                        (issuer-url :initarg :|issuerUrl| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-issuer-url :initform
                         common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-cluster-name :initform
                         common-lisp:nil)
                        (identity-provider-config-arn :initarg
                         :|identityProviderConfigArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-identity-provider-config-arn
                         :initform common-lisp:nil)
                        (identity-provider-config-name :initarg
                         :|identityProviderConfigName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-identity-provider-config-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'oidc-identity-provider-config
                    'make-oidc-identity-provider-config))
 (common-lisp:defun make-oidc-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status tags required-claims groups-prefix
                     groups-claim username-prefix username-claim client-id
                     issuer-url cluster-name identity-provider-config-arn
                     identity-provider-config-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'oidc-identity-provider-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-url))
      (common-lisp:list
       (common-lisp:cons "issuerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-claim))
      (common-lisp:list
       (common-lisp:cons "usernameClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-prefix))
      (common-lisp:list
       (common-lisp:cons "usernamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-claim))
      (common-lisp:list
       (common-lisp:cons "groupsClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-prefix))
      (common-lisp:list
       (common-lisp:cons "groupsPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-claims))
      (common-lisp:list
       (common-lisp:cons "requiredClaims"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass oidc-identity-provider-config-request common-lisp:nil
                       ((required-claims :initarg :|requiredClaims| :type
                         (common-lisp:or |requiredClaimsMap| common-lisp:null)
                         :accessor
                         %oidc-identity-provider-config-request-required-claims
                         :initform common-lisp:nil)
                        (groups-prefix :initarg :|groupsPrefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-request-groups-prefix
                         :initform common-lisp:nil)
                        (groups-claim :initarg :|groupsClaim| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-request-groups-claim
                         :initform common-lisp:nil)
                        (username-prefix :initarg :|usernamePrefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-request-username-prefix
                         :initform common-lisp:nil)
                        (username-claim :initarg :|usernameClaim| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-request-username-claim
                         :initform common-lisp:nil)
                        (client-id :initarg :|clientId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-request-client-id
                         :initform (common-lisp:error ":clientid is required"))
                        (issuer-url :initarg :|issuerUrl| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-request-issuer-url
                         :initform
                         (common-lisp:error ":issuerurl is required"))
                        (identity-provider-config-name :initarg
                         :|identityProviderConfigName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %oidc-identity-provider-config-request-identity-provider-config-name
                         :initform
                         (common-lisp:error
                          ":identityproviderconfigname is required"))))
 (common-lisp:export
  (common-lisp:list 'oidc-identity-provider-config-request
                    'make-oidc-identity-provider-config-request))
 (common-lisp:defun make-oidc-identity-provider-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key required-claims groups-prefix
                     groups-claim username-prefix username-claim client-id
                     issuer-url identity-provider-config-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'oidc-identity-provider-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-url))
      (common-lisp:list
       (common-lisp:cons "issuerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-claim))
      (common-lisp:list
       (common-lisp:cons "usernameClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-prefix))
      (common-lisp:list
       (common-lisp:cons "usernamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-claim))
      (common-lisp:list
       (common-lisp:cons "groupsClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-prefix))
      (common-lisp:list
       (common-lisp:cons "groupsPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-claims))
      (common-lisp:list
       (common-lisp:cons "requiredClaims"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outpost-config-request common-lisp:nil
                       ((control-plane-placement :initarg
                         :|controlPlanePlacement| :type
                         (common-lisp:or control-plane-placement-request
                                         common-lisp:null)
                         :accessor
                         %outpost-config-request-control-plane-placement
                         :initform common-lisp:nil)
                        (control-plane-instance-type :initarg
                         :|controlPlaneInstanceType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %outpost-config-request-control-plane-instance-type
                         :initform
                         (common-lisp:error
                          ":controlplaneinstancetype is required"))
                        (outpost-arns :initarg :|outpostArns| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %outpost-config-request-outpost-arns
                         :initform
                         (common-lisp:error ":outpostarns is required"))))
 (common-lisp:export
  (common-lisp:list 'outpost-config-request 'make-outpost-config-request))
 (common-lisp:defun make-outpost-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key control-plane-placement
                     control-plane-instance-type outpost-arns)
   (common-lisp:apply #'common-lisp:make-instance 'outpost-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arns))
      (common-lisp:list
       (common-lisp:cons "outpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-instance-type))
      (common-lisp:list
       (common-lisp:cons "controlPlaneInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-placement))
      (common-lisp:list
       (common-lisp:cons "controlPlanePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outpost-config-response common-lisp:nil
                       ((control-plane-placement :initarg
                         :|controlPlanePlacement| :type
                         (common-lisp:or control-plane-placement-response
                                         common-lisp:null)
                         :accessor
                         %outpost-config-response-control-plane-placement
                         :initform common-lisp:nil)
                        (control-plane-instance-type :initarg
                         :|controlPlaneInstanceType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %outpost-config-response-control-plane-instance-type
                         :initform
                         (common-lisp:error
                          ":controlplaneinstancetype is required"))
                        (outpost-arns :initarg :|outpostArns| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %outpost-config-response-outpost-arns
                         :initform
                         (common-lisp:error ":outpostarns is required"))))
 (common-lisp:export
  (common-lisp:list 'outpost-config-response 'make-outpost-config-response))
 (common-lisp:defun make-outpost-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key control-plane-placement
                     control-plane-instance-type outpost-arns)
   (common-lisp:apply #'common-lisp:make-instance 'outpost-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arns))
      (common-lisp:list
       (common-lisp:cons "outpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-instance-type))
      (common-lisp:list
       (common-lisp:cons "controlPlaneInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-placement))
      (common-lisp:list
       (common-lisp:cons "controlPlanePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   common-lisp:nil))
(common-lisp:deftype percent-capacity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass provider common-lisp:nil
                       ((key-arn :initarg :|keyArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %provider-key-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'provider 'make-provider))
 (common-lisp:defun make-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-arn)
   (common-lisp:apply #'common-lisp:make-instance 'provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-cluster-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %register-cluster-request-tags :initform
                         common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %register-cluster-request-client-request-token
                         :initform common-lisp:nil)
                        (connector-config :initarg :|connectorConfig| :type
                         (common-lisp:or connector-config-request
                                         common-lisp:null)
                         :accessor %register-cluster-request-connector-config
                         :initform
                         (common-lisp:error ":connectorconfig is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor %register-cluster-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'register-cluster-request 'make-register-cluster-request))
 (common-lisp:defun make-register-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-request-token
                     connector-config name)
   (common-lisp:apply #'common-lisp:make-instance 'register-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-config))
      (common-lisp:list
       (common-lisp:cons "connectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-cluster-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %register-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-cluster-response
                    'make-register-cluster-response))
 (common-lisp:defun make-register-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'register-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remote-access-config common-lisp:nil
                       ((source-security-groups :initarg
                         :|sourceSecurityGroups| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %remote-access-config-source-security-groups
                         :initform common-lisp:nil)
                        (ec2ssh-key :initarg :|ec2SshKey| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %remote-access-config-ec2ssh-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remote-access-config 'make-remote-access-config))
 (common-lisp:defun make-remote-access-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-security-groups ec2ssh-key)
   (common-lisp:apply #'common-lisp:make-instance 'remote-access-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remote-access-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remote-access-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2ssh-key))
      (common-lisp:list
       (common-lisp:cons "ec2SshKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-groups))
      (common-lisp:list
       (common-lisp:cons "sourceSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remote-access-config))
   common-lisp:nil))
(common-lisp:deftype resolve-conflicts () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (eks-error)
     ((cluster-name :initarg :|clusterName| :initform common-lisp:nil :reader
       resource-in-use-exception-cluster-name)
      (nodegroup-name :initarg :|nodegroupName| :initform common-lisp:nil
       :reader resource-in-use-exception-nodegroup-name)
      (addon-name :initarg :|addonName| :initform common-lisp:nil :reader
       resource-in-use-exception-addon-name)
      (message :initarg :|message| :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-cluster-name
                    'resource-in-use-exception-nodegroup-name
                    'resource-in-use-exception-addon-name
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (eks-error)
     ((cluster-name :initarg :|clusterName| :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-cluster-name)
      (nodegroup-name :initarg :|nodegroupName| :initform common-lisp:nil
       :reader resource-limit-exceeded-exception-nodegroup-name)
      (message :initarg :|message| :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-cluster-name
                    'resource-limit-exceeded-exception-nodegroup-name
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (eks-error)
     ((cluster-name :initarg :|clusterName| :initform common-lisp:nil :reader
       resource-not-found-exception-cluster-name)
      (nodegroup-name :initarg :|nodegroupName| :initform common-lisp:nil
       :reader resource-not-found-exception-nodegroup-name)
      (fargate-profile-name :initarg :|fargateProfileName| :initform
       common-lisp:nil :reader
       resource-not-found-exception-fargate-profile-name)
      (addon-name :initarg :|addonName| :initform common-lisp:nil :reader
       resource-not-found-exception-addon-name)
      (message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-cluster-name
                    'resource-not-found-exception-nodegroup-name
                    'resource-not-found-exception-fargate-profile-name
                    'resource-not-found-exception-addon-name
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-propagation-delay-exception
     (eks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-propagation-delay-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-propagation-delay-exception
                    'resource-propagation-delay-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition server-exception
     (eks-error)
     ((cluster-name :initarg :|clusterName| :initform common-lisp:nil :reader
       server-exception-cluster-name)
      (nodegroup-name :initarg :|nodegroupName| :initform common-lisp:nil
       :reader server-exception-nodegroup-name)
      (addon-name :initarg :|addonName| :initform common-lisp:nil :reader
       server-exception-addon-name)
      (message :initarg :|message| :initform common-lisp:nil :reader
       server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-exception 'server-exception-cluster-name
                    'server-exception-nodegroup-name
                    'server-exception-addon-name 'server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (eks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass taint common-lisp:nil
                       ((effect :initarg :|effect| :type
                         (common-lisp:or taint-effect common-lisp:null)
                         :accessor %taint-effect :initform common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or |taintValue| common-lisp:null)
                         :accessor %taint-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or |taintKey| common-lisp:null) :accessor
                         %taint-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'taint 'make-taint))
 (common-lisp:defun make-taint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key effect value key)
   (common-lisp:apply #'common-lisp:make-instance 'taint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input taint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input taint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input taint))
   common-lisp:nil))
(common-lisp:deftype taint-effect () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-availability-zone-exception
     (eks-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-message)
      (cluster-name :initarg :|clusterName| :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-cluster-name)
      (nodegroup-name :initarg :|nodegroupName| :initform common-lisp:nil
       :reader unsupported-availability-zone-exception-nodegroup-name)
      (valid-zones :initarg :|validZones| :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-valid-zones)))
 (common-lisp:export
  (common-lisp:list 'unsupported-availability-zone-exception
                    'unsupported-availability-zone-exception-message
                    'unsupported-availability-zone-exception-cluster-name
                    'unsupported-availability-zone-exception-nodegroup-name
                    'unsupported-availability-zone-exception-valid-zones)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor %update-errors :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-created-at :initform common-lisp:nil)
                        (params :initarg :|params| :type
                         (common-lisp:or update-params common-lisp:null)
                         :accessor %update-params :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or update-type common-lisp:null)
                         :accessor %update-type :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or update-status common-lisp:null)
                         :accessor %update-status :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update 'make-update))
 (common-lisp:defun make-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors created-at params type status id)
   (common-lisp:apply #'common-lisp:make-instance 'update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'params))
      (common-lisp:list
       (common-lisp:cons "params"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-addon-request common-lisp:nil
                       ((configuration-values :initarg :|configurationValues|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %update-addon-request-configuration-values
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %update-addon-request-client-request-token
                         :initform common-lisp:nil)
                        (resolve-conflicts :initarg :|resolveConflicts| :type
                         (common-lisp:or resolve-conflicts common-lisp:null)
                         :accessor %update-addon-request-resolve-conflicts
                         :initform common-lisp:nil)
                        (service-account-role-arn :initarg
                         :|serviceAccountRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-addon-request-service-account-role-arn
                         :initform common-lisp:nil)
                        (addon-version :initarg :|addonVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-addon-request-addon-version :initform
                         common-lisp:nil)
                        (addon-name :initarg :|addonName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-addon-request-addon-name :initform
                         (common-lisp:error ":addonname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or cluster-name common-lisp:null)
                         :accessor %update-addon-request-cluster-name :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'update-addon-request 'make-update-addon-request))
 (common-lisp:defun make-update-addon-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-values client-request-token
                     resolve-conflicts service-account-role-arn addon-version
                     addon-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-addon-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-addon-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolve-conflicts))
      (common-lisp:list
       (common-lisp:cons "resolveConflicts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-addon-response common-lisp:nil
                       ((update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %update-addon-response-update :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-addon-response 'make-update-addon-response))
 (common-lisp:defun make-update-addon-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update)
   (common-lisp:apply #'common-lisp:make-instance 'update-addon-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-config-request common-lisp:nil
                       ((client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-cluster-config-request-client-request-token
                         :initform common-lisp:nil)
                        (logging :initarg :|logging| :type
                         (common-lisp:or logging common-lisp:null) :accessor
                         %update-cluster-config-request-logging :initform
                         common-lisp:nil)
                        (resources-vpc-config :initarg :|resourcesVpcConfig|
                         :type
                         (common-lisp:or vpc-config-request common-lisp:null)
                         :accessor
                         %update-cluster-config-request-resources-vpc-config
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-config-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-config-request
                    'make-update-cluster-config-request))
 (common-lisp:defun make-update-cluster-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token logging
                     resources-vpc-config name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-config-response common-lisp:nil
                       ((update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %update-cluster-config-response-update :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-config-response
                    'make-update-cluster-config-response))
 (common-lisp:defun make-update-cluster-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-version-request common-lisp:nil
                       ((client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-cluster-version-request-client-request-token
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-version-request-version :initform
                         (common-lisp:error ":version is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-version-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-version-request
                    'make-update-cluster-version-request))
 (common-lisp:defun make-update-cluster-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-version-response common-lisp:nil
                       ((update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %update-cluster-version-response-update :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-version-response
                    'make-update-cluster-version-response))
 (common-lisp:defun make-update-cluster-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-labels-payload common-lisp:nil
                       ((remove-labels :initarg :|removeLabels| :type
                         (common-lisp:or |labelsKeyList| common-lisp:null)
                         :accessor %update-labels-payload-remove-labels
                         :initform common-lisp:nil)
                        (add-or-update-labels :initarg :|addOrUpdateLabels|
                         :type (common-lisp:or |labelsMap| common-lisp:null)
                         :accessor %update-labels-payload-add-or-update-labels
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-labels-payload 'make-update-labels-payload))
 (common-lisp:defun make-update-labels-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remove-labels add-or-update-labels)
   (common-lisp:apply #'common-lisp:make-instance 'update-labels-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-or-update-labels))
      (common-lisp:list
       (common-lisp:cons "addOrUpdateLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-labels))
      (common-lisp:list
       (common-lisp:cons "removeLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-nodegroup-config-request common-lisp:nil
                       ((client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-nodegroup-config-request-client-request-token
                         :initform common-lisp:nil)
                        (update-config :initarg :|updateConfig| :type
                         (common-lisp:or nodegroup-update-config
                                         common-lisp:null)
                         :accessor
                         %update-nodegroup-config-request-update-config
                         :initform common-lisp:nil)
                        (scaling-config :initarg :|scalingConfig| :type
                         (common-lisp:or nodegroup-scaling-config
                                         common-lisp:null)
                         :accessor
                         %update-nodegroup-config-request-scaling-config
                         :initform common-lisp:nil)
                        (taints :initarg :|taints| :type
                         (common-lisp:or update-taints-payload
                                         common-lisp:null)
                         :accessor %update-nodegroup-config-request-taints
                         :initform common-lisp:nil)
                        (labels :initarg :|labels| :type
                         (common-lisp:or update-labels-payload
                                         common-lisp:null)
                         :accessor %update-nodegroup-config-request-labels
                         :initform common-lisp:nil)
                        (nodegroup-name :initarg :|nodegroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-nodegroup-config-request-nodegroup-name
                         :initform
                         (common-lisp:error ":nodegroupname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-nodegroup-config-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-config-request
                    'make-update-nodegroup-config-request))
 (common-lisp:defun make-update-nodegroup-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token update-config
                     scaling-config taints labels nodegroup-name cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-nodegroup-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-nodegroup-config-response common-lisp:nil
                       ((update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %update-nodegroup-config-response-update :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-config-response
                    'make-update-nodegroup-config-response))
 (common-lisp:defun make-update-nodegroup-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-nodegroup-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-nodegroup-version-request common-lisp:nil
                       ((client-request-token :initarg :|clientRequestToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %update-nodegroup-version-request-client-request-token
                         :initform common-lisp:nil)
                        (force :initarg :|force| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-nodegroup-version-request-force :initform
                         common-lisp:nil)
                        (launch-template :initarg :|launchTemplate| :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         %update-nodegroup-version-request-launch-template
                         :initform common-lisp:nil)
                        (release-version :initarg :|releaseVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-nodegroup-version-request-release-version
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-nodegroup-version-request-version :initform
                         common-lisp:nil)
                        (nodegroup-name :initarg :|nodegroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-nodegroup-version-request-nodegroup-name
                         :initform
                         (common-lisp:error ":nodegroupname is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-nodegroup-version-request-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-version-request
                    'make-update-nodegroup-version-request))
 (common-lisp:defun make-update-nodegroup-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token force
                     launch-template release-version version nodegroup-name
                     cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-nodegroup-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-nodegroup-version-response common-lisp:nil
                       ((update :initarg :|update| :type
                         (common-lisp:or update common-lisp:null) :accessor
                         %update-nodegroup-version-response-update :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-version-response
                    'make-update-nodegroup-version-response))
 (common-lisp:defun make-update-nodegroup-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-nodegroup-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-param common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-param-value :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or update-param-type common-lisp:null)
                         :accessor %update-param-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-param 'make-update-param))
 (common-lisp:defun make-update-param
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance 'update-param
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-param))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-param))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-param))
   common-lisp:nil))
(common-lisp:deftype update-param-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype update-params ()
   '(trivial-types:proper-list update-param))
 (common-lisp:defun |make-update-params|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-param))
   aws-sdk/generator/shape::members))
(common-lisp:deftype update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-taints-payload common-lisp:nil
                       ((remove-taints :initarg :|removeTaints| :type
                         (common-lisp:or |taintsList| common-lisp:null)
                         :accessor %update-taints-payload-remove-taints
                         :initform common-lisp:nil)
                        (add-or-update-taints :initarg :|addOrUpdateTaints|
                         :type (common-lisp:or |taintsList| common-lisp:null)
                         :accessor %update-taints-payload-add-or-update-taints
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-taints-payload 'make-update-taints-payload))
 (common-lisp:defun make-update-taints-payload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remove-taints add-or-update-taints)
   (common-lisp:apply #'common-lisp:make-instance 'update-taints-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-or-update-taints))
      (common-lisp:list
       (common-lisp:cons "addOrUpdateTaints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-taints))
      (common-lisp:list
       (common-lisp:cons "removeTaints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   common-lisp:nil))
(common-lisp:deftype update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-config-request common-lisp:nil
                       ((public-access-cidrs :initarg :|publicAccessCidrs|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor %vpc-config-request-public-access-cidrs
                         :initform common-lisp:nil)
                        (endpoint-private-access :initarg
                         :|endpointPrivateAccess| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %vpc-config-request-endpoint-private-access
                         :initform common-lisp:nil)
                        (endpoint-public-access :initarg
                         :|endpointPublicAccess| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %vpc-config-request-endpoint-public-access
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpc-config-request-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpc-config-request-subnet-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-config-request 'make-vpc-config-request))
 (common-lisp:defun make-vpc-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-access-cidrs
                     endpoint-private-access endpoint-public-access
                     security-group-ids subnet-ids)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-public-access))
      (common-lisp:list
       (common-lisp:cons "endpointPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-private-access))
      (common-lisp:list
       (common-lisp:cons "endpointPrivateAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-cidrs))
      (common-lisp:list
       (common-lisp:cons "publicAccessCidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-config-response common-lisp:nil
                       ((public-access-cidrs :initarg :|publicAccessCidrs|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor %vpc-config-response-public-access-cidrs
                         :initform common-lisp:nil)
                        (endpoint-private-access :initarg
                         :|endpointPrivateAccess| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %vpc-config-response-endpoint-private-access :initform
                         common-lisp:nil)
                        (endpoint-public-access :initarg
                         :|endpointPublicAccess| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %vpc-config-response-endpoint-public-access :initform
                         common-lisp:nil)
                        (vpc-id :initarg :|vpcId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %vpc-config-response-vpc-id :initform common-lisp:nil)
                        (cluster-security-group-id :initarg
                         :|clusterSecurityGroupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %vpc-config-response-cluster-security-group-id
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpc-config-response-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpc-config-response-subnet-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-config-response 'make-vpc-config-response))
 (common-lisp:defun make-vpc-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-access-cidrs
                     endpoint-private-access endpoint-public-access vpc-id
                     cluster-security-group-id security-group-ids subnet-ids)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-id))
      (common-lisp:list
       (common-lisp:cons "clusterSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-public-access))
      (common-lisp:list
       (common-lisp:cons "endpointPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-private-access))
      (common-lisp:list
       (common-lisp:cons "endpointPrivateAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-cidrs))
      (common-lisp:list
       (common-lisp:cons "publicAccessCidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config-response))
   common-lisp:nil))
(common-lisp:deftype zero-capacity () 'common-lisp:integer)
(common-lisp:deftype |configStatus| () 'common-lisp:string)
(common-lisp:deftype |labelKey| () 'common-lisp:string)
(common-lisp:deftype |labelValue| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |labelsKeyList| () '(trivial-types:proper-list string))
 (common-lisp:defun |make-labelskeylist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |labelsMap| () 'common-lisp:hash-table)
 (common-lisp:defun |make-labelsmap| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |requiredClaimsKey| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |requiredClaimsMap| () 'common-lisp:hash-table)
 (common-lisp:defun |make-requiredclaimsmap|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |requiredClaimsValue| () 'common-lisp:string)
(common-lisp:deftype |taintKey| () 'common-lisp:string)
(common-lisp:deftype |taintValue| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |taintsList| () '(trivial-types:proper-list taint))
 (common-lisp:defun |make-taintslist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list taint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun associate-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name encryption-config
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name encryption-config
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-encryption-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/encryption-config/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "AssociateEncryptionConfig"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-encryption-config))
(common-lisp:progn
 (common-lisp:defun associate-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name oidc tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name oidc tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "AssociateIdentityProviderConfig"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun create-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name addon-version
                     service-account-role-arn resolve-conflicts
                     client-request-token tags configuration-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name addon-version
     service-account-role-arn resolve-conflicts client-request-token tags
     configuration-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAddon"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-addon))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version role-arn
                     resources-vpc-config kubernetes-network-config logging
                     client-request-token tags encryption-config
                     outpost-config)
   (common-lisp:declare
    (common-lisp:ignorable name version role-arn resources-vpc-config
     kubernetes-network-config logging client-request-token tags
     encryption-config outpost-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/clusters"
                                                        "CreateCluster"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fargate-profile-name cluster-name
                     pod-execution-role-arn subnets selectors
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable fargate-profile-name cluster-name
     pod-execution-role-arn subnets selectors client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateFargateProfile"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fargate-profile))
(common-lisp:progn
 (common-lisp:defun create-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name
                     scaling-config disk-size subnets instance-types ami-type
                     remote-access node-role labels taints tags
                     client-request-token launch-template update-config
                     capacity-type version release-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name scaling-config disk-size
     subnets instance-types ami-type remote-access node-role labels taints tags
     client-request-token launch-template update-config capacity-type version
     release-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateNodegroup"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-nodegroup))
(common-lisp:progn
 (common-lisp:defun delete-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name preserve)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name preserve))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "DeleteAddon"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-addon))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteCluster"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name fargate-profile-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name fargate-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'fargate-profile-name))))
                                                        "DeleteFargateProfile"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fargate-profile))
(common-lisp:progn
 (common-lisp:defun delete-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name nodegroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "DeleteNodegroup"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-nodegroup))
(common-lisp:progn
 (common-lisp:defun deregister-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster-registrations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeregisterCluster"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-cluster))
(common-lisp:progn
 (common-lisp:defun describe-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name addon-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "DescribeAddon"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-addon))
(common-lisp:progn
 (common-lisp:defun describe-addon-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key addon-name addon-version)
   (common-lisp:declare (common-lisp:ignorable addon-name addon-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-addon-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/addons/configuration-schemas"
                                                        "DescribeAddonConfiguration"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-addon-configuration))
(common-lisp:progn
 (common-lisp:defun describe-addon-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kubernetes-version max-results next-token
                     addon-name types publishers owners)
   (common-lisp:declare
    (common-lisp:ignorable kubernetes-version max-results next-token addon-name
     types publishers owners))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addon-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/addons/supported-versions"
                                                        "DescribeAddonVersions"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-addon-versions))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeCluster"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name fargate-profile-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name fargate-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'fargate-profile-name))))
                                                        "DescribeFargateProfile"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fargate-profile))
(common-lisp:progn
 (common-lisp:defun describe-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name identity-provider-config)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name identity-provider-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/describe"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeIdentityProviderConfig"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun describe-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name nodegroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "DescribeNodegroup"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-nodegroup))
(common-lisp:progn
 (common-lisp:defun describe-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name update-id nodegroup-name addon-name)
   (common-lisp:declare
    (common-lisp:ignorable name update-id nodegroup-name addon-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-update-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'update-id))))
                                                        "DescribeUpdate"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-update))
(common-lisp:progn
 (common-lisp:defun disassociate-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name identity-provider-config
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name identity-provider-config
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DisassociateIdentityProviderConfig"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun list-addons
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-addons-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListAddons"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-addons))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token include)
   (common-lisp:declare (common-lisp:ignorable max-results next-token include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/clusters"
                                                        "ListClusters"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-fargate-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fargate-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListFargateProfiles"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fargate-profiles))
(common-lisp:progn
 (common-lisp:defun list-identity-provider-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-identity-provider-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListIdentityProviderConfigs"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-identity-provider-configs))
(common-lisp:progn
 (common-lisp:defun list-nodegroups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodegroups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListNodegroups"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-nodegroups))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name nodegroup-name addon-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable name nodegroup-name addon-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-updates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListUpdates"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-updates))
(common-lisp:progn
 (common-lisp:defun register-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name connector-config
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name connector-config client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/cluster-registrations"
                                                        "RegisterCluster"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-cluster))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name addon-version
                     service-account-role-arn resolve-conflicts
                     client-request-token configuration-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name addon-version
     service-account-role-arn resolve-conflicts client-request-token
     configuration-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "UpdateAddon"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-addon))
(common-lisp:progn
 (common-lisp:defun update-cluster-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name resources-vpc-config logging
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name resources-vpc-config logging
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/update-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateClusterConfig"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster-config))
(common-lisp:progn
 (common-lisp:defun update-cluster-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name version client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateClusterVersion"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster-version))
(common-lisp:progn
 (common-lisp:defun update-nodegroup-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name labels taints
                     scaling-config update-config client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name labels taints
     scaling-config update-config client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-nodegroup-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A/update-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "UpdateNodegroupConfig"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-nodegroup-config))
(common-lisp:progn
 (common-lisp:defun update-nodegroup-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name version
                     release-version launch-template force
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name version release-version
     launch-template force client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-nodegroup-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A/update-version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "UpdateNodegroupVersion"
                                                        "2017-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-nodegroup-version))
