;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/eks/api
  (:use)
  (:nicknames #:aws/eks)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/eks/api)
(common-lisp:progn
 (common-lisp:define-condition eks-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'eks-error))
(common-lisp:progn
 (common-lisp:defclass eks-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "eks" :api-version
                        "2017-11-01" :host-prefix "eks" :signing-name "eks"
                        :global-host common-lisp:nil))
 (common-lisp:export 'eks-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ClientException" . client-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourcePropagationDelayException"
     . resource-propagation-delay-exception)
    ("ServerException" . server-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("UnsupportedAvailabilityZoneException"
     . unsupported-availability-zone-exception)))
(common-lisp:deftype amitypes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-config-response-"))
   (bootstrap-cluster-creator-admin-permissions common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (authentication-mode common-lisp:nil :type
    (common-lisp:or authentication-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-config-response 'make-access-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-cluster-creator-admin-permissions))
      (common-lisp:list
       (common-lisp:cons "bootstrapClusterCreatorAdminPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "authenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (access-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-entry-"))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (principal-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kubernetes-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (access-entry-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (username common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-entry 'make-access-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-groups))
      (common-lisp:list
       (common-lisp:cons "kubernetesGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entry-arn))
      (common-lisp:list
       (common-lisp:cons "accessEntryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-policies-list ()
   '(trivial-types:proper-list access-policy))
 (common-lisp:defun make-access-policies-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (access-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-policy-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-policy 'make-access-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-scope (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-scope-"))
   (type common-lisp:nil :type
    (common-lisp:or access-scope-type common-lisp:null))
   (namespaces common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-scope 'make-access-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-scope))
   common-lisp:nil))
(common-lisp:deftype access-scope-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-info-map () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-info-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (addon (:copier common-lisp:nil) (:conc-name "struct-shape-addon-"))
   (addon-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-name common-lisp:nil :type
    (common-lisp:or cluster-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or addon-status common-lisp:null))
   (addon-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (health common-lisp:nil :type
    (common-lisp:or addon-health common-lisp:null))
   (addon-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (service-account-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (publisher common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (marketplace-information common-lisp:nil :type
    (common-lisp:or marketplace-information common-lisp:null))
   (configuration-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'addon 'make-addon))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-arn))
      (common-lisp:list
       (common-lisp:cons "addonArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-information))
      (common-lisp:list
       (common-lisp:cons "marketplaceInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (addon-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-addon-health-"))
   (issues common-lisp:nil :type
    (common-lisp:or addon-issue-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'addon-health 'make-addon-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (addon-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-addon-info-"))
   (addon-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (addon-versions common-lisp:nil :type
    (common-lisp:or addon-version-info-list common-lisp:null))
   (publisher common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (marketplace-information common-lisp:nil :type
    (common-lisp:or marketplace-information common-lisp:null)))
 (common-lisp:export (common-lisp:list 'addon-info 'make-addon-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-versions))
      (common-lisp:list
       (common-lisp:cons "addonVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-information))
      (common-lisp:list
       (common-lisp:cons "marketplaceInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (addon-issue (:copier common-lisp:nil)
      (:conc-name "struct-shape-addon-issue-"))
   (code common-lisp:nil :type
    (common-lisp:or addon-issue-code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'addon-issue 'make-addon-issue))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-issue))
   common-lisp:nil))
(common-lisp:deftype addon-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype addon-issue-list ()
   '(trivial-types:proper-list addon-issue))
 (common-lisp:defun make-addon-issue-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-issue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype addon-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (addon-version-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-addon-version-info-"))
   (addon-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (compatibilities common-lisp:nil :type
    (common-lisp:or compatibilities common-lisp:null))
   (requires-configuration common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'addon-version-info 'make-addon-version-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input addon-version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input addon-version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibilities))
      (common-lisp:list
       (common-lisp:cons "compatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-configuration))
      (common-lisp:list
       (common-lisp:cons "requiresConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input addon-version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype addon-version-info-list ()
   '(trivial-types:proper-list addon-version-info))
 (common-lisp:defun make-addon-version-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-version-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype addons () '(trivial-types:proper-list addon-info))
 (common-lisp:defun make-addons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list addon-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-access-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-access-policy-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or string common-lisp:null))
   (policy-arn (common-lisp:error ":policyarn is required") :type
    (common-lisp:or string common-lisp:null))
   (access-scope (common-lisp:error ":accessscope is required") :type
    (common-lisp:or access-scope common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-access-policy-request
                    'make-associate-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-scope))
      (common-lisp:list
       (common-lisp:cons "accessScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-access-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-access-policy-response-"))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (principal-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (associated-access-policy common-lisp:nil :type
    (common-lisp:or associated-access-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-access-policy-response
                    'make-associate-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-access-policy))
      (common-lisp:list
       (common-lisp:cons "associatedAccessPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-encryption-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-encryption-config-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (encryption-config (common-lisp:error ":encryptionconfig is required") :type
    (common-lisp:or encryption-config-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-encryption-config-request
                    'make-associate-encryption-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-encryption-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-encryption-config-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-encryption-config-response
                    'make-associate-encryption-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-encryption-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-identity-provider-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-identity-provider-config-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (oidc (common-lisp:error ":oidc is required") :type
    (common-lisp:or oidc-identity-provider-config-request common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-identity-provider-config-request
                    'make-associate-identity-provider-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-identity-provider-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-identity-provider-config-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-identity-provider-config-response
                    'make-associate-identity-provider-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-access-policies-list ()
   '(trivial-types:proper-list associated-access-policy))
 (common-lisp:defun make-associated-access-policies-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            associated-access-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associated-access-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-associated-access-policy-"))
   (policy-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (access-scope common-lisp:nil :type
    (common-lisp:or access-scope common-lisp:null))
   (associated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associated-access-policy 'make-associated-access-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-access-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-access-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-scope))
      (common-lisp:list
       (common-lisp:cons "accessScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-at))
      (common-lisp:list
       (common-lisp:cons "associatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-access-policy))
   common-lisp:nil))
(common-lisp:deftype authentication-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-group-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun make-auto-scaling-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype capacity () 'common-lisp:integer)
(common-lisp:deftype capacity-types () 'common-lisp:string)
(common-lisp:deftype category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype category-list () '(trivial-types:proper-list category))
 (common-lisp:defun make-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-"))
   (data common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition client-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       client-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader client-exception-nodegroup-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       client-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader client-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'client-exception-cluster-name
                    'client-exception-nodegroup-name
                    'client-exception-addon-name
                    'client-exception-subscription-id
                    'client-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (client-stat (:copier common-lisp:nil)
      (:conc-name "struct-shape-client-stat-"))
   (user-agent common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (number-of-requests-last30days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (last-request-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'client-stat 'make-client-stat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "userAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-requests-last30days))
      (common-lisp:list
       (common-lisp:cons "numberOfRequestsLast30Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-request-time))
      (common-lisp:list
       (common-lisp:cons "lastRequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-stat))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype client-stats () '(trivial-types:proper-list client-stat))
 (common-lisp:defun make-client-stats
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list client-stat))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster (:copier common-lisp:nil) (:conc-name "struct-shape-cluster-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resources-vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config-response common-lisp:null))
   (kubernetes-network-config common-lisp:nil :type
    (common-lisp:or kubernetes-network-config-response common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (identity common-lisp:nil :type (common-lisp:or identity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cluster-status common-lisp:null))
   (certificate-authority common-lisp:nil :type
    (common-lisp:or certificate common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (platform-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (encryption-config common-lisp:nil :type
    (common-lisp:or encryption-config-list common-lisp:null))
   (connector-config common-lisp:nil :type
    (common-lisp:or connector-config-response common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (health common-lisp:nil :type
    (common-lisp:or cluster-health common-lisp:null))
   (outpost-config common-lisp:nil :type
    (common-lisp:or outpost-config-response common-lisp:null))
   (access-config common-lisp:nil :type
    (common-lisp:or access-config-response common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-network-config))
      (common-lisp:list
       (common-lisp:cons "kubernetesNetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority))
      (common-lisp:list
       (common-lisp:cons "certificateAuthority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-config))
      (common-lisp:list
       (common-lisp:cons "connectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-config))
      (common-lisp:list
       (common-lisp:cons "outpostConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-config))
      (common-lisp:list
       (common-lisp:cons "accessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-health-"))
   (issues common-lisp:nil :type
    (common-lisp:or cluster-issue-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cluster-health 'make-cluster-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-issue (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-issue-"))
   (code common-lisp:nil :type
    (common-lisp:or cluster-issue-code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cluster-issue 'make-cluster-issue))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-issue))
   common-lisp:nil))
(common-lisp:deftype cluster-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-issue-list ()
   '(trivial-types:proper-list cluster-issue))
 (common-lisp:defun make-cluster-issue-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-issue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cluster-name () 'common-lisp:string)
(common-lisp:deftype cluster-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compatibilities ()
   '(trivial-types:proper-list compatibility))
 (common-lisp:defun make-compatibilities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatibility))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (compatibility (:copier common-lisp:nil)
      (:conc-name "struct-shape-compatibility-"))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (platform-versions common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (default-version common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'compatibility 'make-compatibility))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compatibility))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compatibility))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "clusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-versions))
      (common-lisp:list
       (common-lisp:cons "platformVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version))
      (common-lisp:list
       (common-lisp:cons "defaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compatibility))
   common-lisp:nil))
(common-lisp:deftype connector-config-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-config-request-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or connector-config-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-config-request 'make-connector-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-config-response-"))
   (activation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (activation-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (activation-expiry common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (provider common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-config-response
                    'make-connector-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-id))
      (common-lisp:list
       (common-lisp:cons "activationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-code))
      (common-lisp:list
       (common-lisp:cons "activationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-expiry))
      (common-lisp:list
       (common-lisp:cons "activationExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (control-plane-placement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-plane-placement-request-"))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'control-plane-placement-request
                    'make-control-plane-placement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (control-plane-placement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-plane-placement-response-"))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'control-plane-placement-response
                    'make-control-plane-placement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-placement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-config-request-"))
   (bootstrap-cluster-creator-admin-permissions common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (authentication-mode common-lisp:nil :type
    (common-lisp:or authentication-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-config-request
                    'make-create-access-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bootstrap-cluster-creator-admin-permissions))
      (common-lisp:list
       (common-lisp:cons "bootstrapClusterCreatorAdminPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "authenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-entry-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or string common-lisp:null))
   (kubernetes-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (username common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-entry-request
                    'make-create-access-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-groups))
      (common-lisp:list
       (common-lisp:cons "kubernetesGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-entry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-entry-response-"))
   (access-entry common-lisp:nil :type
    (common-lisp:or access-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-entry-response
                    'make-create-access-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entry))
      (common-lisp:list
       (common-lisp:cons "accessEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-addon-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-addon-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or cluster-name common-lisp:null))
   (addon-name (common-lisp:error ":addonname is required") :type
    (common-lisp:or string common-lisp:null))
   (addon-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-account-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (resolve-conflicts common-lisp:nil :type
    (common-lisp:or resolve-conflicts common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (configuration-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-addon-request 'make-create-addon-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-addon-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolve-conflicts))
      (common-lisp:list
       (common-lisp:cons "resolveConflicts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-addon-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-addon-response-"))
   (addon common-lisp:nil :type (common-lisp:or addon common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-addon-response 'make-create-addon-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or cluster-name common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (resources-vpc-config (common-lisp:error ":resourcesvpcconfig is required")
    :type (common-lisp:or vpc-config-request common-lisp:null))
   (kubernetes-network-config common-lisp:nil :type
    (common-lisp:or kubernetes-network-config-request common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (encryption-config common-lisp:nil :type
    (common-lisp:or encryption-config-list common-lisp:null))
   (outpost-config common-lisp:nil :type
    (common-lisp:or outpost-config-request common-lisp:null))
   (access-config common-lisp:nil :type
    (common-lisp:or create-access-config-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-network-config))
      (common-lisp:list
       (common-lisp:cons "kubernetesNetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-config))
      (common-lisp:list
       (common-lisp:cons "outpostConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-config))
      (common-lisp:list
       (common-lisp:cons "accessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-eks-anywhere-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-eks-anywhere-subscription-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or eks-anywhere-subscription-name common-lisp:null))
   (term (common-lisp:error ":term is required") :type
    (common-lisp:or eks-anywhere-subscription-term common-lisp:null))
   (license-quantity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (license-type common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription-license-type common-lisp:null))
   (auto-renew common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-eks-anywhere-subscription-request
                    'make-create-eks-anywhere-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-quantity))
      (common-lisp:list
       (common-lisp:cons "licenseQuantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "autoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-eks-anywhere-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-eks-anywhere-subscription-response-"))
   (subscription common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-eks-anywhere-subscription-response
                    'make-create-eks-anywhere-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-eks-anywhere-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-fargate-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-fargate-profile-request-"))
   (fargate-profile-name (common-lisp:error ":fargateprofilename is required")
    :type (common-lisp:or string common-lisp:null))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (pod-execution-role-arn
    (common-lisp:error ":podexecutionrolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (selectors common-lisp:nil :type
    (common-lisp:or fargate-profile-selectors common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-fargate-profile-request
                    'make-create-fargate-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-name))
      (common-lisp:list
       (common-lisp:cons "fargateProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pod-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "podExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectors))
      (common-lisp:list
       (common-lisp:cons "selectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-fargate-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-fargate-profile-response-"))
   (fargate-profile common-lisp:nil :type
    (common-lisp:or fargate-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-fargate-profile-response
                    'make-create-fargate-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-nodegroup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-nodegroup-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (nodegroup-name (common-lisp:error ":nodegroupname is required") :type
    (common-lisp:or string common-lisp:null))
   (scaling-config common-lisp:nil :type
    (common-lisp:or nodegroup-scaling-config common-lisp:null))
   (disk-size common-lisp:nil :type
    (common-lisp:or boxed-integer common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or string-list common-lisp:null))
   (instance-types common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (ami-type common-lisp:nil :type (common-lisp:or amitypes common-lisp:null))
   (remote-access common-lisp:nil :type
    (common-lisp:or remote-access-config common-lisp:null))
   (node-role (common-lisp:error ":noderole is required") :type
    (common-lisp:or string common-lisp:null))
   (labels common-lisp:nil :type (common-lisp:or |labelsMap| common-lisp:null))
   (taints common-lisp:nil :type
    (common-lisp:or |taintsList| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (update-config common-lisp:nil :type
    (common-lisp:or nodegroup-update-config common-lisp:null))
   (capacity-type common-lisp:nil :type
    (common-lisp:or capacity-types common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (release-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-nodegroup-request 'make-create-nodegroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-name))
      (common-lisp:list
       (common-lisp:cons "nodegroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size))
      (common-lisp:list
       (common-lisp:cons "diskSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-type))
      (common-lisp:list
       (common-lisp:cons "amiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-access))
      (common-lisp:list
       (common-lisp:cons "remoteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "nodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-type))
      (common-lisp:list
       (common-lisp:cons "capacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-nodegroup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-nodegroup-response-"))
   (nodegroup common-lisp:nil :type
    (common-lisp:or nodegroup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-nodegroup-response
                    'make-create-nodegroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-pod-identity-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-pod-identity-association-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or string common-lisp:null))
   (service-account (common-lisp:error ":serviceaccount is required") :type
    (common-lisp:or string common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pod-identity-association-request
                    'make-create-pod-identity-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-account))
      (common-lisp:list
       (common-lisp:cons "serviceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-pod-identity-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-pod-identity-association-response-"))
   (association common-lisp:nil :type
    (common-lisp:or pod-identity-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pod-identity-association-response
                    'make-create-pod-identity-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pod-identity-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-entry-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-entry-request
                    'make-delete-access-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-entry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-entry-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-access-entry-response
                    'make-delete-access-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-addon-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-addon-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or cluster-name common-lisp:null))
   (addon-name (common-lisp:error ":addonname is required") :type
    (common-lisp:or string common-lisp:null))
   (preserve common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-addon-request 'make-delete-addon-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-addon-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-addon-response-"))
   (addon common-lisp:nil :type (common-lisp:or addon common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-addon-response 'make-delete-addon-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-eks-anywhere-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-eks-anywhere-subscription-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-eks-anywhere-subscription-request
                    'make-delete-eks-anywhere-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-eks-anywhere-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-eks-anywhere-subscription-response-"))
   (subscription common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-eks-anywhere-subscription-response
                    'make-delete-eks-anywhere-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-eks-anywhere-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-fargate-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-fargate-profile-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (fargate-profile-name (common-lisp:error ":fargateprofilename is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-fargate-profile-request
                    'make-delete-fargate-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-fargate-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-fargate-profile-response-"))
   (fargate-profile common-lisp:nil :type
    (common-lisp:or fargate-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-fargate-profile-response
                    'make-delete-fargate-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-nodegroup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-nodegroup-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (nodegroup-name (common-lisp:error ":nodegroupname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-nodegroup-request 'make-delete-nodegroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-nodegroup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-nodegroup-response-"))
   (nodegroup common-lisp:nil :type
    (common-lisp:or nodegroup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-nodegroup-response
                    'make-delete-nodegroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-pod-identity-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-pod-identity-association-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (association-id (common-lisp:error ":associationid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pod-identity-association-request
                    'make-delete-pod-identity-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-pod-identity-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-pod-identity-association-response-"))
   (association common-lisp:nil :type
    (common-lisp:or pod-identity-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pod-identity-association-response
                    'make-delete-pod-identity-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pod-identity-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecation-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecation-detail-"))
   (usage common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (replaced-with common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (stop-serving-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start-serving-replacement-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (client-stats common-lisp:nil :type
    (common-lisp:or client-stats common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprecation-detail 'make-deprecation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deprecation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deprecation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replaced-with))
      (common-lisp:list
       (common-lisp:cons "replacedWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-serving-version))
      (common-lisp:list
       (common-lisp:cons "stopServingVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-serving-replacement-version))
      (common-lisp:list
       (common-lisp:cons "startServingReplacementVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-stats))
      (common-lisp:list
       (common-lisp:cons "clientStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deprecation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deprecation-details ()
   '(trivial-types:proper-list deprecation-detail))
 (common-lisp:defun make-deprecation-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deprecation-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-cluster-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-cluster-request
                    'make-deregister-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-cluster-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-cluster-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-cluster-response
                    'make-deregister-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-access-entry-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-entry-request
                    'make-describe-access-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-entry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-access-entry-response-"))
   (access-entry common-lisp:nil :type
    (common-lisp:or access-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-entry-response
                    'make-describe-access-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entry))
      (common-lisp:list
       (common-lisp:cons "accessEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addon-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addon-configuration-request-"))
   (addon-name (common-lisp:error ":addonname is required") :type
    (common-lisp:or string common-lisp:null))
   (addon-version (common-lisp:error ":addonversion is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-configuration-request
                    'make-describe-addon-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addon-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addon-configuration-response-"))
   (addon-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (addon-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-schema common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-configuration-response
                    'make-describe-addon-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-name))
      (common-lisp:list
       (common-lisp:cons "addonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-schema))
      (common-lisp:list
       (common-lisp:cons "configurationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addon-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addon-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or cluster-name common-lisp:null))
   (addon-name (common-lisp:error ":addonname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-request 'make-describe-addon-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addon-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addon-response-"))
   (addon common-lisp:nil :type (common-lisp:or addon common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-response 'make-describe-addon-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon))
      (common-lisp:list
       (common-lisp:cons "addon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addon-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addon-versions-request-"))
   (kubernetes-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or describe-addon-versions-request-max-results
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (addon-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (types common-lisp:nil :type (common-lisp:or string-list common-lisp:null))
   (publishers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (owners common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-versions-request
                    'make-describe-addon-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-request))
   common-lisp:nil))
(common-lisp:deftype describe-addon-versions-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addon-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addon-versions-response-"))
   (addons common-lisp:nil :type (common-lisp:or addons common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addon-versions-response
                    'make-describe-addon-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addons))
      (common-lisp:list
       (common-lisp:cons "addons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addon-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-request 'make-describe-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-response
                    'make-describe-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-eks-anywhere-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-eks-anywhere-subscription-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-eks-anywhere-subscription-request
                    'make-describe-eks-anywhere-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-eks-anywhere-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-eks-anywhere-subscription-response-"))
   (subscription common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-eks-anywhere-subscription-response
                    'make-describe-eks-anywhere-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-eks-anywhere-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-fargate-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-fargate-profile-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (fargate-profile-name (common-lisp:error ":fargateprofilename is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-fargate-profile-request
                    'make-describe-fargate-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-fargate-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-fargate-profile-response-"))
   (fargate-profile common-lisp:nil :type
    (common-lisp:or fargate-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-fargate-profile-response
                    'make-describe-fargate-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile))
      (common-lisp:list
       (common-lisp:cons "fargateProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fargate-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-identity-provider-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-identity-provider-config-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (identity-provider-config
    (common-lisp:error ":identityproviderconfig is required") :type
    (common-lisp:or identity-provider-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-identity-provider-config-request
                    'make-describe-identity-provider-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-identity-provider-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-identity-provider-config-response-"))
   (identity-provider-config common-lisp:nil :type
    (common-lisp:or identity-provider-config-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-identity-provider-config-response
                    'make-describe-identity-provider-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-insight-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-insight-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-insight-request 'make-describe-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-insight-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-insight-response-"))
   (insight common-lisp:nil :type (common-lisp:or insight common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-insight-response
                    'make-describe-insight-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight))
      (common-lisp:list
       (common-lisp:cons "insight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-nodegroup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-nodegroup-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (nodegroup-name (common-lisp:error ":nodegroupname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-nodegroup-request
                    'make-describe-nodegroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-nodegroup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-nodegroup-response-"))
   (nodegroup common-lisp:nil :type
    (common-lisp:or nodegroup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-nodegroup-response
                    'make-describe-nodegroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup))
      (common-lisp:list
       (common-lisp:cons "nodegroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-nodegroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pod-identity-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-pod-identity-association-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (association-id (common-lisp:error ":associationid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pod-identity-association-request
                    'make-describe-pod-identity-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pod-identity-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-pod-identity-association-response-"))
   (association common-lisp:nil :type
    (common-lisp:or pod-identity-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pod-identity-association-response
                    'make-describe-pod-identity-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pod-identity-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-update-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-update-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (update-id (common-lisp:error ":updateid is required") :type
    (common-lisp:or string common-lisp:null))
   (nodegroup-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (addon-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-update-request 'make-describe-update-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-update-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-update-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-update-response 'make-describe-update-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-access-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-access-policy-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or string common-lisp:null))
   (policy-arn (common-lisp:error ":policyarn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-access-policy-request
                    'make-disassociate-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-access-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-access-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-access-policy-response
                    'make-disassociate-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-identity-provider-config-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-identity-provider-config-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (identity-provider-config
    (common-lisp:error ":identityproviderconfig is required") :type
    (common-lisp:or identity-provider-config common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-identity-provider-config-request
                    'make-disassociate-identity-provider-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-identity-provider-config-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-identity-provider-config-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-identity-provider-config-response
                    'make-disassociate-identity-provider-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (eks-anywhere-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-eks-anywhere-subscription-"))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (effective-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (license-quantity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (license-type common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription-license-type common-lisp:null))
   (term common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription-term common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auto-renew common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (license-arns common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'eks-anywhere-subscription
                    'make-eks-anywhere-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date))
      (common-lisp:list
       (common-lisp:cons "effectiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-quantity))
      (common-lisp:list
       (common-lisp:cons "licenseQuantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "autoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arns))
      (common-lisp:list
       (common-lisp:cons "licenseArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription))
   common-lisp:nil))
(common-lisp:deftype eks-anywhere-subscription-license-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eks-anywhere-subscription-list ()
   '(trivial-types:proper-list eks-anywhere-subscription))
 (common-lisp:defun make-eks-anywhere-subscription-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            eks-anywhere-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:deftype eks-anywhere-subscription-name () 'common-lisp:string)
(common-lisp:deftype eks-anywhere-subscription-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype eks-anywhere-subscription-status-values ()
   '(trivial-types:proper-list eks-anywhere-subscription-status))
 (common-lisp:defun make-eks-anywhere-subscription-status-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            eks-anywhere-subscription-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (eks-anywhere-subscription-term (:copier common-lisp:nil)
      (:conc-name "struct-shape-eks-anywhere-subscription-term-"))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription-term-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'eks-anywhere-subscription-term
                    'make-eks-anywhere-subscription-term))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription-term))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription-term))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          eks-anywhere-subscription-term))
   common-lisp:nil))
(common-lisp:deftype eks-anywhere-subscription-term-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-config-"))
   (resources common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (provider common-lisp:nil :type (common-lisp:or provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-config 'make-encryption-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype encryption-config-list ()
   '(trivial-types:proper-list encryption-config))
 (common-lisp:defun make-encryption-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list encryption-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-detail-"))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-details ()
   '(trivial-types:proper-list error-detail))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (fargate-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-fargate-profile-"))
   (fargate-profile-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (fargate-profile-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (pod-execution-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (selectors common-lisp:nil :type
    (common-lisp:or fargate-profile-selectors common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or fargate-profile-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'fargate-profile 'make-fargate-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fargate-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fargate-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-name))
      (common-lisp:list
       (common-lisp:cons "fargateProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fargate-profile-arn))
      (common-lisp:list
       (common-lisp:cons "fargateProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pod-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "podExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selectors))
      (common-lisp:list
       (common-lisp:cons "selectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fargate-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fargate-profile-label () 'common-lisp:hash-table)
 (common-lisp:defun make-fargate-profile-label
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (fargate-profile-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-fargate-profile-selector-"))
   (namespace common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (labels common-lisp:nil :type
    (common-lisp:or fargate-profile-label common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fargate-profile-selector 'make-fargate-profile-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fargate-profile-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fargate-profile-selectors ()
   '(trivial-types:proper-list fargate-profile-selector))
 (common-lisp:defun make-fargate-profile-selectors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fargate-profile-selector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fargate-profile-status () 'common-lisp:string)
(common-lisp:deftype fargate-profiles-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (identity (:copier common-lisp:nil) (:conc-name "struct-shape-identity-"))
   (oidc common-lisp:nil :type (common-lisp:or oidc common-lisp:null)))
 (common-lisp:export (common-lisp:list 'identity 'make-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (identity-provider-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-provider-config-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-provider-config 'make-identity-provider-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (identity-provider-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-provider-config-response-"))
   (oidc common-lisp:nil :type
    (common-lisp:or oidc-identity-provider-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-provider-config-response
                    'make-identity-provider-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc))
      (common-lisp:list
       (common-lisp:cons "oidc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-provider-configs ()
   '(trivial-types:proper-list identity-provider-config))
 (common-lisp:defun make-identity-provider-configs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            identity-provider-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype include-clusters-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-include-clusters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (insight (:copier common-lisp:nil) (:conc-name "struct-shape-insight-"))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (category common-lisp:nil :type (common-lisp:or category common-lisp:null))
   (kubernetes-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-refresh-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-transition-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (insight-status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (additional-info common-lisp:nil :type
    (common-lisp:or additional-info-map common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or insight-resource-details common-lisp:null))
   (category-specific-summary common-lisp:nil :type
    (common-lisp:or insight-category-specific-summary common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insight 'make-insight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-version))
      (common-lisp:list
       (common-lisp:cons "kubernetesVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-refresh-time))
      (common-lisp:list
       (common-lisp:cons "lastRefreshTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-transition-time))
      (common-lisp:list
       (common-lisp:cons "lastTransitionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-status))
      (common-lisp:list
       (common-lisp:cons "insightStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-specific-summary))
      (common-lisp:list
       (common-lisp:cons "categorySpecificSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-category-specific-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-category-specific-summary-"))
   (deprecation-details common-lisp:nil :type
    (common-lisp:or deprecation-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insight-category-specific-summary
                    'make-insight-category-specific-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insight-category-specific-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insight-category-specific-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-details))
      (common-lisp:list
       (common-lisp:cons "deprecationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insight-category-specific-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-resource-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-resource-detail-"))
   (insight-status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null))
   (kubernetes-resource-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insight-resource-detail 'make-insight-resource-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insight-resource-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insight-resource-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-status))
      (common-lisp:list
       (common-lisp:cons "insightStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kubernetes-resource-uri))
      (common-lisp:list
       (common-lisp:cons "kubernetesResourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insight-resource-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-resource-details ()
   '(trivial-types:proper-list insight-resource-detail))
 (common-lisp:defun make-insight-resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-resource-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-status-"))
   (status common-lisp:nil :type
    (common-lisp:or insight-status-value common-lisp:null))
   (reason common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insight-status 'make-insight-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-status))
   common-lisp:nil))
(common-lisp:deftype insight-status-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype insight-status-value-list ()
   '(trivial-types:proper-list insight-status-value))
 (common-lisp:defun make-insight-status-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-status-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype insight-summaries ()
   '(trivial-types:proper-list insight-summary))
 (common-lisp:defun make-insight-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-summary-"))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (category common-lisp:nil :type (common-lisp:or category common-lisp:null))
   (kubernetes-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-refresh-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-transition-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (insight-status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insight-summary 'make-insight-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-version))
      (common-lisp:list
       (common-lisp:cons "kubernetesVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-refresh-time))
      (common-lisp:list
       (common-lisp:cons "lastRefreshTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-transition-time))
      (common-lisp:list
       (common-lisp:cons "lastTransitionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-status))
      (common-lisp:list
       (common-lisp:cons "insightStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (insights-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-insights-filter-"))
   (categories common-lisp:nil :type
    (common-lisp:or category-list common-lisp:null))
   (kubernetes-versions common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (statuses common-lisp:nil :type
    (common-lisp:or insight-status-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insights-filter 'make-insights-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insights-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insights-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-versions))
      (common-lisp:list
       (common-lisp:cons "kubernetesVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insights-filter))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       invalid-parameter-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader invalid-parameter-exception-nodegroup-name)
      (fargate-profile-name :initarg :fargate-profile-name :initform
       common-lisp:nil :reader
       invalid-parameter-exception-fargate-profile-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       invalid-parameter-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader invalid-parameter-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-cluster-name
                    'invalid-parameter-exception-nodegroup-name
                    'invalid-parameter-exception-fargate-profile-name
                    'invalid-parameter-exception-addon-name
                    'invalid-parameter-exception-subscription-id
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       invalid-request-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader invalid-request-exception-nodegroup-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       invalid-request-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader invalid-request-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-cluster-name
                    'invalid-request-exception-nodegroup-name
                    'invalid-request-exception-addon-name
                    'invalid-request-exception-subscription-id
                    'invalid-request-exception-message)))
(common-lisp:deftype ip-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (issue (:copier common-lisp:nil) (:conc-name "struct-shape-issue-"))
   (code common-lisp:nil :type
    (common-lisp:or nodegroup-issue-code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'issue 'make-issue))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issue))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype issue-list () '(trivial-types:proper-list issue))
 (common-lisp:defun make-issue-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list issue))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kubernetes-network-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-kubernetes-network-config-request-"))
   (service-ipv4cidr common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ip-family common-lisp:nil :type
    (common-lisp:or ip-family common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kubernetes-network-config-request
                    'make-kubernetes-network-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv4cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv4Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-family))
      (common-lisp:list
       (common-lisp:cons "ipFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kubernetes-network-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-kubernetes-network-config-response-"))
   (service-ipv4cidr common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-ipv6cidr common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ip-family common-lisp:nil :type
    (common-lisp:or ip-family common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kubernetes-network-config-response
                    'make-kubernetes-network-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv4cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv4Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ipv6cidr))
      (common-lisp:list
       (common-lisp:cons "serviceIpv6Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-family))
      (common-lisp:list
       (common-lisp:cons "ipFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kubernetes-network-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-template-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-template-specification-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-template-specification
                    'make-launch-template-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-entries-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-entries-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (associated-policy-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-access-entries-request-max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-entries-request
                    'make-list-access-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-request))
   common-lisp:nil))
(common-lisp:deftype list-access-entries-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-entries-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-entries-response-"))
   (access-entries common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-entries-response
                    'make-list-access-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entries))
      (common-lisp:list
       (common-lisp:cons "accessEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-policies-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-access-policies-request-max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-policies-request
                    'make-list-access-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   common-lisp:nil))
(common-lisp:deftype list-access-policies-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-policies-response-"))
   (access-policies common-lisp:nil :type
    (common-lisp:or access-policies-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-policies-response
                    'make-list-access-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "accessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-addons-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-addons-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or cluster-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-addons-request-max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-addons-request 'make-list-addons-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-addons-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-addons-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-addons-request))
   common-lisp:nil))
(common-lisp:deftype list-addons-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-addons-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-addons-response-"))
   (addons common-lisp:nil :type (common-lisp:or string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-addons-response 'make-list-addons-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-addons-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-addons-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addons))
      (common-lisp:list
       (common-lisp:cons "addons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-addons-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-associated-access-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-associated-access-policies-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-associated-access-policies-request-max-results
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-associated-access-policies-request
                    'make-list-associated-access-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-request))
   common-lisp:nil))
(common-lisp:deftype list-associated-access-policies-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-associated-access-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-associated-access-policies-response-"))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (principal-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (associated-access-policies common-lisp:nil :type
    (common-lisp:or associated-access-policies-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-associated-access-policies-response
                    'make-list-associated-access-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-access-policies))
      (common-lisp:list
       (common-lisp:cons "associatedAccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-access-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-clusters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-clusters-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-clusters-request-max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (include common-lisp:nil :type
    (common-lisp:or include-clusters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:deftype list-clusters-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-clusters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-clusters-response-"))
   (clusters common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-response 'make-list-clusters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-eks-anywhere-subscriptions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-eks-anywhere-subscriptions-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-eks-anywhere-subscriptions-request-max-results
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (include-status common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription-status-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-eks-anywhere-subscriptions-request
                    'make-list-eks-anywhere-subscriptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-request))
   common-lisp:nil))
(common-lisp:deftype list-eks-anywhere-subscriptions-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-eks-anywhere-subscriptions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-eks-anywhere-subscriptions-response-"))
   (subscriptions common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-eks-anywhere-subscriptions-response
                    'make-list-eks-anywhere-subscriptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriptions))
      (common-lisp:list
       (common-lisp:cons "subscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-eks-anywhere-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-fargate-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-fargate-profiles-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or fargate-profiles-request-max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-fargate-profiles-request
                    'make-list-fargate-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-fargate-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-fargate-profiles-response-"))
   (fargate-profile-names common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-fargate-profiles-response
                    'make-list-fargate-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fargate-profile-names))
      (common-lisp:list
       (common-lisp:cons "fargateProfileNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fargate-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-identity-provider-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-identity-provider-configs-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-identity-provider-configs-request-max-results
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-identity-provider-configs-request
                    'make-list-identity-provider-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-request))
   common-lisp:nil))
(common-lisp:deftype list-identity-provider-configs-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-identity-provider-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-identity-provider-configs-response-"))
   (identity-provider-configs common-lisp:nil :type
    (common-lisp:or identity-provider-configs common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-identity-provider-configs-response
                    'make-list-identity-provider-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-configs))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-provider-configs-response))
   common-lisp:nil))
(common-lisp:deftype list-insights-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-insights-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-insights-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or insights-filter common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-insights-max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-insights-request 'make-list-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-insights-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-insights-response-"))
   (insights common-lisp:nil :type
    (common-lisp:or insight-summaries common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-insights-response 'make-list-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-nodegroups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-nodegroups-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-nodegroups-request-max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-nodegroups-request 'make-list-nodegroups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-request))
   common-lisp:nil))
(common-lisp:deftype list-nodegroups-request-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-nodegroups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-nodegroups-response-"))
   (nodegroups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-nodegroups-response 'make-list-nodegroups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroups))
      (common-lisp:list
       (common-lisp:cons "nodegroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-nodegroups-response))
   common-lisp:nil))
(common-lisp:deftype list-pod-identity-associations-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-pod-identity-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pod-identity-associations-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (namespace common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (service-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-pod-identity-associations-max-results
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pod-identity-associations-request
                    'make-list-pod-identity-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pod-identity-associations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pod-identity-associations-response-"))
   (associations common-lisp:nil :type
    (common-lisp:or pod-identity-association-summaries common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pod-identity-associations-response
                    'make-list-pod-identity-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pod-identity-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-updates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-updates-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (nodegroup-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (addon-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-updates-request-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-updates-request 'make-list-updates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-updates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-updates-request))
   common-lisp:nil))
(common-lisp:deftype list-updates-request-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-updates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-updates-response-"))
   (update-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-updates-response 'make-list-updates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-ids))
      (common-lisp:list
       (common-lisp:cons "updateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-updates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (log-setup (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-setup-"))
   (types common-lisp:nil :type (common-lisp:or log-types common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'log-setup 'make-log-setup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-setup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-setup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-setup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-setups () '(trivial-types:proper-list log-setup))
 (common-lisp:defun make-log-setups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-setup))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-types () '(trivial-types:proper-list log-type))
 (common-lisp:defun make-log-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (logging (:copier common-lisp:nil) (:conc-name "struct-shape-logging-"))
   (cluster-logging common-lisp:nil :type
    (common-lisp:or log-setups common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logging 'make-logging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-logging))
      (common-lisp:list
       (common-lisp:cons "clusterLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (marketplace-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-marketplace-information-"))
   (product-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'marketplace-information 'make-marketplace-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "productId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-url))
      (common-lisp:list
       (common-lisp:cons "productUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketplace-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (nodegroup (:copier common-lisp:nil)
      (:conc-name "struct-shape-nodegroup-"))
   (nodegroup-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (nodegroup-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (release-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or nodegroup-status common-lisp:null))
   (capacity-type common-lisp:nil :type
    (common-lisp:or capacity-types common-lisp:null))
   (scaling-config common-lisp:nil :type
    (common-lisp:or nodegroup-scaling-config common-lisp:null))
   (instance-types common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (remote-access common-lisp:nil :type
    (common-lisp:or remote-access-config common-lisp:null))
   (ami-type common-lisp:nil :type (common-lisp:or amitypes common-lisp:null))
   (node-role common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (labels common-lisp:nil :type (common-lisp:or |labelsMap| common-lisp:null))
   (taints common-lisp:nil :type
    (common-lisp:or |taintsList| common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or nodegroup-resources common-lisp:null))
   (disk-size common-lisp:nil :type
    (common-lisp:or boxed-integer common-lisp:null))
   (health common-lisp:nil :type
    (common-lisp:or nodegroup-health common-lisp:null))
   (update-config common-lisp:nil :type
    (common-lisp:or nodegroup-update-config common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'nodegroup 'make-nodegroup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-name))
      (common-lisp:list
       (common-lisp:cons "nodegroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodegroup-arn))
      (common-lisp:list
       (common-lisp:cons "nodegroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-type))
      (common-lisp:list
       (common-lisp:cons "capacityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-access))
      (common-lisp:list
       (common-lisp:cons "remoteAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-type))
      (common-lisp:list
       (common-lisp:cons "amiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "nodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size))
      (common-lisp:list
       (common-lisp:cons "diskSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (nodegroup-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-nodegroup-health-"))
   (issues common-lisp:nil :type (common-lisp:or issue-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nodegroup-health 'make-nodegroup-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup-health))
   common-lisp:nil))
(common-lisp:deftype nodegroup-issue-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (nodegroup-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-nodegroup-resources-"))
   (auto-scaling-groups common-lisp:nil :type
    (common-lisp:or auto-scaling-group-list common-lisp:null))
   (remote-access-security-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nodegroup-resources 'make-nodegroup-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-security-group))
      (common-lisp:list
       (common-lisp:cons "remoteAccessSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nodegroup-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (nodegroup-scaling-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-nodegroup-scaling-config-"))
   (min-size common-lisp:nil :type
    (common-lisp:or zero-capacity common-lisp:null))
   (max-size common-lisp:nil :type (common-lisp:or capacity common-lisp:null))
   (desired-size common-lisp:nil :type
    (common-lisp:or zero-capacity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nodegroup-scaling-config 'make-nodegroup-scaling-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "minSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "maxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-size))
      (common-lisp:list
       (common-lisp:cons "desiredSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-scaling-config))
   common-lisp:nil))
(common-lisp:deftype nodegroup-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (nodegroup-update-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-nodegroup-update-config-"))
   (max-unavailable common-lisp:nil :type
    (common-lisp:or non-zero-integer common-lisp:null))
   (max-unavailable-percentage common-lisp:nil :type
    (common-lisp:or percent-capacity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nodegroup-update-config 'make-nodegroup-update-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-unavailable))
      (common-lisp:list
       (common-lisp:cons "maxUnavailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-unavailable-percentage))
      (common-lisp:list
       (common-lisp:cons "maxUnavailablePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nodegroup-update-config))
   common-lisp:nil))
(common-lisp:deftype non-zero-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (oidc (:copier common-lisp:nil) (:conc-name "struct-shape-oidc-"))
   (issuer common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'oidc 'make-oidc))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oidc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oidc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oidc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (oidc-identity-provider-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-oidc-identity-provider-config-"))
   (identity-provider-config-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (identity-provider-config-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (issuer-url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (client-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (username-claim common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (username-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (groups-claim common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (groups-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (required-claims common-lisp:nil :type
    (common-lisp:or |requiredClaimsMap| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or |configStatus| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oidc-identity-provider-config
                    'make-oidc-identity-provider-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-url))
      (common-lisp:list
       (common-lisp:cons "issuerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-claim))
      (common-lisp:list
       (common-lisp:cons "usernameClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-prefix))
      (common-lisp:list
       (common-lisp:cons "usernamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-claim))
      (common-lisp:list
       (common-lisp:cons "groupsClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-prefix))
      (common-lisp:list
       (common-lisp:cons "groupsPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-claims))
      (common-lisp:list
       (common-lisp:cons "requiredClaims"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (oidc-identity-provider-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-oidc-identity-provider-config-request-"))
   (identity-provider-config-name
    (common-lisp:error ":identityproviderconfigname is required") :type
    (common-lisp:or string common-lisp:null))
   (issuer-url (common-lisp:error ":issuerurl is required") :type
    (common-lisp:or string common-lisp:null))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or string common-lisp:null))
   (username-claim common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (username-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (groups-claim common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (groups-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (required-claims common-lisp:nil :type
    (common-lisp:or |requiredClaimsMap| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oidc-identity-provider-config-request
                    'make-oidc-identity-provider-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-config-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-url))
      (common-lisp:list
       (common-lisp:cons "issuerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-claim))
      (common-lisp:list
       (common-lisp:cons "usernameClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-prefix))
      (common-lisp:list
       (common-lisp:cons "usernamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-claim))
      (common-lisp:list
       (common-lisp:cons "groupsClaim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups-prefix))
      (common-lisp:list
       (common-lisp:cons "groupsPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-claims))
      (common-lisp:list
       (common-lisp:cons "requiredClaims"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oidc-identity-provider-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (outpost-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-outpost-config-request-"))
   (outpost-arns (common-lisp:error ":outpostarns is required") :type
    (common-lisp:or string-list common-lisp:null))
   (control-plane-instance-type
    (common-lisp:error ":controlplaneinstancetype is required") :type
    (common-lisp:or string common-lisp:null))
   (control-plane-placement common-lisp:nil :type
    (common-lisp:or control-plane-placement-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'outpost-config-request 'make-outpost-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arns))
      (common-lisp:list
       (common-lisp:cons "outpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-instance-type))
      (common-lisp:list
       (common-lisp:cons "controlPlaneInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-placement))
      (common-lisp:list
       (common-lisp:cons "controlPlanePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (outpost-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-outpost-config-response-"))
   (outpost-arns (common-lisp:error ":outpostarns is required") :type
    (common-lisp:or string-list common-lisp:null))
   (control-plane-instance-type
    (common-lisp:error ":controlplaneinstancetype is required") :type
    (common-lisp:or string common-lisp:null))
   (control-plane-placement common-lisp:nil :type
    (common-lisp:or control-plane-placement-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'outpost-config-response 'make-outpost-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arns))
      (common-lisp:list
       (common-lisp:cons "outpostArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-instance-type))
      (common-lisp:list
       (common-lisp:cons "controlPlaneInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-plane-placement))
      (common-lisp:list
       (common-lisp:cons "controlPlanePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outpost-config-response))
   common-lisp:nil))
(common-lisp:deftype percent-capacity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (pod-identity-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-pod-identity-association-"))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (service-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (association-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pod-identity-association 'make-pod-identity-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-account))
      (common-lisp:list
       (common-lisp:cons "serviceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "associationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pod-identity-association-summaries ()
   '(trivial-types:proper-list pod-identity-association-summary))
 (common-lisp:defun make-pod-identity-association-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pod-identity-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pod-identity-association-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-pod-identity-association-summary-"))
   (cluster-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (service-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (association-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pod-identity-association-summary
                    'make-pod-identity-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-account))
      (common-lisp:list
       (common-lisp:cons "serviceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "associationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provider (:copier common-lisp:nil) (:conc-name "struct-shape-provider-"))
   (key-arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'provider 'make-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-cluster-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or cluster-name common-lisp:null))
   (connector-config (common-lisp:error ":connectorconfig is required") :type
    (common-lisp:or connector-config-request common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cluster-request 'make-register-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-config))
      (common-lisp:list
       (common-lisp:cons "connectorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-cluster-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-cluster-response-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cluster-response
                    'make-register-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remote-access-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-remote-access-config-"))
   (ec2ssh-key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-security-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remote-access-config 'make-remote-access-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remote-access-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remote-access-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2ssh-key))
      (common-lisp:list
       (common-lisp:cons "ec2SshKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-groups))
      (common-lisp:list
       (common-lisp:cons "sourceSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remote-access-config))
   common-lisp:nil))
(common-lisp:deftype resolve-conflicts () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       resource-in-use-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader resource-in-use-exception-nodegroup-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       resource-in-use-exception-addon-name)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-cluster-name
                    'resource-in-use-exception-nodegroup-name
                    'resource-in-use-exception-addon-name
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader resource-limit-exceeded-exception-nodegroup-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader resource-limit-exceeded-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-cluster-name
                    'resource-limit-exceeded-exception-nodegroup-name
                    'resource-limit-exceeded-exception-subscription-id
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       resource-not-found-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader resource-not-found-exception-nodegroup-name)
      (fargate-profile-name :initarg :fargate-profile-name :initform
       common-lisp:nil :reader
       resource-not-found-exception-fargate-profile-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       resource-not-found-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader resource-not-found-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-cluster-name
                    'resource-not-found-exception-nodegroup-name
                    'resource-not-found-exception-fargate-profile-name
                    'resource-not-found-exception-addon-name
                    'resource-not-found-exception-subscription-id
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-propagation-delay-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-propagation-delay-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-propagation-delay-exception
                    'resource-propagation-delay-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition server-exception
     (eks-error)
     ((cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       server-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader server-exception-nodegroup-name)
      (addon-name :initarg :addon-name :initform common-lisp:nil :reader
       server-exception-addon-name)
      (subscription-id :initarg :subscription-id :initform common-lisp:nil
       :reader server-exception-subscription-id)
      (message :initarg :message :initform common-lisp:nil :reader
       server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-exception 'server-exception-cluster-name
                    'server-exception-nodegroup-name
                    'server-exception-addon-name
                    'server-exception-subscription-id
                    'server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (taint (:copier common-lisp:nil) (:conc-name "struct-shape-taint-"))
   (key common-lisp:nil :type (common-lisp:or |taintKey| common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or |taintValue| common-lisp:null))
   (effect common-lisp:nil :type
    (common-lisp:or taint-effect common-lisp:null)))
 (common-lisp:export (common-lisp:list 'taint 'make-taint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input taint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input taint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input taint))
   common-lisp:nil))
(common-lisp:deftype taint-effect () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-availability-zone-exception
     (eks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-message)
      (cluster-name :initarg :cluster-name :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-cluster-name)
      (nodegroup-name :initarg :nodegroup-name :initform common-lisp:nil
       :reader unsupported-availability-zone-exception-nodegroup-name)
      (valid-zones :initarg :valid-zones :initform common-lisp:nil :reader
       unsupported-availability-zone-exception-valid-zones)))
 (common-lisp:export
  (common-lisp:list 'unsupported-availability-zone-exception
                    'unsupported-availability-zone-exception-message
                    'unsupported-availability-zone-exception-cluster-name
                    'unsupported-availability-zone-exception-nodegroup-name
                    'unsupported-availability-zone-exception-valid-zones)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update (:copier common-lisp:nil) (:conc-name "struct-shape-update-"))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or update-status common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or update-type common-lisp:null))
   (params common-lisp:nil :type
    (common-lisp:or update-params common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'update 'make-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'params))
      (common-lisp:list
       (common-lisp:cons "params"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-config-request-"))
   (authentication-mode common-lisp:nil :type
    (common-lisp:or authentication-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-config-request
                    'make-update-access-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-mode))
      (common-lisp:list
       (common-lisp:cons "authenticationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-entry-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or string common-lisp:null))
   (kubernetes-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (username common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-entry-request
                    'make-update-access-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kubernetes-groups))
      (common-lisp:list
       (common-lisp:cons "kubernetesGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-entry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-entry-response-"))
   (access-entry common-lisp:nil :type
    (common-lisp:or access-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-entry-response
                    'make-update-access-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-entry))
      (common-lisp:list
       (common-lisp:cons "accessEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-addon-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-addon-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or cluster-name common-lisp:null))
   (addon-name (common-lisp:error ":addonname is required") :type
    (common-lisp:or string common-lisp:null))
   (addon-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service-account-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (resolve-conflicts common-lisp:nil :type
    (common-lisp:or resolve-conflicts common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (configuration-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-addon-request 'make-update-addon-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-addon-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-addon-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addon-version))
      (common-lisp:list
       (common-lisp:cons "addonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceAccountRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolve-conflicts))
      (common-lisp:list
       (common-lisp:cons "resolveConflicts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-values))
      (common-lisp:list
       (common-lisp:cons "configurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-addon-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-addon-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-addon-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-addon-response 'make-update-addon-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-addon-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-config-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (resources-vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config-request common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (access-config common-lisp:nil :type
    (common-lisp:or update-access-config-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-config-request
                    'make-update-cluster-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "resourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-config))
      (common-lisp:list
       (common-lisp:cons "accessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-config-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-config-response
                    'make-update-cluster-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-version-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or string common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-version-request
                    'make-update-cluster-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-version-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-version-response
                    'make-update-cluster-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-eks-anywhere-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-eks-anywhere-subscription-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (auto-renew (common-lisp:error ":autorenew is required") :type
    (common-lisp:or boolean common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-eks-anywhere-subscription-request
                    'make-update-eks-anywhere-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "autoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-eks-anywhere-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-eks-anywhere-subscription-response-"))
   (subscription common-lisp:nil :type
    (common-lisp:or eks-anywhere-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-eks-anywhere-subscription-response
                    'make-update-eks-anywhere-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-eks-anywhere-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-labels-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-labels-payload-"))
   (add-or-update-labels common-lisp:nil :type
    (common-lisp:or |labelsMap| common-lisp:null))
   (remove-labels common-lisp:nil :type
    (common-lisp:or |labelsKeyList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-labels-payload 'make-update-labels-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-or-update-labels))
      (common-lisp:list
       (common-lisp:cons "addOrUpdateLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-labels))
      (common-lisp:list
       (common-lisp:cons "removeLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-labels-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-nodegroup-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-nodegroup-config-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (nodegroup-name (common-lisp:error ":nodegroupname is required") :type
    (common-lisp:or string common-lisp:null))
   (labels common-lisp:nil :type
    (common-lisp:or update-labels-payload common-lisp:null))
   (taints common-lisp:nil :type
    (common-lisp:or update-taints-payload common-lisp:null))
   (scaling-config common-lisp:nil :type
    (common-lisp:or nodegroup-scaling-config common-lisp:null))
   (update-config common-lisp:nil :type
    (common-lisp:or nodegroup-update-config common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-config-request
                    'make-update-nodegroup-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'taints))
      (common-lisp:list
       (common-lisp:cons "taints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-config))
      (common-lisp:list
       (common-lisp:cons "scalingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-config))
      (common-lisp:list
       (common-lisp:cons "updateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-nodegroup-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-nodegroup-config-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-config-response
                    'make-update-nodegroup-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-nodegroup-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-nodegroup-version-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (nodegroup-name (common-lisp:error ":nodegroupname is required") :type
    (common-lisp:or string common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (release-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or launch-template-specification common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-version-request
                    'make-update-nodegroup-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "releaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-nodegroup-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-nodegroup-version-response-"))
   (update common-lisp:nil :type (common-lisp:or update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-nodegroup-version-response
                    'make-update-nodegroup-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-nodegroup-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-param (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-param-"))
   (type common-lisp:nil :type
    (common-lisp:or update-param-type common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'update-param 'make-update-param))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-param))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-param))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-param))
   common-lisp:nil))
(common-lisp:deftype update-param-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype update-params ()
   '(trivial-types:proper-list update-param))
 (common-lisp:defun make-update-params
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-param))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pod-identity-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pod-identity-association-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or string common-lisp:null))
   (association-id (common-lisp:error ":associationid is required") :type
    (common-lisp:or string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pod-identity-association-request
                    'make-update-pod-identity-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pod-identity-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pod-identity-association-response-"))
   (association common-lisp:nil :type
    (common-lisp:or pod-identity-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pod-identity-association-response
                    'make-update-pod-identity-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pod-identity-association-response))
   common-lisp:nil))
(common-lisp:deftype update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-taints-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-taints-payload-"))
   (add-or-update-taints common-lisp:nil :type
    (common-lisp:or |taintsList| common-lisp:null))
   (remove-taints common-lisp:nil :type
    (common-lisp:or |taintsList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-taints-payload 'make-update-taints-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-or-update-taints))
      (common-lisp:list
       (common-lisp:cons "addOrUpdateTaints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-taints))
      (common-lisp:list
       (common-lisp:cons "removeTaints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-taints-payload))
   common-lisp:nil))
(common-lisp:deftype update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-config-request-"))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (endpoint-public-access common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (endpoint-private-access common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (public-access-cidrs common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-config-request 'make-vpc-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-public-access))
      (common-lisp:list
       (common-lisp:cons "endpointPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-private-access))
      (common-lisp:list
       (common-lisp:cons "endpointPrivateAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-cidrs))
      (common-lisp:list
       (common-lisp:cons "publicAccessCidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-config-response-"))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (cluster-security-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint-public-access common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (endpoint-private-access common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (public-access-cidrs common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-config-response 'make-vpc-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-id))
      (common-lisp:list
       (common-lisp:cons "clusterSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-public-access))
      (common-lisp:list
       (common-lisp:cons "endpointPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-private-access))
      (common-lisp:list
       (common-lisp:cons "endpointPrivateAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-cidrs))
      (common-lisp:list
       (common-lisp:cons "publicAccessCidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config-response))
   common-lisp:nil))
(common-lisp:deftype zero-capacity () 'common-lisp:integer)
(common-lisp:deftype |configStatus| () 'common-lisp:string)
(common-lisp:deftype |labelKey| () 'common-lisp:string)
(common-lisp:deftype |labelValue| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |labelsKeyList| () '(trivial-types:proper-list string))
 (common-lisp:defun make-labelskeylist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |labelsMap| () 'common-lisp:hash-table)
 (common-lisp:defun make-labelsmap (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |requiredClaimsKey| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |requiredClaimsMap| () 'common-lisp:hash-table)
 (common-lisp:defun make-requiredclaimsmap
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |requiredClaimsValue| () 'common-lisp:string)
(common-lisp:deftype |taintKey| () 'common-lisp:string)
(common-lisp:deftype |taintValue| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |taintsList| () '(trivial-types:proper-list taint))
 (common-lisp:defun make-taintslist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list taint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun associate-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn policy-arn
                     access-scope)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn policy-arn access-scope))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A/access-policies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "AssociateAccessPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-access-policy))
(common-lisp:progn
 (common-lisp:defun associate-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name encryption-config
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name encryption-config
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-encryption-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/encryption-config/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "AssociateEncryptionConfig"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-encryption-config))
(common-lisp:progn
 (common-lisp:defun associate-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name oidc tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name oidc tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "AssociateIdentityProviderConfig"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun create-access-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn
                     kubernetes-groups tags client-request-token username type)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn kubernetes-groups tags
     client-request-token username type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAccessEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-entry))
(common-lisp:progn
 (common-lisp:defun create-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name addon-version
                     service-account-role-arn resolve-conflicts
                     client-request-token tags configuration-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name addon-version
     service-account-role-arn resolve-conflicts client-request-token tags
     configuration-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateAddon"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-addon))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version role-arn
                     resources-vpc-config kubernetes-network-config logging
                     client-request-token tags encryption-config outpost-config
                     access-config)
   (common-lisp:declare
    (common-lisp:ignorable name version role-arn resources-vpc-config
     kubernetes-network-config logging client-request-token tags
     encryption-config outpost-config access-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/clusters"
                                                        "CreateCluster"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-eks-anywhere-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name term license-quantity license-type
                     auto-renew client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name term license-quantity license-type auto-renew
     client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-eks-anywhere-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/eks-anywhere-subscriptions"
                                                        "CreateEksAnywhereSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-eks-anywhere-subscription))
(common-lisp:progn
 (common-lisp:defun create-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fargate-profile-name cluster-name
                     pod-execution-role-arn subnets selectors
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable fargate-profile-name cluster-name
     pod-execution-role-arn subnets selectors client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateFargateProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fargate-profile))
(common-lisp:progn
 (common-lisp:defun create-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name
                     scaling-config disk-size subnets instance-types ami-type
                     remote-access node-role labels taints tags
                     client-request-token launch-template update-config
                     capacity-type version release-version)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name scaling-config disk-size
     subnets instance-types ami-type remote-access node-role labels taints tags
     client-request-token launch-template update-config capacity-type version
     release-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateNodegroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-nodegroup))
(common-lisp:progn
 (common-lisp:defun create-pod-identity-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name namespace service-account
                     role-arn client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name namespace service-account role-arn
     client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-pod-identity-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreatePodIdentityAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-pod-identity-association))
(common-lisp:progn
 (common-lisp:defun delete-access-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-name principal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "DeleteAccessEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-entry))
(common-lisp:progn
 (common-lisp:defun delete-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name preserve)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name preserve))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "DeleteAddon"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-addon))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteCluster"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-eks-anywhere-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-eks-anywhere-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/eks-anywhere-subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteEksAnywhereSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-eks-anywhere-subscription))
(common-lisp:progn
 (common-lisp:defun delete-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name fargate-profile-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name fargate-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'fargate-profile-name))))
                                                        "DeleteFargateProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fargate-profile))
(common-lisp:progn
 (common-lisp:defun delete-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name nodegroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "DeleteNodegroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-nodegroup))
(common-lisp:progn
 (common-lisp:defun delete-pod-identity-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name association-id)
   (common-lisp:declare (common-lisp:ignorable cluster-name association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-pod-identity-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DeletePodIdentityAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-pod-identity-association))
(common-lisp:progn
 (common-lisp:defun deregister-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster-registrations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeregisterCluster"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-cluster))
(common-lisp:progn
 (common-lisp:defun describe-access-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-name principal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "DescribeAccessEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-access-entry))
(common-lisp:progn
 (common-lisp:defun describe-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name addon-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "DescribeAddon"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-addon))
(common-lisp:progn
 (common-lisp:defun describe-addon-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key addon-name addon-version)
   (common-lisp:declare (common-lisp:ignorable addon-name addon-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-addon-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/addons/configuration-schemas"
                                                        "DescribeAddonConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-addon-configuration))
(common-lisp:progn
 (common-lisp:defun describe-addon-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key kubernetes-version max-results next-token
                     addon-name types publishers owners)
   (common-lisp:declare
    (common-lisp:ignorable kubernetes-version max-results next-token addon-name
     types publishers owners))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addon-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/addons/supported-versions"
                                                        "DescribeAddonVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-addon-versions))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeCluster"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-eks-anywhere-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-eks-anywhere-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/eks-anywhere-subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DescribeEksAnywhereSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-eks-anywhere-subscription))
(common-lisp:progn
 (common-lisp:defun describe-fargate-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name fargate-profile-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name fargate-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fargate-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'fargate-profile-name))))
                                                        "DescribeFargateProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fargate-profile))
(common-lisp:progn
 (common-lisp:defun describe-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name identity-provider-config)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name identity-provider-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/describe"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeIdentityProviderConfig"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun describe-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name id)
   (common-lisp:declare (common-lisp:ignorable cluster-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/insights/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DescribeInsight"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-insight))
(common-lisp:progn
 (common-lisp:defun describe-nodegroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name)
   (common-lisp:declare (common-lisp:ignorable cluster-name nodegroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-nodegroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "DescribeNodegroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-nodegroup))
(common-lisp:progn
 (common-lisp:defun describe-pod-identity-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name association-id)
   (common-lisp:declare (common-lisp:ignorable cluster-name association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pod-identity-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DescribePodIdentityAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-pod-identity-association))
(common-lisp:progn
 (common-lisp:defun describe-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name update-id nodegroup-name addon-name)
   (common-lisp:declare
    (common-lisp:ignorable name update-id nodegroup-name addon-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-update-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'update-id))))
                                                        "DescribeUpdate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-update))
(common-lisp:progn
 (common-lisp:defun disassociate-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn policy-arn)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-access-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A/access-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-arn))))
                                                        "DisassociateAccessPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-access-policy))
(common-lisp:progn
 (common-lisp:defun disassociate-identity-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name identity-provider-config
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name identity-provider-config
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-identity-provider-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DisassociateIdentityProviderConfig"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-identity-provider-config))
(common-lisp:progn
 (common-lisp:defun list-access-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name associated-policy-arn
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name associated-policy-arn max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListAccessEntries"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-entries))
(common-lisp:progn
 (common-lisp:defun list-access-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/access-policies"
                                                        "ListAccessPolicies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-policies))
(common-lisp:progn
 (common-lisp:defun list-addons
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-addons-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListAddons"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-addons))
(common-lisp:progn
 (common-lisp:defun list-associated-access-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-associated-access-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A/access-policies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "ListAssociatedAccessPolicies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-associated-access-policies))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token include)
   (common-lisp:declare (common-lisp:ignorable max-results next-token include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/clusters"
                                                        "ListClusters"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-eks-anywhere-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token include-status)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token include-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-eks-anywhere-subscriptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/eks-anywhere-subscriptions"
                                                        "ListEksAnywhereSubscriptions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-eks-anywhere-subscriptions))
(common-lisp:progn
 (common-lisp:defun list-fargate-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fargate-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/fargate-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListFargateProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fargate-profiles))
(common-lisp:progn
 (common-lisp:defun list-identity-provider-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-identity-provider-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/identity-provider-configs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListIdentityProviderConfigs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-identity-provider-configs))
(common-lisp:progn
 (common-lisp:defun list-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-insights-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/insights"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListInsights"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-insights))
(common-lisp:progn
 (common-lisp:defun list-nodegroups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-nodegroups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListNodegroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-nodegroups))
(common-lisp:progn
 (common-lisp:defun list-pod-identity-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name namespace service-account
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name namespace service-account max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-pod-identity-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListPodIdentityAssociations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pod-identity-associations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-updates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name nodegroup-name addon-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable name nodegroup-name addon-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-updates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListUpdates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-updates))
(common-lisp:progn
 (common-lisp:defun register-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name connector-config
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name connector-config client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cluster-registrations"
                                                        "RegisterCluster"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-cluster))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-access-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name principal-arn
                     kubernetes-groups client-request-token username)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name principal-arn kubernetes-groups
     client-request-token username))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/access-entries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-arn))))
                                                        "UpdateAccessEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-access-entry))
(common-lisp:progn
 (common-lisp:defun update-addon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name addon-name addon-version
                     service-account-role-arn resolve-conflicts
                     client-request-token configuration-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name addon-name addon-version
     service-account-role-arn resolve-conflicts client-request-token
     configuration-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-addon-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/addons/~A/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'addon-name))))
                                                        "UpdateAddon"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-addon))
(common-lisp:progn
 (common-lisp:defun update-cluster-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name resources-vpc-config logging
                     client-request-token access-config)
   (common-lisp:declare
    (common-lisp:ignorable name resources-vpc-config logging
     client-request-token access-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/update-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateClusterConfig"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster-config))
(common-lisp:progn
 (common-lisp:defun update-cluster-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name version client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/updates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateClusterVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster-version))
(common-lisp:progn
 (common-lisp:defun update-eks-anywhere-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id auto-renew client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable id auto-renew client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-eks-anywhere-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/eks-anywhere-subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateEksAnywhereSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-eks-anywhere-subscription))
(common-lisp:progn
 (common-lisp:defun update-nodegroup-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name labels taints
                     scaling-config update-config client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name labels taints
     scaling-config update-config client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-nodegroup-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A/update-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "UpdateNodegroupConfig"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-nodegroup-config))
(common-lisp:progn
 (common-lisp:defun update-nodegroup-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name nodegroup-name version
                     release-version launch-template force
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name nodegroup-name version release-version
     launch-template force client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-nodegroup-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/node-groups/~A/update-version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nodegroup-name))))
                                                        "UpdateNodegroupVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-nodegroup-version))
(common-lisp:progn
 (common-lisp:defun update-pod-identity-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name association-id role-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name association-id role-arn
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-pod-identity-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/pod-identity-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "UpdatePodIdentityAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pod-identity-association))
