;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/meteringmarketplace/api
  (:use)
  (:nicknames #:aws/meteringmarketplace)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/meteringmarketplace/api)
(common-lisp:progn
 (common-lisp:defclass meteringmarketplace-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "meteringmarketplace"
                        :protocol :json))
 (common-lisp:export 'meteringmarketplace-request))
(common-lisp:progn
 (common-lisp:define-condition meteringmarketplace-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'meteringmarketplace-error))
(common-lisp:defvar *error-map*
  '(("CustomerNotEntitledException" . customer-not-entitled-exception)
    ("DisabledApiException" . disabled-api-exception)
    ("DuplicateRequestException" . duplicate-request-exception)
    ("ExpiredTokenException" . expired-token-exception)
    ("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidCustomerIdentifierException"
     . invalid-customer-identifier-exception)
    ("InvalidEndpointRegionException" . invalid-endpoint-region-exception)
    ("InvalidProductCodeException" . invalid-product-code-exception)
    ("InvalidPublicKeyVersionException" . invalid-public-key-version-exception)
    ("InvalidRegionException" . invalid-region-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("InvalidTokenException" . invalid-token-exception)
    ("InvalidUsageAllocationsException" . invalid-usage-allocations-exception)
    ("InvalidUsageDimensionException" . invalid-usage-dimension-exception)
    ("PlatformNotSupportedException" . platform-not-supported-exception)
    ("ThrottlingException" . throttling-exception)
    ("TimestampOutOfBoundsException" . timestamp-out-of-bounds-exception)))
(common-lisp:deftype allocated-usage-quantity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass batch-meter-usage-request common-lisp:nil
                       ((product-code :initarg :product-code :type
                         (common-lisp:or product-code common-lisp:null)
                         :accessor %batch-meter-usage-request-product-code
                         :initform
                         (common-lisp:error ":product-code is required"))
                        (usage-records :initarg :usage-records :type
                         (common-lisp:or usage-record-list common-lisp:null)
                         :accessor %batch-meter-usage-request-usage-records
                         :initform
                         (common-lisp:error ":usage-records is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-meter-usage-request
                    'make-batch-meter-usage-request))
 (common-lisp:defun make-batch-meter-usage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-code usage-records)
   (common-lisp:apply #'common-lisp:make-instance 'batch-meter-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-meter-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-meter-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-records))
      (common-lisp:list
       (common-lisp:cons "UsageRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "ProductCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-meter-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-meter-usage-result common-lisp:nil
                       ((unprocessed-records :initarg :unprocessed-records
                         :type
                         (common-lisp:or usage-record-list common-lisp:null)
                         :accessor
                         %batch-meter-usage-result-unprocessed-records
                         :initform common-lisp:nil)
                        (results :initarg :results :type
                         (common-lisp:or usage-record-result-list
                                         common-lisp:null)
                         :accessor %batch-meter-usage-result-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-meter-usage-result 'make-batch-meter-usage-result))
 (common-lisp:defun make-batch-meter-usage-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-records results)
   (common-lisp:apply #'common-lisp:make-instance 'batch-meter-usage-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-meter-usage-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-meter-usage-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-records))
      (common-lisp:list
       (common-lisp:cons "UnprocessedRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-meter-usage-result))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype customer-awsaccount-id () 'common-lisp:string)
(common-lisp:deftype customer-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition customer-not-entitled-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       customer-not-entitled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'customer-not-entitled-exception
                    'customer-not-entitled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition disabled-api-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       disabled-api-exception-message)))
 (common-lisp:export
  (common-lisp:list 'disabled-api-exception 'disabled-api-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-request-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       duplicate-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-request-exception
                    'duplicate-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition expired-token-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       expired-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-token-exception 'expired-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-service-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error-exception
                    'internal-service-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-customer-identifier-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-customer-identifier-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-customer-identifier-exception
                    'invalid-customer-identifier-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-endpoint-region-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-endpoint-region-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-endpoint-region-exception
                    'invalid-endpoint-region-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-product-code-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-product-code-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-product-code-exception
                    'invalid-product-code-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-public-key-version-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-public-key-version-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-public-key-version-exception
                    'invalid-public-key-version-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-region-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-region-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-region-exception
                    'invalid-region-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-tag-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-exception 'invalid-tag-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-token-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-token-exception 'invalid-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-usage-allocations-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-usage-allocations-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-usage-allocations-exception
                    'invalid-usage-allocations-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-usage-dimension-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-usage-dimension-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-usage-dimension-exception
                    'invalid-usage-dimension-exception-message)))
(common-lisp:progn
 (common-lisp:defclass meter-usage-request common-lisp:nil
                       ((usage-allocations :initarg :usage-allocations :type
                         (common-lisp:or usage-allocations common-lisp:null)
                         :accessor %meter-usage-request-usage-allocations
                         :initform common-lisp:nil)
                        (dry-run :initarg :dry-run :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %meter-usage-request-dry-run :initform
                         common-lisp:nil)
                        (usage-quantity :initarg :usage-quantity :type
                         (common-lisp:or usage-quantity common-lisp:null)
                         :accessor %meter-usage-request-usage-quantity
                         :initform common-lisp:nil)
                        (usage-dimension :initarg :usage-dimension :type
                         (common-lisp:or usage-dimension common-lisp:null)
                         :accessor %meter-usage-request-usage-dimension
                         :initform
                         (common-lisp:error ":usage-dimension is required"))
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %meter-usage-request-timestamp :initform
                         (common-lisp:error ":timestamp is required"))
                        (product-code :initarg :product-code :type
                         (common-lisp:or product-code common-lisp:null)
                         :accessor %meter-usage-request-product-code :initform
                         (common-lisp:error ":product-code is required"))))
 (common-lisp:export
  (common-lisp:list 'meter-usage-request 'make-meter-usage-request))
 (common-lisp:defun make-meter-usage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-allocations dry-run usage-quantity
                     usage-dimension timestamp product-code)
   (common-lisp:apply #'common-lisp:make-instance 'meter-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input meter-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input meter-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "ProductCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-dimension))
      (common-lisp:list
       (common-lisp:cons "UsageDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-quantity))
      (common-lisp:list
       (common-lisp:cons "UsageQuantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-allocations))
      (common-lisp:list
       (common-lisp:cons "UsageAllocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input meter-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass meter-usage-result common-lisp:nil
                       ((metering-record-id :initarg :metering-record-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %meter-usage-result-metering-record-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'meter-usage-result 'make-meter-usage-result))
 (common-lisp:defun make-meter-usage-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metering-record-id)
   (common-lisp:apply #'common-lisp:make-instance 'meter-usage-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input meter-usage-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input meter-usage-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metering-record-id))
      (common-lisp:list
       (common-lisp:cons "MeteringRecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input meter-usage-result))
   common-lisp:nil))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype nonce () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition platform-not-supported-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       platform-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'platform-not-supported-exception
                    'platform-not-supported-exception-message)))
(common-lisp:deftype product-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-usage-request common-lisp:nil
                       ((nonce :initarg :nonce :type
                         (common-lisp:or nonce common-lisp:null) :accessor
                         %register-usage-request-nonce :initform
                         common-lisp:nil)
                        (public-key-version :initarg :public-key-version :type
                         (common-lisp:or version-integer common-lisp:null)
                         :accessor %register-usage-request-public-key-version
                         :initform
                         (common-lisp:error ":public-key-version is required"))
                        (product-code :initarg :product-code :type
                         (common-lisp:or product-code common-lisp:null)
                         :accessor %register-usage-request-product-code
                         :initform
                         (common-lisp:error ":product-code is required"))))
 (common-lisp:export
  (common-lisp:list 'register-usage-request 'make-register-usage-request))
 (common-lisp:defun make-register-usage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nonce public-key-version product-code)
   (common-lisp:apply #'common-lisp:make-instance 'register-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "ProductCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-version))
      (common-lisp:list
       (common-lisp:cons "PublicKeyVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "Nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-usage-result common-lisp:nil
                       ((signature :initarg :signature :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %register-usage-result-signature :initform
                         common-lisp:nil)
                        (public-key-rotation-timestamp :initarg
                         :public-key-rotation-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %register-usage-result-public-key-rotation-timestamp
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-usage-result 'make-register-usage-result))
 (common-lisp:defun make-register-usage-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signature public-key-rotation-timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'register-usage-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-usage-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-usage-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-key-rotation-timestamp))
      (common-lisp:list
       (common-lisp:cons "PublicKeyRotationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-usage-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolve-customer-request common-lisp:nil
                       ((registration-token :initarg :registration-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %resolve-customer-request-registration-token
                         :initform
                         (common-lisp:error
                          ":registration-token is required"))))
 (common-lisp:export
  (common-lisp:list 'resolve-customer-request 'make-resolve-customer-request))
 (common-lisp:defun make-resolve-customer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registration-token)
   (common-lisp:apply #'common-lisp:make-instance 'resolve-customer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolve-customer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolve-customer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-token))
      (common-lisp:list
       (common-lisp:cons "RegistrationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolve-customer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolve-customer-result common-lisp:nil
                       ((customer-awsaccount-id :initarg
                         :customer-awsaccount-id :type
                         (common-lisp:or customer-awsaccount-id
                                         common-lisp:null)
                         :accessor
                         %resolve-customer-result-customer-awsaccount-id
                         :initform common-lisp:nil)
                        (product-code :initarg :product-code :type
                         (common-lisp:or product-code common-lisp:null)
                         :accessor %resolve-customer-result-product-code
                         :initform common-lisp:nil)
                        (customer-identifier :initarg :customer-identifier
                         :type
                         (common-lisp:or customer-identifier common-lisp:null)
                         :accessor %resolve-customer-result-customer-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resolve-customer-result 'make-resolve-customer-result))
 (common-lisp:defun make-resolve-customer-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key customer-awsaccount-id product-code
                     customer-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'resolve-customer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolve-customer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolve-customer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-identifier))
      (common-lisp:list
       (common-lisp:cons "CustomerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "ProductCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-awsaccount-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAWSAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolve-customer-result))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition timestamp-out-of-bounds-exception
     (meteringmarketplace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       timestamp-out-of-bounds-exception-message)))
 (common-lisp:export
  (common-lisp:list 'timestamp-out-of-bounds-exception
                    'timestamp-out-of-bounds-exception-message)))
(common-lisp:progn
 (common-lisp:defclass usage-allocation common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %usage-allocation-tags :initform common-lisp:nil)
                        (allocated-usage-quantity :initarg
                         :allocated-usage-quantity :type
                         (common-lisp:or allocated-usage-quantity
                                         common-lisp:null)
                         :accessor %usage-allocation-allocated-usage-quantity
                         :initform
                         (common-lisp:error
                          ":allocated-usage-quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'usage-allocation 'make-usage-allocation))
 (common-lisp:defun make-usage-allocation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags allocated-usage-quantity)
   (common-lisp:apply #'common-lisp:make-instance 'usage-allocation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-allocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-allocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allocated-usage-quantity))
      (common-lisp:list
       (common-lisp:cons "AllocatedUsageQuantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-allocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-allocations ()
   '(trivial-types:proper-list usage-allocation))
 (common-lisp:defun |make-usage-allocations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-allocation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype usage-dimension () 'common-lisp:string)
(common-lisp:deftype usage-quantity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass usage-record common-lisp:nil
                       ((usage-allocations :initarg :usage-allocations :type
                         (common-lisp:or usage-allocations common-lisp:null)
                         :accessor %usage-record-usage-allocations :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or usage-quantity common-lisp:null)
                         :accessor %usage-record-quantity :initform
                         common-lisp:nil)
                        (dimension :initarg :dimension :type
                         (common-lisp:or usage-dimension common-lisp:null)
                         :accessor %usage-record-dimension :initform
                         (common-lisp:error ":dimension is required"))
                        (customer-identifier :initarg :customer-identifier
                         :type
                         (common-lisp:or customer-identifier common-lisp:null)
                         :accessor %usage-record-customer-identifier :initform
                         (common-lisp:error
                          ":customer-identifier is required"))
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %usage-record-timestamp :initform
                         (common-lisp:error ":timestamp is required"))))
 (common-lisp:export (common-lisp:list 'usage-record 'make-usage-record))
 (common-lisp:defun make-usage-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-allocations quantity dimension
                     customer-identifier timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'usage-record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-identifier))
      (common-lisp:list
       (common-lisp:cons "CustomerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "Dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-allocations))
      (common-lisp:list
       (common-lisp:cons "UsageAllocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-record-list ()
   '(trivial-types:proper-list usage-record))
 (common-lisp:defun |make-usage-record-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass usage-record-result common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or usage-record-result-status
                                         common-lisp:null)
                         :accessor %usage-record-result-status :initform
                         common-lisp:nil)
                        (metering-record-id :initarg :metering-record-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %usage-record-result-metering-record-id :initform
                         common-lisp:nil)
                        (usage-record :initarg :usage-record :type
                         (common-lisp:or usage-record common-lisp:null)
                         :accessor %usage-record-result-usage-record :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'usage-record-result 'make-usage-record-result))
 (common-lisp:defun make-usage-record-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status metering-record-id usage-record)
   (common-lisp:apply #'common-lisp:make-instance 'usage-record-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-record-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-record-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-record))
      (common-lisp:list
       (common-lisp:cons "UsageRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metering-record-id))
      (common-lisp:list
       (common-lisp:cons "MeteringRecordId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-record-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-record-result-list ()
   '(trivial-types:proper-list usage-record-result))
 (common-lisp:defun |make-usage-record-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-record-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype usage-record-result-status () 'common-lisp:string)
(common-lisp:deftype version-integer () 'common-lisp:integer)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-meter-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key usage-records product-code)
   (common-lisp:declare (common-lisp:ignorable usage-records product-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-meter-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'meteringmarketplace-request aws-sdk/generator/operation::input "POST"
        :json "/" "BatchMeterUsage" "2016-01-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-meter-usage))
(common-lisp:progn
 (common-lisp:defun meter-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-code timestamp usage-dimension
                     usage-quantity dry-run usage-allocations)
   (common-lisp:declare
    (common-lisp:ignorable product-code timestamp usage-dimension
     usage-quantity dry-run usage-allocations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-meter-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'meteringmarketplace-request aws-sdk/generator/operation::input "POST"
        :json "/" "MeterUsage" "2016-01-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'meter-usage))
(common-lisp:progn
 (common-lisp:defun register-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-code public-key-version nonce)
   (common-lisp:declare
    (common-lisp:ignorable product-code public-key-version nonce))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'meteringmarketplace-request aws-sdk/generator/operation::input "POST"
        :json "/" "RegisterUsage" "2016-01-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-usage))
(common-lisp:progn
 (common-lisp:defun resolve-customer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-token)
   (common-lisp:declare (common-lisp:ignorable registration-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resolve-customer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'meteringmarketplace-request aws-sdk/generator/operation::input "POST"
        :json "/" "ResolveCustomer" "2016-01-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resolve-customer))
