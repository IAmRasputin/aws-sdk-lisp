;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/connect/api
  (:use)
  (:nicknames #:aws/connect)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/connect/api)
(common-lisp:progn
 (common-lisp:defclass connect-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "connect"))
 (common-lisp:export 'connect-request))
(common-lisp:progn
 (common-lisp:define-condition connect-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'connect-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ContactFlowNotPublishedException" . contact-flow-not-published-exception)
    ("ContactNotFoundException" . contact-not-found-exception)
    ("DestinationNotAllowedException" . destination-not-allowed-exception)
    ("DuplicateResourceException" . duplicate-resource-exception)
    ("IdempotencyException" . idempotency-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidContactFlowException" . invalid-contact-flow-exception)
    ("InvalidContactFlowModuleException"
     . invalid-contact-flow-module-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("OutboundContactNotPermittedException"
     . outbound-contact-not-permitted-exception)
    ("PropertyValidationException" . property-validation-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UserNotFoundException" . user-not-found-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype action-summaries ()
   '(trivial-types:proper-list action-summary))
 (common-lisp:defun |make-action-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-summary-"))
   (action-type (common-lisp:error ":action-type is required") :type
    (common-lisp:or action-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-summary 'make-action-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-summary))
   common-lisp:nil))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (activate-evaluation-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-activate-evaluation-form-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activate-evaluation-form-request
                    'make-activate-evaluation-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-evaluation-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-evaluation-form-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-evaluation-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activate-evaluation-form-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-activate-evaluation-form-response-"))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-arn (common-lisp:error ":evaluation-form-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activate-evaluation-form-response
                    'make-activate-evaluation-form-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-evaluation-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-evaluation-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-evaluation-form-response))
   common-lisp:nil))
(common-lisp:deftype after-contact-work-time-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (agent-contact-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-contact-reference-"))
   (contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null))
   (initiation-method common-lisp:nil :type
    (common-lisp:or contact-initiation-method common-lisp:null))
   (agent-contact-state common-lisp:nil :type
    (common-lisp:or contact-state common-lisp:null))
   (state-start-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (connected-to-agent-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (queue common-lisp:nil :type
    (common-lisp:or queue-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-contact-reference 'make-agent-contact-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-contact-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-contact-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiation-method))
      (common-lisp:list
       (common-lisp:cons "InitiationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-contact-state))
      (common-lisp:list
       (common-lisp:cons "AgentContactState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StateStartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-to-agent-timestamp))
      (common-lisp:list
       (common-lisp:cons "ConnectedToAgentTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-contact-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-contact-reference-list ()
   '(trivial-types:proper-list agent-contact-reference))
 (common-lisp:defun |make-agent-contact-reference-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-contact-reference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-first-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (agent-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-info-"))
   (id common-lisp:nil :type
    (common-lisp:or agent-resource-id common-lisp:null))
   (connected-to-agent-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-info 'make-agent-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-to-agent-timestamp))
      (common-lisp:list
       (common-lisp:cons "ConnectedToAgentTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-info))
   common-lisp:nil))
(common-lisp:deftype agent-last-name () 'common-lisp:string)
(common-lisp:deftype agent-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (agent-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-status-"))
   (agent-status-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (agent-status-id common-lisp:nil :type
    (common-lisp:or agent-status-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or agent-status-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or agent-status-description common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or agent-status-type common-lisp:null))
   (display-order common-lisp:nil :type
    (common-lisp:or agent-status-order-number common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or agent-status-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-status 'make-agent-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status-arn))
      (common-lisp:list
       (common-lisp:cons "AgentStatusARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status-id))
      (common-lisp:list
       (common-lisp:cons "AgentStatusId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-order))
      (common-lisp:list
       (common-lisp:cons "DisplayOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-status))
   common-lisp:nil))
(common-lisp:deftype agent-status-description () 'common-lisp:string)
(common-lisp:deftype agent-status-id () 'common-lisp:string)
(common-lisp:deftype agent-status-name () 'common-lisp:string)
(common-lisp:deftype agent-status-order-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (agent-status-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-status-reference-"))
   (status-start-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status-name common-lisp:nil :type
    (common-lisp:or agent-status-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-status-reference 'make-agent-status-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-status-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-status-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StatusStartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-arn))
      (common-lisp:list
       (common-lisp:cons "StatusArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-name))
      (common-lisp:list
       (common-lisp:cons "StatusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-status-reference))
   common-lisp:nil))
(common-lisp:deftype agent-status-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (agent-status-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-status-summary-"))
   (id common-lisp:nil :type (common-lisp:or agent-status-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or agent-status-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or agent-status-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-status-summary 'make-agent-status-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-status-summary-list ()
   '(trivial-types:proper-list agent-status-summary))
 (common-lisp:defun |make-agent-status-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-status-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-status-types ()
   '(trivial-types:proper-list agent-status-type))
 (common-lisp:defun |make-agent-status-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-status-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-username () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agents-min-one-max-hundred ()
   '(trivial-types:proper-list user-id))
 (common-lisp:defun |make-agents-min-one-max-hundred|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alias-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-access-control-tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-allowed-access-control-tags|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype allowed-monitor-capabilities ()
   '(trivial-types:proper-list monitor-capability))
 (common-lisp:defun |make-allowed-monitor-capabilities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list monitor-capability))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (answer-machine-detection-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-answer-machine-detection-config-"))
   (enable-answer-machine-detection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (await-answer-machine-prompt common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'answer-machine-detection-config
                    'make-answer-machine-detection-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          answer-machine-detection-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          answer-machine-detection-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-answer-machine-detection))
      (common-lisp:list
       (common-lisp:cons "EnableAnswerMachineDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'await-answer-machine-prompt))
      (common-lisp:list
       (common-lisp:cons "AwaitAnswerMachinePrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          answer-machine-detection-config))
   common-lisp:nil))
(common-lisp:deftype approximate-total-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (assign-contact-category-action-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-assign-contact-category-action-definition-")))
 (common-lisp:export
  (common-lisp:list 'assign-contact-category-action-definition
                    'make-assign-contact-category-action-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assign-contact-category-action-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assign-contact-category-action-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assign-contact-category-action-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-approved-origin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-approved-origin-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (origin (common-lisp:error ":origin is required") :type
    (common-lisp:or origin common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-approved-origin-request
                    'make-associate-approved-origin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-approved-origin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-approved-origin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-approved-origin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-bot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-bot-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (lex-bot common-lisp:nil :type (common-lisp:or lex-bot common-lisp:null))
   (lex-v2bot common-lisp:nil :type
    (common-lisp:or lex-v2bot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-bot-request 'make-associate-bot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-bot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-bot))
      (common-lisp:list
       (common-lisp:cons "LexBot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-v2bot))
      (common-lisp:list
       (common-lisp:cons "LexV2Bot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-default-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-default-vocabulary-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or vocabulary-language-code common-lisp:null))
   (vocabulary-id common-lisp:nil :type
    (common-lisp:or vocabulary-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-default-vocabulary-request
                    'make-associate-default-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-default-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-default-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-id))
      (common-lisp:list
       (common-lisp:cons "VocabularyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-default-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-default-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-default-vocabulary-response-")))
 (common-lisp:export
  (common-lisp:list 'associate-default-vocabulary-response
                    'make-associate-default-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-default-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-default-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-default-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-instance-storage-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-instance-storage-config-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or instance-storage-resource-type common-lisp:null))
   (storage-config (common-lisp:error ":storage-config is required") :type
    (common-lisp:or instance-storage-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-instance-storage-config-request
                    'make-associate-instance-storage-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-instance-storage-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-instance-storage-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-config))
      (common-lisp:list
       (common-lisp:cons "StorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-instance-storage-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-instance-storage-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-instance-storage-config-response-"))
   (association-id common-lisp:nil :type
    (common-lisp:or association-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-instance-storage-config-response
                    'make-associate-instance-storage-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-instance-storage-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-instance-storage-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-instance-storage-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-lambda-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-lambda-function-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (function-arn (common-lisp:error ":function-arn is required") :type
    (common-lisp:or function-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-lambda-function-request
                    'make-associate-lambda-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-lambda-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-lambda-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-lambda-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-lex-bot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-lex-bot-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (lex-bot (common-lisp:error ":lex-bot is required") :type
    (common-lisp:or lex-bot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-lex-bot-request
                    'make-associate-lex-bot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-lex-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-lex-bot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-bot))
      (common-lisp:list
       (common-lisp:cons "LexBot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-lex-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-phone-number-contact-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-phone-number-contact-flow-request-"))
   (phone-number-id (common-lisp:error ":phone-number-id is required") :type
    (common-lisp:or phone-number-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-phone-number-contact-flow-request
                    'make-associate-phone-number-contact-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-phone-number-contact-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-phone-number-contact-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-phone-number-contact-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-queue-quick-connects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-queue-quick-connects-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (quick-connect-ids (common-lisp:error ":quick-connect-ids is required")
    :type (common-lisp:or quick-connects-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-queue-quick-connects-request
                    'make-associate-queue-quick-connects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-queue-quick-connects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-queue-quick-connects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-ids))
      (common-lisp:list
       (common-lisp:cons "QuickConnectIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-queue-quick-connects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-routing-profile-queues-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-routing-profile-queues-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (queue-configs (common-lisp:error ":queue-configs is required") :type
    (common-lisp:or routing-profile-queue-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-routing-profile-queues-request
                    'make-associate-routing-profile-queues-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-routing-profile-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-routing-profile-queues-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-configs))
      (common-lisp:list
       (common-lisp:cons "QueueConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-routing-profile-queues-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-security-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-security-key-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or pem common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-security-key-request
                    'make-associate-security-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-security-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-security-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-security-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-security-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-security-key-response-"))
   (association-id common-lisp:nil :type
    (common-lisp:or association-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-security-key-response
                    'make-associate-security-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-security-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-security-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-security-key-response))
   common-lisp:nil))
(common-lisp:deftype association-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attachment-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-attachment-reference-"))
   (name common-lisp:nil :type (common-lisp:or reference-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or reference-value common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or reference-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attachment-reference 'make-attachment-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-"))
   (attribute-type common-lisp:nil :type
    (common-lisp:or instance-attribute-type common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or instance-attribute-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun |make-attributes| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype attributes-list ()
   '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-attributes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-accept () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (available-number-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-available-number-summary-"))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (phone-number-country-code common-lisp:nil :type
    (common-lisp:or phone-number-country-code common-lisp:null))
   (phone-number-type common-lisp:nil :type
    (common-lisp:or phone-number-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'available-number-summary 'make-available-number-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          available-number-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          available-number-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-country-code))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-type))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          available-number-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype available-numbers-list ()
   '(trivial-types:proper-list available-number-summary))
 (common-lisp:defun |make-available-numbers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            available-number-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:deftype behavior-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bot-name () 'common-lisp:string)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype campaign-id () 'common-lisp:string)
(common-lisp:deftype channel () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype channel-to-count-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-channel-to-count-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype channels () '(trivial-types:proper-list channel))
 (common-lisp:defun |make-channels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype chat-content () 'common-lisp:string)
(common-lisp:deftype chat-content-type () 'common-lisp:string)
(common-lisp:deftype chat-duration-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (chat-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-chat-message-"))
   (content-type (common-lisp:error ":content-type is required") :type
    (common-lisp:or chat-content-type common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or chat-content common-lisp:null)))
 (common-lisp:export (common-lisp:list 'chat-message 'make-chat-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input chat-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input chat-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input chat-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (chat-participant-role-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-chat-participant-role-config-"))
   (participant-timer-config-list
    (common-lisp:error ":participant-timer-config-list is required") :type
    (common-lisp:or participant-timer-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chat-participant-role-config
                    'make-chat-participant-role-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chat-participant-role-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chat-participant-role-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participant-timer-config-list))
      (common-lisp:list
       (common-lisp:cons "ParticipantTimerConfigList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chat-participant-role-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (chat-streaming-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-chat-streaming-configuration-"))
   (streaming-endpoint-arn
    (common-lisp:error ":streaming-endpoint-arn is required") :type
    (common-lisp:or chat-streaming-endpoint-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chat-streaming-configuration
                    'make-chat-streaming-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chat-streaming-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chat-streaming-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "StreamingEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chat-streaming-configuration))
   common-lisp:nil))
(common-lisp:deftype chat-streaming-endpoint-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (claim-phone-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-claim-phone-number-request-"))
   (target-arn (common-lisp:error ":target-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (phone-number (common-lisp:error ":phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (phone-number-description common-lisp:nil :type
    (common-lisp:or phone-number-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'claim-phone-number-request
                    'make-claim-phone-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          claim-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          claim-phone-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-description))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          claim-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (claim-phone-number-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-claim-phone-number-response-"))
   (phone-number-id common-lisp:nil :type
    (common-lisp:or phone-number-id common-lisp:null))
   (phone-number-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'claim-phone-number-response
                    'make-claim-phone-number-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          claim-phone-number-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          claim-phone-number-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          claim-phone-number-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (claimed-phone-number-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-claimed-phone-number-summary-"))
   (phone-number-id common-lisp:nil :type
    (common-lisp:or phone-number-id common-lisp:null))
   (phone-number-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (phone-number-country-code common-lisp:nil :type
    (common-lisp:or phone-number-country-code common-lisp:null))
   (phone-number-type common-lisp:nil :type
    (common-lisp:or phone-number-type common-lisp:null))
   (phone-number-description common-lisp:nil :type
    (common-lisp:or phone-number-description common-lisp:null))
   (target-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (phone-number-status common-lisp:nil :type
    (common-lisp:or phone-number-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'claimed-phone-number-summary
                    'make-claimed-phone-number-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          claimed-phone-number-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          claimed-phone-number-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-country-code))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-type))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-description))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-status))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          claimed-phone-number-summary))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype common-name-length127 () 'common-lisp:string)
(common-lisp:deftype comparison () 'common-lisp:string)
(common-lisp:deftype concurrency () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (contact (:copier common-lisp:nil) (:conc-name "struct-shape-contact-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or contact-id common-lisp:null))
   (initial-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (previous-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (initiation-method common-lisp:nil :type
    (common-lisp:or contact-initiation-method common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null))
   (queue-info common-lisp:nil :type
    (common-lisp:or queue-info common-lisp:null))
   (agent-info common-lisp:nil :type
    (common-lisp:or agent-info common-lisp:null))
   (initiation-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (disconnect-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-update-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (scheduled-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (related-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (wisdom-info common-lisp:nil :type
    (common-lisp:or wisdom-info common-lisp:null)))
 (common-lisp:export (common-lisp:list 'contact 'make-contact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-contact-id))
      (common-lisp:list
       (common-lisp:cons "InitialContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-contact-id))
      (common-lisp:list
       (common-lisp:cons "PreviousContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiation-method))
      (common-lisp:list
       (common-lisp:cons "InitiationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-info))
      (common-lisp:list
       (common-lisp:cons "QueueInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-info))
      (common-lisp:list
       (common-lisp:cons "AgentInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initiation-timestamp))
      (common-lisp:list
       (common-lisp:cons "InitiationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timestamp))
      (common-lisp:list
       (common-lisp:cons "DisconnectTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-timestamp))
      (common-lisp:list
       (common-lisp:cons "ScheduledTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-contact-id))
      (common-lisp:list
       (common-lisp:cons "RelatedContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wisdom-info))
      (common-lisp:list
       (common-lisp:cons "WisdomInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (contact-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-filter-"))
   (contact-states common-lisp:nil :type
    (common-lisp:or contact-states common-lisp:null)))
 (common-lisp:export (common-lisp:list 'contact-filter 'make-contact-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-states))
      (common-lisp:list
       (common-lisp:cons "ContactStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (contact-flow (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-flow-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or contact-flow-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or contact-flow-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or contact-flow-type common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or contact-flow-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or contact-flow-description common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or contact-flow-content common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'contact-flow 'make-contact-flow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-flow))
   common-lisp:nil))
(common-lisp:deftype contact-flow-content () 'common-lisp:string)
(common-lisp:deftype contact-flow-description () 'common-lisp:string)
(common-lisp:deftype contact-flow-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (contact-flow-module (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-flow-module-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or contact-flow-module-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or contact-flow-module-name common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or contact-flow-module-content common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or contact-flow-module-description common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or contact-flow-module-state common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or contact-flow-module-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contact-flow-module 'make-contact-flow-module))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-flow-module))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-flow-module))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-flow-module))
   common-lisp:nil))
(common-lisp:deftype contact-flow-module-content () 'common-lisp:string)
(common-lisp:deftype contact-flow-module-description () 'common-lisp:string)
(common-lisp:deftype contact-flow-module-id () 'common-lisp:string)
(common-lisp:deftype contact-flow-module-name () 'common-lisp:string)
(common-lisp:deftype contact-flow-module-state () 'common-lisp:string)
(common-lisp:deftype contact-flow-module-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (contact-flow-module-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-flow-module-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or contact-flow-module-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or contact-flow-module-name common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or contact-flow-module-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contact-flow-module-summary
                    'make-contact-flow-module-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          contact-flow-module-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          contact-flow-module-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          contact-flow-module-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contact-flow-modules-summary-list ()
   '(trivial-types:proper-list contact-flow-module-summary))
 (common-lisp:defun |make-contact-flow-modules-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            contact-flow-module-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-flow-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition contact-flow-not-published-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       contact-flow-not-published-exception-message)))
 (common-lisp:export
  (common-lisp:list 'contact-flow-not-published-exception
                    'contact-flow-not-published-exception-message)))
(common-lisp:deftype contact-flow-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (contact-flow-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-flow-summary-"))
   (id common-lisp:nil :type (common-lisp:or contact-flow-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or contact-flow-name common-lisp:null))
   (contact-flow-type common-lisp:nil :type
    (common-lisp:or contact-flow-type common-lisp:null))
   (contact-flow-state common-lisp:nil :type
    (common-lisp:or contact-flow-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contact-flow-summary 'make-contact-flow-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-flow-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-flow-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-type))
      (common-lisp:list
       (common-lisp:cons "ContactFlowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-state))
      (common-lisp:list
       (common-lisp:cons "ContactFlowState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-flow-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contact-flow-summary-list ()
   '(trivial-types:proper-list contact-flow-summary))
 (common-lisp:defun |make-contact-flow-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-flow-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-flow-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-flow-types ()
   '(trivial-types:proper-list contact-flow-type))
 (common-lisp:defun |make-contact-flow-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-flow-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-id () 'common-lisp:string)
(common-lisp:deftype contact-initiation-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition contact-not-found-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       contact-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'contact-not-found-exception
                    'contact-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype contact-references () 'common-lisp:hash-table)
 (common-lisp:defun |make-contact-references|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype contact-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-states ()
   '(trivial-types:proper-list contact-state))
 (common-lisp:defun |make-contact-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (control-plane-tag-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-control-plane-tag-filter-"))
   (or-conditions common-lisp:nil :type
    (common-lisp:or tag-or-condition-list common-lisp:null))
   (and-conditions common-lisp:nil :type
    (common-lisp:or tag-and-condition-list common-lisp:null))
   (tag-condition common-lisp:nil :type
    (common-lisp:or tag-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'control-plane-tag-filter 'make-control-plane-tag-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-conditions))
      (common-lisp:list
       (common-lisp:cons "OrConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-conditions))
      (common-lisp:list
       (common-lisp:cons "AndConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-condition))
      (common-lisp:list
       (common-lisp:cons "TagCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          control-plane-tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agent-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agent-status-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or agent-status-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or agent-status-description common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or agent-status-state common-lisp:null))
   (display-order common-lisp:nil :type
    (common-lisp:or agent-status-order-number common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agent-status-request
                    'make-create-agent-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-order))
      (common-lisp:list
       (common-lisp:cons "DisplayOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agent-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agent-status-response-"))
   (agent-status-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (agent-status-id common-lisp:nil :type
    (common-lisp:or agent-status-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agent-status-response
                    'make-create-agent-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status-arn))
      (common-lisp:list
       (common-lisp:cons "AgentStatusARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status-id))
      (common-lisp:list
       (common-lisp:cons "AgentStatusId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agent-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-flow-module-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-flow-module-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or contact-flow-module-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or contact-flow-module-description common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or contact-flow-module-content common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-flow-module-request
                    'make-create-contact-flow-module-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-module-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-module-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-module-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-flow-module-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-flow-module-response-"))
   (id common-lisp:nil :type
    (common-lisp:or contact-flow-module-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-flow-module-response
                    'make-create-contact-flow-module-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-module-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-module-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-module-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-flow-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or contact-flow-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or contact-flow-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or contact-flow-description common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or contact-flow-content common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-flow-request
                    'make-create-contact-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-flow-response-"))
   (contact-flow-id common-lisp:nil :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (contact-flow-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-flow-response
                    'make-create-contact-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-arn))
      (common-lisp:list
       (common-lisp:cons "ContactFlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-evaluation-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-evaluation-form-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or evaluation-form-title common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or evaluation-form-description common-lisp:null))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or evaluation-form-items-list common-lisp:null))
   (scoring-strategy common-lisp:nil :type
    (common-lisp:or evaluation-form-scoring-strategy common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-evaluation-form-request
                    'make-create-evaluation-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-form-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-strategy))
      (common-lisp:list
       (common-lisp:cons "ScoringStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-evaluation-form-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-evaluation-form-response-"))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-arn (common-lisp:error ":evaluation-form-arn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-evaluation-form-response
                    'make-create-evaluation-form-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-evaluation-form-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hours-of-operation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hours-of-operation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or common-name-length127 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or hours-of-operation-description common-lisp:null))
   (time-zone (common-lisp:error ":time-zone is required") :type
    (common-lisp:or time-zone common-lisp:null))
   (config (common-lisp:error ":config is required") :type
    (common-lisp:or hours-of-operation-config-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hours-of-operation-request
                    'make-create-hours-of-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hours-of-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hours-of-operation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hours-of-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hours-of-operation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hours-of-operation-response-"))
   (hours-of-operation-id common-lisp:nil :type
    (common-lisp:or hours-of-operation-id common-lisp:null))
   (hours-of-operation-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hours-of-operation-response
                    'make-create-hours-of-operation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hours-of-operation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hours-of-operation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hours-of-operation-id))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hours-of-operation-arn))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hours-of-operation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instance-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (identity-management-type
    (common-lisp:error ":identity-management-type is required") :type
    (common-lisp:or directory-type common-lisp:null))
   (instance-alias common-lisp:nil :type
    (common-lisp:or directory-alias common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (inbound-calls-enabled
    (common-lisp:error ":inbound-calls-enabled is required") :type
    (common-lisp:or inbound-calls-enabled common-lisp:null))
   (outbound-calls-enabled
    (common-lisp:error ":outbound-calls-enabled is required") :type
    (common-lisp:or outbound-calls-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-request 'make-create-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-management-type))
      (common-lisp:list
       (common-lisp:cons "IdentityManagementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-alias))
      (common-lisp:list
       (common-lisp:cons "InstanceAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inbound-calls-enabled))
      (common-lisp:list
       (common-lisp:cons "InboundCallsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-calls-enabled))
      (common-lisp:list
       (common-lisp:cons "OutboundCallsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instance-response-"))
   (id common-lisp:nil :type (common-lisp:or instance-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-response 'make-create-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-integration-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-integration-association-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (integration-type (common-lisp:error ":integration-type is required") :type
    (common-lisp:or integration-type common-lisp:null))
   (integration-arn (common-lisp:error ":integration-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (source-application-url common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (source-application-name common-lisp:nil :type
    (common-lisp:or source-application-name common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-integration-association-request
                    'make-create-integration-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-type))
      (common-lisp:list
       (common-lisp:cons "IntegrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-arn))
      (common-lisp:list
       (common-lisp:cons "IntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-application-url))
      (common-lisp:list
       (common-lisp:cons "SourceApplicationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-application-name))
      (common-lisp:list
       (common-lisp:cons "SourceApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-integration-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-integration-association-response-"))
   (integration-association-id common-lisp:nil :type
    (common-lisp:or integration-association-id common-lisp:null))
   (integration-association-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-integration-association-response
                    'make-create-integration-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-association-id))
      (common-lisp:list
       (common-lisp:cons "IntegrationAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-association-arn))
      (common-lisp:list
       (common-lisp:cons "IntegrationAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-participant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-participant-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (participant-details (common-lisp:error ":participant-details is required")
    :type (common-lisp:or participant-details-to-add common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-participant-request
                    'make-create-participant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-details))
      (common-lisp:list
       (common-lisp:cons "ParticipantDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-participant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-participant-response-"))
   (participant-credentials common-lisp:nil :type
    (common-lisp:or participant-token-credentials common-lisp:null))
   (participant-id common-lisp:nil :type
    (common-lisp:or participant-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-participant-response
                    'make-create-participant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participant-credentials))
      (common-lisp:list
       (common-lisp:cons "ParticipantCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-id))
      (common-lisp:list
       (common-lisp:cons "ParticipantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-queue-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-queue-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or common-name-length127 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or queue-description common-lisp:null))
   (outbound-caller-config common-lisp:nil :type
    (common-lisp:or outbound-caller-config common-lisp:null))
   (hours-of-operation-id
    (common-lisp:error ":hours-of-operation-id is required") :type
    (common-lisp:or hours-of-operation-id common-lisp:null))
   (max-contacts common-lisp:nil :type
    (common-lisp:or queue-max-contacts common-lisp:null))
   (quick-connect-ids common-lisp:nil :type
    (common-lisp:or quick-connects-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-queue-request 'make-create-queue-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-queue-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-caller-config))
      (common-lisp:list
       (common-lisp:cons "OutboundCallerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hours-of-operation-id))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-contacts))
      (common-lisp:list
       (common-lisp:cons "MaxContacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-ids))
      (common-lisp:list
       (common-lisp:cons "QuickConnectIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-queue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-queue-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-queue-response-"))
   (queue-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (queue-id common-lisp:nil :type (common-lisp:or queue-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-queue-response 'make-create-queue-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-queue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-queue-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "QueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-id))
      (common-lisp:list
       (common-lisp:cons "QueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-queue-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-quick-connect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-quick-connect-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or quick-connect-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or quick-connect-description common-lisp:null))
   (quick-connect-config
    (common-lisp:error ":quick-connect-config is required") :type
    (common-lisp:or quick-connect-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-quick-connect-request
                    'make-create-quick-connect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-connect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-connect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quick-connect-config))
      (common-lisp:list
       (common-lisp:cons "QuickConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-connect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-quick-connect-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-quick-connect-response-"))
   (quick-connect-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (quick-connect-id common-lisp:nil :type
    (common-lisp:or quick-connect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-quick-connect-response
                    'make-create-quick-connect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-connect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-connect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-arn))
      (common-lisp:list
       (common-lisp:cons "QuickConnectARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-id))
      (common-lisp:list
       (common-lisp:cons "QuickConnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-connect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-routing-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-routing-profile-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or routing-profile-name common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or routing-profile-description common-lisp:null))
   (default-outbound-queue-id
    (common-lisp:error ":default-outbound-queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (queue-configs common-lisp:nil :type
    (common-lisp:or routing-profile-queue-config-list common-lisp:null))
   (media-concurrencies (common-lisp:error ":media-concurrencies is required")
    :type (common-lisp:or media-concurrencies common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-routing-profile-request
                    'make-create-routing-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-routing-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-routing-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-outbound-queue-id))
      (common-lisp:list
       (common-lisp:cons "DefaultOutboundQueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-configs))
      (common-lisp:list
       (common-lisp:cons "QueueConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-concurrencies))
      (common-lisp:list
       (common-lisp:cons "MediaConcurrencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-routing-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-routing-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-routing-profile-response-"))
   (routing-profile-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (routing-profile-id common-lisp:nil :type
    (common-lisp:or routing-profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-routing-profile-response
                    'make-create-routing-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-routing-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-routing-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile-arn))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile-id))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-routing-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (trigger-event-source
    (common-lisp:error ":trigger-event-source is required") :type
    (common-lisp:or rule-trigger-event-source common-lisp:null))
   (function (common-lisp:error ":function is required") :type
    (common-lisp:or rule-function common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or rule-actions common-lisp:null))
   (publish-status (common-lisp:error ":publish-status is required") :type
    (common-lisp:or rule-publish-status common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-request 'make-create-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trigger-event-source))
      (common-lisp:list
       (common-lisp:cons "TriggerEventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "Function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-status))
      (common-lisp:list
       (common-lisp:cons "PublishStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-response-"))
   (rule-arn (common-lisp:error ":rule-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or rule-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-response 'make-create-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-response))
   common-lisp:nil))
(common-lisp:deftype create-security-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-security-profile-request-"))
   (security-profile-name
    (common-lisp:error ":security-profile-name is required") :type
    (common-lisp:or create-security-profile-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or security-profile-description common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or permissions-list common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (allowed-access-control-tags common-lisp:nil :type
    (common-lisp:or allowed-access-control-tags common-lisp:null))
   (tag-restricted-resources common-lisp:nil :type
    (common-lisp:or tag-restricted-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-security-profile-request
                    'make-create-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-access-control-tags))
      (common-lisp:list
       (common-lisp:cons "AllowedAccessControlTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-restricted-resources))
      (common-lisp:list
       (common-lisp:cons "TagRestrictedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-security-profile-response-"))
   (security-profile-id common-lisp:nil :type
    (common-lisp:or security-profile-id common-lisp:null))
   (security-profile-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-security-profile-response
                    'make-create-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-profile-id))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-arn))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-task-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-task-template-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or task-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-template-description common-lisp:null))
   (contact-flow-id common-lisp:nil :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or task-template-constraints common-lisp:null))
   (defaults common-lisp:nil :type
    (common-lisp:or task-template-defaults common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-template-status common-lisp:null))
   (fields (common-lisp:error ":fields is required") :type
    (common-lisp:or task-template-fields common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-task-template-request
                    'make-create-task-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-task-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-task-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defaults))
      (common-lisp:list
       (common-lisp:cons "Defaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-task-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-task-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-task-template-response-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or task-template-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or task-template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-task-template-response
                    'make-create-task-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-task-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-task-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-task-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-distribution-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-traffic-distribution-group-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name128 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description250 common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id-or-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-distribution-group-request
                    'make-create-traffic-distribution-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-distribution-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-distribution-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-distribution-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-distribution-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-traffic-distribution-group-response-"))
   (id common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-id common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-distribution-group-response
                    'make-create-traffic-distribution-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-distribution-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-distribution-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-distribution-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-use-case-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-use-case-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (integration-association-id
    (common-lisp:error ":integration-association-id is required") :type
    (common-lisp:or integration-association-id common-lisp:null))
   (use-case-type (common-lisp:error ":use-case-type is required") :type
    (common-lisp:or use-case-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-use-case-request 'make-create-use-case-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-use-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-use-case-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-case-type))
      (common-lisp:list
       (common-lisp:cons "UseCaseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-use-case-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-use-case-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-use-case-response-"))
   (use-case-id common-lisp:nil :type
    (common-lisp:or use-case-id common-lisp:null))
   (use-case-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-use-case-response 'make-create-use-case-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-use-case-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-use-case-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-case-id))
      (common-lisp:list
       (common-lisp:cons "UseCaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-case-arn))
      (common-lisp:list
       (common-lisp:cons "UseCaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-use-case-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-hierarchy-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-hierarchy-group-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or hierarchy-group-name common-lisp:null))
   (parent-group-id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-hierarchy-group-request
                    'make-create-user-hierarchy-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-hierarchy-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-hierarchy-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-group-id))
      (common-lisp:list
       (common-lisp:cons "ParentGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-hierarchy-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-hierarchy-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-hierarchy-group-response-"))
   (hierarchy-group-id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (hierarchy-group-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-hierarchy-group-response
                    'make-create-user-hierarchy-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-hierarchy-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-hierarchy-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-group-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-group-arn))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-hierarchy-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-request-"))
   (username (common-lisp:error ":username is required") :type
    (common-lisp:or agent-username common-lisp:null))
   (password common-lisp:nil :type (common-lisp:or password common-lisp:null))
   (identity-info common-lisp:nil :type
    (common-lisp:or user-identity-info common-lisp:null))
   (phone-config (common-lisp:error ":phone-config is required") :type
    (common-lisp:or user-phone-config common-lisp:null))
   (directory-user-id common-lisp:nil :type
    (common-lisp:or directory-user-id common-lisp:null))
   (security-profile-ids
    (common-lisp:error ":security-profile-ids is required") :type
    (common-lisp:or security-profile-ids common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (hierarchy-group-id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-info))
      (common-lisp:list
       (common-lisp:cons "IdentityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-config))
      (common-lisp:list
       (common-lisp:cons "PhoneConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-user-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile-id))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-group-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-response-"))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (user-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vocabulary-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or vocabulary-language-code common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or vocabulary-content common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-request
                    'make-create-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vocabulary-response-"))
   (vocabulary-arn (common-lisp:error ":vocabulary-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (vocabulary-id (common-lisp:error ":vocabulary-id is required") :type
    (common-lisp:or vocabulary-id common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or vocabulary-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-response
                    'make-create-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-arn))
      (common-lisp:list
       (common-lisp:cons "VocabularyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-id))
      (common-lisp:list
       (common-lisp:cons "VocabularyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-credentials-"))
   (access-token common-lisp:nil :type
    (common-lisp:or security-token common-lisp:null))
   (access-token-expiration common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or security-token common-lisp:null))
   (refresh-token-expiration common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'credentials 'make-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-token-expiration))
      (common-lisp:list
       (common-lisp:cons "AccessTokenExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "RefreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-token-expiration))
      (common-lisp:list
       (common-lisp:cons "RefreshTokenExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cross-channel-behavior (:copier common-lisp:nil)
      (:conc-name "struct-shape-cross-channel-behavior-"))
   (behavior-type (common-lisp:error ":behavior-type is required") :type
    (common-lisp:or behavior-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cross-channel-behavior 'make-cross-channel-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-channel-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-channel-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior-type))
      (common-lisp:list
       (common-lisp:cons "BehaviorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-channel-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (current-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-current-metric-"))
   (name common-lisp:nil :type
    (common-lisp:or current-metric-name common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or unit common-lisp:null)))
 (common-lisp:export (common-lisp:list 'current-metric 'make-current-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input current-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input current-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input current-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (current-metric-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-current-metric-data-"))
   (metric common-lisp:nil :type
    (common-lisp:or current-metric common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'current-metric-data 'make-current-metric-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input current-metric-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input current-metric-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input current-metric-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype current-metric-data-collections ()
   '(trivial-types:proper-list current-metric-data))
 (common-lisp:defun |make-current-metric-data-collections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list current-metric-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype current-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (current-metric-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-current-metric-result-"))
   (dimensions common-lisp:nil :type
    (common-lisp:or dimensions common-lisp:null))
   (collections common-lisp:nil :type
    (common-lisp:or current-metric-data-collections common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'current-metric-result 'make-current-metric-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          current-metric-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          current-metric-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collections))
      (common-lisp:list
       (common-lisp:cons "Collections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          current-metric-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype current-metric-results ()
   '(trivial-types:proper-list current-metric-result))
 (common-lisp:defun |make-current-metric-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list current-metric-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (current-metric-sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-current-metric-sort-criteria-"))
   (sort-by-metric common-lisp:nil :type
    (common-lisp:or current-metric-name common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'current-metric-sort-criteria
                    'make-current-metric-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          current-metric-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          current-metric-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by-metric))
      (common-lisp:list
       (common-lisp:cons "SortByMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          current-metric-sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype current-metric-sort-criteria-max-one ()
   '(trivial-types:proper-list current-metric-sort-criteria))
 (common-lisp:defun |make-current-metric-sort-criteria-max-one|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            current-metric-sort-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype current-metrics ()
   '(trivial-types:proper-list current-metric))
 (common-lisp:defun |make-current-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list current-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (date-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-reference-"))
   (name common-lisp:nil :type (common-lisp:or reference-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or reference-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'date-reference 'make-date-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deactivate-evaluation-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deactivate-evaluation-form-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deactivate-evaluation-form-request
                    'make-deactivate-evaluation-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-evaluation-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-evaluation-form-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-evaluation-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deactivate-evaluation-form-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deactivate-evaluation-form-response-"))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-arn (common-lisp:error ":evaluation-form-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deactivate-evaluation-form-response
                    'make-deactivate-evaluation-form-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-evaluation-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-evaluation-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-evaluation-form-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-vocabulary (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-vocabulary-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or vocabulary-language-code common-lisp:null))
   (vocabulary-id (common-lisp:error ":vocabulary-id is required") :type
    (common-lisp:or vocabulary-id common-lisp:null))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-vocabulary 'make-default-vocabulary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input default-vocabulary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input default-vocabulary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-id))
      (common-lisp:list
       (common-lisp:cons "VocabularyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input default-vocabulary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype default-vocabulary-list ()
   '(trivial-types:proper-list default-vocabulary))
 (common-lisp:defun |make-default-vocabulary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list default-vocabulary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delay () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-evaluation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-evaluation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-contact-evaluation-request
                    'make-delete-contact-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-flow-module-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-flow-module-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-module-id
    (common-lisp:error ":contact-flow-module-id is required") :type
    (common-lisp:or contact-flow-module-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-contact-flow-module-request
                    'make-delete-contact-flow-module-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-module-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-module-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-module-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-flow-module-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-flow-module-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-contact-flow-module-response
                    'make-delete-contact-flow-module-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-module-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-module-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-module-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-flow-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-contact-flow-request
                    'make-delete-contact-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-flow-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-contact-flow-response
                    'make-delete-contact-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-evaluation-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-evaluation-form-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-evaluation-form-request
                    'make-delete-evaluation-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-hours-of-operation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-hours-of-operation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (hours-of-operation-id
    (common-lisp:error ":hours-of-operation-id is required") :type
    (common-lisp:or hours-of-operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hours-of-operation-request
                    'make-delete-hours-of-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hours-of-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hours-of-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hours-of-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-instance-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-instance-request 'make-delete-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-integration-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-integration-association-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (integration-association-id
    (common-lisp:error ":integration-association-id is required") :type
    (common-lisp:or integration-association-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-integration-association-request
                    'make-delete-integration-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-quick-connect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-quick-connect-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (quick-connect-id (common-lisp:error ":quick-connect-id is required") :type
    (common-lisp:or quick-connect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-quick-connect-request
                    'make-delete-quick-connect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-connect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-connect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-connect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or rule-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rule-request 'make-delete-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-security-profile-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (security-profile-id (common-lisp:error ":security-profile-id is required")
    :type (common-lisp:or security-profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-security-profile-request
                    'make-delete-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-task-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-task-template-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (task-template-id (common-lisp:error ":task-template-id is required") :type
    (common-lisp:or task-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-task-template-request
                    'make-delete-task-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-task-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-task-template-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-task-template-response
                    'make-delete-task-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-distribution-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-traffic-distribution-group-request-"))
   (traffic-distribution-group-id
    (common-lisp:error ":traffic-distribution-group-id is required") :type
    (common-lisp:or traffic-distribution-group-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-distribution-group-request
                    'make-delete-traffic-distribution-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-distribution-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-distribution-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-distribution-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-distribution-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-traffic-distribution-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-distribution-group-response
                    'make-delete-traffic-distribution-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-distribution-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-distribution-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-distribution-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-use-case-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-use-case-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (integration-association-id
    (common-lisp:error ":integration-association-id is required") :type
    (common-lisp:or integration-association-id common-lisp:null))
   (use-case-id (common-lisp:error ":use-case-id is required") :type
    (common-lisp:or use-case-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-use-case-request 'make-delete-use-case-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-use-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-use-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-use-case-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-hierarchy-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-hierarchy-group-request-"))
   (hierarchy-group-id (common-lisp:error ":hierarchy-group-id is required")
    :type (common-lisp:or hierarchy-group-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-hierarchy-group-request
                    'make-delete-user-hierarchy-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-hierarchy-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-hierarchy-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-hierarchy-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vocabulary-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (vocabulary-id (common-lisp:error ":vocabulary-id is required") :type
    (common-lisp:or vocabulary-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vocabulary-request
                    'make-delete-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vocabulary-response-"))
   (vocabulary-arn (common-lisp:error ":vocabulary-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (vocabulary-id (common-lisp:error ":vocabulary-id is required") :type
    (common-lisp:or vocabulary-id common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or vocabulary-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vocabulary-response
                    'make-delete-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-arn))
      (common-lisp:list
       (common-lisp:cons "VocabularyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-id))
      (common-lisp:list
       (common-lisp:cons "VocabularyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-agent-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-agent-status-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (agent-status-id (common-lisp:error ":agent-status-id is required") :type
    (common-lisp:or agent-status-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-agent-status-request
                    'make-describe-agent-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-agent-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-agent-status-response-"))
   (agent-status common-lisp:nil :type
    (common-lisp:or agent-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-agent-status-response
                    'make-describe-agent-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "AgentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-evaluation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-evaluation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-evaluation-request
                    'make-describe-contact-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-evaluation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-evaluation-response-"))
   (evaluation (common-lisp:error ":evaluation is required") :type
    (common-lisp:or evaluation common-lisp:null))
   (evaluation-form (common-lisp:error ":evaluation-form is required") :type
    (common-lisp:or evaluation-form-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-evaluation-response
                    'make-describe-contact-evaluation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-evaluation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation))
      (common-lisp:list
       (common-lisp:cons "Evaluation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form))
      (common-lisp:list
       (common-lisp:cons "EvaluationForm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-evaluation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-flow-module-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-flow-module-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-module-id
    (common-lisp:error ":contact-flow-module-id is required") :type
    (common-lisp:or contact-flow-module-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-flow-module-request
                    'make-describe-contact-flow-module-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-module-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-module-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-module-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-flow-module-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-flow-module-response-"))
   (contact-flow-module common-lisp:nil :type
    (common-lisp:or contact-flow-module common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-flow-module-response
                    'make-describe-contact-flow-module-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-module-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-module-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-module))
      (common-lisp:list
       (common-lisp:cons "ContactFlowModule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-module-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-flow-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-flow-request
                    'make-describe-contact-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-flow-response-"))
   (contact-flow common-lisp:nil :type
    (common-lisp:or contact-flow common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-flow-response
                    'make-describe-contact-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow))
      (common-lisp:list
       (common-lisp:cons "ContactFlow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-request 'make-describe-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-response-"))
   (contact common-lisp:nil :type (common-lisp:or contact common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-response
                    'make-describe-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact))
      (common-lisp:list
       (common-lisp:cons "Contact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-evaluation-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-evaluation-form-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-evaluation-form-request
                    'make-describe-evaluation-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluation-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluation-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluation-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-evaluation-form-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-evaluation-form-response-"))
   (evaluation-form (common-lisp:error ":evaluation-form is required") :type
    (common-lisp:or evaluation-form common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-evaluation-form-response
                    'make-describe-evaluation-form-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluation-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluation-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form))
      (common-lisp:list
       (common-lisp:cons "EvaluationForm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-evaluation-form-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hours-of-operation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hours-of-operation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (hours-of-operation-id
    (common-lisp:error ":hours-of-operation-id is required") :type
    (common-lisp:or hours-of-operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hours-of-operation-request
                    'make-describe-hours-of-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hours-of-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hours-of-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hours-of-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hours-of-operation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hours-of-operation-response-"))
   (hours-of-operation common-lisp:nil :type
    (common-lisp:or hours-of-operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hours-of-operation-response
                    'make-describe-hours-of-operation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hours-of-operation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hours-of-operation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hours-of-operation))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hours-of-operation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-attribute-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (attribute-type (common-lisp:error ":attribute-type is required") :type
    (common-lisp:or instance-attribute-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-attribute-request
                    'make-describe-instance-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-attribute-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-attribute-response-"))
   (attribute common-lisp:nil :type
    (common-lisp:or attribute common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-attribute-response
                    'make-describe-instance-attribute-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-request
                    'make-describe-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-response-"))
   (instance common-lisp:nil :type (common-lisp:or instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-response
                    'make-describe-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "Instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-storage-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-storage-config-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or association-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or instance-storage-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-storage-config-request
                    'make-describe-instance-storage-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-storage-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-storage-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-storage-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-storage-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-storage-config-response-"))
   (storage-config common-lisp:nil :type
    (common-lisp:or instance-storage-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-storage-config-response
                    'make-describe-instance-storage-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-storage-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-storage-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-config))
      (common-lisp:list
       (common-lisp:cons "StorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-storage-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-phone-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-phone-number-request-"))
   (phone-number-id (common-lisp:error ":phone-number-id is required") :type
    (common-lisp:or phone-number-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-phone-number-request
                    'make-describe-phone-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-phone-number-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-phone-number-response-"))
   (claimed-phone-number-summary common-lisp:nil :type
    (common-lisp:or claimed-phone-number-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-phone-number-response
                    'make-describe-phone-number-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-number-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-number-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'claimed-phone-number-summary))
      (common-lisp:list
       (common-lisp:cons "ClaimedPhoneNumberSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-phone-number-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-queue-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-queue-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-queue-request 'make-describe-queue-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-queue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-queue-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-queue-response-"))
   (queue common-lisp:nil :type (common-lisp:or queue common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-queue-response 'make-describe-queue-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-queue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-queue-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-queue-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-quick-connect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-quick-connect-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (quick-connect-id (common-lisp:error ":quick-connect-id is required") :type
    (common-lisp:or quick-connect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-quick-connect-request
                    'make-describe-quick-connect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-quick-connect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-quick-connect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-quick-connect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-quick-connect-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-quick-connect-response-"))
   (quick-connect common-lisp:nil :type
    (common-lisp:or quick-connect common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-quick-connect-response
                    'make-describe-quick-connect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-quick-connect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-quick-connect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect))
      (common-lisp:list
       (common-lisp:cons "QuickConnect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-quick-connect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-routing-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-routing-profile-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-routing-profile-request
                    'make-describe-routing-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-routing-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-routing-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-routing-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-routing-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-routing-profile-response-"))
   (routing-profile common-lisp:nil :type
    (common-lisp:or routing-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-routing-profile-response
                    'make-describe-routing-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-routing-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-routing-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile))
      (common-lisp:list
       (common-lisp:cons "RoutingProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-routing-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-rule-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or rule-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-rule-request 'make-describe-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-rule-response-"))
   (rule (common-lisp:error ":rule is required") :type
    (common-lisp:or rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-rule-response 'make-describe-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-profile-request-"))
   (security-profile-id (common-lisp:error ":security-profile-id is required")
    :type (common-lisp:or security-profile-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-profile-request
                    'make-describe-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-profile-response-"))
   (security-profile common-lisp:nil :type
    (common-lisp:or security-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-profile-response
                    'make-describe-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-profile))
      (common-lisp:list
       (common-lisp:cons "SecurityProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-traffic-distribution-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-traffic-distribution-group-request-"))
   (traffic-distribution-group-id
    (common-lisp:error ":traffic-distribution-group-id is required") :type
    (common-lisp:or traffic-distribution-group-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-traffic-distribution-group-request
                    'make-describe-traffic-distribution-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-distribution-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-distribution-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-distribution-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-traffic-distribution-group-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-traffic-distribution-group-response-"))
   (traffic-distribution-group common-lisp:nil :type
    (common-lisp:or traffic-distribution-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-traffic-distribution-group-response
                    'make-describe-traffic-distribution-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-distribution-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-distribution-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-distribution-group))
      (common-lisp:list
       (common-lisp:cons "TrafficDistributionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-traffic-distribution-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-hierarchy-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-hierarchy-group-request-"))
   (hierarchy-group-id (common-lisp:error ":hierarchy-group-id is required")
    :type (common-lisp:or hierarchy-group-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-hierarchy-group-request
                    'make-describe-user-hierarchy-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-hierarchy-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-hierarchy-group-response-"))
   (hierarchy-group common-lisp:nil :type
    (common-lisp:or hierarchy-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-hierarchy-group-response
                    'make-describe-user-hierarchy-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-group))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-hierarchy-structure-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-hierarchy-structure-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-hierarchy-structure-request
                    'make-describe-user-hierarchy-structure-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-structure-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-structure-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-structure-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-hierarchy-structure-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-hierarchy-structure-response-"))
   (hierarchy-structure common-lisp:nil :type
    (common-lisp:or hierarchy-structure common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-hierarchy-structure-response
                    'make-describe-user-hierarchy-structure-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-structure-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-structure-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-structure))
      (common-lisp:list
       (common-lisp:cons "HierarchyStructure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-hierarchy-structure-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-request-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-request 'make-describe-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-response 'make-describe-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vocabulary-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (vocabulary-id (common-lisp:error ":vocabulary-id is required") :type
    (common-lisp:or vocabulary-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vocabulary-request
                    'make-describe-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vocabulary-response-"))
   (vocabulary (common-lisp:error ":vocabulary is required") :type
    (common-lisp:or vocabulary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vocabulary-response
                    'make-describe-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary))
      (common-lisp:list
       (common-lisp:cons "Vocabulary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vocabulary-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype description250 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition destination-not-allowed-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       destination-not-allowed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'destination-not-allowed-exception
                    'destination-not-allowed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (dimensions (:copier common-lisp:nil)
      (:conc-name "struct-shape-dimensions-"))
   (queue common-lisp:nil :type
    (common-lisp:or queue-reference common-lisp:null))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null))
   (routing-profile common-lisp:nil :type
    (common-lisp:or routing-profile-reference common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dimensions 'make-dimensions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimensions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimensions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile))
      (common-lisp:list
       (common-lisp:cons "RoutingProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimensions))
   common-lisp:nil))
(common-lisp:deftype dimensions-v2key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimensions-v2map () 'common-lisp:hash-table)
 (common-lisp:defun |make-dimensions-v2map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype dimensions-v2value () 'common-lisp:string)
(common-lisp:deftype directory-alias () 'common-lisp:string)
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:deftype directory-type () 'common-lisp:string)
(common-lisp:deftype directory-user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-approved-origin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-approved-origin-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (origin (common-lisp:error ":origin is required") :type
    (common-lisp:or origin common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-approved-origin-request
                    'make-disassociate-approved-origin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-approved-origin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-approved-origin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-approved-origin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-bot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-bot-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (lex-bot common-lisp:nil :type (common-lisp:or lex-bot common-lisp:null))
   (lex-v2bot common-lisp:nil :type
    (common-lisp:or lex-v2bot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-bot-request 'make-disassociate-bot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-bot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-bot))
      (common-lisp:list
       (common-lisp:cons "LexBot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-v2bot))
      (common-lisp:list
       (common-lisp:cons "LexV2Bot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-instance-storage-config-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-instance-storage-config-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or association-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or instance-storage-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-instance-storage-config-request
                    'make-disassociate-instance-storage-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-instance-storage-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-instance-storage-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-instance-storage-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-lambda-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-lambda-function-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (function-arn (common-lisp:error ":function-arn is required") :type
    (common-lisp:or function-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-lambda-function-request
                    'make-disassociate-lambda-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lambda-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lambda-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lambda-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-lex-bot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-lex-bot-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (bot-name (common-lisp:error ":bot-name is required") :type
    (common-lisp:or bot-name common-lisp:null))
   (lex-region (common-lisp:error ":lex-region is required") :type
    (common-lisp:or lex-region common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-lex-bot-request
                    'make-disassociate-lex-bot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lex-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lex-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-lex-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-phone-number-contact-flow-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-phone-number-contact-flow-request-"))
   (phone-number-id (common-lisp:error ":phone-number-id is required") :type
    (common-lisp:or phone-number-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-phone-number-contact-flow-request
                    'make-disassociate-phone-number-contact-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-phone-number-contact-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-phone-number-contact-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-phone-number-contact-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-queue-quick-connects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-queue-quick-connects-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (quick-connect-ids (common-lisp:error ":quick-connect-ids is required")
    :type (common-lisp:or quick-connects-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-queue-quick-connects-request
                    'make-disassociate-queue-quick-connects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-queue-quick-connects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-queue-quick-connects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-ids))
      (common-lisp:list
       (common-lisp:cons "QuickConnectIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-queue-quick-connects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-routing-profile-queues-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-routing-profile-queues-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (queue-references (common-lisp:error ":queue-references is required") :type
    (common-lisp:or routing-profile-queue-reference-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-routing-profile-queues-request
                    'make-disassociate-routing-profile-queues-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-routing-profile-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-routing-profile-queues-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-references))
      (common-lisp:list
       (common-lisp:cons "QueueReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-routing-profile-queues-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-security-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-security-key-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or association-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-security-key-request
                    'make-disassociate-security-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-security-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-security-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-security-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dismiss-user-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-dismiss-user-contact-request-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dismiss-user-contact-request
                    'make-dismiss-user-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dismiss-user-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dismiss-user-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dismiss-user-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dismiss-user-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-dismiss-user-contact-response-")))
 (common-lisp:export
  (common-lisp:list 'dismiss-user-contact-response
                    'make-dismiss-user-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dismiss-user-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dismiss-user-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dismiss-user-contact-response))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (distribution (:copier common-lisp:nil)
      (:conc-name "struct-shape-distribution-"))
   (region (common-lisp:error ":region is required") :type
    (common-lisp:or aws-region common-lisp:null))
   (percentage (common-lisp:error ":percentage is required") :type
    (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export (common-lisp:list 'distribution 'make-distribution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage))
      (common-lisp:list
       (common-lisp:cons "Percentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype distribution-list ()
   '(trivial-types:proper-list distribution))
 (common-lisp:defun |make-distribution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list distribution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition duplicate-resource-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-resource-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-resource-exception
                    'duplicate-resource-exception-message)))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (email-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-reference-"))
   (name common-lisp:nil :type (common-lisp:or reference-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or reference-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'email-reference 'make-email-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input email-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input email-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input email-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-config-"))
   (encryption-type (common-lisp:error ":encryption-type is required") :type
    (common-lisp:or encryption-type common-lisp:null))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-config 'make-encryption-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-config))
   common-lisp:nil))
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (evaluation-arn (common-lisp:error ":evaluation-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or evaluation-metadata common-lisp:null))
   (answers (common-lisp:error ":answers is required") :type
    (common-lisp:or evaluation-answers-output-map common-lisp:null))
   (notes (common-lisp:error ":notes is required") :type
    (common-lisp:or evaluation-notes-map common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or evaluation-status common-lisp:null))
   (scores common-lisp:nil :type
    (common-lisp:or evaluation-scores-map common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'evaluation 'make-evaluation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answers))
      (common-lisp:list
       (common-lisp:cons "Answers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scores))
      (common-lisp:list
       (common-lisp:cons "Scores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-answer-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-answer-data-"))
   (string-value common-lisp:nil :type
    (common-lisp:or evaluation-answer-data-string-value common-lisp:null))
   (numeric-value common-lisp:nil :type
    (common-lisp:or evaluation-answer-data-numeric-value common-lisp:null))
   (not-applicable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-answer-data 'make-evaluation-answer-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "StringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'numeric-value))
      (common-lisp:list
       (common-lisp:cons "NumericValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-applicable))
      (common-lisp:list
       (common-lisp:cons "NotApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-data))
   common-lisp:nil))
(common-lisp:deftype evaluation-answer-data-numeric-value ()
  'common-lisp:double-float)
(common-lisp:deftype evaluation-answer-data-string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-answer-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-answer-input-"))
   (value common-lisp:nil :type
    (common-lisp:or evaluation-answer-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-answer-input 'make-evaluation-answer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-answer-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-answer-output-"))
   (value common-lisp:nil :type
    (common-lisp:or evaluation-answer-data common-lisp:null))
   (system-suggested-value common-lisp:nil :type
    (common-lisp:or evaluation-answer-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-answer-output 'make-evaluation-answer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'system-suggested-value))
      (common-lisp:list
       (common-lisp:cons "SystemSuggestedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-answer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-answers-input-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-evaluation-answers-input-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype evaluation-answers-output-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-evaluation-answers-output-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-"))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null))
   (locked (common-lisp:error ":locked is required") :type
    (common-lisp:or evaluation-form-version-is-locked common-lisp:null))
   (evaluation-form-arn (common-lisp:error ":evaluation-form-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or evaluation-form-title common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or evaluation-form-description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or evaluation-form-version-status common-lisp:null))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or evaluation-form-items-list common-lisp:null))
   (scoring-strategy common-lisp:nil :type
    (common-lisp:or evaluation-form-scoring-strategy common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by (common-lisp:error ":created-by is required") :type
    (common-lisp:or arn common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (last-modified-by (common-lisp:error ":last-modified-by is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'evaluation-form 'make-evaluation-form))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-form))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-form))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locked))
      (common-lisp:list
       (common-lisp:cons "Locked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-strategy))
      (common-lisp:list
       (common-lisp:cons "ScoringStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-form))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-content-"))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-arn (common-lisp:error ":evaluation-form-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or evaluation-form-title common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or evaluation-form-description common-lisp:null))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or evaluation-form-items-list common-lisp:null))
   (scoring-strategy common-lisp:nil :type
    (common-lisp:or evaluation-form-scoring-strategy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-content 'make-evaluation-form-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-strategy))
      (common-lisp:list
       (common-lisp:cons "ScoringStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-content))
   common-lisp:nil))
(common-lisp:deftype evaluation-form-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-item-"))
   (section common-lisp:nil :type
    (common-lisp:or evaluation-form-section common-lisp:null))
   (question common-lisp:nil :type
    (common-lisp:or evaluation-form-question common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-item 'make-evaluation-form-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-form-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-form-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'section))
      (common-lisp:list
       (common-lisp:cons "Section"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question))
      (common-lisp:list
       (common-lisp:cons "Question"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-form-item))
   common-lisp:nil))
(common-lisp:deftype evaluation-form-item-weight () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype evaluation-form-items-list ()
   '(trivial-types:proper-list evaluation-form-item))
 (common-lisp:defun |make-evaluation-form-items-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-form-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-numeric-question-automation (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-numeric-question-automation-"))
   (property-value common-lisp:nil :type
    (common-lisp:or numeric-question-property-value-automation
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-numeric-question-automation
                    'make-evaluation-form-numeric-question-automation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-automation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-automation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-value))
      (common-lisp:list
       (common-lisp:cons "PropertyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-automation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-numeric-question-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-numeric-question-option-"))
   (min-value (common-lisp:error ":min-value is required") :type
    (common-lisp:or integer common-lisp:null))
   (max-value (common-lisp:error ":max-value is required") :type
    (common-lisp:or integer common-lisp:null))
   (score common-lisp:nil :type
    (common-lisp:or evaluation-form-question-answer-score common-lisp:null))
   (automatic-fail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-numeric-question-option
                    'make-evaluation-form-numeric-question-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-fail))
      (common-lisp:list
       (common-lisp:cons "AutomaticFail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-form-numeric-question-option-list ()
   '(trivial-types:proper-list evaluation-form-numeric-question-option))
 (common-lisp:defun |make-evaluation-form-numeric-question-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            evaluation-form-numeric-question-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-numeric-question-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-numeric-question-properties-"))
   (min-value (common-lisp:error ":min-value is required") :type
    (common-lisp:or integer common-lisp:null))
   (max-value (common-lisp:error ":max-value is required") :type
    (common-lisp:or integer common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or evaluation-form-numeric-question-option-list
                    common-lisp:null))
   (automation common-lisp:nil :type
    (common-lisp:or evaluation-form-numeric-question-automation
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-numeric-question-properties
                    'make-evaluation-form-numeric-question-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation))
      (common-lisp:list
       (common-lisp:cons "Automation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-numeric-question-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-question (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-question-"))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or evaluation-form-question-title common-lisp:null))
   (instructions common-lisp:nil :type
    (common-lisp:or evaluation-form-question-instructions common-lisp:null))
   (ref-id (common-lisp:error ":ref-id is required") :type
    (common-lisp:or reference-id common-lisp:null))
   (not-applicable-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (question-type (common-lisp:error ":question-type is required") :type
    (common-lisp:or evaluation-form-question-type common-lisp:null))
   (question-type-properties common-lisp:nil :type
    (common-lisp:or evaluation-form-question-type-properties common-lisp:null))
   (weight common-lisp:nil :type
    (common-lisp:or evaluation-form-item-weight common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-question 'make-evaluation-form-question))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-question))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-question))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instructions))
      (common-lisp:list
       (common-lisp:cons "Instructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ref-id))
      (common-lisp:list
       (common-lisp:cons "RefId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-applicable-enabled))
      (common-lisp:list
       (common-lisp:cons "NotApplicableEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-type))
      (common-lisp:list
       (common-lisp:cons "QuestionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'question-type-properties))
      (common-lisp:list
       (common-lisp:cons "QuestionTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-question))
   common-lisp:nil))
(common-lisp:deftype evaluation-form-question-answer-score ()
  'common-lisp:integer)
(common-lisp:deftype evaluation-form-question-instructions ()
  'common-lisp:string)
(common-lisp:deftype evaluation-form-question-title () 'common-lisp:string)
(common-lisp:deftype evaluation-form-question-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-question-type-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-question-type-properties-"))
   (numeric common-lisp:nil :type
    (common-lisp:or evaluation-form-numeric-question-properties
                    common-lisp:null))
   (single-select common-lisp:nil :type
    (common-lisp:or evaluation-form-single-select-question-properties
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-question-type-properties
                    'make-evaluation-form-question-type-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-question-type-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-question-type-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'numeric))
      (common-lisp:list
       (common-lisp:cons "Numeric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-select))
      (common-lisp:list
       (common-lisp:cons "SingleSelect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-question-type-properties))
   common-lisp:nil))
(common-lisp:deftype evaluation-form-scoring-mode () 'common-lisp:string)
(common-lisp:deftype evaluation-form-scoring-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-scoring-strategy (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-scoring-strategy-"))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or evaluation-form-scoring-mode common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or evaluation-form-scoring-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-scoring-strategy
                    'make-evaluation-form-scoring-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-scoring-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-scoring-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-scoring-strategy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-section (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-section-"))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or evaluation-form-section-title common-lisp:null))
   (ref-id (common-lisp:error ":ref-id is required") :type
    (common-lisp:or reference-id common-lisp:null))
   (instructions common-lisp:nil :type
    (common-lisp:or evaluation-form-question-instructions common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or evaluation-form-items-list common-lisp:null))
   (weight common-lisp:nil :type
    (common-lisp:or evaluation-form-item-weight common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-section 'make-evaluation-form-section))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-section))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-section))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ref-id))
      (common-lisp:list
       (common-lisp:cons "RefId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instructions))
      (common-lisp:list
       (common-lisp:cons "Instructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-section))
   common-lisp:nil))
(common-lisp:deftype evaluation-form-section-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-single-select-question-automation
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-evaluation-form-single-select-question-automation-"))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or
     evaluation-form-single-select-question-automation-option-list
     common-lisp:null))
   (default-option-ref-id common-lisp:nil :type
    (common-lisp:or reference-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-single-select-question-automation
                    'make-evaluation-form-single-select-question-automation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-automation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-automation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-option-ref-id))
      (common-lisp:list
       (common-lisp:cons "DefaultOptionRefId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-automation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-single-select-question-automation-option
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-evaluation-form-single-select-question-automation-option-"))
   (rule-category common-lisp:nil :type
    (common-lisp:or single-select-question-rule-category-automation
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-single-select-question-automation-option
                    'make-evaluation-form-single-select-question-automation-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-automation-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-automation-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-category))
      (common-lisp:list
       (common-lisp:cons "RuleCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-automation-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-form-single-select-question-automation-option-list
                      ()
   '(trivial-types:proper-list
     evaluation-form-single-select-question-automation-option))
 (common-lisp:defun |make-evaluation-form-single-select-question-automation-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            evaluation-form-single-select-question-automation-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype evaluation-form-single-select-question-display-mode ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-single-select-question-option (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-evaluation-form-single-select-question-option-"))
   (ref-id (common-lisp:error ":ref-id is required") :type
    (common-lisp:or reference-id common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or evaluation-form-single-select-question-option-text
                    common-lisp:null))
   (score common-lisp:nil :type
    (common-lisp:or evaluation-form-question-answer-score common-lisp:null))
   (automatic-fail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-single-select-question-option
                    'make-evaluation-form-single-select-question-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ref-id))
      (common-lisp:list
       (common-lisp:cons "RefId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-fail))
      (common-lisp:list
       (common-lisp:cons "AutomaticFail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-form-single-select-question-option-list ()
   '(trivial-types:proper-list evaluation-form-single-select-question-option))
 (common-lisp:defun |make-evaluation-form-single-select-question-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            evaluation-form-single-select-question-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype evaluation-form-single-select-question-option-text ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-single-select-question-properties
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-evaluation-form-single-select-question-properties-"))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or evaluation-form-single-select-question-option-list
                    common-lisp:null))
   (display-as common-lisp:nil :type
    (common-lisp:or evaluation-form-single-select-question-display-mode
                    common-lisp:null))
   (automation common-lisp:nil :type
    (common-lisp:or evaluation-form-single-select-question-automation
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-single-select-question-properties
                    'make-evaluation-form-single-select-question-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-as))
      (common-lisp:list
       (common-lisp:cons "DisplayAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation))
      (common-lisp:list
       (common-lisp:cons "Automation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-single-select-question-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-summary-"))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-arn (common-lisp:error ":evaluation-form-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or evaluation-form-title common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by (common-lisp:error ":created-by is required") :type
    (common-lisp:or arn common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (last-modified-by (common-lisp:error ":last-modified-by is required") :type
    (common-lisp:or arn common-lisp:null))
   (last-activated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-activated-by common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (latest-version (common-lisp:error ":latest-version is required") :type
    (common-lisp:or version-number common-lisp:null))
   (active-version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-summary 'make-evaluation-form-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-activated-time))
      (common-lisp:list
       (common-lisp:cons "LastActivatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-activated-by))
      (common-lisp:list
       (common-lisp:cons "LastActivatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-version))
      (common-lisp:list
       (common-lisp:cons "ActiveVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-form-summary-list ()
   '(trivial-types:proper-list evaluation-form-summary))
 (common-lisp:defun |make-evaluation-form-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-form-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype evaluation-form-title () 'common-lisp:string)
(common-lisp:deftype evaluation-form-version-is-locked () 'common-lisp:boolean)
(common-lisp:deftype evaluation-form-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-form-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-form-version-summary-"))
   (evaluation-form-arn (common-lisp:error ":evaluation-form-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null))
   (locked (common-lisp:error ":locked is required") :type
    (common-lisp:or evaluation-form-version-is-locked common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or evaluation-form-version-status common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by (common-lisp:error ":created-by is required") :type
    (common-lisp:or arn common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (last-modified-by (common-lisp:error ":last-modified-by is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-form-version-summary
                    'make-evaluation-form-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locked))
      (common-lisp:list
       (common-lisp:cons "Locked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-form-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-form-version-summary-list ()
   '(trivial-types:proper-list evaluation-form-version-summary))
 (common-lisp:defun |make-evaluation-form-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            evaluation-form-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-metadata-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (evaluator-arn (common-lisp:error ":evaluator-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (contact-agent-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (score common-lisp:nil :type
    (common-lisp:or evaluation-score common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-metadata 'make-evaluation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluator-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-agent-id))
      (common-lisp:list
       (common-lisp:cons "ContactAgentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-note (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-note-"))
   (value common-lisp:nil :type
    (common-lisp:or evaluation-note-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'evaluation-note 'make-evaluation-note))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-note))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-note))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-note))
   common-lisp:nil))
(common-lisp:deftype evaluation-note-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype evaluation-notes-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-evaluation-notes-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-score (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-score-"))
   (percentage common-lisp:nil :type
    (common-lisp:or evaluation-score-percentage common-lisp:null))
   (not-applicable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (automatic-fail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-score 'make-evaluation-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage))
      (common-lisp:list
       (common-lisp:cons "Percentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-applicable))
      (common-lisp:list
       (common-lisp:cons "NotApplicable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-fail))
      (common-lisp:list
       (common-lisp:cons "AutomaticFail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-score))
   common-lisp:nil))
(common-lisp:deftype evaluation-score-percentage () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype evaluation-scores-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-evaluation-scores-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype evaluation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-summary-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (evaluation-arn (common-lisp:error ":evaluation-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (evaluation-form-title
    (common-lisp:error ":evaluation-form-title is required") :type
    (common-lisp:or evaluation-form-title common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or evaluation-status common-lisp:null))
   (evaluator-arn (common-lisp:error ":evaluator-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (score common-lisp:nil :type
    (common-lisp:or evaluation-score common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-summary 'make-evaluation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-title))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluator-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-summary-list ()
   '(trivial-types:proper-list evaluation-summary))
 (common-lisp:defun |make-evaluation-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-bridge-action-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-bridge-action-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or event-bridge-action-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-bridge-action-definition
                    'make-event-bridge-action-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-action-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-action-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-action-definition))
   common-lisp:nil))
(common-lisp:deftype event-bridge-action-name () 'common-lisp:string)
(common-lisp:deftype event-source-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-v2-"))
   (filter-key common-lisp:nil :type
    (common-lisp:or resource-arn-or-id common-lisp:null))
   (filter-values common-lisp:nil :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter-v2 'make-filter-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-key))
      (common-lisp:list
       (common-lisp:cons "FilterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-values))
      (common-lisp:list
       (common-lisp:cons "FilterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list resource-arn-or-id))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn-or-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filters (:copier common-lisp:nil) (:conc-name "struct-shape-filters-"))
   (queues common-lisp:nil :type (common-lisp:or queues common-lisp:null))
   (channels common-lisp:nil :type (common-lisp:or channels common-lisp:null))
   (routing-profiles common-lisp:nil :type
    (common-lisp:or routing-profiles common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filters 'make-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queues))
      (common-lisp:list
       (common-lisp:cons "Queues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profiles))
      (common-lisp:list
       (common-lisp:cons "RoutingProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filters-v2list () '(trivial-types:proper-list filter-v2))
 (common-lisp:defun |make-filters-v2list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-v2))
   aws-sdk/generator/shape::members))
(common-lisp:deftype function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype function-arns-list ()
   '(trivial-types:proper-list function-arn))
 (common-lisp:defun |make-function-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-attributes-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (initial-contact-id (common-lisp:error ":initial-contact-id is required")
    :type (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-attributes-request
                    'make-get-contact-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-attributes-response
                    'make-get-contact-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-current-metric-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-current-metric-data-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filters common-lisp:null))
   (groupings common-lisp:nil :type
    (common-lisp:or groupings common-lisp:null))
   (current-metrics (common-lisp:error ":current-metrics is required") :type
    (common-lisp:or current-metrics common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or current-metric-sort-criteria-max-one common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-current-metric-data-request
                    'make-get-current-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-current-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-current-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groupings))
      (common-lisp:list
       (common-lisp:cons "Groupings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-metrics))
      (common-lisp:list
       (common-lisp:cons "CurrentMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-current-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-current-metric-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-current-metric-data-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (metric-results common-lisp:nil :type
    (common-lisp:or current-metric-results common-lisp:null))
   (data-snapshot-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (approximate-total-count common-lisp:nil :type
    (common-lisp:or approximate-total-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-current-metric-data-response
                    'make-get-current-metric-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-current-metric-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-current-metric-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-results))
      (common-lisp:list
       (common-lisp:cons "MetricResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-snapshot-time))
      (common-lisp:list
       (common-lisp:cons "DataSnapshotTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-total-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateTotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-current-metric-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-current-user-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-current-user-data-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or user-data-filters common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-current-user-data-request
                    'make-get-current-user-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-current-user-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-current-user-data-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (user-data-list common-lisp:nil :type
    (common-lisp:or user-data-list common-lisp:null))
   (approximate-total-count common-lisp:nil :type
    (common-lisp:or approximate-total-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-current-user-data-response
                    'make-get-current-user-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data-list))
      (common-lisp:list
       (common-lisp:cons "UserDataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-total-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateTotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-federation-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-federation-token-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-federation-token-request
                    'make-get-federation-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-federation-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-federation-token-response-"))
   (credentials common-lisp:nil :type
    (common-lisp:or credentials common-lisp:null))
   (sign-in-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (user-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (user-id common-lisp:nil :type
    (common-lisp:or agent-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-federation-token-response
                    'make-get-federation-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-in-url))
      (common-lisp:list
       (common-lisp:cons "SignInUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-federation-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-metric-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-metric-data-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filters common-lisp:null))
   (groupings common-lisp:nil :type
    (common-lisp:or groupings common-lisp:null))
   (historical-metrics (common-lisp:error ":historical-metrics is required")
    :type (common-lisp:or historical-metrics common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-metric-data-request 'make-get-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groupings))
      (common-lisp:list
       (common-lisp:cons "Groupings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'historical-metrics))
      (common-lisp:list
       (common-lisp:cons "HistoricalMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-metric-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-metric-data-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (metric-results common-lisp:nil :type
    (common-lisp:or historical-metric-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-metric-data-response 'make-get-metric-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-results))
      (common-lisp:list
       (common-lisp:cons "MetricResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-metric-data-v2request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-metric-data-v2request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filters-v2list common-lisp:null))
   (groupings common-lisp:nil :type
    (common-lisp:or groupings-v2 common-lisp:null))
   (metrics (common-lisp:error ":metrics is required") :type
    (common-lisp:or metrics-v2 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-metric-data-v2request
                    'make-get-metric-data-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groupings))
      (common-lisp:list
       (common-lisp:cons "Groupings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-metric-data-v2response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-metric-data-v2response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (metric-results common-lisp:nil :type
    (common-lisp:or metric-results-v2 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-metric-data-v2response
                    'make-get-metric-data-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-results))
      (common-lisp:list
       (common-lisp:cons "MetricResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-metric-data-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-task-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-task-template-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (task-template-id (common-lisp:error ":task-template-id is required") :type
    (common-lisp:or task-template-id common-lisp:null))
   (snapshot-version common-lisp:nil :type
    (common-lisp:or snapshot-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-task-template-request
                    'make-get-task-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-task-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-task-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-task-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-task-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-task-template-response-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or task-template-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or task-template-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or task-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-template-description common-lisp:null))
   (contact-flow-id common-lisp:nil :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or task-template-constraints common-lisp:null))
   (defaults common-lisp:nil :type
    (common-lisp:or task-template-defaults common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or task-template-fields common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-template-status common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-task-template-response
                    'make-get-task-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-task-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-task-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defaults))
      (common-lisp:list
       (common-lisp:cons "Defaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-task-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-distribution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-traffic-distribution-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-distribution-group-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-distribution-request
                    'make-get-traffic-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-distribution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-traffic-distribution-response-"))
   (telephony-config common-lisp:nil :type
    (common-lisp:or telephony-config common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-id common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-distribution-response
                    'make-get-traffic-distribution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-distribution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-distribution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telephony-config))
      (common-lisp:list
       (common-lisp:cons "TelephonyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-distribution-response))
   common-lisp:nil))
(common-lisp:deftype grouping () 'common-lisp:string)
(common-lisp:deftype grouping-v2 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype groupings () '(trivial-types:proper-list grouping))
 (common-lisp:defun |make-groupings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grouping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype groupings-v2 () '(trivial-types:proper-list grouping-v2))
 (common-lisp:defun |make-groupings-v2|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grouping-v2))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-group-"))
   (id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or hierarchy-group-name common-lisp:null))
   (level-id common-lisp:nil :type
    (common-lisp:or hierarchy-level-id common-lisp:null))
   (hierarchy-path common-lisp:nil :type
    (common-lisp:or hierarchy-path common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hierarchy-group 'make-hierarchy-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hierarchy-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hierarchy-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-id))
      (common-lisp:list
       (common-lisp:cons "LevelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-path))
      (common-lisp:list
       (common-lisp:cons "HierarchyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hierarchy-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-group-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-group-condition-"))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (hierarchy-group-match-type common-lisp:nil :type
    (common-lisp:or hierarchy-group-match-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-group-condition
                    'make-hierarchy-group-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hierarchy-group-match-type))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroupMatchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-condition))
   common-lisp:nil))
(common-lisp:deftype hierarchy-group-id () 'common-lisp:string)
(common-lisp:deftype hierarchy-group-match-type () 'common-lisp:string)
(common-lisp:deftype hierarchy-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-group-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or hierarchy-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-group-summary 'make-hierarchy-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hierarchy-group-summary-list ()
   '(trivial-types:proper-list hierarchy-group-summary))
 (common-lisp:defun |make-hierarchy-group-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hierarchy-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-group-summary-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-group-summary-reference-"))
   (id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-group-summary-reference
                    'make-hierarchy-group-summary-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-summary-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-summary-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-group-summary-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-level (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-level-"))
   (id common-lisp:nil :type
    (common-lisp:or hierarchy-level-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or hierarchy-level-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hierarchy-level 'make-hierarchy-level))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hierarchy-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hierarchy-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hierarchy-level))
   common-lisp:nil))
(common-lisp:deftype hierarchy-level-id () 'common-lisp:string)
(common-lisp:deftype hierarchy-level-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-level-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-level-update-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or hierarchy-level-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-level-update 'make-hierarchy-level-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-level-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-level-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-level-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-path (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-path-"))
   (level-one common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary common-lisp:null))
   (level-two common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary common-lisp:null))
   (level-three common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary common-lisp:null))
   (level-four common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary common-lisp:null))
   (level-five common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hierarchy-path 'make-hierarchy-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hierarchy-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hierarchy-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-one))
      (common-lisp:list
       (common-lisp:cons "LevelOne"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-two))
      (common-lisp:list
       (common-lisp:cons "LevelTwo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-three))
      (common-lisp:list
       (common-lisp:cons "LevelThree"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-four))
      (common-lisp:list
       (common-lisp:cons "LevelFour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-five))
      (common-lisp:list
       (common-lisp:cons "LevelFive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hierarchy-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-path-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-path-reference-"))
   (level-one common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary-reference common-lisp:null))
   (level-two common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary-reference common-lisp:null))
   (level-three common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary-reference common-lisp:null))
   (level-four common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary-reference common-lisp:null))
   (level-five common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-path-reference 'make-hierarchy-path-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-path-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-path-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-one))
      (common-lisp:list
       (common-lisp:cons "LevelOne"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-two))
      (common-lisp:list
       (common-lisp:cons "LevelTwo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-three))
      (common-lisp:list
       (common-lisp:cons "LevelThree"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-four))
      (common-lisp:list
       (common-lisp:cons "LevelFour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-five))
      (common-lisp:list
       (common-lisp:cons "LevelFive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-path-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-structure (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-structure-"))
   (level-one common-lisp:nil :type
    (common-lisp:or hierarchy-level common-lisp:null))
   (level-two common-lisp:nil :type
    (common-lisp:or hierarchy-level common-lisp:null))
   (level-three common-lisp:nil :type
    (common-lisp:or hierarchy-level common-lisp:null))
   (level-four common-lisp:nil :type
    (common-lisp:or hierarchy-level common-lisp:null))
   (level-five common-lisp:nil :type
    (common-lisp:or hierarchy-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-structure 'make-hierarchy-structure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hierarchy-structure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hierarchy-structure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-one))
      (common-lisp:list
       (common-lisp:cons "LevelOne"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-two))
      (common-lisp:list
       (common-lisp:cons "LevelTwo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-three))
      (common-lisp:list
       (common-lisp:cons "LevelThree"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-four))
      (common-lisp:list
       (common-lisp:cons "LevelFour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-five))
      (common-lisp:list
       (common-lisp:cons "LevelFive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hierarchy-structure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hierarchy-structure-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-hierarchy-structure-update-"))
   (level-one common-lisp:nil :type
    (common-lisp:or hierarchy-level-update common-lisp:null))
   (level-two common-lisp:nil :type
    (common-lisp:or hierarchy-level-update common-lisp:null))
   (level-three common-lisp:nil :type
    (common-lisp:or hierarchy-level-update common-lisp:null))
   (level-four common-lisp:nil :type
    (common-lisp:or hierarchy-level-update common-lisp:null))
   (level-five common-lisp:nil :type
    (common-lisp:or hierarchy-level-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-structure-update
                    'make-hierarchy-structure-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-structure-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-structure-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-one))
      (common-lisp:list
       (common-lisp:cons "LevelOne"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-two))
      (common-lisp:list
       (common-lisp:cons "LevelTwo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-three))
      (common-lisp:list
       (common-lisp:cons "LevelThree"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-four))
      (common-lisp:list
       (common-lisp:cons "LevelFour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level-five))
      (common-lisp:list
       (common-lisp:cons "LevelFive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hierarchy-structure-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (historical-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-historical-metric-"))
   (name common-lisp:nil :type
    (common-lisp:or historical-metric-name common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or threshold common-lisp:null))
   (statistic common-lisp:nil :type
    (common-lisp:or statistic common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'historical-metric 'make-historical-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input historical-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input historical-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input historical-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (historical-metric-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-historical-metric-data-"))
   (metric common-lisp:nil :type
    (common-lisp:or historical-metric common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'historical-metric-data 'make-historical-metric-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          historical-metric-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          historical-metric-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          historical-metric-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype historical-metric-data-collections ()
   '(trivial-types:proper-list historical-metric-data))
 (common-lisp:defun |make-historical-metric-data-collections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list historical-metric-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype historical-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (historical-metric-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-historical-metric-result-"))
   (dimensions common-lisp:nil :type
    (common-lisp:or dimensions common-lisp:null))
   (collections common-lisp:nil :type
    (common-lisp:or historical-metric-data-collections common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'historical-metric-result 'make-historical-metric-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          historical-metric-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          historical-metric-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collections))
      (common-lisp:list
       (common-lisp:cons "Collections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          historical-metric-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype historical-metric-results ()
   '(trivial-types:proper-list historical-metric-result))
 (common-lisp:defun |make-historical-metric-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            historical-metric-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype historical-metrics ()
   '(trivial-types:proper-list historical-metric))
 (common-lisp:defun |make-historical-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list historical-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hours () 'common-lisp:integer)
(common-lisp:deftype hours24format () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (hours-of-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-hours-of-operation-"))
   (hours-of-operation-id common-lisp:nil :type
    (common-lisp:or hours-of-operation-id common-lisp:null))
   (hours-of-operation-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or common-name-length127 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or hours-of-operation-description common-lisp:null))
   (time-zone common-lisp:nil :type
    (common-lisp:or time-zone common-lisp:null))
   (config common-lisp:nil :type
    (common-lisp:or hours-of-operation-config-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hours-of-operation 'make-hours-of-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hours-of-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hours-of-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hours-of-operation-id))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hours-of-operation-arn))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hours-of-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hours-of-operation-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-hours-of-operation-config-"))
   (day (common-lisp:error ":day is required") :type
    (common-lisp:or hours-of-operation-days common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or hours-of-operation-time-slice common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or hours-of-operation-time-slice common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hours-of-operation-config
                    'make-hours-of-operation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day))
      (common-lisp:list
       (common-lisp:cons "Day"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hours-of-operation-config-list ()
   '(trivial-types:proper-list hours-of-operation-config))
 (common-lisp:defun |make-hours-of-operation-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hours-of-operation-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hours-of-operation-days () 'common-lisp:string)
(common-lisp:deftype hours-of-operation-description () 'common-lisp:string)
(common-lisp:deftype hours-of-operation-id () 'common-lisp:string)
(common-lisp:deftype hours-of-operation-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hours-of-operation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-hours-of-operation-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or hours-of-operation-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or hours-of-operation-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hours-of-operation-summary
                    'make-hours-of-operation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hours-of-operation-summary-list ()
   '(trivial-types:proper-list hours-of-operation-summary))
 (common-lisp:defun |make-hours-of-operation-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hours-of-operation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hours-of-operation-time-slice (:copier common-lisp:nil)
      (:conc-name "struct-shape-hours-of-operation-time-slice-"))
   (hours (common-lisp:error ":hours is required") :type
    (common-lisp:or hours24format common-lisp:null))
   (minutes (common-lisp:error ":minutes is required") :type
    (common-lisp:or minutes-limit60 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hours-of-operation-time-slice
                    'make-hours-of-operation-time-slice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-time-slice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-time-slice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hours))
      (common-lisp:list
       (common-lisp:cons "Hours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minutes))
      (common-lisp:list
       (common-lisp:cons "Minutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hours-of-operation-time-slice))
   common-lisp:nil))
(common-lisp:deftype iso8601datetime () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotency-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotency-exception 'idempotency-exception-message)))
(common-lisp:deftype inbound-calls-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (instance (:copier common-lisp:nil) (:conc-name "struct-shape-instance-"))
   (id common-lisp:nil :type (common-lisp:or instance-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (identity-management-type common-lisp:nil :type
    (common-lisp:or directory-type common-lisp:null))
   (instance-alias common-lisp:nil :type
    (common-lisp:or directory-alias common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (service-role common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (instance-status common-lisp:nil :type
    (common-lisp:or instance-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or instance-status-reason common-lisp:null))
   (inbound-calls-enabled common-lisp:nil :type
    (common-lisp:or inbound-calls-enabled common-lisp:null))
   (outbound-calls-enabled common-lisp:nil :type
    (common-lisp:or outbound-calls-enabled common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-management-type))
      (common-lisp:list
       (common-lisp:cons "IdentityManagementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-alias))
      (common-lisp:list
       (common-lisp:cons "InstanceAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-status))
      (common-lisp:list
       (common-lisp:cons "InstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inbound-calls-enabled))
      (common-lisp:list
       (common-lisp:cons "InboundCallsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-calls-enabled))
      (common-lisp:list
       (common-lisp:cons "OutboundCallsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:deftype instance-arn () 'common-lisp:string)
(common-lisp:deftype instance-attribute-type () 'common-lisp:string)
(common-lisp:deftype instance-attribute-value () 'common-lisp:string)
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype instance-id-or-arn () 'common-lisp:string)
(common-lisp:deftype instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-status-reason (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-status-reason-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-status-reason 'make-instance-status-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-reason))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-storage-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-storage-config-"))
   (association-id common-lisp:nil :type
    (common-lisp:or association-id common-lisp:null))
   (storage-type (common-lisp:error ":storage-type is required") :type
    (common-lisp:or storage-type common-lisp:null))
   (s3config common-lisp:nil :type (common-lisp:or s3config common-lisp:null))
   (kinesis-video-stream-config common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-config common-lisp:null))
   (kinesis-stream-config common-lisp:nil :type
    (common-lisp:or kinesis-stream-config common-lisp:null))
   (kinesis-firehose-config common-lisp:nil :type
    (common-lisp:or kinesis-firehose-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-storage-config 'make-instance-storage-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-storage-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-storage-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3config))
      (common-lisp:list
       (common-lisp:cons "S3Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-config))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-stream-config))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-config))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-storage-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-storage-configs ()
   '(trivial-types:proper-list instance-storage-config))
 (common-lisp:defun |make-instance-storage-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-storage-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-storage-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-summary-"))
   (id common-lisp:nil :type (common-lisp:or instance-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (identity-management-type common-lisp:nil :type
    (common-lisp:or directory-type common-lisp:null))
   (instance-alias common-lisp:nil :type
    (common-lisp:or directory-alias common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (service-role common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (instance-status common-lisp:nil :type
    (common-lisp:or instance-status common-lisp:null))
   (inbound-calls-enabled common-lisp:nil :type
    (common-lisp:or inbound-calls-enabled common-lisp:null))
   (outbound-calls-enabled common-lisp:nil :type
    (common-lisp:or outbound-calls-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-summary 'make-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-management-type))
      (common-lisp:list
       (common-lisp:cons "IdentityManagementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-alias))
      (common-lisp:list
       (common-lisp:cons "InstanceAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-status))
      (common-lisp:list
       (common-lisp:cons "InstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inbound-calls-enabled))
      (common-lisp:list
       (common-lisp:cons "InboundCallsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-calls-enabled))
      (common-lisp:list
       (common-lisp:cons "OutboundCallsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-summary-list ()
   '(trivial-types:proper-list instance-summary))
 (common-lisp:defun |make-instance-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-count () 'common-lisp:integer)
(common-lisp:deftype integration-association-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (integration-association-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-integration-association-summary-"))
   (integration-association-id common-lisp:nil :type
    (common-lisp:or integration-association-id common-lisp:null))
   (integration-association-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (integration-type common-lisp:nil :type
    (common-lisp:or integration-type common-lisp:null))
   (integration-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (source-application-url common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (source-application-name common-lisp:nil :type
    (common-lisp:or source-application-name common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'integration-association-summary
                    'make-integration-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integration-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integration-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-association-id))
      (common-lisp:list
       (common-lisp:cons "IntegrationAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-association-arn))
      (common-lisp:list
       (common-lisp:cons "IntegrationAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-type))
      (common-lisp:list
       (common-lisp:cons "IntegrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-arn))
      (common-lisp:list
       (common-lisp:cons "IntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-application-url))
      (common-lisp:list
       (common-lisp:cons "SourceApplicationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-application-name))
      (common-lisp:list
       (common-lisp:cons "SourceApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integration-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integration-association-summary-list ()
   '(trivial-types:proper-list integration-association-summary))
 (common-lisp:defun |make-integration-association-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            integration-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-contact-flow-exception
     (connect-error)
     ((problems :initarg :problems :initform common-lisp:nil :reader
       invalid-contact-flow-exception-problems)))
 (common-lisp:export
  (common-lisp:list 'invalid-contact-flow-exception
                    'invalid-contact-flow-exception-problems)))
(common-lisp:progn
 (common-lisp:define-condition invalid-contact-flow-module-exception
     (connect-error)
     ((problems :initarg :problems :initform common-lisp:nil :reader
       invalid-contact-flow-module-exception-problems)))
 (common-lisp:export
  (common-lisp:list 'invalid-contact-flow-module-exception
                    'invalid-contact-flow-module-exception-problems)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (invisible-field-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-invisible-field-info-"))
   (id common-lisp:nil :type
    (common-lisp:or task-template-field-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invisible-field-info 'make-invisible-field-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invisible-field-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invisible-field-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invisible-field-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invisible-task-template-fields ()
   '(trivial-types:proper-list invisible-field-info))
 (common-lisp:defun |make-invisible-task-template-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invisible-field-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-config-"))
   (firehose-arn (common-lisp:error ":firehose-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-config 'make-kinesis-firehose-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firehose-arn))
      (common-lisp:list
       (common-lisp:cons "FirehoseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-stream-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-stream-config-"))
   (stream-arn (common-lisp:error ":stream-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-stream-config 'make-kinesis-stream-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-stream-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-stream-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-stream-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-video-stream-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-video-stream-config-"))
   (prefix (common-lisp:error ":prefix is required") :type
    (common-lisp:or prefix common-lisp:null))
   (retention-period-hours
    (common-lisp:error ":retention-period-hours is required") :type
    (common-lisp:or hours common-lisp:null))
   (encryption-config (common-lisp:error ":encryption-config is required")
    :type (common-lisp:or encryption-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream-config
                    'make-kinesis-video-stream-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-hours))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-config))
   common-lisp:nil))
(common-lisp:deftype large-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lex-bot (:copier common-lisp:nil) (:conc-name "struct-shape-lex-bot-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or bot-name common-lisp:null))
   (lex-region (common-lisp:error ":lex-region is required") :type
    (common-lisp:or lex-region common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lex-bot 'make-lex-bot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lex-bot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lex-bot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-region))
      (common-lisp:list
       (common-lisp:cons "LexRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lex-bot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lex-bot-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-lex-bot-config-"))
   (lex-bot common-lisp:nil :type (common-lisp:or lex-bot common-lisp:null))
   (lex-v2bot common-lisp:nil :type
    (common-lisp:or lex-v2bot common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lex-bot-config 'make-lex-bot-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lex-bot-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lex-bot-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-bot))
      (common-lisp:list
       (common-lisp:cons "LexBot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-v2bot))
      (common-lisp:list
       (common-lisp:cons "LexV2Bot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lex-bot-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lex-bot-config-list ()
   '(trivial-types:proper-list lex-bot-config))
 (common-lisp:defun |make-lex-bot-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lex-bot-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype lex-bots-list () '(trivial-types:proper-list lex-bot))
 (common-lisp:defun |make-lex-bots-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lex-bot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lex-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lex-v2bot (:copier common-lisp:nil)
      (:conc-name "struct-shape-lex-v2bot-"))
   (alias-arn common-lisp:nil :type
    (common-lisp:or alias-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lex-v2bot 'make-lex-v2bot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lex-v2bot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lex-v2bot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-arn))
      (common-lisp:list
       (common-lisp:cons "AliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lex-v2bot))
   common-lisp:nil))
(common-lisp:deftype lex-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-status-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null))
   (agent-status-types common-lisp:nil :type
    (common-lisp:or agent-status-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-status-request
                    'make-list-agent-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agent-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agent-status-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (agent-status-summary-list common-lisp:nil :type
    (common-lisp:or agent-status-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agent-status-response
                    'make-list-agent-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-status-summary-list))
      (common-lisp:list
       (common-lisp:cons "AgentStatusSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agent-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-approved-origins-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-approved-origins-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result25 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-approved-origins-request
                    'make-list-approved-origins-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-approved-origins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-approved-origins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-approved-origins-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-approved-origins-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-approved-origins-response-"))
   (origins common-lisp:nil :type
    (common-lisp:or origins-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-approved-origins-response
                    'make-list-approved-origins-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-approved-origins-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-approved-origins-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origins))
      (common-lisp:list
       (common-lisp:cons "Origins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-approved-origins-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-bots-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result25 common-lisp:null))
   (lex-version (common-lisp:error ":lex-version is required") :type
    (common-lisp:or lex-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bots-request 'make-list-bots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bots-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-bots-response-"))
   (lex-bots common-lisp:nil :type
    (common-lisp:or lex-bot-config-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bots-response 'make-list-bots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-bots))
      (common-lisp:list
       (common-lisp:cons "LexBots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-evaluations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-evaluations-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-evaluations-request
                    'make-list-contact-evaluations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-evaluations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-evaluations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-evaluations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-evaluations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-evaluations-response-"))
   (evaluation-summary-list
    (common-lisp:error ":evaluation-summary-list is required") :type
    (common-lisp:or evaluation-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-evaluations-response
                    'make-list-contact-evaluations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-evaluations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-evaluations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-summary-list))
      (common-lisp:list
       (common-lisp:cons "EvaluationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-evaluations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-flow-modules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-flow-modules-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null))
   (contact-flow-module-state common-lisp:nil :type
    (common-lisp:or contact-flow-module-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-flow-modules-request
                    'make-list-contact-flow-modules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flow-modules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flow-modules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flow-modules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-flow-modules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-flow-modules-response-"))
   (contact-flow-modules-summary-list common-lisp:nil :type
    (common-lisp:or contact-flow-modules-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-flow-modules-response
                    'make-list-contact-flow-modules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flow-modules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flow-modules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-flow-modules-summary-list))
      (common-lisp:list
       (common-lisp:cons "ContactFlowModulesSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flow-modules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-flows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-flows-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-types common-lisp:nil :type
    (common-lisp:or contact-flow-types common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-flows-request
                    'make-list-contact-flows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-flows-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-flows-response-"))
   (contact-flow-summary-list common-lisp:nil :type
    (common-lisp:or contact-flow-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-flows-response
                    'make-list-contact-flows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-flow-summary-list))
      (common-lisp:list
       (common-lisp:cons "ContactFlowSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-flows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-references-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-references-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (reference-types (common-lisp:error ":reference-types is required") :type
    (common-lisp:or reference-types common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-references-request
                    'make-list-contact-references-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-references-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-references-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-references-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-references-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-references-response-"))
   (reference-summary-list common-lisp:nil :type
    (common-lisp:or reference-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-references-response
                    'make-list-contact-references-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-references-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-references-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-summary-list))
      (common-lisp:list
       (common-lisp:cons "ReferenceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-references-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-default-vocabularies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-default-vocabularies-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or vocabulary-language-code common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or vocabulary-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-default-vocabularies-request
                    'make-list-default-vocabularies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-default-vocabularies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-default-vocabularies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-default-vocabularies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-default-vocabularies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-default-vocabularies-response-"))
   (default-vocabulary-list
    (common-lisp:error ":default-vocabulary-list is required") :type
    (common-lisp:or default-vocabulary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or vocabulary-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-default-vocabularies-response
                    'make-list-default-vocabularies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-default-vocabularies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-default-vocabularies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-vocabulary-list))
      (common-lisp:list
       (common-lisp:cons "DefaultVocabularyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-default-vocabularies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-evaluation-form-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-evaluation-form-versions-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-evaluation-form-versions-request
                    'make-list-evaluation-form-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-form-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-form-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-form-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-evaluation-form-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-evaluation-form-versions-response-"))
   (evaluation-form-version-summary-list
    (common-lisp:error ":evaluation-form-version-summary-list is required")
    :type
    (common-lisp:or evaluation-form-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-evaluation-form-versions-response
                    'make-list-evaluation-form-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-form-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-form-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version-summary-list))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-form-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-evaluation-forms-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-evaluation-forms-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-evaluation-forms-request
                    'make-list-evaluation-forms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-forms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-evaluation-forms-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-evaluation-forms-response-"))
   (evaluation-form-summary-list
    (common-lisp:error ":evaluation-form-summary-list is required") :type
    (common-lisp:or evaluation-form-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-evaluation-forms-response
                    'make-list-evaluation-forms-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-forms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-forms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-summary-list))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-evaluation-forms-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hours-of-operations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hours-of-operations-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hours-of-operations-request
                    'make-list-hours-of-operations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hours-of-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hours-of-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hours-of-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hours-of-operations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hours-of-operations-response-"))
   (hours-of-operation-summary-list common-lisp:nil :type
    (common-lisp:or hours-of-operation-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hours-of-operations-response
                    'make-list-hours-of-operations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hours-of-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hours-of-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hours-of-operation-summary-list))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hours-of-operations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-attributes-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result7 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-attributes-request
                    'make-list-instance-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-attributes-response
                    'make-list-instance-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-storage-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-storage-configs-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or instance-storage-resource-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result10 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-storage-configs-request
                    'make-list-instance-storage-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-storage-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-storage-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-storage-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-storage-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-storage-configs-response-"))
   (storage-configs common-lisp:nil :type
    (common-lisp:or instance-storage-configs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-storage-configs-response
                    'make-list-instance-storage-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-storage-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-storage-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-configs))
      (common-lisp:list
       (common-lisp:cons "StorageConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-storage-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instances-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result10 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instances-request 'make-list-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instances-response-"))
   (instance-summary-list common-lisp:nil :type
    (common-lisp:or instance-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instances-response 'make-list-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-summary-list))
      (common-lisp:list
       (common-lisp:cons "InstanceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-integration-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-integration-associations-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (integration-type common-lisp:nil :type
    (common-lisp:or integration-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-integration-associations-request
                    'make-list-integration-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-integration-associations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-integration-associations-response-"))
   (integration-association-summary-list common-lisp:nil :type
    (common-lisp:or integration-association-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-integration-associations-response
                    'make-list-integration-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-association-summary-list))
      (common-lisp:list
       (common-lisp:cons "IntegrationAssociationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lambda-functions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lambda-functions-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result25 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lambda-functions-request
                    'make-list-lambda-functions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lambda-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lambda-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lambda-functions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lambda-functions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lambda-functions-response-"))
   (lambda-functions common-lisp:nil :type
    (common-lisp:or function-arns-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lambda-functions-response
                    'make-list-lambda-functions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lambda-functions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lambda-functions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-functions))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lambda-functions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lex-bots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lex-bots-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result25 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lex-bots-request 'make-list-lex-bots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lex-bots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lex-bots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lex-bots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lex-bots-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lex-bots-response-"))
   (lex-bots common-lisp:nil :type
    (common-lisp:or lex-bots-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lex-bots-response 'make-list-lex-bots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lex-bots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lex-bots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lex-bots))
      (common-lisp:list
       (common-lisp:cons "LexBots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lex-bots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-phone-numbers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-phone-numbers-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (phone-number-types common-lisp:nil :type
    (common-lisp:or phone-number-types common-lisp:null))
   (phone-number-country-codes common-lisp:nil :type
    (common-lisp:or phone-number-country-codes common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-phone-numbers-request
                    'make-list-phone-numbers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-phone-numbers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-phone-numbers-response-"))
   (phone-number-summary-list common-lisp:nil :type
    (common-lisp:or phone-number-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-phone-numbers-response
                    'make-list-phone-numbers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-summary-list))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-phone-numbers-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-phone-numbers-summary-"))
   (phone-number-id common-lisp:nil :type
    (common-lisp:or phone-number-id common-lisp:null))
   (phone-number-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (phone-number-country-code common-lisp:nil :type
    (common-lisp:or phone-number-country-code common-lisp:null))
   (phone-number-type common-lisp:nil :type
    (common-lisp:or phone-number-type common-lisp:null))
   (target-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-phone-numbers-summary
                    'make-list-phone-numbers-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-country-code))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-type))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-phone-numbers-summary-list ()
   '(trivial-types:proper-list list-phone-numbers-summary))
 (common-lisp:defun |make-list-phone-numbers-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-phone-numbers-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-phone-numbers-v2request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-phone-numbers-v2request-"))
   (target-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or large-next-token common-lisp:null))
   (phone-number-country-codes common-lisp:nil :type
    (common-lisp:or phone-number-country-codes common-lisp:null))
   (phone-number-types common-lisp:nil :type
    (common-lisp:or phone-number-types common-lisp:null))
   (phone-number-prefix common-lisp:nil :type
    (common-lisp:or phone-number-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-phone-numbers-v2request
                    'make-list-phone-numbers-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-country-codes))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberCountryCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-types))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-prefix))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-phone-numbers-v2response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-phone-numbers-v2response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or large-next-token common-lisp:null))
   (list-phone-numbers-summary-list common-lisp:nil :type
    (common-lisp:or list-phone-numbers-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-phone-numbers-v2response
                    'make-list-phone-numbers-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-phone-numbers-summary-list))
      (common-lisp:list
       (common-lisp:cons "ListPhoneNumbersSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-phone-numbers-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-prompts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-prompts-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-prompts-request 'make-list-prompts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-prompts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-prompts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-prompts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-prompts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-prompts-response-"))
   (prompt-summary-list common-lisp:nil :type
    (common-lisp:or prompt-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-prompts-response 'make-list-prompts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-prompts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-prompts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prompt-summary-list))
      (common-lisp:list
       (common-lisp:cons "PromptSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-prompts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-queue-quick-connects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-queue-quick-connects-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-queue-quick-connects-request
                    'make-list-queue-quick-connects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-queue-quick-connects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-queue-quick-connects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-queue-quick-connects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-queue-quick-connects-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-queue-quick-connects-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (quick-connect-summary-list common-lisp:nil :type
    (common-lisp:or quick-connect-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-queue-quick-connects-response
                    'make-list-queue-quick-connects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-queue-quick-connects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-queue-quick-connects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quick-connect-summary-list))
      (common-lisp:list
       (common-lisp:cons "QuickConnectSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-queue-quick-connects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-queues-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-queues-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-types common-lisp:nil :type
    (common-lisp:or queue-types common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-queues-request 'make-list-queues-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-queues-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-queues-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-queues-response-"))
   (queue-summary-list common-lisp:nil :type
    (common-lisp:or queue-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-queues-response 'make-list-queues-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-queues-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-queues-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-summary-list))
      (common-lisp:list
       (common-lisp:cons "QueueSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-queues-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-quick-connects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-quick-connects-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null))
   (quick-connect-types common-lisp:nil :type
    (common-lisp:or quick-connect-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-quick-connects-request
                    'make-list-quick-connects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-connects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-connects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-connects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-quick-connects-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-quick-connects-response-"))
   (quick-connect-summary-list common-lisp:nil :type
    (common-lisp:or quick-connect-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-quick-connects-response
                    'make-list-quick-connects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-connects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-connects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quick-connect-summary-list))
      (common-lisp:list
       (common-lisp:cons "QuickConnectSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-connects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-routing-profile-queues-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-routing-profile-queues-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-routing-profile-queues-request
                    'make-list-routing-profile-queues-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profile-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profile-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profile-queues-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-routing-profile-queues-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-routing-profile-queues-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (routing-profile-queue-config-summary-list common-lisp:nil :type
    (common-lisp:or routing-profile-queue-config-summary-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-routing-profile-queues-response
                    'make-list-routing-profile-queues-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profile-queues-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profile-queues-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-profile-queue-config-summary-list))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileQueueConfigSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profile-queues-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-routing-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-routing-profiles-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-routing-profiles-request
                    'make-list-routing-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-routing-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-routing-profiles-response-"))
   (routing-profile-summary-list common-lisp:nil :type
    (common-lisp:or routing-profile-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-routing-profiles-response
                    'make-list-routing-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-profile-summary-list))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-routing-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rules-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (publish-status common-lisp:nil :type
    (common-lisp:or rule-publish-status common-lisp:null))
   (event-source-name common-lisp:nil :type
    (common-lisp:or event-source-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result200 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rules-request 'make-list-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rules-response-"))
   (rule-summary-list (common-lisp:error ":rule-summary-list is required")
    :type (common-lisp:or rule-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rules-response 'make-list-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-summary-list))
      (common-lisp:list
       (common-lisp:cons "RuleSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-keys-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result2 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-keys-request
                    'make-list-security-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-keys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-keys-response-"))
   (security-keys common-lisp:nil :type
    (common-lisp:or security-keys-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-keys-response
                    'make-list-security-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-keys))
      (common-lisp:list
       (common-lisp:cons "SecurityKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-profile-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-profile-permissions-request-"))
   (security-profile-id (common-lisp:error ":security-profile-id is required")
    :type (common-lisp:or security-profile-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-profile-permissions-request
                    'make-list-security-profile-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profile-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profile-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profile-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-profile-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-profile-permissions-response-"))
   (permissions common-lisp:nil :type
    (common-lisp:or permissions-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-profile-permissions-response
                    'make-list-security-profile-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profile-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profile-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profile-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-profiles-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-request
                    'make-list-security-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-profiles-response-"))
   (security-profile-summary-list common-lisp:nil :type
    (common-lisp:or security-profile-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-response
                    'make-list-security-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-summary-list))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-task-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-task-templates-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-template-status common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or task-template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-task-templates-request
                    'make-list-task-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-task-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-task-templates-response-"))
   (task-templates common-lisp:nil :type
    (common-lisp:or task-template-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-task-templates-response
                    'make-list-task-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-templates))
      (common-lisp:list
       (common-lisp:cons "TaskTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-distribution-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-traffic-distribution-groups-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result10 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-distribution-groups-request
                    'make-list-traffic-distribution-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-distribution-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-distribution-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-distribution-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-distribution-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-traffic-distribution-groups-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (traffic-distribution-group-summary-list common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-distribution-groups-response
                    'make-list-traffic-distribution-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-distribution-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-distribution-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-distribution-group-summary-list))
      (common-lisp:list
       (common-lisp:cons "TrafficDistributionGroupSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-distribution-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-use-cases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-use-cases-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (integration-association-id
    (common-lisp:error ":integration-association-id is required") :type
    (common-lisp:or integration-association-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-use-cases-request 'make-list-use-cases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-use-cases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-use-cases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-use-cases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-use-cases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-use-cases-response-"))
   (use-case-summary-list common-lisp:nil :type
    (common-lisp:or use-case-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-use-cases-response 'make-list-use-cases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-use-cases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-use-cases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-case-summary-list))
      (common-lisp:list
       (common-lisp:cons "UseCaseSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-use-cases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-hierarchy-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-hierarchy-groups-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-hierarchy-groups-request
                    'make-list-user-hierarchy-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-hierarchy-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-hierarchy-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-hierarchy-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-hierarchy-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-hierarchy-groups-response-"))
   (user-hierarchy-group-summary-list common-lisp:nil :type
    (common-lisp:or hierarchy-group-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-hierarchy-groups-response
                    'make-list-user-hierarchy-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-hierarchy-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-hierarchy-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-hierarchy-group-summary-list))
      (common-lisp:list
       (common-lisp:cons "UserHierarchyGroupSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-hierarchy-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result1000 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-response-"))
   (user-summary-list common-lisp:nil :type
    (common-lisp:or user-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-summary-list))
      (common-lisp:list
       (common-lisp:cons "UserSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-result10 () 'common-lisp:integer)
(common-lisp:deftype max-result100 () 'common-lisp:integer)
(common-lisp:deftype max-result1000 () 'common-lisp:integer)
(common-lisp:deftype max-result2 () 'common-lisp:integer)
(common-lisp:deftype max-result200 () 'common-lisp:integer)
(common-lisp:deftype max-result25 () 'common-lisp:integer)
(common-lisp:deftype max-result7 () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype media-concurrencies ()
   '(trivial-types:proper-list media-concurrency))
 (common-lisp:defun |make-media-concurrencies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-concurrency))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (media-concurrency (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-concurrency-"))
   (channel (common-lisp:error ":channel is required") :type
    (common-lisp:or channel common-lisp:null))
   (concurrency (common-lisp:error ":concurrency is required") :type
    (common-lisp:or concurrency common-lisp:null))
   (cross-channel-behavior common-lisp:nil :type
    (common-lisp:or cross-channel-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-concurrency 'make-media-concurrency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-concurrency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-concurrency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'concurrency))
      (common-lisp:list
       (common-lisp:cons "Concurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-channel-behavior))
      (common-lisp:list
       (common-lisp:cons "CrossChannelBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-concurrency))
   common-lisp:nil))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-data-collections-v2 ()
   '(trivial-types:proper-list metric-data-v2))
 (common-lisp:defun |make-metric-data-collections-v2|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-data-v2))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-data-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-data-v2-"))
   (metric common-lisp:nil :type (common-lisp:or metric-v2 common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-data-v2 'make-metric-data-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-data-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-data-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-data-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-filter-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-filter-v2-"))
   (metric-filter-key common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (metric-filter-values common-lisp:nil :type
    (common-lisp:or metric-filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-filter-v2 'make-metric-filter-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-filter-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-filter-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-filter-key))
      (common-lisp:list
       (common-lisp:cons "MetricFilterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-filter-values))
      (common-lisp:list
       (common-lisp:cons "MetricFilterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-filter-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-filter-value-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-metric-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-filters-v2list ()
   '(trivial-types:proper-list metric-filter-v2))
 (common-lisp:defun |make-metric-filters-v2list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-filter-v2))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name-v2 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-result-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-result-v2-"))
   (dimensions common-lisp:nil :type
    (common-lisp:or dimensions-v2map common-lisp:null))
   (collections common-lisp:nil :type
    (common-lisp:or metric-data-collections-v2 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-result-v2 'make-metric-result-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-result-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-result-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collections))
      (common-lisp:list
       (common-lisp:cons "Collections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-result-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-results-v2 ()
   '(trivial-types:proper-list metric-result-v2))
 (common-lisp:defun |make-metric-results-v2|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-result-v2))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-v2-"))
   (name common-lisp:nil :type
    (common-lisp:or metric-name-v2 common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or threshold-collections common-lisp:null))
   (metric-filters common-lisp:nil :type
    (common-lisp:or metric-filters-v2list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-v2 'make-metric-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-filters))
      (common-lisp:list
       (common-lisp:cons "MetricFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metrics-v2 () '(trivial-types:proper-list metric-v2))
 (common-lisp:defun |make-metrics-v2|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-v2))
   aws-sdk/generator/shape::members))
(common-lisp:deftype minutes-limit60 () 'common-lisp:integer)
(common-lisp:deftype monitor-capability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitor-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitor-contact-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or agent-resource-id common-lisp:null))
   (allowed-monitor-capabilities common-lisp:nil :type
    (common-lisp:or allowed-monitor-capabilities common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitor-contact-request 'make-monitor-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitor-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitor-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-monitor-capabilities))
      (common-lisp:list
       (common-lisp:cons "AllowedMonitorCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitor-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitor-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitor-contact-response-"))
   (contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (contact-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitor-contact-response 'make-monitor-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitor-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitor-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitor-contact-response))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype name128 () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype next-token2500 () 'common-lisp:string)
(common-lisp:deftype notification-content-type () 'common-lisp:string)
(common-lisp:deftype notification-delivery-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-recipient-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-recipient-type-"))
   (user-tags common-lisp:nil :type
    (common-lisp:or user-tag-map common-lisp:null))
   (user-ids common-lisp:nil :type
    (common-lisp:or user-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-recipient-type
                    'make-notification-recipient-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-recipient-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-recipient-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-tags))
      (common-lisp:list
       (common-lisp:cons "UserTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-recipient-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (number-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-number-reference-"))
   (name common-lisp:nil :type (common-lisp:or reference-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or reference-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'number-reference 'make-number-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input number-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input number-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input number-reference))
   common-lisp:nil))
(common-lisp:deftype numeric-question-property-automation-label ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (numeric-question-property-value-automation (:copier common-lisp:nil)
      (:conc-name "struct-shape-numeric-question-property-value-automation-"))
   (label (common-lisp:error ":label is required") :type
    (common-lisp:or numeric-question-property-automation-label
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'numeric-question-property-value-automation
                    'make-numeric-question-property-value-automation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          numeric-question-property-value-automation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          numeric-question-property-value-automation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          numeric-question-property-value-automation))
   common-lisp:nil))
(common-lisp:deftype origin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype origins-list () '(trivial-types:proper-list origin))
 (common-lisp:defun |make-origins-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list origin))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (outbound-caller-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-outbound-caller-config-"))
   (outbound-caller-id-name common-lisp:nil :type
    (common-lisp:or outbound-caller-id-name common-lisp:null))
   (outbound-caller-id-number-id common-lisp:nil :type
    (common-lisp:or phone-number-id common-lisp:null))
   (outbound-flow-id common-lisp:nil :type
    (common-lisp:or contact-flow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'outbound-caller-config 'make-outbound-caller-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outbound-caller-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outbound-caller-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-caller-id-name))
      (common-lisp:list
       (common-lisp:cons "OutboundCallerIdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-caller-id-number-id))
      (common-lisp:list
       (common-lisp:cons "OutboundCallerIdNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outbound-flow-id))
      (common-lisp:list
       (common-lisp:cons "OutboundFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outbound-caller-config))
   common-lisp:nil))
(common-lisp:deftype outbound-caller-id-name () 'common-lisp:string)
(common-lisp:deftype outbound-calls-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition outbound-contact-not-permitted-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       outbound-contact-not-permitted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'outbound-contact-not-permitted-exception
                    'outbound-contact-not-permitted-exception-message)))
(common-lisp:deftype pem () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (participant-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-participant-details-"))
   (display-name (common-lisp:error ":display-name is required") :type
    (common-lisp:or display-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'participant-details 'make-participant-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input participant-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input participant-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input participant-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (participant-details-to-add (:copier common-lisp:nil)
      (:conc-name "struct-shape-participant-details-to-add-"))
   (participant-role common-lisp:nil :type
    (common-lisp:or participant-role common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'participant-details-to-add
                    'make-participant-details-to-add))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          participant-details-to-add))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          participant-details-to-add))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          participant-details-to-add))
   common-lisp:nil))
(common-lisp:deftype participant-id () 'common-lisp:string)
(common-lisp:deftype participant-role () 'common-lisp:string)
(common-lisp:deftype participant-timer-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype participant-timer-config-list ()
   '(trivial-types:proper-list participant-timer-configuration))
 (common-lisp:defun |make-participant-timer-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            participant-timer-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (participant-timer-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-participant-timer-configuration-"))
   (participant-role (common-lisp:error ":participant-role is required") :type
    (common-lisp:or timer-eligible-participant-roles common-lisp:null))
   (timer-type (common-lisp:error ":timer-type is required") :type
    (common-lisp:or participant-timer-type common-lisp:null))
   (timer-value (common-lisp:error ":timer-value is required") :type
    (common-lisp:or participant-timer-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'participant-timer-configuration
                    'make-participant-timer-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          participant-timer-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          participant-timer-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-type))
      (common-lisp:list
       (common-lisp:cons "TimerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timer-value))
      (common-lisp:list
       (common-lisp:cons "TimerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          participant-timer-configuration))
   common-lisp:nil))
(common-lisp:deftype participant-timer-duration-in-minutes ()
  'common-lisp:integer)
(common-lisp:deftype participant-timer-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (participant-timer-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-participant-timer-value-"))
   (participant-timer-action common-lisp:nil :type
    (common-lisp:or participant-timer-action common-lisp:null))
   (participant-timer-duration-in-minutes common-lisp:nil :type
    (common-lisp:or participant-timer-duration-in-minutes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'participant-timer-value 'make-participant-timer-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          participant-timer-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          participant-timer-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participant-timer-action))
      (common-lisp:list
       (common-lisp:cons "ParticipantTimerAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participant-timer-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "ParticipantTimerDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          participant-timer-value))
   common-lisp:nil))
(common-lisp:deftype participant-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (participant-token-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-participant-token-credentials-"))
   (participant-token common-lisp:nil :type
    (common-lisp:or participant-token common-lisp:null))
   (expiry common-lisp:nil :type
    (common-lisp:or iso8601datetime common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'participant-token-credentials
                    'make-participant-token-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          participant-token-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          participant-token-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-token))
      (common-lisp:list
       (common-lisp:cons "ParticipantToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry))
      (common-lisp:list
       (common-lisp:cons "Expiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          participant-token-credentials))
   common-lisp:nil))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype permissions-list ()
   '(trivial-types:proper-list security-profile-permission))
 (common-lisp:defun |make-permissions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-profile-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (persistent-chat (:copier common-lisp:nil)
      (:conc-name "struct-shape-persistent-chat-"))
   (rehydration-type common-lisp:nil :type
    (common-lisp:or rehydration-type common-lisp:null))
   (source-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'persistent-chat 'make-persistent-chat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input persistent-chat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input persistent-chat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rehydration-type))
      (common-lisp:list
       (common-lisp:cons "RehydrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-contact-id))
      (common-lisp:list
       (common-lisp:cons "SourceContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input persistent-chat))
   common-lisp:nil))
(common-lisp:deftype phone-number () 'common-lisp:string)
(common-lisp:deftype phone-number-country-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype phone-number-country-codes ()
   '(trivial-types:proper-list phone-number-country-code))
 (common-lisp:defun |make-phone-number-country-codes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            phone-number-country-code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number-description () 'common-lisp:string)
(common-lisp:deftype phone-number-id () 'common-lisp:string)
(common-lisp:deftype phone-number-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number-quick-connect-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-quick-connect-config-"))
   (phone-number (common-lisp:error ":phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'phone-number-quick-connect-config
                    'make-phone-number-quick-connect-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-quick-connect-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-quick-connect-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-quick-connect-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-status-"))
   (status common-lisp:nil :type
    (common-lisp:or phone-number-workflow-status common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or phone-number-workflow-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'phone-number-status 'make-phone-number-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input phone-number-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input phone-number-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input phone-number-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-summary-"))
   (id common-lisp:nil :type (common-lisp:or phone-number-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (phone-number-type common-lisp:nil :type
    (common-lisp:or phone-number-type common-lisp:null))
   (phone-number-country-code common-lisp:nil :type
    (common-lisp:or phone-number-country-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'phone-number-summary 'make-phone-number-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input phone-number-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input phone-number-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-type))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-country-code))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input phone-number-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phone-number-summary-list ()
   '(trivial-types:proper-list phone-number-summary))
 (common-lisp:defun |make-phone-number-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype phone-number-types ()
   '(trivial-types:proper-list phone-number-type))
 (common-lisp:defun |make-phone-number-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number-workflow-message () 'common-lisp:string)
(common-lisp:deftype phone-number-workflow-status () 'common-lisp:string)
(common-lisp:deftype phone-type () 'common-lisp:string)
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (problem-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-problem-detail-"))
   (message common-lisp:nil :type
    (common-lisp:or problem-message-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'problem-detail 'make-problem-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input problem-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input problem-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input problem-detail))
   common-lisp:nil))
(common-lisp:deftype problem-message-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype problems () '(trivial-types:proper-list problem-detail))
 (common-lisp:defun |make-problems|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list problem-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype prompt-id () 'common-lisp:string)
(common-lisp:deftype prompt-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (prompt-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-prompt-summary-"))
   (id common-lisp:nil :type (common-lisp:or prompt-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or prompt-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'prompt-summary 'make-prompt-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prompt-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prompt-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prompt-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prompt-summary-list ()
   '(trivial-types:proper-list prompt-summary))
 (common-lisp:defun |make-prompt-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list prompt-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition property-validation-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       property-validation-exception-message)
      (property-list :initarg :property-list :initform common-lisp:nil :reader
       property-validation-exception-property-list)))
 (common-lisp:export
  (common-lisp:list 'property-validation-exception
                    'property-validation-exception-message
                    'property-validation-exception-property-list)))
(common-lisp:progn
 (common-lisp:defstruct
     (property-validation-exception-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-validation-exception-property-"))
   (property-path (common-lisp:error ":property-path is required") :type
    (common-lisp:or string common-lisp:null))
   (reason (common-lisp:error ":reason is required") :type
    (common-lisp:or property-validation-exception-reason common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'property-validation-exception-property
                    'make-property-validation-exception-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-validation-exception-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-validation-exception-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-path))
      (common-lisp:list
       (common-lisp:cons "PropertyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-validation-exception-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-validation-exception-property-list ()
   '(trivial-types:proper-list property-validation-exception-property))
 (common-lisp:defun |make-property-validation-exception-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            property-validation-exception-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype property-validation-exception-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-user-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-user-status-request-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (agent-status-id (common-lisp:error ":agent-status-id is required") :type
    (common-lisp:or agent-status-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-user-status-request 'make-put-user-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-user-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-user-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status-id))
      (common-lisp:list
       (common-lisp:cons "AgentStatusId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-user-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-user-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-user-status-response-")))
 (common-lisp:export
  (common-lisp:list 'put-user-status-response 'make-put-user-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-user-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-user-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-user-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (queue (:copier common-lisp:nil) (:conc-name "struct-shape-queue-"))
   (name common-lisp:nil :type
    (common-lisp:or common-name-length127 common-lisp:null))
   (queue-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (queue-id common-lisp:nil :type (common-lisp:or queue-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or queue-description common-lisp:null))
   (outbound-caller-config common-lisp:nil :type
    (common-lisp:or outbound-caller-config common-lisp:null))
   (hours-of-operation-id common-lisp:nil :type
    (common-lisp:or hours-of-operation-id common-lisp:null))
   (max-contacts common-lisp:nil :type
    (common-lisp:or queue-max-contacts common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or queue-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'queue 'make-queue))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "QueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-id))
      (common-lisp:list
       (common-lisp:cons "QueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-caller-config))
      (common-lisp:list
       (common-lisp:cons "OutboundCallerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hours-of-operation-id))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-contacts))
      (common-lisp:list
       (common-lisp:cons "MaxContacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue))
   common-lisp:nil))
(common-lisp:deftype queue-description () 'common-lisp:string)
(common-lisp:deftype queue-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (queue-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-info-"))
   (id common-lisp:nil :type (common-lisp:or queue-id common-lisp:null))
   (enqueue-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'queue-info 'make-queue-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enqueue-timestamp))
      (common-lisp:list
       (common-lisp:cons "EnqueueTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-info))
   common-lisp:nil))
(common-lisp:deftype queue-max-contacts () 'common-lisp:integer)
(common-lisp:deftype queue-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (queue-quick-connect-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-quick-connect-config-"))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'queue-quick-connect-config
                    'make-queue-quick-connect-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          queue-quick-connect-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          queue-quick-connect-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-id))
      (common-lisp:list
       (common-lisp:cons "QueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          queue-quick-connect-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (queue-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-reference-"))
   (id common-lisp:nil :type (common-lisp:or queue-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'queue-reference 'make-queue-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-search-condition-list ()
   '(trivial-types:proper-list queue-search-criteria))
 (common-lisp:defun |make-queue-search-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue-search-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (queue-search-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-search-criteria-"))
   (or-conditions common-lisp:nil :type
    (common-lisp:or queue-search-condition-list common-lisp:null))
   (and-conditions common-lisp:nil :type
    (common-lisp:or queue-search-condition-list common-lisp:null))
   (string-condition common-lisp:nil :type
    (common-lisp:or string-condition common-lisp:null))
   (queue-type-condition common-lisp:nil :type
    (common-lisp:or searchable-queue-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'queue-search-criteria 'make-queue-search-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          queue-search-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          queue-search-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-conditions))
      (common-lisp:list
       (common-lisp:cons "OrConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-conditions))
      (common-lisp:list
       (common-lisp:cons "AndConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-condition))
      (common-lisp:list
       (common-lisp:cons "StringCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'queue-type-condition))
      (common-lisp:list
       (common-lisp:cons "QueueTypeCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          queue-search-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (queue-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-search-filter-"))
   (tag-filter common-lisp:nil :type
    (common-lisp:or control-plane-tag-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'queue-search-filter 'make-queue-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filter))
      (common-lisp:list
       (common-lisp:cons "TagFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-search-summary-list ()
   '(trivial-types:proper-list queue))
 (common-lisp:defun |make-queue-search-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype queue-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (queue-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-summary-"))
   (id common-lisp:nil :type (common-lisp:or queue-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or queue-name common-lisp:null))
   (queue-type common-lisp:nil :type
    (common-lisp:or queue-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'queue-summary 'make-queue-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-type))
      (common-lisp:list
       (common-lisp:cons "QueueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-summary-list ()
   '(trivial-types:proper-list queue-summary))
 (common-lisp:defun |make-queue-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype queue-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype queue-types () '(trivial-types:proper-list queue-type))
 (common-lisp:defun |make-queue-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype queues () '(trivial-types:proper-list queue-id))
 (common-lisp:defun |make-queues|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (quick-connect (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-connect-"))
   (quick-connect-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (quick-connect-id common-lisp:nil :type
    (common-lisp:or quick-connect-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or quick-connect-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or quick-connect-description common-lisp:null))
   (quick-connect-config common-lisp:nil :type
    (common-lisp:or quick-connect-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'quick-connect 'make-quick-connect))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quick-connect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quick-connect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-arn))
      (common-lisp:list
       (common-lisp:cons "QuickConnectARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-id))
      (common-lisp:list
       (common-lisp:cons "QuickConnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quick-connect-config))
      (common-lisp:list
       (common-lisp:cons "QuickConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quick-connect))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (quick-connect-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-connect-config-"))
   (quick-connect-type (common-lisp:error ":quick-connect-type is required")
    :type (common-lisp:or quick-connect-type common-lisp:null))
   (user-config common-lisp:nil :type
    (common-lisp:or user-quick-connect-config common-lisp:null))
   (queue-config common-lisp:nil :type
    (common-lisp:or queue-quick-connect-config common-lisp:null))
   (phone-config common-lisp:nil :type
    (common-lisp:or phone-number-quick-connect-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-connect-config 'make-quick-connect-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quick-connect-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quick-connect-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-type))
      (common-lisp:list
       (common-lisp:cons "QuickConnectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-config))
      (common-lisp:list
       (common-lisp:cons "UserConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-config))
      (common-lisp:list
       (common-lisp:cons "QueueConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-config))
      (common-lisp:list
       (common-lisp:cons "PhoneConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quick-connect-config))
   common-lisp:nil))
(common-lisp:deftype quick-connect-description () 'common-lisp:string)
(common-lisp:deftype quick-connect-id () 'common-lisp:string)
(common-lisp:deftype quick-connect-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (quick-connect-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-connect-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or quick-connect-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or quick-connect-name common-lisp:null))
   (quick-connect-type common-lisp:nil :type
    (common-lisp:or quick-connect-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-connect-summary 'make-quick-connect-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-connect-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-connect-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-type))
      (common-lisp:list
       (common-lisp:cons "QuickConnectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-connect-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-connect-summary-list ()
   '(trivial-types:proper-list quick-connect-summary))
 (common-lisp:defun |make-quick-connect-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quick-connect-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-connect-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype quick-connect-types ()
   '(trivial-types:proper-list quick-connect-type))
 (common-lisp:defun |make-quick-connect-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quick-connect-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype quick-connects-list ()
   '(trivial-types:proper-list quick-connect-id))
 (common-lisp:defun |make-quick-connects-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quick-connect-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (read-only-field-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-read-only-field-info-"))
   (id common-lisp:nil :type
    (common-lisp:or task-template-field-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'read-only-field-info 'make-read-only-field-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-only-field-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-only-field-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-only-field-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype read-only-task-template-fields ()
   '(trivial-types:proper-list read-only-field-info))
 (common-lisp:defun |make-read-only-task-template-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list read-only-field-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or reference-value common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or reference-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'reference 'make-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference))
   common-lisp:nil))
(common-lisp:deftype reference-id () 'common-lisp:string)
(common-lisp:deftype reference-key () 'common-lisp:string)
(common-lisp:deftype reference-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reference-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-summary-"))
   (url common-lisp:nil :type (common-lisp:or url-reference common-lisp:null))
   (attachment common-lisp:nil :type
    (common-lisp:or attachment-reference common-lisp:null))
   (string common-lisp:nil :type
    (common-lisp:or string-reference common-lisp:null))
   (number common-lisp:nil :type
    (common-lisp:or number-reference common-lisp:null))
   (date common-lisp:nil :type
    (common-lisp:or date-reference common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or email-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-summary 'make-reference-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string))
      (common-lisp:list
       (common-lisp:cons "String"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number))
      (common-lisp:list
       (common-lisp:cons "Number"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-summary-list ()
   '(trivial-types:proper-list reference-summary))
 (common-lisp:defun |make-reference-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reference-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reference-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reference-types ()
   '(trivial-types:proper-list reference-type))
 (common-lisp:defun |make-reference-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reference-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reference-value () 'common-lisp:string)
(common-lisp:deftype rehydration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (release-phone-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-phone-number-request-"))
   (phone-number-id (common-lisp:error ":phone-number-id is required") :type
    (common-lisp:or phone-number-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-phone-number-request
                    'make-release-phone-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replicate-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-replicate-instance-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id-or-arn common-lisp:null))
   (replica-region (common-lisp:error ":replica-region is required") :type
    (common-lisp:or aws-region common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (replica-alias (common-lisp:error ":replica-alias is required") :type
    (common-lisp:or directory-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replicate-instance-request
                    'make-replicate-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replicate-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replicate-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "ReplicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-alias))
      (common-lisp:list
       (common-lisp:cons "ReplicaAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replicate-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replicate-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-replicate-instance-response-"))
   (id common-lisp:nil :type (common-lisp:or instance-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replicate-instance-response
                    'make-replicate-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replicate-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replicate-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replicate-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (required-field-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-required-field-info-"))
   (id common-lisp:nil :type
    (common-lisp:or task-template-field-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'required-field-info 'make-required-field-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input required-field-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input required-field-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input required-field-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype required-task-template-fields ()
   '(trivial-types:proper-list required-field-info))
 (common-lisp:defun |make-required-task-template-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list required-field-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn-or-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-message)))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-in-use-exception-resource-type)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-in-use-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message
                    'resource-in-use-exception-resource-type
                    'resource-in-use-exception-resource-id)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-ready-exception
                    'resource-not-ready-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resume-contact-recording-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-resume-contact-recording-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (initial-contact-id (common-lisp:error ":initial-contact-id is required")
    :type (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resume-contact-recording-request
                    'make-resume-contact-recording-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-contact-recording-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-contact-recording-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-contact-id))
      (common-lisp:list
       (common-lisp:cons "InitialContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-contact-recording-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resume-contact-recording-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-resume-contact-recording-response-")))
 (common-lisp:export
  (common-lisp:list 'resume-contact-recording-response
                    'make-resume-contact-recording-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-contact-recording-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-contact-recording-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-contact-recording-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (routing-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-profile-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or routing-profile-name common-lisp:null))
   (routing-profile-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (routing-profile-id common-lisp:nil :type
    (common-lisp:or routing-profile-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or routing-profile-description common-lisp:null))
   (media-concurrencies common-lisp:nil :type
    (common-lisp:or media-concurrencies common-lisp:null))
   (default-outbound-queue-id common-lisp:nil :type
    (common-lisp:or queue-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (number-of-associated-queues common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (number-of-associated-users common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'routing-profile 'make-routing-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input routing-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input routing-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile-arn))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile-id))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-concurrencies))
      (common-lisp:list
       (common-lisp:cons "MediaConcurrencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-outbound-queue-id))
      (common-lisp:list
       (common-lisp:cons "DefaultOutboundQueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-associated-queues))
      (common-lisp:list
       (common-lisp:cons "NumberOfAssociatedQueues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-associated-users))
      (common-lisp:list
       (common-lisp:cons "NumberOfAssociatedUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input routing-profile))
   common-lisp:nil))
(common-lisp:deftype routing-profile-description () 'common-lisp:string)
(common-lisp:deftype routing-profile-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype routing-profile-list ()
   '(trivial-types:proper-list routing-profile))
 (common-lisp:defun |make-routing-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list routing-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype routing-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (routing-profile-queue-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-profile-queue-config-"))
   (queue-reference (common-lisp:error ":queue-reference is required") :type
    (common-lisp:or routing-profile-queue-reference common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or priority common-lisp:null))
   (delay (common-lisp:error ":delay is required") :type
    (common-lisp:or delay common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'routing-profile-queue-config
                    'make-routing-profile-queue-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-reference))
      (common-lisp:list
       (common-lisp:cons "QueueReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delay))
      (common-lisp:list
       (common-lisp:cons "Delay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routing-profile-queue-config-list ()
   '(trivial-types:proper-list routing-profile-queue-config))
 (common-lisp:defun |make-routing-profile-queue-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            routing-profile-queue-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (routing-profile-queue-config-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-profile-queue-config-summary-"))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (queue-arn (common-lisp:error ":queue-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (queue-name (common-lisp:error ":queue-name is required") :type
    (common-lisp:or queue-name common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or priority common-lisp:null))
   (delay (common-lisp:error ":delay is required") :type
    (common-lisp:or delay common-lisp:null))
   (channel (common-lisp:error ":channel is required") :type
    (common-lisp:or channel common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'routing-profile-queue-config-summary
                    'make-routing-profile-queue-config-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-config-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-config-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-id))
      (common-lisp:list
       (common-lisp:cons "QueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "QueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-name))
      (common-lisp:list
       (common-lisp:cons "QueueName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delay))
      (common-lisp:list
       (common-lisp:cons "Delay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-config-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routing-profile-queue-config-summary-list ()
   '(trivial-types:proper-list routing-profile-queue-config-summary))
 (common-lisp:defun |make-routing-profile-queue-config-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            routing-profile-queue-config-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (routing-profile-queue-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-profile-queue-reference-"))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (channel (common-lisp:error ":channel is required") :type
    (common-lisp:or channel common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'routing-profile-queue-reference
                    'make-routing-profile-queue-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-id))
      (common-lisp:list
       (common-lisp:cons "QueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-queue-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routing-profile-queue-reference-list ()
   '(trivial-types:proper-list routing-profile-queue-reference))
 (common-lisp:defun |make-routing-profile-queue-reference-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            routing-profile-queue-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (routing-profile-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-profile-reference-"))
   (id common-lisp:nil :type
    (common-lisp:or routing-profile-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'routing-profile-reference
                    'make-routing-profile-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routing-profile-search-condition-list ()
   '(trivial-types:proper-list routing-profile-search-criteria))
 (common-lisp:defun |make-routing-profile-search-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            routing-profile-search-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (routing-profile-search-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-profile-search-criteria-"))
   (or-conditions common-lisp:nil :type
    (common-lisp:or routing-profile-search-condition-list common-lisp:null))
   (and-conditions common-lisp:nil :type
    (common-lisp:or routing-profile-search-condition-list common-lisp:null))
   (string-condition common-lisp:nil :type
    (common-lisp:or string-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'routing-profile-search-criteria
                    'make-routing-profile-search-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-search-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-search-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-conditions))
      (common-lisp:list
       (common-lisp:cons "OrConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-conditions))
      (common-lisp:list
       (common-lisp:cons "AndConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-condition))
      (common-lisp:list
       (common-lisp:cons "StringCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-search-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (routing-profile-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-profile-search-filter-"))
   (tag-filter common-lisp:nil :type
    (common-lisp:or control-plane-tag-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'routing-profile-search-filter
                    'make-routing-profile-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filter))
      (common-lisp:list
       (common-lisp:cons "TagFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (routing-profile-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-profile-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or routing-profile-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or routing-profile-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'routing-profile-summary 'make-routing-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          routing-profile-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routing-profile-summary-list ()
   '(trivial-types:proper-list routing-profile-summary))
 (common-lisp:defun |make-routing-profile-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list routing-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype routing-profiles ()
   '(trivial-types:proper-list routing-profile-id))
 (common-lisp:defun |make-routing-profiles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list routing-profile-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or rule-id common-lisp:null))
   (rule-arn (common-lisp:error ":rule-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (trigger-event-source
    (common-lisp:error ":trigger-event-source is required") :type
    (common-lisp:or rule-trigger-event-source common-lisp:null))
   (function (common-lisp:error ":function is required") :type
    (common-lisp:or rule-function common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or rule-actions common-lisp:null))
   (publish-status (common-lisp:error ":publish-status is required") :type
    (common-lisp:or rule-publish-status common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time (common-lisp:error ":last-updated-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (last-updated-by (common-lisp:error ":last-updated-by is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trigger-event-source))
      (common-lisp:list
       (common-lisp:cons "TriggerEventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "Function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-status))
      (common-lisp:list
       (common-lisp:cons "PublishStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-action-"))
   (action-type (common-lisp:error ":action-type is required") :type
    (common-lisp:or action-type common-lisp:null))
   (task-action common-lisp:nil :type
    (common-lisp:or task-action-definition common-lisp:null))
   (event-bridge-action common-lisp:nil :type
    (common-lisp:or event-bridge-action-definition common-lisp:null))
   (assign-contact-category-action common-lisp:nil :type
    (common-lisp:or assign-contact-category-action-definition
                    common-lisp:null))
   (send-notification-action common-lisp:nil :type
    (common-lisp:or send-notification-action-definition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-action 'make-rule-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-action))
      (common-lisp:list
       (common-lisp:cons "TaskAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge-action))
      (common-lisp:list
       (common-lisp:cons "EventBridgeAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assign-contact-category-action))
      (common-lisp:list
       (common-lisp:cons "AssignContactCategoryAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'send-notification-action))
      (common-lisp:list
       (common-lisp:cons "SendNotificationAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-actions () '(trivial-types:proper-list rule-action))
 (common-lisp:defun |make-rule-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-function () 'common-lisp:string)
(common-lisp:deftype rule-id () 'common-lisp:string)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:deftype rule-publish-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rule-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-summary-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or rule-id common-lisp:null))
   (rule-arn (common-lisp:error ":rule-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (event-source-name (common-lisp:error ":event-source-name is required")
    :type (common-lisp:or event-source-name common-lisp:null))
   (publish-status (common-lisp:error ":publish-status is required") :type
    (common-lisp:or rule-publish-status common-lisp:null))
   (action-summaries (common-lisp:error ":action-summaries is required") :type
    (common-lisp:or action-summaries common-lisp:null))
   (created-time (common-lisp:error ":created-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time (common-lisp:error ":last-updated-time is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-summary 'make-rule-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-name))
      (common-lisp:list
       (common-lisp:cons "EventSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-status))
      (common-lisp:list
       (common-lisp:cons "PublishStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-summaries))
      (common-lisp:list
       (common-lisp:cons "ActionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-summary-list ()
   '(trivial-types:proper-list rule-summary))
 (common-lisp:defun |make-rule-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-trigger-event-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-trigger-event-source-"))
   (event-source-name (common-lisp:error ":event-source-name is required")
    :type (common-lisp:or event-source-name common-lisp:null))
   (integration-association-id common-lisp:nil :type
    (common-lisp:or integration-association-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-trigger-event-source
                    'make-rule-trigger-event-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-trigger-event-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-trigger-event-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-name))
      (common-lisp:list
       (common-lisp:cons "EventSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-association-id))
      (common-lisp:list
       (common-lisp:cons "IntegrationAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-trigger-event-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3config (:copier common-lisp:nil) (:conc-name "struct-shape-s3config-"))
   (bucket-name (common-lisp:error ":bucket-name is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-prefix (common-lisp:error ":bucket-prefix is required") :type
    (common-lisp:or prefix common-lisp:null))
   (encryption-config common-lisp:nil :type
    (common-lisp:or encryption-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3config 'make-s3config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "BucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-available-phone-numbers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-available-phone-numbers-request-"))
   (target-arn (common-lisp:error ":target-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (phone-number-country-code
    (common-lisp:error ":phone-number-country-code is required") :type
    (common-lisp:or phone-number-country-code common-lisp:null))
   (phone-number-type (common-lisp:error ":phone-number-type is required")
    :type (common-lisp:or phone-number-type common-lisp:null))
   (phone-number-prefix common-lisp:nil :type
    (common-lisp:or phone-number-prefix common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result10 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or large-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-available-phone-numbers-request
                    'make-search-available-phone-numbers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-available-phone-numbers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-available-phone-numbers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phone-number-country-code))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-type))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-prefix))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-available-phone-numbers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-available-phone-numbers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-available-phone-numbers-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or large-next-token common-lisp:null))
   (available-numbers-list common-lisp:nil :type
    (common-lisp:or available-numbers-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-available-phone-numbers-response
                    'make-search-available-phone-numbers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-available-phone-numbers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-available-phone-numbers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-numbers-list))
      (common-lisp:list
       (common-lisp:cons "AvailableNumbersList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-available-phone-numbers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-queues-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-queues-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (search-filter common-lisp:nil :type
    (common-lisp:or queue-search-filter common-lisp:null))
   (search-criteria common-lisp:nil :type
    (common-lisp:or queue-search-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-queues-request 'make-search-queues-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-queues-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-filter))
      (common-lisp:list
       (common-lisp:cons "SearchFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-criteria))
      (common-lisp:list
       (common-lisp:cons "SearchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-queues-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-queues-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-queues-response-"))
   (queues common-lisp:nil :type
    (common-lisp:or queue-search-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (approximate-total-count common-lisp:nil :type
    (common-lisp:or approximate-total-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-queues-response 'make-search-queues-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-queues-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-queues-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queues))
      (common-lisp:list
       (common-lisp:cons "Queues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-total-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateTotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-queues-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-routing-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-routing-profiles-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (search-filter common-lisp:nil :type
    (common-lisp:or routing-profile-search-filter common-lisp:null))
   (search-criteria common-lisp:nil :type
    (common-lisp:or routing-profile-search-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-routing-profiles-request
                    'make-search-routing-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-routing-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-routing-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-filter))
      (common-lisp:list
       (common-lisp:cons "SearchFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-criteria))
      (common-lisp:list
       (common-lisp:cons "SearchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-routing-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-routing-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-routing-profiles-response-"))
   (routing-profiles common-lisp:nil :type
    (common-lisp:or routing-profile-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (approximate-total-count common-lisp:nil :type
    (common-lisp:or approximate-total-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-routing-profiles-response
                    'make-search-routing-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-routing-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-routing-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profiles))
      (common-lisp:list
       (common-lisp:cons "RoutingProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-total-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateTotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-routing-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-security-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-security-profiles-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (search-criteria common-lisp:nil :type
    (common-lisp:or security-profile-search-criteria common-lisp:null))
   (search-filter common-lisp:nil :type
    (common-lisp:or security-profiles-search-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-security-profiles-request
                    'make-search-security-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-security-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-security-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-criteria))
      (common-lisp:list
       (common-lisp:cons "SearchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-filter))
      (common-lisp:list
       (common-lisp:cons "SearchFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-security-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-security-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-security-profiles-response-"))
   (security-profiles common-lisp:nil :type
    (common-lisp:or security-profiles-search-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (approximate-total-count common-lisp:nil :type
    (common-lisp:or approximate-total-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-security-profiles-response
                    'make-search-security-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-security-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-security-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-profiles))
      (common-lisp:list
       (common-lisp:cons "SecurityProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-total-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateTotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-security-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-users-request-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (search-filter common-lisp:nil :type
    (common-lisp:or user-search-filter common-lisp:null))
   (search-criteria common-lisp:nil :type
    (common-lisp:or user-search-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-users-request 'make-search-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-filter))
      (common-lisp:list
       (common-lisp:cons "SearchFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-criteria))
      (common-lisp:list
       (common-lisp:cons "SearchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-users-response-"))
   (users common-lisp:nil :type
    (common-lisp:or user-search-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token2500 common-lisp:null))
   (approximate-total-count common-lisp:nil :type
    (common-lisp:or approximate-total-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-users-response 'make-search-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-total-count))
      (common-lisp:list
       (common-lisp:cons "ApproximateTotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-vocabularies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-vocabularies-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-result100 common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or vocabulary-next-token common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (name-starts-with common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or vocabulary-language-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-vocabularies-request
                    'make-search-vocabularies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-vocabularies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-vocabularies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-starts-with))
      (common-lisp:list
       (common-lisp:cons "NameStartsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-vocabularies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-vocabularies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-vocabularies-response-"))
   (vocabulary-summary-list common-lisp:nil :type
    (common-lisp:or vocabulary-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or vocabulary-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-vocabularies-response
                    'make-search-vocabularies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-vocabularies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-vocabularies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-summary-list))
      (common-lisp:list
       (common-lisp:cons "VocabularySummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-vocabularies-response))
   common-lisp:nil))
(common-lisp:deftype searchable-queue-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (security-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-key-"))
   (association-id common-lisp:nil :type
    (common-lisp:or association-id common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or pem common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'security-key 'make-security-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-keys-list ()
   '(trivial-types:proper-list security-key))
 (common-lisp:defun |make-security-keys-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-profile-"))
   (id common-lisp:nil :type
    (common-lisp:or security-profile-id common-lisp:null))
   (organization-resource-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or security-profile-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (allowed-access-control-tags common-lisp:nil :type
    (common-lisp:or allowed-access-control-tags common-lisp:null))
   (tag-restricted-resources common-lisp:nil :type
    (common-lisp:or tag-restricted-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-profile 'make-security-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-resource-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-access-control-tags))
      (common-lisp:list
       (common-lisp:cons "AllowedAccessControlTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-restricted-resources))
      (common-lisp:list
       (common-lisp:cons "TagRestrictedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-profile))
   common-lisp:nil))
(common-lisp:deftype security-profile-description () 'common-lisp:string)
(common-lisp:deftype security-profile-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-profile-ids ()
   '(trivial-types:proper-list security-profile-id))
 (common-lisp:defun |make-security-profile-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-profile-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-profile-name () 'common-lisp:string)
(common-lisp:deftype security-profile-permission () 'common-lisp:string)
(common-lisp:deftype security-profile-policy-key () 'common-lisp:string)
(common-lisp:deftype security-profile-policy-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-profile-search-condition-list ()
   '(trivial-types:proper-list security-profile-search-criteria))
 (common-lisp:defun |make-security-profile-search-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-profile-search-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-profile-search-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-profile-search-criteria-"))
   (or-conditions common-lisp:nil :type
    (common-lisp:or security-profile-search-condition-list common-lisp:null))
   (and-conditions common-lisp:nil :type
    (common-lisp:or security-profile-search-condition-list common-lisp:null))
   (string-condition common-lisp:nil :type
    (common-lisp:or string-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-profile-search-criteria
                    'make-security-profile-search-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-search-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-search-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-conditions))
      (common-lisp:list
       (common-lisp:cons "OrConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-conditions))
      (common-lisp:list
       (common-lisp:cons "AndConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-condition))
      (common-lisp:list
       (common-lisp:cons "StringCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-search-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (security-profile-search-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-profile-search-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or security-profile-id common-lisp:null))
   (organization-resource-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (security-profile-name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or security-profile-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-profile-search-summary
                    'make-security-profile-search-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-search-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-search-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-resource-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-search-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (security-profile-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-profile-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or security-profile-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or security-profile-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-profile-summary 'make-security-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-profile-summary-list ()
   '(trivial-types:proper-list security-profile-summary))
 (common-lisp:defun |make-security-profile-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-profiles-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-profiles-search-filter-"))
   (tag-filter common-lisp:nil :type
    (common-lisp:or control-plane-tag-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-profiles-search-filter
                    'make-security-profiles-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profiles-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profiles-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filter))
      (common-lisp:list
       (common-lisp:cons "TagFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profiles-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-profiles-search-summary-list ()
   '(trivial-types:proper-list security-profile-search-summary))
 (common-lisp:defun |make-security-profiles-search-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-profile-search-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (send-notification-action-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-notification-action-definition-"))
   (delivery-method (common-lisp:error ":delivery-method is required") :type
    (common-lisp:or notification-delivery-type common-lisp:null))
   (subject common-lisp:nil :type (common-lisp:or subject common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or content common-lisp:null))
   (content-type (common-lisp:error ":content-type is required") :type
    (common-lisp:or notification-content-type common-lisp:null))
   (recipient (common-lisp:error ":recipient is required") :type
    (common-lisp:or notification-recipient-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-notification-action-definition
                    'make-send-notification-action-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-notification-action-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-notification-action-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient))
      (common-lisp:list
       (common-lisp:cons "Recipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-notification-action-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype single-select-options ()
   '(trivial-types:proper-list task-template-single-select-option))
 (common-lisp:defun |make-single-select-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            task-template-single-select-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (single-select-question-rule-category-automation (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-single-select-question-rule-category-automation-"))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or single-select-question-rule-category-automation-label
                    common-lisp:null))
   (condition (common-lisp:error ":condition is required") :type
    (common-lisp:or single-select-question-rule-category-automation-condition
                    common-lisp:null))
   (option-ref-id (common-lisp:error ":option-ref-id is required") :type
    (common-lisp:or reference-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'single-select-question-rule-category-automation
                    'make-single-select-question-rule-category-automation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          single-select-question-rule-category-automation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          single-select-question-rule-category-automation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-ref-id))
      (common-lisp:list
       (common-lisp:cons "OptionRefId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          single-select-question-rule-category-automation))
   common-lisp:nil))
(common-lisp:deftype single-select-question-rule-category-automation-condition
                     ()
  'common-lisp:string)
(common-lisp:deftype single-select-question-rule-category-automation-label ()
  'common-lisp:string)
(common-lisp:deftype snapshot-version () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype source-application-name () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-chat-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-chat-contact-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (participant-details (common-lisp:error ":participant-details is required")
    :type (common-lisp:or participant-details common-lisp:null))
   (initial-message common-lisp:nil :type
    (common-lisp:or chat-message common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (chat-duration-in-minutes common-lisp:nil :type
    (common-lisp:or chat-duration-in-minutes common-lisp:null))
   (supported-messaging-content-types common-lisp:nil :type
    (common-lisp:or supported-messaging-content-types common-lisp:null))
   (persistent-chat common-lisp:nil :type
    (common-lisp:or persistent-chat common-lisp:null))
   (related-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-chat-contact-request
                    'make-start-chat-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-chat-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-chat-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-details))
      (common-lisp:list
       (common-lisp:cons "ParticipantDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-message))
      (common-lisp:list
       (common-lisp:cons "InitialMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chat-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "ChatDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-messaging-content-types))
      (common-lisp:list
       (common-lisp:cons "SupportedMessagingContentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent-chat))
      (common-lisp:list
       (common-lisp:cons "PersistentChat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-contact-id))
      (common-lisp:list
       (common-lisp:cons "RelatedContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-chat-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-chat-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-chat-contact-response-"))
   (contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (participant-id common-lisp:nil :type
    (common-lisp:or participant-id common-lisp:null))
   (participant-token common-lisp:nil :type
    (common-lisp:or participant-token common-lisp:null))
   (continued-from-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-chat-contact-response
                    'make-start-chat-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-chat-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-chat-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-id))
      (common-lisp:list
       (common-lisp:cons "ParticipantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-token))
      (common-lisp:list
       (common-lisp:cons "ParticipantToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continued-from-contact-id))
      (common-lisp:list
       (common-lisp:cons "ContinuedFromContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-chat-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-contact-evaluation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-contact-evaluation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-contact-evaluation-request
                    'make-start-contact-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-evaluation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-contact-evaluation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-contact-evaluation-response-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (evaluation-arn (common-lisp:error ":evaluation-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-contact-evaluation-response
                    'make-start-contact-evaluation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-evaluation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-evaluation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-contact-recording-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-contact-recording-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (initial-contact-id (common-lisp:error ":initial-contact-id is required")
    :type (common-lisp:or contact-id common-lisp:null))
   (voice-recording-configuration
    (common-lisp:error ":voice-recording-configuration is required") :type
    (common-lisp:or voice-recording-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-contact-recording-request
                    'make-start-contact-recording-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-recording-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-recording-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-contact-id))
      (common-lisp:list
       (common-lisp:cons "InitialContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-recording-configuration))
      (common-lisp:list
       (common-lisp:cons "VoiceRecordingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-recording-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-contact-recording-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-contact-recording-response-")))
 (common-lisp:export
  (common-lisp:list 'start-contact-recording-response
                    'make-start-contact-recording-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-recording-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-recording-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-recording-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-contact-streaming-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-contact-streaming-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (chat-streaming-configuration
    (common-lisp:error ":chat-streaming-configuration is required") :type
    (common-lisp:or chat-streaming-configuration common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-contact-streaming-request
                    'make-start-contact-streaming-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-streaming-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-streaming-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chat-streaming-configuration))
      (common-lisp:list
       (common-lisp:cons "ChatStreamingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-streaming-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-contact-streaming-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-contact-streaming-response-"))
   (streaming-id (common-lisp:error ":streaming-id is required") :type
    (common-lisp:or streaming-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-contact-streaming-response
                    'make-start-contact-streaming-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-streaming-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-streaming-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-id))
      (common-lisp:list
       (common-lisp:cons "StreamingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-contact-streaming-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-outbound-voice-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-outbound-voice-contact-request-"))
   (destination-phone-number
    (common-lisp:error ":destination-phone-number is required") :type
    (common-lisp:or phone-number common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (source-phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null))
   (queue-id common-lisp:nil :type (common-lisp:or queue-id common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (answer-machine-detection-config common-lisp:nil :type
    (common-lisp:or answer-machine-detection-config common-lisp:null))
   (campaign-id common-lisp:nil :type
    (common-lisp:or campaign-id common-lisp:null))
   (traffic-type common-lisp:nil :type
    (common-lisp:or traffic-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-outbound-voice-contact-request
                    'make-start-outbound-voice-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-outbound-voice-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-outbound-voice-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-phone-number))
      (common-lisp:list
       (common-lisp:cons "DestinationPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-phone-number))
      (common-lisp:list
       (common-lisp:cons "SourcePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-id))
      (common-lisp:list
       (common-lisp:cons "QueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'answer-machine-detection-config))
      (common-lisp:list
       (common-lisp:cons "AnswerMachineDetectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-id))
      (common-lisp:list
       (common-lisp:cons "CampaignId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-type))
      (common-lisp:list
       (common-lisp:cons "TrafficType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-outbound-voice-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-outbound-voice-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-outbound-voice-contact-response-"))
   (contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-outbound-voice-contact-response
                    'make-start-outbound-voice-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-outbound-voice-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-outbound-voice-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-outbound-voice-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-task-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-task-contact-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (previous-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (contact-flow-id common-lisp:nil :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (references common-lisp:nil :type
    (common-lisp:or contact-references common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (scheduled-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (task-template-id common-lisp:nil :type
    (common-lisp:or task-template-id common-lisp:null))
   (quick-connect-id common-lisp:nil :type
    (common-lisp:or quick-connect-id common-lisp:null))
   (related-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-task-contact-request
                    'make-start-task-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-task-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-task-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-contact-id))
      (common-lisp:list
       (common-lisp:cons "PreviousContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'references))
      (common-lisp:list
       (common-lisp:cons "References"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-template-id))
      (common-lisp:list
       (common-lisp:cons "TaskTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-connect-id))
      (common-lisp:list
       (common-lisp:cons "QuickConnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-contact-id))
      (common-lisp:list
       (common-lisp:cons "RelatedContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-task-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-task-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-task-contact-response-"))
   (contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-task-contact-response
                    'make-start-task-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-task-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-task-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-task-contact-response))
   common-lisp:nil))
(common-lisp:deftype statistic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-contact-recording-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-contact-recording-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (initial-contact-id (common-lisp:error ":initial-contact-id is required")
    :type (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-contact-recording-request
                    'make-stop-contact-recording-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-recording-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-recording-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-contact-id))
      (common-lisp:list
       (common-lisp:cons "InitialContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-recording-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-contact-recording-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-contact-recording-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-contact-recording-response
                    'make-stop-contact-recording-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-recording-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-recording-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-recording-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-contact-request-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-contact-request 'make-stop-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-contact-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-contact-response 'make-stop-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-contact-streaming-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-contact-streaming-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (streaming-id (common-lisp:error ":streaming-id is required") :type
    (common-lisp:or streaming-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-contact-streaming-request
                    'make-stop-contact-streaming-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-streaming-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-streaming-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-id))
      (common-lisp:list
       (common-lisp:cons "StreamingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-streaming-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-contact-streaming-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-contact-streaming-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-contact-streaming-response
                    'make-stop-contact-streaming-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-streaming-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-streaming-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-contact-streaming-response))
   common-lisp:nil))
(common-lisp:deftype storage-type () 'common-lisp:string)
(common-lisp:deftype streaming-id () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-comparison-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (string-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-condition-"))
   (field-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (comparison-type common-lisp:nil :type
    (common-lisp:or string-comparison-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-condition 'make-string-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input string-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input string-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "FieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-type))
      (common-lisp:list
       (common-lisp:cons "ComparisonType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input string-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (string-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-reference-"))
   (name common-lisp:nil :type (common-lisp:or reference-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or reference-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-reference 'make-string-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input string-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input string-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input string-reference))
   common-lisp:nil))
(common-lisp:deftype subject () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (submit-contact-evaluation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-submit-contact-evaluation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (answers common-lisp:nil :type
    (common-lisp:or evaluation-answers-input-map common-lisp:null))
   (notes common-lisp:nil :type
    (common-lisp:or evaluation-notes-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'submit-contact-evaluation-request
                    'make-submit-contact-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-contact-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-contact-evaluation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answers))
      (common-lisp:list
       (common-lisp:cons "Answers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-contact-evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (submit-contact-evaluation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-submit-contact-evaluation-response-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (evaluation-arn (common-lisp:error ":evaluation-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'submit-contact-evaluation-response
                    'make-submit-contact-evaluation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-contact-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-contact-evaluation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-contact-evaluation-response))
   common-lisp:nil))
(common-lisp:deftype supported-messaging-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-messaging-content-types ()
   '(trivial-types:proper-list supported-messaging-content-type))
 (common-lisp:defun |make-supported-messaging-content-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            supported-messaging-content-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (suspend-contact-recording-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-suspend-contact-recording-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (initial-contact-id (common-lisp:error ":initial-contact-id is required")
    :type (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suspend-contact-recording-request
                    'make-suspend-contact-recording-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          suspend-contact-recording-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          suspend-contact-recording-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-contact-id))
      (common-lisp:list
       (common-lisp:cons "InitialContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          suspend-contact-recording-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (suspend-contact-recording-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-suspend-contact-recording-response-")))
 (common-lisp:export
  (common-lisp:list 'suspend-contact-recording-response
                    'make-suspend-contact-recording-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          suspend-contact-recording-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          suspend-contact-recording-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          suspend-contact-recording-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-and-condition-list ()
   '(trivial-types:proper-list tag-condition))
 (common-lisp:defun |make-tag-and-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-condition-"))
   (tag-key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-condition 'make-tag-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value))
      (common-lisp:list
       (common-lisp:cons "TagValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-condition))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype tag-or-condition-list ()
   '(trivial-types:proper-list tag-and-condition-list))
 (common-lisp:defun |make-tag-or-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-and-condition-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-restricted-resource-list ()
   '(trivial-types:proper-list tag-restricted-resource-name))
 (common-lisp:defun |make-tag-restricted-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            tag-restricted-resource-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-restricted-resource-name () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task-action-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-action-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or task-name-expression common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-description-expression common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (references common-lisp:nil :type
    (common-lisp:or contact-references common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-action-definition 'make-task-action-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-action-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-action-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'references))
      (common-lisp:list
       (common-lisp:cons "References"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-action-definition))
   common-lisp:nil))
(common-lisp:deftype task-description-expression () 'common-lisp:string)
(common-lisp:deftype task-name-expression () 'common-lisp:string)
(common-lisp:deftype task-template-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task-template-constraints (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-template-constraints-"))
   (required-fields common-lisp:nil :type
    (common-lisp:or required-task-template-fields common-lisp:null))
   (read-only-fields common-lisp:nil :type
    (common-lisp:or read-only-task-template-fields common-lisp:null))
   (invisible-fields common-lisp:nil :type
    (common-lisp:or invisible-task-template-fields common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-template-constraints
                    'make-task-template-constraints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-template-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-template-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-fields))
      (common-lisp:list
       (common-lisp:cons "RequiredFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only-fields))
      (common-lisp:list
       (common-lisp:cons "ReadOnlyFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invisible-fields))
      (common-lisp:list
       (common-lisp:cons "InvisibleFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-template-constraints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (task-template-default-field-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-template-default-field-value-"))
   (id common-lisp:nil :type
    (common-lisp:or task-template-field-identifier common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or task-template-field-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-template-default-field-value
                    'make-task-template-default-field-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-template-default-field-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-template-default-field-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-template-default-field-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype task-template-default-field-value-list ()
   '(trivial-types:proper-list task-template-default-field-value))
 (common-lisp:defun |make-task-template-default-field-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            task-template-default-field-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (task-template-defaults (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-template-defaults-"))
   (default-field-values common-lisp:nil :type
    (common-lisp:or task-template-default-field-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-template-defaults 'make-task-template-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-template-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-template-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-field-values))
      (common-lisp:list
       (common-lisp:cons "DefaultFieldValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-template-defaults))
   common-lisp:nil))
(common-lisp:deftype task-template-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task-template-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-template-field-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or task-template-field-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-template-field-description common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or task-template-field-type common-lisp:null))
   (single-select-options common-lisp:nil :type
    (common-lisp:or single-select-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-template-field 'make-task-template-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-template-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-template-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-select-options))
      (common-lisp:list
       (common-lisp:cons "SingleSelectOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-template-field))
   common-lisp:nil))
(common-lisp:deftype task-template-field-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task-template-field-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-template-field-identifier-"))
   (name common-lisp:nil :type
    (common-lisp:or task-template-field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-template-field-identifier
                    'make-task-template-field-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-template-field-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-template-field-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-template-field-identifier))
   common-lisp:nil))
(common-lisp:deftype task-template-field-name () 'common-lisp:string)
(common-lisp:deftype task-template-field-type () 'common-lisp:string)
(common-lisp:deftype task-template-field-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-template-fields ()
   '(trivial-types:proper-list task-template-field))
 (common-lisp:defun |make-task-template-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-template-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-template-list ()
   '(trivial-types:proper-list task-template-metadata))
 (common-lisp:defun |make-task-template-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-template-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (task-template-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-template-metadata-"))
   (id common-lisp:nil :type
    (common-lisp:or task-template-id common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or task-template-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or task-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-template-description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-template-status common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-template-metadata 'make-task-template-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-template-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-template-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-template-metadata))
   common-lisp:nil))
(common-lisp:deftype task-template-name () 'common-lisp:string)
(common-lisp:deftype task-template-single-select-option () 'common-lisp:string)
(common-lisp:deftype task-template-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (telephony-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-telephony-config-"))
   (distributions (common-lisp:error ":distributions is required") :type
    (common-lisp:or distribution-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'telephony-config 'make-telephony-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input telephony-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input telephony-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "Distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input telephony-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (threshold (:copier common-lisp:nil)
      (:conc-name "struct-shape-threshold-"))
   (comparison common-lisp:nil :type
    (common-lisp:or comparison common-lisp:null))
   (threshold-value common-lisp:nil :type
    (common-lisp:or threshold-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'threshold 'make-threshold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input threshold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input threshold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-value))
      (common-lisp:list
       (common-lisp:cons "ThresholdValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input threshold))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype threshold-collections ()
   '(trivial-types:proper-list threshold-v2))
 (common-lisp:defun |make-threshold-collections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list threshold-v2))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (threshold-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-threshold-v2-"))
   (comparison common-lisp:nil :type
    (common-lisp:or resource-arn-or-id common-lisp:null))
   (threshold-value common-lisp:nil :type
    (common-lisp:or threshold-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'threshold-v2 'make-threshold-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input threshold-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input threshold-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-value))
      (common-lisp:list
       (common-lisp:cons "ThresholdValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input threshold-v2))
   common-lisp:nil))
(common-lisp:deftype threshold-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-zone () 'common-lisp:string)
(common-lisp:deftype timer-eligible-participant-roles () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-distribution-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-distribution-group-"))
   (id common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-id common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name128 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description250 common-lisp:null))
   (instance-arn common-lisp:nil :type
    (common-lisp:or instance-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-distribution-group
                    'make-traffic-distribution-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-distribution-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-distribution-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-distribution-group))
   common-lisp:nil))
(common-lisp:deftype traffic-distribution-group-arn () 'common-lisp:string)
(common-lisp:deftype traffic-distribution-group-id () 'common-lisp:string)
(common-lisp:deftype traffic-distribution-group-id-or-arn ()
  'common-lisp:string)
(common-lisp:deftype traffic-distribution-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-distribution-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-distribution-group-summary-"))
   (id common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-id common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name128 common-lisp:null))
   (instance-arn common-lisp:nil :type
    (common-lisp:or instance-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or traffic-distribution-group-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-distribution-group-summary
                    'make-traffic-distribution-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-distribution-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-distribution-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-distribution-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype traffic-distribution-group-summary-list ()
   '(trivial-types:proper-list traffic-distribution-group-summary))
 (common-lisp:defun |make-traffic-distribution-group-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            traffic-distribution-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype traffic-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-contact-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (queue-id common-lisp:nil :type (common-lisp:or queue-id common-lisp:null))
   (user-id common-lisp:nil :type
    (common-lisp:or agent-resource-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-contact-request 'make-transfer-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-id))
      (common-lisp:list
       (common-lisp:cons "QueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-contact-response-"))
   (contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (contact-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-contact-response
                    'make-transfer-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-contact-response))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:deftype update-agent-status-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-status-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (agent-status-id (common-lisp:error ":agent-status-id is required") :type
    (common-lisp:or agent-status-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or agent-status-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or update-agent-status-description common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or agent-status-state common-lisp:null))
   (display-order common-lisp:nil :type
    (common-lisp:or agent-status-order-number common-lisp:null))
   (reset-order-number common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-status-request
                    'make-update-agent-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-order))
      (common-lisp:list
       (common-lisp:cons "DisplayOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reset-order-number))
      (common-lisp:list
       (common-lisp:cons "ResetOrderNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-attributes-request-"))
   (initial-contact-id (common-lisp:error ":initial-contact-id is required")
    :type (common-lisp:or contact-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (attributes (common-lisp:error ":attributes is required") :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-attributes-request
                    'make-update-contact-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-contact-id))
      (common-lisp:list
       (common-lisp:cons "InitialContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-attributes-response-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-attributes-response
                    'make-update-contact-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-evaluation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-evaluation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (answers common-lisp:nil :type
    (common-lisp:or evaluation-answers-input-map common-lisp:null))
   (notes common-lisp:nil :type
    (common-lisp:or evaluation-notes-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-evaluation-request
                    'make-update-contact-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-evaluation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answers))
      (common-lisp:list
       (common-lisp:cons "Answers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-evaluation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-evaluation-response-"))
   (evaluation-id (common-lisp:error ":evaluation-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (evaluation-arn (common-lisp:error ":evaluation-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-evaluation-response
                    'make-update-contact-evaluation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-evaluation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-evaluation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-flow-content-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or contact-flow-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-content-request
                    'make-update-contact-flow-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-content-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-flow-content-response-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-content-response
                    'make-update-contact-flow-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-flow-metadata-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or contact-flow-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or contact-flow-description common-lisp:null))
   (contact-flow-state common-lisp:nil :type
    (common-lisp:or contact-flow-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-metadata-request
                    'make-update-contact-flow-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-state))
      (common-lisp:list
       (common-lisp:cons "ContactFlowState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-flow-metadata-response-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-metadata-response
                    'make-update-contact-flow-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-module-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-flow-module-content-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-module-id
    (common-lisp:error ":contact-flow-module-id is required") :type
    (common-lisp:or contact-flow-module-id common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or contact-flow-module-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-module-content-request
                    'make-update-contact-flow-module-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-module-content-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-contact-flow-module-content-response-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-module-content-response
                    'make-update-contact-flow-module-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-module-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-flow-module-metadata-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-module-id
    (common-lisp:error ":contact-flow-module-id is required") :type
    (common-lisp:or contact-flow-module-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or contact-flow-module-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or contact-flow-module-description common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or contact-flow-module-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-module-metadata-request
                    'make-update-contact-flow-module-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-module-metadata-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-contact-flow-module-metadata-response-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-module-metadata-response
                    'make-update-contact-flow-module-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-module-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-flow-name-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or contact-flow-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or contact-flow-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-name-request
                    'make-update-contact-flow-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-flow-name-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-flow-name-response-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-flow-name-response
                    'make-update-contact-flow-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-flow-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (references common-lisp:nil :type
    (common-lisp:or contact-references common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-request 'make-update-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'references))
      (common-lisp:list
       (common-lisp:cons "References"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-response-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-response 'make-update-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-schedule-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (scheduled-time (common-lisp:error ":scheduled-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-schedule-request
                    'make-update-contact-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-schedule-response-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-schedule-response
                    'make-update-contact-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-evaluation-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-evaluation-form-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null))
   (create-new-version common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or evaluation-form-title common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or evaluation-form-description common-lisp:null))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or evaluation-form-items-list common-lisp:null))
   (scoring-strategy common-lisp:nil :type
    (common-lisp:or evaluation-form-scoring-strategy common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-evaluation-form-request
                    'make-update-evaluation-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-form-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-new-version))
      (common-lisp:list
       (common-lisp:cons "CreateNewVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-strategy))
      (common-lisp:list
       (common-lisp:cons "ScoringStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-evaluation-form-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-evaluation-form-response-"))
   (evaluation-form-id (common-lisp:error ":evaluation-form-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (evaluation-form-arn (common-lisp:error ":evaluation-form-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (evaluation-form-version
    (common-lisp:error ":evaluation-form-version is required") :type
    (common-lisp:or version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-evaluation-form-response
                    'make-update-evaluation-form-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-id))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-form-arn))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-form-version))
      (common-lisp:list
       (common-lisp:cons "EvaluationFormVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-evaluation-form-response))
   common-lisp:nil))
(common-lisp:deftype update-hours-of-operation-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-hours-of-operation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-hours-of-operation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (hours-of-operation-id
    (common-lisp:error ":hours-of-operation-id is required") :type
    (common-lisp:or hours-of-operation-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or common-name-length127 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or update-hours-of-operation-description common-lisp:null))
   (time-zone common-lisp:nil :type
    (common-lisp:or time-zone common-lisp:null))
   (config common-lisp:nil :type
    (common-lisp:or hours-of-operation-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-hours-of-operation-request
                    'make-update-hours-of-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-hours-of-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-hours-of-operation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-hours-of-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-instance-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-instance-attribute-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (attribute-type (common-lisp:error ":attribute-type is required") :type
    (common-lisp:or instance-attribute-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or instance-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-instance-attribute-request
                    'make-update-instance-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-instance-storage-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-instance-storage-config-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or association-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or instance-storage-resource-type common-lisp:null))
   (storage-config (common-lisp:error ":storage-config is required") :type
    (common-lisp:or instance-storage-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-instance-storage-config-request
                    'make-update-instance-storage-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-storage-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-storage-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-config))
      (common-lisp:list
       (common-lisp:cons "StorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-storage-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-participant-role-config-channel-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-participant-role-config-channel-info-"))
   (chat common-lisp:nil :type
    (common-lisp:or chat-participant-role-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-participant-role-config-channel-info
                    'make-update-participant-role-config-channel-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-channel-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-channel-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chat))
      (common-lisp:list
       (common-lisp:cons "Chat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-channel-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-participant-role-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-participant-role-config-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or contact-id common-lisp:null))
   (channel-configuration
    (common-lisp:error ":channel-configuration is required") :type
    (common-lisp:or update-participant-role-config-channel-info
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-participant-role-config-request
                    'make-update-participant-role-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'channel-configuration))
      (common-lisp:list
       (common-lisp:cons "ChannelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-participant-role-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-participant-role-config-response-")))
 (common-lisp:export
  (common-lisp:list 'update-participant-role-config-response
                    'make-update-participant-role-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-participant-role-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-phone-number-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-phone-number-request-"))
   (phone-number-id (common-lisp:error ":phone-number-id is required") :type
    (common-lisp:or phone-number-id common-lisp:null))
   (target-arn (common-lisp:error ":target-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-phone-number-request
                    'make-update-phone-number-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-phone-number-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-phone-number-response-"))
   (phone-number-id common-lisp:nil :type
    (common-lisp:or phone-number-id common-lisp:null))
   (phone-number-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-phone-number-response
                    'make-update-phone-number-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-id))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-arn))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-phone-number-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-queue-hours-of-operation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-queue-hours-of-operation-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (hours-of-operation-id
    (common-lisp:error ":hours-of-operation-id is required") :type
    (common-lisp:or hours-of-operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-queue-hours-of-operation-request
                    'make-update-queue-hours-of-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-hours-of-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-hours-of-operation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hours-of-operation-id))
      (common-lisp:list
       (common-lisp:cons "HoursOfOperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-hours-of-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-queue-max-contacts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-queue-max-contacts-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (max-contacts common-lisp:nil :type
    (common-lisp:or queue-max-contacts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-queue-max-contacts-request
                    'make-update-queue-max-contacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-max-contacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-max-contacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-contacts))
      (common-lisp:list
       (common-lisp:cons "MaxContacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-max-contacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-queue-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-queue-name-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or common-name-length127 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or queue-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-queue-name-request
                    'make-update-queue-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-queue-outbound-caller-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-queue-outbound-caller-config-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (outbound-caller-config
    (common-lisp:error ":outbound-caller-config is required") :type
    (common-lisp:or outbound-caller-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-queue-outbound-caller-config-request
                    'make-update-queue-outbound-caller-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-outbound-caller-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-outbound-caller-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-caller-config))
      (common-lisp:list
       (common-lisp:cons "OutboundCallerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-outbound-caller-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-queue-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-queue-status-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (queue-id (common-lisp:error ":queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or queue-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-queue-status-request
                    'make-update-queue-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-quick-connect-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-quick-connect-config-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (quick-connect-id (common-lisp:error ":quick-connect-id is required") :type
    (common-lisp:or quick-connect-id common-lisp:null))
   (quick-connect-config
    (common-lisp:error ":quick-connect-config is required") :type
    (common-lisp:or quick-connect-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-quick-connect-config-request
                    'make-update-quick-connect-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-connect-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-connect-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quick-connect-config))
      (common-lisp:list
       (common-lisp:cons "QuickConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-connect-config-request))
   common-lisp:nil))
(common-lisp:deftype update-quick-connect-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-quick-connect-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-quick-connect-name-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (quick-connect-id (common-lisp:error ":quick-connect-id is required") :type
    (common-lisp:or quick-connect-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or quick-connect-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or update-quick-connect-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-quick-connect-name-request
                    'make-update-quick-connect-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-connect-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-connect-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-connect-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-routing-profile-concurrency-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-routing-profile-concurrency-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (media-concurrencies (common-lisp:error ":media-concurrencies is required")
    :type (common-lisp:or media-concurrencies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-routing-profile-concurrency-request
                    'make-update-routing-profile-concurrency-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-concurrency-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-concurrency-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-concurrencies))
      (common-lisp:list
       (common-lisp:cons "MediaConcurrencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-concurrency-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-routing-profile-default-outbound-queue-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-routing-profile-default-outbound-queue-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (default-outbound-queue-id
    (common-lisp:error ":default-outbound-queue-id is required") :type
    (common-lisp:or queue-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-routing-profile-default-outbound-queue-request
                    'make-update-routing-profile-default-outbound-queue-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-default-outbound-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-default-outbound-queue-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-outbound-queue-id))
      (common-lisp:list
       (common-lisp:cons "DefaultOutboundQueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-default-outbound-queue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-routing-profile-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-routing-profile-name-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or routing-profile-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or routing-profile-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-routing-profile-name-request
                    'make-update-routing-profile-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-routing-profile-queues-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-routing-profile-queues-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (queue-configs (common-lisp:error ":queue-configs is required") :type
    (common-lisp:or routing-profile-queue-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-routing-profile-queues-request
                    'make-update-routing-profile-queues-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-queues-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-configs))
      (common-lisp:list
       (common-lisp:cons "QueueConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-routing-profile-queues-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-request-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or rule-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (function (common-lisp:error ":function is required") :type
    (common-lisp:or rule-function common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or rule-actions common-lisp:null))
   (publish-status (common-lisp:error ":publish-status is required") :type
    (common-lisp:or rule-publish-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-request 'make-update-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "Function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-status))
      (common-lisp:list
       (common-lisp:cons "PublishStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-security-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-security-profile-request-"))
   (description common-lisp:nil :type
    (common-lisp:or security-profile-description common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or permissions-list common-lisp:null))
   (security-profile-id (common-lisp:error ":security-profile-id is required")
    :type (common-lisp:or security-profile-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (allowed-access-control-tags common-lisp:nil :type
    (common-lisp:or allowed-access-control-tags common-lisp:null))
   (tag-restricted-resources common-lisp:nil :type
    (common-lisp:or tag-restricted-resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-security-profile-request
                    'make-update-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-access-control-tags))
      (common-lisp:list
       (common-lisp:cons "AllowedAccessControlTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-restricted-resources))
      (common-lisp:list
       (common-lisp:cons "TagRestrictedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-task-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-task-template-request-"))
   (task-template-id (common-lisp:error ":task-template-id is required") :type
    (common-lisp:or task-template-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or task-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-template-description common-lisp:null))
   (contact-flow-id common-lisp:nil :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or task-template-constraints common-lisp:null))
   (defaults common-lisp:nil :type
    (common-lisp:or task-template-defaults common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-template-status common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or task-template-fields common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-task-template-request
                    'make-update-task-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defaults))
      (common-lisp:list
       (common-lisp:cons "Defaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-task-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-task-template-response-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or task-template-id common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or task-template-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or task-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or task-template-description common-lisp:null))
   (contact-flow-id common-lisp:nil :type
    (common-lisp:or contact-flow-id common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or task-template-constraints common-lisp:null))
   (defaults common-lisp:nil :type
    (common-lisp:or task-template-defaults common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or task-template-fields common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-template-status common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-task-template-response
                    'make-update-task-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defaults))
      (common-lisp:list
       (common-lisp:cons "Defaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-distribution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-traffic-distribution-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-distribution-group-id-or-arn common-lisp:null))
   (telephony-config common-lisp:nil :type
    (common-lisp:or telephony-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-distribution-request
                    'make-update-traffic-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telephony-config))
      (common-lisp:list
       (common-lisp:cons "TelephonyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-distribution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-traffic-distribution-response-")))
 (common-lisp:export
  (common-lisp:list 'update-traffic-distribution-response
                    'make-update-traffic-distribution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-distribution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-distribution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-distribution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-hierarchy-group-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-hierarchy-group-name-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or hierarchy-group-name common-lisp:null))
   (hierarchy-group-id (common-lisp:error ":hierarchy-group-id is required")
    :type (common-lisp:or hierarchy-group-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-hierarchy-group-name-request
                    'make-update-user-hierarchy-group-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-group-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-group-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-group-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-hierarchy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-hierarchy-request-"))
   (hierarchy-group-id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-hierarchy-request
                    'make-update-user-hierarchy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-group-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-hierarchy-structure-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-hierarchy-structure-request-"))
   (hierarchy-structure (common-lisp:error ":hierarchy-structure is required")
    :type (common-lisp:or hierarchy-structure-update common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-hierarchy-structure-request
                    'make-update-user-hierarchy-structure-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-structure-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-structure-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-structure))
      (common-lisp:list
       (common-lisp:cons "HierarchyStructure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-hierarchy-structure-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-identity-info-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-identity-info-request-"))
   (identity-info (common-lisp:error ":identity-info is required") :type
    (common-lisp:or user-identity-info common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-identity-info-request
                    'make-update-user-identity-info-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-identity-info-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-identity-info-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-info))
      (common-lisp:list
       (common-lisp:cons "IdentityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-identity-info-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-phone-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-phone-config-request-"))
   (phone-config (common-lisp:error ":phone-config is required") :type
    (common-lisp:or user-phone-config common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-phone-config-request
                    'make-update-user-phone-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-phone-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-phone-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-config))
      (common-lisp:list
       (common-lisp:cons "PhoneConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-phone-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-routing-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-routing-profile-request-"))
   (routing-profile-id (common-lisp:error ":routing-profile-id is required")
    :type (common-lisp:or routing-profile-id common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-routing-profile-request
                    'make-update-user-routing-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-routing-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-routing-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile-id))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-routing-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-security-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-security-profiles-request-"))
   (security-profile-ids
    (common-lisp:error ":security-profile-ids is required") :type
    (common-lisp:or security-profile-ids common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-security-profiles-request
                    'make-update-user-security-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-security-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-security-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-security-profiles-request))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (url-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-url-reference-"))
   (name common-lisp:nil :type (common-lisp:or reference-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or reference-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'url-reference 'make-url-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input url-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input url-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input url-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (use-case (:copier common-lisp:nil) (:conc-name "struct-shape-use-case-"))
   (use-case-id common-lisp:nil :type
    (common-lisp:or use-case-id common-lisp:null))
   (use-case-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (use-case-type common-lisp:nil :type
    (common-lisp:or use-case-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'use-case 'make-use-case))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input use-case))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input use-case))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-case-id))
      (common-lisp:list
       (common-lisp:cons "UseCaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-case-arn))
      (common-lisp:list
       (common-lisp:cons "UseCaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-case-type))
      (common-lisp:list
       (common-lisp:cons "UseCaseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input use-case))
   common-lisp:nil))
(common-lisp:deftype use-case-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype use-case-summary-list ()
   '(trivial-types:proper-list use-case))
 (common-lisp:defun |make-use-case-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list use-case))
   aws-sdk/generator/shape::members))
(common-lisp:deftype use-case-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user (:copier common-lisp:nil) (:conc-name "struct-shape-user-"))
   (id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or agent-username common-lisp:null))
   (identity-info common-lisp:nil :type
    (common-lisp:or user-identity-info common-lisp:null))
   (phone-config common-lisp:nil :type
    (common-lisp:or user-phone-config common-lisp:null))
   (directory-user-id common-lisp:nil :type
    (common-lisp:or directory-user-id common-lisp:null))
   (security-profile-ids common-lisp:nil :type
    (common-lisp:or security-profile-ids common-lisp:null))
   (routing-profile-id common-lisp:nil :type
    (common-lisp:or routing-profile-id common-lisp:null))
   (hierarchy-group-id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-info))
      (common-lisp:list
       (common-lisp:cons "IdentityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-config))
      (common-lisp:list
       (common-lisp:cons "PhoneConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-user-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile-id))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-group-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-data-"))
   (user common-lisp:nil :type
    (common-lisp:or user-reference common-lisp:null))
   (routing-profile common-lisp:nil :type
    (common-lisp:or routing-profile-reference common-lisp:null))
   (hierarchy-path common-lisp:nil :type
    (common-lisp:or hierarchy-path-reference common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or agent-status-reference common-lisp:null))
   (available-slots-by-channel common-lisp:nil :type
    (common-lisp:or channel-to-count-map common-lisp:null))
   (max-slots-by-channel common-lisp:nil :type
    (common-lisp:or channel-to-count-map common-lisp:null))
   (active-slots-by-channel common-lisp:nil :type
    (common-lisp:or channel-to-count-map common-lisp:null))
   (contacts common-lisp:nil :type
    (common-lisp:or agent-contact-reference-list common-lisp:null))
   (next-status common-lisp:nil :type
    (common-lisp:or agent-status-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-data 'make-user-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile))
      (common-lisp:list
       (common-lisp:cons "RoutingProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-path))
      (common-lisp:list
       (common-lisp:cons "HierarchyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-slots-by-channel))
      (common-lisp:list
       (common-lisp:cons "AvailableSlotsByChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-slots-by-channel))
      (common-lisp:list
       (common-lisp:cons "MaxSlotsByChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-slots-by-channel))
      (common-lisp:list
       (common-lisp:cons "ActiveSlotsByChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contacts))
      (common-lisp:list
       (common-lisp:cons "Contacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-status))
      (common-lisp:list
       (common-lisp:cons "NextStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-data-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-data-filters-"))
   (queues common-lisp:nil :type (common-lisp:or queues common-lisp:null))
   (contact-filter common-lisp:nil :type
    (common-lisp:or contact-filter common-lisp:null))
   (routing-profiles common-lisp:nil :type
    (common-lisp:or routing-profiles common-lisp:null))
   (agents common-lisp:nil :type
    (common-lisp:or agents-min-one-max-hundred common-lisp:null))
   (user-hierarchy-groups common-lisp:nil :type
    (common-lisp:or user-data-hierarchy-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-data-filters 'make-user-data-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-data-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-data-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queues))
      (common-lisp:list
       (common-lisp:cons "Queues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-filter))
      (common-lisp:list
       (common-lisp:cons "ContactFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profiles))
      (common-lisp:list
       (common-lisp:cons "RoutingProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agents))
      (common-lisp:list
       (common-lisp:cons "Agents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-hierarchy-groups))
      (common-lisp:list
       (common-lisp:cons "UserHierarchyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-data-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-data-hierarchy-groups ()
   '(trivial-types:proper-list hierarchy-group-id))
 (common-lisp:defun |make-user-data-hierarchy-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hierarchy-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-data-list () '(trivial-types:proper-list user-data))
 (common-lisp:defun |make-user-data-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-id-list () '(trivial-types:proper-list user-id))
 (common-lisp:defun |make-user-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (user-identity-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-identity-info-"))
   (first-name common-lisp:nil :type
    (common-lisp:or agent-first-name common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or agent-last-name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (secondary-email common-lisp:nil :type
    (common-lisp:or email common-lisp:null))
   (mobile common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-identity-info 'make-user-identity-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-email))
      (common-lisp:list
       (common-lisp:cons "SecondaryEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile))
      (common-lisp:list
       (common-lisp:cons "Mobile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-identity-info-lite (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-identity-info-lite-"))
   (first-name common-lisp:nil :type
    (common-lisp:or agent-first-name common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or agent-last-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-identity-info-lite 'make-user-identity-info-lite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-identity-info-lite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-identity-info-lite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-identity-info-lite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition user-not-found-exception
     (connect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       user-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'user-not-found-exception
                    'user-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (user-phone-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-phone-config-"))
   (phone-type (common-lisp:error ":phone-type is required") :type
    (common-lisp:or phone-type common-lisp:null))
   (auto-accept common-lisp:nil :type
    (common-lisp:or auto-accept common-lisp:null))
   (after-contact-work-time-limit common-lisp:nil :type
    (common-lisp:or after-contact-work-time-limit common-lisp:null))
   (desk-phone-number common-lisp:nil :type
    (common-lisp:or phone-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-phone-config 'make-user-phone-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-phone-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-phone-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-type))
      (common-lisp:list
       (common-lisp:cons "PhoneType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-accept))
      (common-lisp:list
       (common-lisp:cons "AutoAccept"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'after-contact-work-time-limit))
      (common-lisp:list
       (common-lisp:cons "AfterContactWorkTimeLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desk-phone-number))
      (common-lisp:list
       (common-lisp:cons "DeskPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-phone-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-quick-connect-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-quick-connect-config-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or user-id common-lisp:null))
   (contact-flow-id (common-lisp:error ":contact-flow-id is required") :type
    (common-lisp:or contact-flow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-quick-connect-config
                    'make-user-quick-connect-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-quick-connect-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-quick-connect-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "ContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-quick-connect-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-reference-"))
   (id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-reference 'make-user-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-search-condition-list ()
   '(trivial-types:proper-list user-search-criteria))
 (common-lisp:defun |make-user-search-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-search-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (user-search-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-search-criteria-"))
   (or-conditions common-lisp:nil :type
    (common-lisp:or user-search-condition-list common-lisp:null))
   (and-conditions common-lisp:nil :type
    (common-lisp:or user-search-condition-list common-lisp:null))
   (string-condition common-lisp:nil :type
    (common-lisp:or string-condition common-lisp:null))
   (hierarchy-group-condition common-lisp:nil :type
    (common-lisp:or hierarchy-group-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-search-criteria 'make-user-search-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-search-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-search-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-conditions))
      (common-lisp:list
       (common-lisp:cons "OrConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-conditions))
      (common-lisp:list
       (common-lisp:cons "AndConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-condition))
      (common-lisp:list
       (common-lisp:cons "StringCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hierarchy-group-condition))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroupCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-search-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-search-filter-"))
   (tag-filter common-lisp:nil :type
    (common-lisp:or control-plane-tag-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-search-filter 'make-user-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filter))
      (common-lisp:list
       (common-lisp:cons "TagFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-search-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-search-summary-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (directory-user-id common-lisp:nil :type
    (common-lisp:or directory-user-id common-lisp:null))
   (hierarchy-group-id common-lisp:nil :type
    (common-lisp:or hierarchy-group-id common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (identity-info common-lisp:nil :type
    (common-lisp:or user-identity-info-lite common-lisp:null))
   (phone-config common-lisp:nil :type
    (common-lisp:or user-phone-config common-lisp:null))
   (routing-profile-id common-lisp:nil :type
    (common-lisp:or routing-profile-id common-lisp:null))
   (security-profile-ids common-lisp:nil :type
    (common-lisp:or security-profile-ids common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or agent-username common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-search-summary 'make-user-search-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-search-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-search-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-user-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-group-id))
      (common-lisp:list
       (common-lisp:cons "HierarchyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-info))
      (common-lisp:list
       (common-lisp:cons "IdentityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-config))
      (common-lisp:list
       (common-lisp:cons "PhoneConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-profile-id))
      (common-lisp:list
       (common-lisp:cons "RoutingProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-search-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-search-summary-list ()
   '(trivial-types:proper-list user-search-summary))
 (common-lisp:defun |make-user-search-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-search-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (user-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-summary-"))
   (id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or agent-username common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-summary 'make-user-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-summary-list ()
   '(trivial-types:proper-list user-summary))
 (common-lisp:defun |make-user-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-user-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype value () 'common-lisp:double-float)
(common-lisp:deftype version-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (vocabulary (:copier common-lisp:nil)
      (:conc-name "struct-shape-vocabulary-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vocabulary-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or vocabulary-language-code common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or vocabulary-last-modified-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or vocabulary-failure-reason common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or vocabulary-content common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vocabulary 'make-vocabulary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vocabulary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vocabulary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vocabulary))
   common-lisp:nil))
(common-lisp:deftype vocabulary-content () 'common-lisp:string)
(common-lisp:deftype vocabulary-failure-reason () 'common-lisp:string)
(common-lisp:deftype vocabulary-id () 'common-lisp:string)
(common-lisp:deftype vocabulary-language-code () 'common-lisp:string)
(common-lisp:deftype vocabulary-last-modified-time () 'common-lisp:string)
(common-lisp:deftype vocabulary-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-next-token () 'common-lisp:string)
(common-lisp:deftype vocabulary-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vocabulary-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-vocabulary-summary-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vocabulary-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or vocabulary-language-code common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or vocabulary-last-modified-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or vocabulary-failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vocabulary-summary 'make-vocabulary-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vocabulary-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vocabulary-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vocabulary-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vocabulary-summary-list ()
   '(trivial-types:proper-list vocabulary-summary))
 (common-lisp:defun |make-vocabulary-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vocabulary-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (voice-recording-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-recording-configuration-"))
   (voice-recording-track common-lisp:nil :type
    (common-lisp:or voice-recording-track common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'voice-recording-configuration
                    'make-voice-recording-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          voice-recording-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          voice-recording-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-recording-track))
      (common-lisp:list
       (common-lisp:cons "VoiceRecordingTrack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          voice-recording-configuration))
   common-lisp:nil))
(common-lisp:deftype voice-recording-track () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (wisdom-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-wisdom-info-"))
   (session-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'wisdom-info 'make-wisdom-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wisdom-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wisdom-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-arn))
      (common-lisp:list
       (common-lisp:cons "SessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wisdom-info))
   common-lisp:nil))
common-lisp:nil
(common-lisp:progn
 (common-lisp:defun activate-evaluation-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-form-id
                     evaluation-form-version)
   (common-lisp:declare
    (common-lisp:ignorable instance-id evaluation-form-id
     evaluation-form-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-evaluation-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/evaluation-forms/~A/~A/activate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-form-id))))
                                                        "ActivateEvaluationForm"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-evaluation-form))
(common-lisp:progn
 (common-lisp:defun associate-approved-origin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id origin)
   (common-lisp:declare (common-lisp:ignorable instance-id origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-approved-origin-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/approved-origin"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "AssociateApprovedOrigin"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-approved-origin))
(common-lisp:progn
 (common-lisp:defun associate-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id lex-bot lex-v2bot)
   (common-lisp:declare (common-lisp:ignorable instance-id lex-bot lex-v2bot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/bot"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "AssociateBot"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-bot))
(common-lisp:progn
 (common-lisp:defun associate-default-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id language-code vocabulary-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id language-code vocabulary-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-default-vocabulary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/default-vocabulary/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'language-code))))
                                                        "AssociateDefaultVocabulary"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-default-vocabulary))
(common-lisp:progn
 (common-lisp:defun associate-instance-storage-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id resource-type storage-config)
   (common-lisp:declare
    (common-lisp:ignorable instance-id resource-type storage-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-instance-storage-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/storage-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "AssociateInstanceStorageConfig"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-instance-storage-config))
(common-lisp:progn
 (common-lisp:defun associate-lambda-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id function-arn)
   (common-lisp:declare (common-lisp:ignorable instance-id function-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-lambda-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/lambda-function"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "AssociateLambdaFunction"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-lambda-function))
(common-lisp:progn
 (common-lisp:defun associate-lex-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id lex-bot)
   (common-lisp:declare (common-lisp:ignorable instance-id lex-bot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-lex-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/lex-bot"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "AssociateLexBot"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-lex-bot))
(common-lisp:progn
 (common-lisp:defun associate-phone-number-contact-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id instance-id
                     contact-flow-id)
   (common-lisp:declare
    (common-lisp:ignorable phone-number-id instance-id contact-flow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-phone-number-contact-flow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/phone-number/~A/contact-flow"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'phone-number-id))))
                                                        "AssociatePhoneNumberContactFlow"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-phone-number-contact-flow))
(common-lisp:progn
 (common-lisp:defun associate-queue-quick-connects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id quick-connect-ids)
   (common-lisp:declare
    (common-lisp:ignorable instance-id queue-id quick-connect-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-queue-quick-connects-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A/associate-quick-connects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "AssociateQueueQuickConnects"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-queue-quick-connects))
(common-lisp:progn
 (common-lisp:defun associate-routing-profile-queues
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id routing-profile-id
                     queue-configs)
   (common-lisp:declare
    (common-lisp:ignorable instance-id routing-profile-id queue-configs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-routing-profile-queues-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A/~A/associate-queues"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'routing-profile-id))))
                                                        "AssociateRoutingProfileQueues"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-routing-profile-queues))
(common-lisp:progn
 (common-lisp:defun associate-security-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id key)
   (common-lisp:declare (common-lisp:ignorable instance-id key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-security-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/security-key"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "AssociateSecurityKey"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-security-key))
(common-lisp:progn
 (common-lisp:defun claim-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-arn phone-number
                     phone-number-description tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable target-arn phone-number phone-number-description
     tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-claim-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/phone-number/claim"
                                                        "ClaimPhoneNumber"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'claim-phone-number))
(common-lisp:progn
 (common-lisp:defun create-agent-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name description state
                     display-order tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name description state display-order
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-agent-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agent-status/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateAgentStatus"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-agent-status))
(common-lisp:progn
 (common-lisp:defun create-contact-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name type description content
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name type description content tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-contact-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flows/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateContactFlow"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-contact-flow))
(common-lisp:progn
 (common-lisp:defun create-contact-flow-module
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name description content tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name description content tags
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-contact-flow-module-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flow-modules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateContactFlowModule"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-contact-flow-module))
(common-lisp:progn
 (common-lisp:defun create-evaluation-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id title description items
                     scoring-strategy client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id title description items scoring-strategy
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-evaluation-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/evaluation-forms/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateEvaluationForm"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-evaluation-form))
(common-lisp:progn
 (common-lisp:defun create-hours-of-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name description time-zone
                     config tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name description time-zone config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-hours-of-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/hours-of-operations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateHoursOfOperation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-hours-of-operation))
(common-lisp:progn
 (common-lisp:defun create-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-management-type
                     instance-alias directory-id inbound-calls-enabled
                     outbound-calls-enabled)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-management-type instance-alias
     directory-id inbound-calls-enabled outbound-calls-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/instance"
                                                        "CreateInstance"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-instance))
(common-lisp:progn
 (common-lisp:defun create-integration-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id integration-type
                     integration-arn source-application-url
                     source-application-name source-type tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-id integration-type integration-arn
     source-application-url source-application-name source-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-integration-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/integration-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateIntegrationAssociation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-integration-association))
(common-lisp:progn
 (common-lisp:defun create-participant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id client-token
                     participant-details)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id client-token
     participant-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-participant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/create-participant"
                                                        "CreateParticipant"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-participant))
(common-lisp:progn
 (common-lisp:defun create-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name description
                     outbound-caller-config hours-of-operation-id max-contacts
                     quick-connect-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name description outbound-caller-config
     hours-of-operation-id max-contacts quick-connect-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-queue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateQueue"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-queue))
(common-lisp:progn
 (common-lisp:defun create-quick-connect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name description
                     quick-connect-config tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name description quick-connect-config
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-quick-connect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quick-connects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateQuickConnect"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-quick-connect))
(common-lisp:progn
 (common-lisp:defun create-routing-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name description
                     default-outbound-queue-id queue-configs
                     media-concurrencies tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name description
     default-outbound-queue-id queue-configs media-concurrencies tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-routing-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateRoutingProfile"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-routing-profile))
(common-lisp:progn
 (common-lisp:defun create-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name trigger-event-source
                     function actions publish-status client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name trigger-event-source function
     actions publish-status client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateRule"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rule))
(common-lisp:progn
 (common-lisp:defun create-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name description
                     permissions instance-id tags allowed-access-control-tags
                     tag-restricted-resources)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name description permissions
     instance-id tags allowed-access-control-tags tag-restricted-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateSecurityProfile"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-security-profile))
(common-lisp:progn
 (common-lisp:defun create-task-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id name description
                     contact-flow-id constraints defaults status fields
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id name description contact-flow-id
     constraints defaults status fields client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-task-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/task/template"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateTaskTemplate"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-task-template))
(common-lisp:progn
 (common-lisp:defun create-traffic-distribution-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description instance-id client-token
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name description instance-id client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-traffic-distribution-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/traffic-distribution-group"
                                                        "CreateTrafficDistributionGroup"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-traffic-distribution-group))
(common-lisp:progn
 (common-lisp:defun create-use-case
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id integration-association-id
                     use-case-type tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-id integration-association-id use-case-type
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-use-case-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/integration-associations/~A/use-cases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'integration-association-id))))
                                                        "CreateUseCase"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-use-case))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key username password identity-info
                     phone-config directory-user-id security-profile-ids
                     routing-profile-id hierarchy-group-id instance-id tags)
   (common-lisp:declare
    (common-lisp:ignorable username password identity-info phone-config
     directory-user-id security-profile-ids routing-profile-id
     hierarchy-group-id instance-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateUser"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-user-hierarchy-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name parent-group-id instance-id tags)
   (common-lisp:declare
    (common-lisp:ignorable name parent-group-id instance-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-user-hierarchy-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user-hierarchy-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateUserHierarchyGroup"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user-hierarchy-group))
(common-lisp:progn
 (common-lisp:defun create-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token instance-id vocabulary-name
                     language-code content tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token instance-id vocabulary-name
     language-code content tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/vocabulary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "CreateVocabulary"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vocabulary))
(common-lisp:progn
 (common-lisp:defun deactivate-evaluation-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-form-id
                     evaluation-form-version)
   (common-lisp:declare
    (common-lisp:ignorable instance-id evaluation-form-id
     evaluation-form-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deactivate-evaluation-form-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/evaluation-forms/~A/~A/deactivate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-form-id))))
                                                        "DeactivateEvaluationForm"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-evaluation-form))
(common-lisp:progn
 (common-lisp:defun delete-contact-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-id)
   (common-lisp:declare (common-lisp:ignorable instance-id evaluation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-contact-evaluation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-evaluations/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-id))))
                                                        "DeleteContactEvaluation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-contact-evaluation))
(common-lisp:progn
 (common-lisp:defun delete-contact-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-id)
   (common-lisp:declare (common-lisp:ignorable instance-id contact-flow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-contact-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flows/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-id))))
                                                        "DeleteContactFlow"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-contact-flow))
(common-lisp:progn
 (common-lisp:defun delete-contact-flow-module
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-module-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-module-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-contact-flow-module-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flow-modules/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-module-id))))
                                                        "DeleteContactFlowModule"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-contact-flow-module))
(common-lisp:progn
 (common-lisp:defun delete-evaluation-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-form-id
                     evaluation-form-version)
   (common-lisp:declare
    (common-lisp:ignorable instance-id evaluation-form-id
     evaluation-form-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-evaluation-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/evaluation-forms/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-form-id))))
                                                        "DeleteEvaluationForm"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-evaluation-form))
(common-lisp:progn
 (common-lisp:defun delete-hours-of-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id hours-of-operation-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id hours-of-operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-hours-of-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/hours-of-operations/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'hours-of-operation-id))))
                                                        "DeleteHoursOfOperation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-hours-of-operation))
(common-lisp:progn
 (common-lisp:defun delete-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "DeleteInstance"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-instance))
(common-lisp:progn
 (common-lisp:defun delete-integration-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id integration-association-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id integration-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-integration-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/integration-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'integration-association-id))))
                                                        "DeleteIntegrationAssociation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-integration-association))
(common-lisp:progn
 (common-lisp:defun delete-quick-connect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id quick-connect-id)
   (common-lisp:declare (common-lisp:ignorable instance-id quick-connect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-quick-connect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quick-connects/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-connect-id))))
                                                        "DeleteQuickConnect"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-quick-connect))
(common-lisp:progn
 (common-lisp:defun delete-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id rule-id)
   (common-lisp:declare (common-lisp:ignorable instance-id rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-id))))
                                                        "DeleteRule"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rule))
(common-lisp:progn
 (common-lisp:defun delete-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id security-profile-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id security-profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-id))))
                                                        "DeleteSecurityProfile"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-security-profile))
(common-lisp:progn
 (common-lisp:defun delete-task-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id task-template-id)
   (common-lisp:declare (common-lisp:ignorable instance-id task-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-task-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/task/template/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-template-id))))
                                                        "DeleteTaskTemplate"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-task-template))
(common-lisp:progn
 (common-lisp:defun delete-traffic-distribution-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key traffic-distribution-group-id)
   (common-lisp:declare (common-lisp:ignorable traffic-distribution-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-traffic-distribution-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/traffic-distribution-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'traffic-distribution-group-id))))
                                                        "DeleteTrafficDistributionGroup"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-traffic-distribution-group))
(common-lisp:progn
 (common-lisp:defun delete-use-case
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id integration-association-id
                     use-case-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id integration-association-id use-case-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-use-case-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/integration-associations/~A/use-cases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'integration-association-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'use-case-id))))
                                                        "DeleteUseCase"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-use-case))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id user-id)
   (common-lisp:declare (common-lisp:ignorable instance-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeleteUser"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-hierarchy-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hierarchy-group-id instance-id)
   (common-lisp:declare (common-lisp:ignorable hierarchy-group-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-hierarchy-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user-hierarchy-groups/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'hierarchy-group-id))))
                                                        "DeleteUserHierarchyGroup"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-hierarchy-group))
(common-lisp:progn
 (common-lisp:defun delete-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id vocabulary-id)
   (common-lisp:declare (common-lisp:ignorable instance-id vocabulary-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/vocabulary-remove/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vocabulary-id))))
                                                        "DeleteVocabulary"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vocabulary))
(common-lisp:progn
 (common-lisp:defun describe-agent-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id agent-status-id)
   (common-lisp:declare (common-lisp:ignorable instance-id agent-status-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-agent-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agent-status/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-status-id))))
                                                        "DescribeAgentStatus"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-agent-status))
(common-lisp:progn
 (common-lisp:defun describe-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id)
   (common-lisp:declare (common-lisp:ignorable instance-id contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contacts/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-id))))
                                                        "DescribeContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-contact))
(common-lisp:progn
 (common-lisp:defun describe-contact-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-id)
   (common-lisp:declare (common-lisp:ignorable instance-id evaluation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-contact-evaluation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-evaluations/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-id))))
                                                        "DescribeContactEvaluation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-contact-evaluation))
(common-lisp:progn
 (common-lisp:defun describe-contact-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-id)
   (common-lisp:declare (common-lisp:ignorable instance-id contact-flow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-contact-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flows/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-id))))
                                                        "DescribeContactFlow"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-contact-flow))
(common-lisp:progn
 (common-lisp:defun describe-contact-flow-module
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-module-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-module-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-contact-flow-module-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flow-modules/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-module-id))))
                                                        "DescribeContactFlowModule"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-contact-flow-module))
(common-lisp:progn
 (common-lisp:defun describe-evaluation-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-form-id
                     evaluation-form-version)
   (common-lisp:declare
    (common-lisp:ignorable instance-id evaluation-form-id
     evaluation-form-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-evaluation-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/evaluation-forms/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-form-id))))
                                                        "DescribeEvaluationForm"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-evaluation-form))
(common-lisp:progn
 (common-lisp:defun describe-hours-of-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id hours-of-operation-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id hours-of-operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hours-of-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/hours-of-operations/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'hours-of-operation-id))))
                                                        "DescribeHoursOfOperation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-hours-of-operation))
(common-lisp:progn
 (common-lisp:defun describe-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "DescribeInstance"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance))
(common-lisp:progn
 (common-lisp:defun describe-instance-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id attribute-type)
   (common-lisp:declare (common-lisp:ignorable instance-id attribute-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/attribute/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attribute-type))))
                                                        "DescribeInstanceAttribute"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance-attribute))
(common-lisp:progn
 (common-lisp:defun describe-instance-storage-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id association-id resource-type)
   (common-lisp:declare
    (common-lisp:ignorable instance-id association-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-storage-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/storage-config/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DescribeInstanceStorageConfig"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance-storage-config))
(common-lisp:progn
 (common-lisp:defun describe-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id)
   (common-lisp:declare (common-lisp:ignorable phone-number-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/phone-number/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'phone-number-id))))
                                                        "DescribePhoneNumber"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-phone-number))
(common-lisp:progn
 (common-lisp:defun describe-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id)
   (common-lisp:declare (common-lisp:ignorable instance-id queue-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-queue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "DescribeQueue"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-queue))
(common-lisp:progn
 (common-lisp:defun describe-quick-connect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id quick-connect-id)
   (common-lisp:declare (common-lisp:ignorable instance-id quick-connect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-quick-connect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quick-connects/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-connect-id))))
                                                        "DescribeQuickConnect"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-quick-connect))
(common-lisp:progn
 (common-lisp:defun describe-routing-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id routing-profile-id)
   (common-lisp:declare (common-lisp:ignorable instance-id routing-profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-routing-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'routing-profile-id))))
                                                        "DescribeRoutingProfile"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-routing-profile))
(common-lisp:progn
 (common-lisp:defun describe-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id rule-id)
   (common-lisp:declare (common-lisp:ignorable instance-id rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-id))))
                                                        "DescribeRule"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-rule))
(common-lisp:progn
 (common-lisp:defun describe-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-id instance-id)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-security-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-id))))
                                                        "DescribeSecurityProfile"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-security-profile))
(common-lisp:progn
 (common-lisp:defun describe-traffic-distribution-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key traffic-distribution-group-id)
   (common-lisp:declare (common-lisp:ignorable traffic-distribution-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-traffic-distribution-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/traffic-distribution-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'traffic-distribution-group-id))))
                                                        "DescribeTrafficDistributionGroup"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-traffic-distribution-group))
(common-lisp:progn
 (common-lisp:defun describe-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id instance-id)
   (common-lisp:declare (common-lisp:ignorable user-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DescribeUser"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user))
(common-lisp:progn
 (common-lisp:defun describe-user-hierarchy-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hierarchy-group-id instance-id)
   (common-lisp:declare (common-lisp:ignorable hierarchy-group-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-user-hierarchy-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user-hierarchy-groups/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'hierarchy-group-id))))
                                                        "DescribeUserHierarchyGroup"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user-hierarchy-group))
(common-lisp:progn
 (common-lisp:defun describe-user-hierarchy-structure
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-user-hierarchy-structure-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user-hierarchy-structure/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "DescribeUserHierarchyStructure"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user-hierarchy-structure))
(common-lisp:progn
 (common-lisp:defun describe-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id vocabulary-id)
   (common-lisp:declare (common-lisp:ignorable instance-id vocabulary-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/vocabulary/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vocabulary-id))))
                                                        "DescribeVocabulary"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-vocabulary))
(common-lisp:progn
 (common-lisp:defun disassociate-approved-origin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id origin)
   (common-lisp:declare (common-lisp:ignorable instance-id origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-approved-origin-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/approved-origin"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "DisassociateApprovedOrigin"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-approved-origin))
(common-lisp:progn
 (common-lisp:defun disassociate-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id lex-bot lex-v2bot)
   (common-lisp:declare (common-lisp:ignorable instance-id lex-bot lex-v2bot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/bot"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "DisassociateBot"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-bot))
(common-lisp:progn
 (common-lisp:defun disassociate-instance-storage-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id association-id resource-type)
   (common-lisp:declare
    (common-lisp:ignorable instance-id association-id resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-instance-storage-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/storage-config/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DisassociateInstanceStorageConfig"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-instance-storage-config))
(common-lisp:progn
 (common-lisp:defun disassociate-lambda-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id function-arn)
   (common-lisp:declare (common-lisp:ignorable instance-id function-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-lambda-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/lambda-function"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "DisassociateLambdaFunction"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-lambda-function))
(common-lisp:progn
 (common-lisp:defun disassociate-lex-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id bot-name lex-region)
   (common-lisp:declare
    (common-lisp:ignorable instance-id bot-name lex-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-lex-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/lex-bot"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "DisassociateLexBot"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-lex-bot))
(common-lisp:progn
 (common-lisp:defun disassociate-phone-number-contact-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id instance-id)
   (common-lisp:declare (common-lisp:ignorable phone-number-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-phone-number-contact-flow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/phone-number/~A/contact-flow"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'phone-number-id))))
                                                        "DisassociatePhoneNumberContactFlow"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-phone-number-contact-flow))
(common-lisp:progn
 (common-lisp:defun disassociate-queue-quick-connects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id quick-connect-ids)
   (common-lisp:declare
    (common-lisp:ignorable instance-id queue-id quick-connect-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-queue-quick-connects-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A/disassociate-quick-connects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "DisassociateQueueQuickConnects"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-queue-quick-connects))
(common-lisp:progn
 (common-lisp:defun disassociate-routing-profile-queues
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id routing-profile-id
                     queue-references)
   (common-lisp:declare
    (common-lisp:ignorable instance-id routing-profile-id queue-references))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-routing-profile-queues-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A/~A/disassociate-queues"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'routing-profile-id))))
                                                        "DisassociateRoutingProfileQueues"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-routing-profile-queues))
(common-lisp:progn
 (common-lisp:defun disassociate-security-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id association-id)
   (common-lisp:declare (common-lisp:ignorable instance-id association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-security-key-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/security-key/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "DisassociateSecurityKey"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-security-key))
(common-lisp:progn
 (common-lisp:defun dismiss-user-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id instance-id contact-id)
   (common-lisp:declare (common-lisp:ignorable user-id instance-id contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-dismiss-user-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A/contact"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DismissUserContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'dismiss-user-contact))
(common-lisp:progn
 (common-lisp:defun get-contact-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id initial-contact-id)
   (common-lisp:declare (common-lisp:ignorable instance-id initial-contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact/attributes/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'initial-contact-id))))
                                                        "GetContactAttributes"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact-attributes))
(common-lisp:progn
 (common-lisp:defun get-current-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id filters groupings
                     current-metrics next-token max-results sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable instance-id filters groupings current-metrics
     next-token max-results sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-current-metric-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metrics/current/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "GetCurrentMetricData"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-current-metric-data))
(common-lisp:progn
 (common-lisp:defun get-current-user-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-current-user-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metrics/userdata/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "GetCurrentUserData"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-current-user-data))
(common-lisp:progn
 (common-lisp:defun get-federation-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-federation-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/federate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "GetFederationToken"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-federation-token))
(common-lisp:progn
 (common-lisp:defun get-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id start-time end-time filters
                     groupings historical-metrics next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id start-time end-time filters groupings
     historical-metrics next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-metric-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/metrics/historical/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "GetMetricData"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-metric-data))
(common-lisp:progn
 (common-lisp:defun get-metric-data-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn start-time end-time filters
                     groupings metrics next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn start-time end-time filters groupings
     metrics next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-metric-data-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/metrics/data"
                                                        "GetMetricDataV2"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-metric-data-v2))
(common-lisp:progn
 (common-lisp:defun get-task-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id task-template-id
                     snapshot-version)
   (common-lisp:declare
    (common-lisp:ignorable instance-id task-template-id snapshot-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-task-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/task/template/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-template-id))))
                                                        "GetTaskTemplate"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-task-template))
(common-lisp:progn
 (common-lisp:defun get-traffic-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-traffic-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/traffic-distribution/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetTrafficDistribution"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-traffic-distribution))
(common-lisp:progn
 (common-lisp:defun list-agent-statuses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results
                     agent-status-types)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results
     agent-status-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-agent-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agent-status/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListAgentStatuses"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-agent-statuses))
(common-lisp:progn
 (common-lisp:defun list-approved-origins
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-approved-origins-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/approved-origins"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListApprovedOrigins"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-approved-origins))
(common-lisp:progn
 (common-lisp:defun list-bots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results
                     lex-version)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results lex-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/bots"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListBots"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bots))
(common-lisp:progn
 (common-lisp:defun list-contact-evaluations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contact-evaluations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-evaluations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListContactEvaluations"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contact-evaluations))
(common-lisp:progn
 (common-lisp:defun list-contact-flow-modules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results
                     contact-flow-module-state)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results
     contact-flow-module-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-contact-flow-modules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flow-modules-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListContactFlowModules"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contact-flow-modules))
(common-lisp:progn
 (common-lisp:defun list-contact-flows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-types next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-types next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contact-flows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flows-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListContactFlows"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contact-flows))
(common-lisp:progn
 (common-lisp:defun list-contact-references
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id reference-types
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id reference-types next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contact-references-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact/references/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-id))))
                                                        "ListContactReferences"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contact-references))
(common-lisp:progn
 (common-lisp:defun list-default-vocabularies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id language-code max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id language-code max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-default-vocabularies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/default-vocabulary-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListDefaultVocabularies"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-default-vocabularies))
(common-lisp:progn
 (common-lisp:defun list-evaluation-form-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-form-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id evaluation-form-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-evaluation-form-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/evaluation-forms/~A/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-form-id))))
                                                        "ListEvaluationFormVersions"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-evaluation-form-versions))
(common-lisp:progn
 (common-lisp:defun list-evaluation-forms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-evaluation-forms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/evaluation-forms/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListEvaluationForms"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-evaluation-forms))
(common-lisp:progn
 (common-lisp:defun list-hours-of-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-hours-of-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/hours-of-operations-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListHoursOfOperations"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-hours-of-operations))
(common-lisp:progn
 (common-lisp:defun list-instance-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instance-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/attributes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListInstanceAttributes"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-instance-attributes))
(common-lisp:progn
 (common-lisp:defun list-instance-storage-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id resource-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id resource-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-instance-storage-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/storage-configs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListInstanceStorageConfigs"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-instance-storage-configs))
(common-lisp:progn
 (common-lisp:defun list-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/instance"
                                                        "ListInstances"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-instances))
(common-lisp:progn
 (common-lisp:defun list-integration-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id integration-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id integration-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-integration-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/integration-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListIntegrationAssociations"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-integration-associations))
(common-lisp:progn
 (common-lisp:defun list-lambda-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lambda-functions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/lambda-functions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListLambdaFunctions"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lambda-functions))
(common-lisp:progn
 (common-lisp:defun list-lex-bots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lex-bots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/lex-bots"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListLexBots"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lex-bots))
(common-lisp:progn
 (common-lisp:defun list-phone-numbers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id phone-number-types
                     phone-number-country-codes next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id phone-number-types
     phone-number-country-codes next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-phone-numbers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/phone-numbers-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListPhoneNumbers"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-phone-numbers))
(common-lisp:progn
 (common-lisp:defun list-phone-numbers-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-arn max-results next-token
                     phone-number-country-codes phone-number-types
                     phone-number-prefix)
   (common-lisp:declare
    (common-lisp:ignorable target-arn max-results next-token
     phone-number-country-codes phone-number-types phone-number-prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-phone-numbers-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/phone-number/list"
                                                        "ListPhoneNumbersV2"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-phone-numbers-v2))
(common-lisp:progn
 (common-lisp:defun list-prompts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-prompts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prompts-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListPrompts"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-prompts))
(common-lisp:progn
 (common-lisp:defun list-queue-quick-connects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id queue-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-queue-quick-connects-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A/quick-connects"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "ListQueueQuickConnects"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-queue-quick-connects))
(common-lisp:progn
 (common-lisp:defun list-queues
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-types next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id queue-types next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-queues-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListQueues"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-queues))
(common-lisp:progn
 (common-lisp:defun list-quick-connects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results
                     quick-connect-types)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results
     quick-connect-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-quick-connects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quick-connects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListQuickConnects"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-quick-connects))
(common-lisp:progn
 (common-lisp:defun list-routing-profile-queues
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id routing-profile-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id routing-profile-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-routing-profile-queues-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A/~A/queues"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'routing-profile-id))))
                                                        "ListRoutingProfileQueues"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-routing-profile-queues))
(common-lisp:progn
 (common-lisp:defun list-routing-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-routing-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListRoutingProfiles"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-routing-profiles))
(common-lisp:progn
 (common-lisp:defun list-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id publish-status
                     event-source-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id publish-status event-source-name
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListRules"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rules))
(common-lisp:progn
 (common-lisp:defun list-security-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-security-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/security-keys"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListSecurityKeys"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-keys))
(common-lisp:progn
 (common-lisp:defun list-security-profile-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-id instance-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-id instance-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-security-profile-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles-permissions/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-id))))
                                                        "ListSecurityProfilePermissions"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-profile-permissions))
(common-lisp:progn
 (common-lisp:defun list-security-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-security-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListSecurityProfiles"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-profiles))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-task-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results status
                     name)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results status name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-task-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/task/template"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListTaskTemplates"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-task-templates))
(common-lisp:progn
 (common-lisp:defun list-traffic-distribution-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token instance-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-distribution-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/traffic-distribution-groups"
                                                        "ListTrafficDistributionGroups"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-traffic-distribution-groups))
(common-lisp:progn
 (common-lisp:defun list-use-cases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id integration-association-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id integration-association-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-use-cases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/integration-associations/~A/use-cases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'integration-association-id))))
                                                        "ListUseCases"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-use-cases))
(common-lisp:progn
 (common-lisp:defun list-user-hierarchy-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-user-hierarchy-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user-hierarchy-groups-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListUserHierarchyGroups"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-user-hierarchy-groups))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ListUsers"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun monitor-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id user-id
                     allowed-monitor-capabilities client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id user-id
     allowed-monitor-capabilities client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-monitor-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/monitor"
                                                        "MonitorContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'monitor-contact))
(common-lisp:progn
 (common-lisp:defun put-user-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id instance-id agent-status-id)
   (common-lisp:declare
    (common-lisp:ignorable user-id instance-id agent-status-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-user-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "PutUserStatus"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-user-status))
(common-lisp:progn
 (common-lisp:defun release-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id client-token)
   (common-lisp:declare (common-lisp:ignorable phone-number-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-release-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/phone-number/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'phone-number-id))))
                                                        "ReleasePhoneNumber"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'release-phone-number))
(common-lisp:progn
 (common-lisp:defun replicate-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id replica-region client-token
                     replica-alias)
   (common-lisp:declare
    (common-lisp:ignorable instance-id replica-region client-token
     replica-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-replicate-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/replicate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "ReplicateInstance"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'replicate-instance))
(common-lisp:progn
 (common-lisp:defun resume-contact-recording
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id
                     initial-contact-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id initial-contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-contact-recording-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/resume-recording"
                                                        "ResumeContactRecording"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resume-contact-recording))
(common-lisp:progn
 (common-lisp:defun search-available-phone-numbers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-arn phone-number-country-code
                     phone-number-type phone-number-prefix max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable target-arn phone-number-country-code
     phone-number-type phone-number-prefix max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-available-phone-numbers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/phone-number/search-available"
                                                        "SearchAvailablePhoneNumbers"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-available-phone-numbers))
(common-lisp:progn
 (common-lisp:defun search-queues
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results
                     search-filter search-criteria)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results search-filter
     search-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-queues-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/search-queues"
                                                        "SearchQueues"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-queues))
(common-lisp:progn
 (common-lisp:defun search-routing-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results
                     search-filter search-criteria)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results search-filter
     search-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-routing-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/search-routing-profiles"
                                                        "SearchRoutingProfiles"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-routing-profiles))
(common-lisp:progn
 (common-lisp:defun search-security-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results
                     search-criteria search-filter)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results search-criteria
     search-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-security-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/search-security-profiles"
                                                        "SearchSecurityProfiles"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-security-profiles))
(common-lisp:progn
 (common-lisp:defun search-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id next-token max-results
                     search-filter search-criteria)
   (common-lisp:declare
    (common-lisp:ignorable instance-id next-token max-results search-filter
     search-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/search-users"
                                                        "SearchUsers"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-users))
(common-lisp:progn
 (common-lisp:defun search-vocabularies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id max-results next-token state
                     name-starts-with language-code)
   (common-lisp:declare
    (common-lisp:ignorable instance-id max-results next-token state
     name-starts-with language-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-vocabularies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/vocabulary-summary/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "SearchVocabularies"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-vocabularies))
(common-lisp:progn
 (common-lisp:defun start-chat-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-id attributes
                     participant-details initial-message client-token
                     chat-duration-in-minutes supported-messaging-content-types
                     persistent-chat related-contact-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-id attributes
     participant-details initial-message client-token chat-duration-in-minutes
     supported-messaging-content-types persistent-chat related-contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-chat-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/contact/chat"
                                                        "StartChatContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-chat-contact))
(common-lisp:progn
 (common-lisp:defun start-contact-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id evaluation-form-id
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id evaluation-form-id
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-contact-evaluation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-evaluations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "StartContactEvaluation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-contact-evaluation))
(common-lisp:progn
 (common-lisp:defun start-contact-recording
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id initial-contact-id
                     voice-recording-configuration)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id initial-contact-id
     voice-recording-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-contact-recording-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/start-recording"
                                                        "StartContactRecording"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-contact-recording))
(common-lisp:progn
 (common-lisp:defun start-contact-streaming
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id
                     chat-streaming-configuration client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id chat-streaming-configuration
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-contact-streaming-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/start-streaming"
                                                        "StartContactStreaming"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-contact-streaming))
(common-lisp:progn
 (common-lisp:defun start-outbound-voice-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-phone-number contact-flow-id
                     instance-id client-token source-phone-number queue-id
                     attributes answer-machine-detection-config campaign-id
                     traffic-type)
   (common-lisp:declare
    (common-lisp:ignorable destination-phone-number contact-flow-id instance-id
     client-token source-phone-number queue-id attributes
     answer-machine-detection-config campaign-id traffic-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-outbound-voice-contact-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/contact/outbound-voice"
                                                        "StartOutboundVoiceContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-outbound-voice-contact))
(common-lisp:progn
 (common-lisp:defun start-task-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id previous-contact-id
                     contact-flow-id attributes name references description
                     client-token scheduled-time task-template-id
                     quick-connect-id related-contact-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id previous-contact-id contact-flow-id
     attributes name references description client-token scheduled-time
     task-template-id quick-connect-id related-contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-task-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/contact/task"
                                                        "StartTaskContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-task-contact))
(common-lisp:progn
 (common-lisp:defun stop-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id instance-id)
   (common-lisp:declare (common-lisp:ignorable contact-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/contact/stop"
                                                        "StopContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-contact))
(common-lisp:progn
 (common-lisp:defun stop-contact-recording
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id
                     initial-contact-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id initial-contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-contact-recording-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/stop-recording"
                                                        "StopContactRecording"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-contact-recording))
(common-lisp:progn
 (common-lisp:defun stop-contact-streaming
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id streaming-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id streaming-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-contact-streaming-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/stop-streaming"
                                                        "StopContactStreaming"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-contact-streaming))
(common-lisp:progn
 (common-lisp:defun submit-contact-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-id answers notes)
   (common-lisp:declare
    (common-lisp:ignorable instance-id evaluation-id answers notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-submit-contact-evaluation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-evaluations/~A/~A/submit"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-id))))
                                                        "SubmitContactEvaluation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-contact-evaluation))
(common-lisp:progn
 (common-lisp:defun suspend-contact-recording
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id
                     initial-contact-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id initial-contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-suspend-contact-recording-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/suspend-recording"
                                                        "SuspendContactRecording"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'suspend-contact-recording))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun transfer-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id queue-id user-id
                     contact-flow-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id queue-id user-id
     contact-flow-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/transfer"
                                                        "TransferContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'transfer-contact))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-agent-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id agent-status-id name
                     description state display-order reset-order-number)
   (common-lisp:declare
    (common-lisp:ignorable instance-id agent-status-id name description state
     display-order reset-order-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-agent-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agent-status/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-status-id))))
                                                        "UpdateAgentStatus"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agent-status))
(common-lisp:progn
 (common-lisp:defun update-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id name description
                     references)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id name description references))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contacts/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-id))))
                                                        "UpdateContact"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact))
(common-lisp:progn
 (common-lisp:defun update-contact-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key initial-contact-id instance-id
                     attributes)
   (common-lisp:declare
    (common-lisp:ignorable initial-contact-id instance-id attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-contact-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/attributes"
                                                        "UpdateContactAttributes"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-attributes))
(common-lisp:progn
 (common-lisp:defun update-contact-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-id answers notes)
   (common-lisp:declare
    (common-lisp:ignorable instance-id evaluation-id answers notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-contact-evaluation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-evaluations/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-id))))
                                                        "UpdateContactEvaluation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-evaluation))
(common-lisp:progn
 (common-lisp:defun update-contact-flow-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-id content)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-id content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-contact-flow-content-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flows/~A/~A/content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-id))))
                                                        "UpdateContactFlowContent"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-flow-content))
(common-lisp:progn
 (common-lisp:defun update-contact-flow-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-id name
                     description contact-flow-state)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-id name description
     contact-flow-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-contact-flow-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flows/~A/~A/metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-id))))
                                                        "UpdateContactFlowMetadata"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-flow-metadata))
(common-lisp:progn
 (common-lisp:defun update-contact-flow-module-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-module-id
                     content)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-module-id content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-contact-flow-module-content-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flow-modules/~A/~A/content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-module-id))))
                                                        "UpdateContactFlowModuleContent"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-flow-module-content))
(common-lisp:progn
 (common-lisp:defun update-contact-flow-module-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-module-id name
                     description state)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-module-id name description
     state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-contact-flow-module-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flow-modules/~A/~A/metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-module-id))))
                                                        "UpdateContactFlowModuleMetadata"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-flow-module-metadata))
(common-lisp:progn
 (common-lisp:defun update-contact-flow-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-flow-id name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-flow-id name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-contact-flow-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact-flows/~A/~A/name"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-flow-id))))
                                                        "UpdateContactFlowName"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-flow-name))
(common-lisp:progn
 (common-lisp:defun update-contact-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id scheduled-time)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id scheduled-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-contact-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/contact/schedule"
                                                        "UpdateContactSchedule"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-schedule))
(common-lisp:progn
 (common-lisp:defun update-evaluation-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id evaluation-form-id
                     evaluation-form-version create-new-version title
                     description items scoring-strategy client-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id evaluation-form-id
     evaluation-form-version create-new-version title description items
     scoring-strategy client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-evaluation-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/evaluation-forms/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'evaluation-form-id))))
                                                        "UpdateEvaluationForm"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-evaluation-form))
(common-lisp:progn
 (common-lisp:defun update-hours-of-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id hours-of-operation-id name
                     description time-zone config)
   (common-lisp:declare
    (common-lisp:ignorable instance-id hours-of-operation-id name description
     time-zone config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-hours-of-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/hours-of-operations/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'hours-of-operation-id))))
                                                        "UpdateHoursOfOperation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-hours-of-operation))
(common-lisp:progn
 (common-lisp:defun update-instance-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id attribute-type value)
   (common-lisp:declare
    (common-lisp:ignorable instance-id attribute-type value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-instance-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/attribute/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attribute-type))))
                                                        "UpdateInstanceAttribute"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-instance-attribute))
(common-lisp:progn
 (common-lisp:defun update-instance-storage-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id association-id resource-type
                     storage-config)
   (common-lisp:declare
    (common-lisp:ignorable instance-id association-id resource-type
     storage-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-instance-storage-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/storage-config/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'association-id))))
                                                        "UpdateInstanceStorageConfig"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-instance-storage-config))
(common-lisp:progn
 (common-lisp:defun update-participant-role-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id contact-id
                     channel-configuration)
   (common-lisp:declare
    (common-lisp:ignorable instance-id contact-id channel-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-participant-role-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact/participant-role-config/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-id))))
                                                        "UpdateParticipantRoleConfig"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-participant-role-config))
(common-lisp:progn
 (common-lisp:defun update-phone-number
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-number-id target-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable phone-number-id target-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-phone-number-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/phone-number/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'phone-number-id))))
                                                        "UpdatePhoneNumber"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-phone-number))
(common-lisp:progn
 (common-lisp:defun update-queue-hours-of-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id
                     hours-of-operation-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id queue-id hours-of-operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-queue-hours-of-operation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A/hours-of-operation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "UpdateQueueHoursOfOperation"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-queue-hours-of-operation))
(common-lisp:progn
 (common-lisp:defun update-queue-max-contacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id max-contacts)
   (common-lisp:declare
    (common-lisp:ignorable instance-id queue-id max-contacts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-queue-max-contacts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A/max-contacts"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "UpdateQueueMaxContacts"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-queue-max-contacts))
(common-lisp:progn
 (common-lisp:defun update-queue-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id name description)
   (common-lisp:declare
    (common-lisp:ignorable instance-id queue-id name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-queue-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A/name"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "UpdateQueueName"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-queue-name))
(common-lisp:progn
 (common-lisp:defun update-queue-outbound-caller-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id
                     outbound-caller-config)
   (common-lisp:declare
    (common-lisp:ignorable instance-id queue-id outbound-caller-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-queue-outbound-caller-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A/outbound-caller-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "UpdateQueueOutboundCallerConfig"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-queue-outbound-caller-config))
(common-lisp:progn
 (common-lisp:defun update-queue-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id queue-id status)
   (common-lisp:declare (common-lisp:ignorable instance-id queue-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-queue-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/queues/~A/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'queue-id))))
                                                        "UpdateQueueStatus"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-queue-status))
(common-lisp:progn
 (common-lisp:defun update-quick-connect-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id quick-connect-id
                     quick-connect-config)
   (common-lisp:declare
    (common-lisp:ignorable instance-id quick-connect-id quick-connect-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-quick-connect-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quick-connects/~A/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-connect-id))))
                                                        "UpdateQuickConnectConfig"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-quick-connect-config))
(common-lisp:progn
 (common-lisp:defun update-quick-connect-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id quick-connect-id name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable instance-id quick-connect-id name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-quick-connect-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quick-connects/~A/~A/name"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-connect-id))))
                                                        "UpdateQuickConnectName"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-quick-connect-name))
(common-lisp:progn
 (common-lisp:defun update-routing-profile-concurrency
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id routing-profile-id
                     media-concurrencies)
   (common-lisp:declare
    (common-lisp:ignorable instance-id routing-profile-id media-concurrencies))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-routing-profile-concurrency-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A/~A/concurrency"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'routing-profile-id))))
                                                        "UpdateRoutingProfileConcurrency"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-routing-profile-concurrency))
(common-lisp:progn
 (common-lisp:defun update-routing-profile-default-outbound-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id routing-profile-id
                     default-outbound-queue-id)
   (common-lisp:declare
    (common-lisp:ignorable instance-id routing-profile-id
     default-outbound-queue-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-routing-profile-default-outbound-queue-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A/~A/default-outbound-queue"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'routing-profile-id))))
                                                        "UpdateRoutingProfileDefaultOutboundQueue"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-routing-profile-default-outbound-queue))
(common-lisp:progn
 (common-lisp:defun update-routing-profile-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id routing-profile-id name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable instance-id routing-profile-id name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-routing-profile-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A/~A/name"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'routing-profile-id))))
                                                        "UpdateRoutingProfileName"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-routing-profile-name))
(common-lisp:progn
 (common-lisp:defun update-routing-profile-queues
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id routing-profile-id
                     queue-configs)
   (common-lisp:declare
    (common-lisp:ignorable instance-id routing-profile-id queue-configs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-routing-profile-queues-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/routing-profiles/~A/~A/queues"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'routing-profile-id))))
                                                        "UpdateRoutingProfileQueues"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-routing-profile-queues))
(common-lisp:progn
 (common-lisp:defun update-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id instance-id name function actions
                     publish-status)
   (common-lisp:declare
    (common-lisp:ignorable rule-id instance-id name function actions
     publish-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-id))))
                                                        "UpdateRule"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rule))
(common-lisp:progn
 (common-lisp:defun update-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description permissions
                     security-profile-id instance-id
                     allowed-access-control-tags tag-restricted-resources)
   (common-lisp:declare
    (common-lisp:ignorable description permissions security-profile-id
     instance-id allowed-access-control-tags tag-restricted-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-id))))
                                                        "UpdateSecurityProfile"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-security-profile))
(common-lisp:progn
 (common-lisp:defun update-task-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-template-id instance-id name
                     description contact-flow-id constraints defaults status
                     fields)
   (common-lisp:declare
    (common-lisp:ignorable task-template-id instance-id name description
     contact-flow-id constraints defaults status fields))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-task-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/instance/~A/task/template/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-template-id))))
                                                        "UpdateTaskTemplate"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-task-template))
(common-lisp:progn
 (common-lisp:defun update-traffic-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id telephony-config)
   (common-lisp:declare (common-lisp:ignorable id telephony-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-traffic-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/traffic-distribution/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateTrafficDistribution"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-traffic-distribution))
(common-lisp:progn
 (common-lisp:defun update-user-hierarchy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hierarchy-group-id user-id instance-id)
   (common-lisp:declare
    (common-lisp:ignorable hierarchy-group-id user-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-hierarchy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A/hierarchy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUserHierarchy"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-hierarchy))
(common-lisp:progn
 (common-lisp:defun update-user-hierarchy-group-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name hierarchy-group-id instance-id)
   (common-lisp:declare
    (common-lisp:ignorable name hierarchy-group-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-hierarchy-group-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user-hierarchy-groups/~A/~A/name"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'hierarchy-group-id))))
                                                        "UpdateUserHierarchyGroupName"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-hierarchy-group-name))
(common-lisp:progn
 (common-lisp:defun update-user-hierarchy-structure
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hierarchy-structure instance-id)
   (common-lisp:declare
    (common-lisp:ignorable hierarchy-structure instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-hierarchy-structure-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user-hierarchy-structure/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))))
                                                        "UpdateUserHierarchyStructure"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-hierarchy-structure))
(common-lisp:progn
 (common-lisp:defun update-user-identity-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-info user-id instance-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-info user-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-identity-info-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A/identity-info"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUserIdentityInfo"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-identity-info))
(common-lisp:progn
 (common-lisp:defun update-user-phone-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key phone-config user-id instance-id)
   (common-lisp:declare
    (common-lisp:ignorable phone-config user-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-phone-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A/phone-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUserPhoneConfig"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-phone-config))
(common-lisp:progn
 (common-lisp:defun update-user-routing-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key routing-profile-id user-id instance-id)
   (common-lisp:declare
    (common-lisp:ignorable routing-profile-id user-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-routing-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A/routing-profile"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUserRoutingProfile"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-routing-profile))
(common-lisp:progn
 (common-lisp:defun update-user-security-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-ids user-id instance-id)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-ids user-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-security-profiles-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'connect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/users/~A/~A/security-profiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUserSecurityProfiles"
                                                        "2017-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-security-profiles))
