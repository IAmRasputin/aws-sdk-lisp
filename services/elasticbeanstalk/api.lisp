;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/elasticbeanstalk/api
  (:use)
  (:nicknames #:aws/elasticbeanstalk)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elasticbeanstalk/api)
(common-lisp:progn
 (common-lisp:defclass elasticbeanstalk-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "elasticbeanstalk" :protocol
                        :query))
 (common-lisp:export 'elasticbeanstalk-request))
(common-lisp:progn
 (common-lisp:define-condition elasticbeanstalk-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elasticbeanstalk-error))
(common-lisp:defvar *error-map*
  '(("CodeBuildNotInServiceRegionException"
     . code-build-not-in-service-region-exception)
    ("ElasticBeanstalkServiceException" . elastic-beanstalk-service-exception)
    ("InsufficientPrivilegesException" . insufficient-privileges-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("ManagedActionInvalidStateException"
     . managed-action-invalid-state-exception)
    ("OperationInProgressException" . operation-in-progress-exception)
    ("PlatformVersionStillReferencedException"
     . platform-version-still-referenced-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceTypeNotSupportedException"
     . resource-type-not-supported-exception)
    ("S3LocationNotInServiceRegionException"
     . s3location-not-in-service-region-exception)
    ("S3SubscriptionRequiredException" . s3subscription-required-exception)
    ("SourceBundleDeletionException" . source-bundle-deletion-exception)
    ("TooManyApplicationVersionsException"
     . too-many-application-versions-exception)
    ("TooManyApplicationsException" . too-many-applications-exception)
    ("TooManyBucketsException" . too-many-buckets-exception)
    ("TooManyConfigurationTemplatesException"
     . too-many-configuration-templates-exception)
    ("TooManyEnvironmentsException" . too-many-environments-exception)
    ("TooManyPlatformsException" . too-many-platforms-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass abort-environment-update-message common-lisp:nil
                       ((environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %abort-environment-update-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %abort-environment-update-message-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'abort-environment-update-message
                    'make-abort-environment-update-message))
 (common-lisp:defun make-abort-environment-update-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name environment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-environment-update-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-environment-update-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-environment-update-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-environment-update-message))
   common-lisp:nil))
(common-lisp:deftype abortable-operation-in-progress () 'common-lisp:boolean)
(common-lisp:deftype action-history-status () 'common-lisp:string)
(common-lisp:deftype action-status () 'common-lisp:string)
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-description common-lisp:nil
                       ((resource-lifecycle-config :initarg
                         :resource-lifecycle-config :type
                         (common-lisp:or application-resource-lifecycle-config
                                         common-lisp:null)
                         :accessor
                         %application-description-resource-lifecycle-config
                         :initform common-lisp:nil)
                        (configuration-templates :initarg
                         :configuration-templates :type
                         (common-lisp:or configuration-template-names-list
                                         common-lisp:null)
                         :accessor
                         %application-description-configuration-templates
                         :initform common-lisp:nil)
                        (versions :initarg :versions :type
                         (common-lisp:or version-labels-list common-lisp:null)
                         :accessor %application-description-versions :initform
                         common-lisp:nil)
                        (date-updated :initarg :date-updated :type
                         (common-lisp:or update-date common-lisp:null)
                         :accessor %application-description-date-updated
                         :initform common-lisp:nil)
                        (date-created :initarg :date-created :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor %application-description-date-created
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %application-description-description
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %application-description-application-name
                         :initform common-lisp:nil)
                        (application-arn :initarg :application-arn :type
                         (common-lisp:or application-arn common-lisp:null)
                         :accessor %application-description-application-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-description 'make-application-description))
 (common-lisp:defun make-application-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-lifecycle-config
                     configuration-templates versions date-updated date-created
                     description application-name application-arn)
   (common-lisp:apply #'common-lisp:make-instance 'application-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-templates))
      (common-lisp:list
       (common-lisp:cons "ConfigurationTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "ResourceLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-description-list ()
   '(trivial-types:proper-list application-description))
 (common-lisp:defun |make-application-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-description-message common-lisp:nil
                       ((application :initarg :application :type
                         (common-lisp:or application-description
                                         common-lisp:null)
                         :accessor %application-description-message-application
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-description-message
                    'make-application-description-message))
 (common-lisp:defun make-application-description-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-description-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-description-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-description-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "Application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-description-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-descriptions-message common-lisp:nil
                       ((applications :initarg :applications :type
                         (common-lisp:or application-description-list
                                         common-lisp:null)
                         :accessor
                         %application-descriptions-message-applications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-descriptions-message
                    'make-application-descriptions-message))
 (common-lisp:defun make-application-descriptions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key applications)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-descriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-descriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-metrics common-lisp:nil
                       ((latency :initarg :latency :type
                         (common-lisp:or latency common-lisp:null) :accessor
                         %application-metrics-latency :initform
                         common-lisp:nil)
                        (status-codes :initarg :status-codes :type
                         (common-lisp:or status-codes common-lisp:null)
                         :accessor %application-metrics-status-codes :initform
                         common-lisp:nil)
                        (request-count :initarg :request-count :type
                         (common-lisp:or request-count common-lisp:null)
                         :accessor %application-metrics-request-count :initform
                         common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %application-metrics-duration :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-metrics 'make-application-metrics))
 (common-lisp:defun make-application-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latency status-codes request-count
                     duration)
   (common-lisp:apply #'common-lisp:make-instance 'application-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-count))
      (common-lisp:list
       (common-lisp:cons "RequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-codes))
      (common-lisp:list
       (common-lisp:cons "StatusCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency))
      (common-lisp:list
       (common-lisp:cons "Latency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-metrics))
   common-lisp:nil))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-names-list ()
   '(trivial-types:proper-list application-name))
 (common-lisp:defun |make-application-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-resource-lifecycle-config common-lisp:nil
                       ((version-lifecycle-config :initarg
                         :version-lifecycle-config :type
                         (common-lisp:or application-version-lifecycle-config
                                         common-lisp:null)
                         :accessor
                         %application-resource-lifecycle-config-version-lifecycle-config
                         :initform common-lisp:nil)
                        (service-role :initarg :service-role :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-resource-lifecycle-config-service-role
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-resource-lifecycle-config
                    'make-application-resource-lifecycle-config))
 (common-lisp:defun make-application-resource-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-lifecycle-config service-role)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-resource-lifecycle-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "VersionLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-resource-lifecycle-description-message
                       common-lisp:nil
                       ((resource-lifecycle-config :initarg
                         :resource-lifecycle-config :type
                         (common-lisp:or application-resource-lifecycle-config
                                         common-lisp:null)
                         :accessor
                         %application-resource-lifecycle-description-message-resource-lifecycle-config
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %application-resource-lifecycle-description-message-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-resource-lifecycle-description-message
                    'make-application-resource-lifecycle-description-message))
 (common-lisp:defun make-application-resource-lifecycle-description-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-lifecycle-config
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-resource-lifecycle-description-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-description-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-description-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "ResourceLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-description-message))
   common-lisp:nil))
(common-lisp:deftype application-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-version-description common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or application-version-status
                                         common-lisp:null)
                         :accessor %application-version-description-status
                         :initform common-lisp:nil)
                        (date-updated :initarg :date-updated :type
                         (common-lisp:or update-date common-lisp:null)
                         :accessor
                         %application-version-description-date-updated
                         :initform common-lisp:nil)
                        (date-created :initarg :date-created :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         %application-version-description-date-created
                         :initform common-lisp:nil)
                        (source-bundle :initarg :source-bundle :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %application-version-description-source-bundle
                         :initform common-lisp:nil)
                        (build-arn :initarg :build-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-version-description-build-arn :initform
                         common-lisp:nil)
                        (source-build-information :initarg
                         :source-build-information :type
                         (common-lisp:or source-build-information
                                         common-lisp:null)
                         :accessor
                         %application-version-description-source-build-information
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor
                         %application-version-description-version-label
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %application-version-description-description
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %application-version-description-application-name
                         :initform common-lisp:nil)
                        (application-version-arn :initarg
                         :application-version-arn :type
                         (common-lisp:or application-version-arn
                                         common-lisp:null)
                         :accessor
                         %application-version-description-application-version-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-version-description
                    'make-application-version-description))
 (common-lisp:defun make-application-version-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status date-updated date-created
                     source-bundle build-arn source-build-information
                     version-label description application-name
                     application-version-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-version-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-build-information))
      (common-lisp:list
       (common-lisp:cons "SourceBuildInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-arn))
      (common-lisp:list
       (common-lisp:cons "BuildArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bundle))
      (common-lisp:list
       (common-lisp:cons "SourceBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-version-description-list ()
   '(trivial-types:proper-list application-version-description))
 (common-lisp:defun |make-application-version-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-version-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-version-description-message common-lisp:nil
                       ((application-version :initarg :application-version
                         :type
                         (common-lisp:or application-version-description
                                         common-lisp:null)
                         :accessor
                         %application-version-description-message-application-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-version-description-message
                    'make-application-version-description-message))
 (common-lisp:defun make-application-version-description-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-version-description-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-version-descriptions-message common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %application-version-descriptions-message-next-token
                         :initform common-lisp:nil)
                        (application-versions :initarg :application-versions
                         :type
                         (common-lisp:or application-version-description-list
                                         common-lisp:null)
                         :accessor
                         %application-version-descriptions-message-application-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-version-descriptions-message
                    'make-application-version-descriptions-message))
 (common-lisp:defun make-application-version-descriptions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token application-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-version-descriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-versions))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-descriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-version-lifecycle-config common-lisp:nil
                       ((max-age-rule :initarg :max-age-rule :type
                         (common-lisp:or max-age-rule common-lisp:null)
                         :accessor
                         %application-version-lifecycle-config-max-age-rule
                         :initform common-lisp:nil)
                        (max-count-rule :initarg :max-count-rule :type
                         (common-lisp:or max-count-rule common-lisp:null)
                         :accessor
                         %application-version-lifecycle-config-max-count-rule
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-version-lifecycle-config
                    'make-application-version-lifecycle-config))
 (common-lisp:defun make-application-version-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-age-rule max-count-rule)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-version-lifecycle-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-lifecycle-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-lifecycle-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count-rule))
      (common-lisp:list
       (common-lisp:cons "MaxCountRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-rule))
      (common-lisp:list
       (common-lisp:cons "MaxAgeRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-lifecycle-config))
   common-lisp:nil))
(common-lisp:deftype application-version-proccess () 'common-lisp:boolean)
(common-lisp:deftype application-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass apply-environment-managed-action-request common-lisp:nil
                       ((action-id :initarg :action-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-environment-managed-action-request-action-id
                         :initform
                         (common-lisp:error ":action-id is required"))
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-environment-managed-action-request-environment-id
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-environment-managed-action-request-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'apply-environment-managed-action-request
                    'make-apply-environment-managed-action-request))
 (common-lisp:defun make-apply-environment-managed-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action-id environment-id
                     environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-environment-managed-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apply-environment-managed-action-result common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-environment-managed-action-result-status
                         :initform common-lisp:nil)
                        (action-type :initarg :action-type :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor
                         %apply-environment-managed-action-result-action-type
                         :initform common-lisp:nil)
                        (action-description :initarg :action-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-environment-managed-action-result-action-description
                         :initform common-lisp:nil)
                        (action-id :initarg :action-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-environment-managed-action-result-action-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'apply-environment-managed-action-result
                    'make-apply-environment-managed-action-result))
 (common-lisp:defun make-apply-environment-managed-action-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status action-type action-description
                     action-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-environment-managed-action-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-description))
      (common-lisp:list
       (common-lisp:cons "ActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-environment-operations-role-message
                       common-lisp:nil
                       ((operations-role :initarg :operations-role :type
                         (common-lisp:or operations-role common-lisp:null)
                         :accessor
                         %associate-environment-operations-role-message-operations-role
                         :initform
                         (common-lisp:error ":operations-role is required"))
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %associate-environment-operations-role-message-environment-name
                         :initform
                         (common-lisp:error ":environment-name is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-environment-operations-role-message
                    'make-associate-environment-operations-role-message))
 (common-lisp:defun make-associate-environment-operations-role-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operations-role environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-environment-operations-role-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-environment-operations-role-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-environment-operations-role-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-role))
      (common-lisp:list
       (common-lisp:cons "OperationsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-environment-operations-role-message))
   common-lisp:nil))
(common-lisp:deftype auto-create-application () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %auto-scaling-group-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defun make-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun |make-auto-scaling-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype available-solution-stack-details-list ()
   '(trivial-types:proper-list solution-stack-description))
 (common-lisp:defun |make-available-solution-stack-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            solution-stack-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype available-solution-stack-names-list ()
   '(trivial-types:proper-list solution-stack-name))
 (common-lisp:defun |make-available-solution-stack-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list solution-stack-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-int () 'common-lisp:integer)
(common-lisp:deftype branch-name () 'common-lisp:string)
(common-lisp:deftype branch-order () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass build-configuration common-lisp:nil
                       ((timeout-in-minutes :initarg :timeout-in-minutes :type
                         (common-lisp:or boxed-int common-lisp:null) :accessor
                         %build-configuration-timeout-in-minutes :initform
                         common-lisp:nil)
                        (image :initarg :image :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %build-configuration-image :initform
                         (common-lisp:error ":image is required"))
                        (compute-type :initarg :compute-type :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor %build-configuration-compute-type :initform
                         common-lisp:nil)
                        (code-build-service-role :initarg
                         :code-build-service-role :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %build-configuration-code-build-service-role
                         :initform
                         (common-lisp:error
                          ":code-build-service-role is required"))
                        (artifact-name :initarg :artifact-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %build-configuration-artifact-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'build-configuration 'make-build-configuration))
 (common-lisp:defun make-build-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-in-minutes image compute-type
                     code-build-service-role artifact-name)
   (common-lisp:apply #'common-lisp:make-instance 'build-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input build-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input build-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-name))
      (common-lisp:list
       (common-lisp:cons "ArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-build-service-role))
      (common-lisp:list
       (common-lisp:cons "CodeBuildServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "ComputeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input build-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass builder common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %builder-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'builder 'make-builder))
 (common-lisp:defun make-builder
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'builder
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input builder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input builder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input builder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cpuutilization common-lisp:nil
                       ((privileged :initarg :privileged :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %cpuutilization-privileged :initform
                         common-lisp:nil)
                        (soft-irq :initarg :soft-irq :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %cpuutilization-soft-irq :initform
                         common-lisp:nil)
                        (irq :initarg :irq :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %cpuutilization-irq :initform
                         common-lisp:nil)
                        (iowait :initarg :iowait :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %cpuutilization-iowait :initform
                         common-lisp:nil)
                        (idle :initarg :idle :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %cpuutilization-idle :initform
                         common-lisp:nil)
                        (system :initarg :system :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %cpuutilization-system :initform
                         common-lisp:nil)
                        (nice :initarg :nice :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %cpuutilization-nice :initform
                         common-lisp:nil)
                        (user :initarg :user :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %cpuutilization-user :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cpuutilization 'make-cpuutilization))
 (common-lisp:defun make-cpuutilization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key privileged soft-irq irq iowait idle
                     system nice user)
   (common-lisp:apply #'common-lisp:make-instance 'cpuutilization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cpuutilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cpuutilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nice))
      (common-lisp:list
       (common-lisp:cons "Nice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system))
      (common-lisp:list
       (common-lisp:cons "System"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "Idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iowait))
      (common-lisp:list
       (common-lisp:cons "IOWait"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'irq))
      (common-lisp:list
       (common-lisp:cons "IRQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soft-irq))
      (common-lisp:list
       (common-lisp:cons "SoftIRQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cpuutilization))
   common-lisp:nil))
(common-lisp:deftype cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype causes () '(trivial-types:proper-list cause))
 (common-lisp:defun |make-causes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cause))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass check-dnsavailability-message common-lisp:nil
                       ((cnameprefix :initarg :cnameprefix :type
                         (common-lisp:or dnscname-prefix common-lisp:null)
                         :accessor %check-dnsavailability-message-cnameprefix
                         :initform
                         (common-lisp:error ":cnameprefix is required"))))
 (common-lisp:export
  (common-lisp:list 'check-dnsavailability-message
                    'make-check-dnsavailability-message))
 (common-lisp:defun make-check-dnsavailability-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cnameprefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-dnsavailability-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cnameprefix))
      (common-lisp:list
       (common-lisp:cons "CNAMEPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-dnsavailability-result-message common-lisp:nil
                       ((fully-qualified-cname :initarg :fully-qualified-cname
                         :type (common-lisp:or dnscname common-lisp:null)
                         :accessor
                         %check-dnsavailability-result-message-fully-qualified-cname
                         :initform common-lisp:nil)
                        (available :initarg :available :type
                         (common-lisp:or cname-availability common-lisp:null)
                         :accessor
                         %check-dnsavailability-result-message-available
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'check-dnsavailability-result-message
                    'make-check-dnsavailability-result-message))
 (common-lisp:defun make-check-dnsavailability-result-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fully-qualified-cname available)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-dnsavailability-result-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-result-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-result-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available))
      (common-lisp:list
       (common-lisp:cons "Available"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-cname))
      (common-lisp:list
       (common-lisp:cons "FullyQualifiedCNAME"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-result-message))
   common-lisp:nil))
(common-lisp:deftype cname-availability () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition code-build-not-in-service-region-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'code-build-not-in-service-region-exception)))
(common-lisp:progn
 (common-lisp:defclass compose-environments-message common-lisp:nil
                       ((version-labels :initarg :version-labels :type
                         (common-lisp:or version-labels common-lisp:null)
                         :accessor %compose-environments-message-version-labels
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %compose-environments-message-group-name :initform
                         common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %compose-environments-message-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compose-environments-message
                    'make-compose-environments-message))
 (common-lisp:defun make-compose-environments-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-labels group-name
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance 'compose-environments-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compose-environments-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compose-environments-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-labels))
      (common-lisp:list
       (common-lisp:cons "VersionLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compose-environments-message))
   common-lisp:nil))
(common-lisp:deftype compute-type () 'common-lisp:string)
(common-lisp:deftype configuration-deployment-status () 'common-lisp:string)
(common-lisp:deftype configuration-option-default-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-option-description common-lisp:nil
                       ((regex :initarg :regex :type
                         (common-lisp:or option-restriction-regex
                                         common-lisp:null)
                         :accessor %configuration-option-description-regex
                         :initform common-lisp:nil)
                        (max-length :initarg :max-length :type
                         (common-lisp:or option-restriction-max-length
                                         common-lisp:null)
                         :accessor %configuration-option-description-max-length
                         :initform common-lisp:nil)
                        (max-value :initarg :max-value :type
                         (common-lisp:or option-restriction-max-value
                                         common-lisp:null)
                         :accessor %configuration-option-description-max-value
                         :initform common-lisp:nil)
                        (min-value :initarg :min-value :type
                         (common-lisp:or option-restriction-min-value
                                         common-lisp:null)
                         :accessor %configuration-option-description-min-value
                         :initform common-lisp:nil)
                        (value-options :initarg :value-options :type
                         (common-lisp:or configuration-option-possible-values
                                         common-lisp:null)
                         :accessor
                         %configuration-option-description-value-options
                         :initform common-lisp:nil)
                        (value-type :initarg :value-type :type
                         (common-lisp:or configuration-option-value-type
                                         common-lisp:null)
                         :accessor %configuration-option-description-value-type
                         :initform common-lisp:nil)
                        (user-defined :initarg :user-defined :type
                         (common-lisp:or user-defined-option common-lisp:null)
                         :accessor
                         %configuration-option-description-user-defined
                         :initform common-lisp:nil)
                        (change-severity :initarg :change-severity :type
                         (common-lisp:or configuration-option-severity
                                         common-lisp:null)
                         :accessor
                         %configuration-option-description-change-severity
                         :initform common-lisp:nil)
                        (default-value :initarg :default-value :type
                         (common-lisp:or configuration-option-default-value
                                         common-lisp:null)
                         :accessor
                         %configuration-option-description-default-value
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or configuration-option-name
                                         common-lisp:null)
                         :accessor %configuration-option-description-name
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or option-namespace common-lisp:null)
                         :accessor %configuration-option-description-namespace
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-option-description
                    'make-configuration-option-description))
 (common-lisp:defun make-configuration-option-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regex max-length max-value min-value
                     value-options value-type user-defined change-severity
                     default-value name namespace)
   (common-lisp:apply #'common-lisp:make-instance
                      'configuration-option-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-severity))
      (common-lisp:list
       (common-lisp:cons "ChangeSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined))
      (common-lisp:list
       (common-lisp:cons "UserDefined"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-type))
      (common-lisp:list
       (common-lisp:cons "ValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-options))
      (common-lisp:list
       (common-lisp:cons "ValueOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length))
      (common-lisp:list
       (common-lisp:cons "MaxLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "Regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-option-descriptions-list ()
   '(trivial-types:proper-list configuration-option-description))
 (common-lisp:defun |make-configuration-option-descriptions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-option-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-option-name () 'common-lisp:string)
(common-lisp:deftype configuration-option-possible-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-option-possible-values ()
   '(trivial-types:proper-list configuration-option-possible-value))
 (common-lisp:defun |make-configuration-option-possible-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-option-possible-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass configuration-option-setting common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or configuration-option-value
                                         common-lisp:null)
                         :accessor %configuration-option-setting-value
                         :initform common-lisp:nil)
                        (option-name :initarg :option-name :type
                         (common-lisp:or configuration-option-name
                                         common-lisp:null)
                         :accessor %configuration-option-setting-option-name
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or option-namespace common-lisp:null)
                         :accessor %configuration-option-setting-namespace
                         :initform common-lisp:nil)
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %configuration-option-setting-resource-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-option-setting
                    'make-configuration-option-setting))
 (common-lisp:defun make-configuration-option-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value option-name namespace
                     resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-option-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-option-settings-list ()
   '(trivial-types:proper-list configuration-option-setting))
 (common-lisp:defun |make-configuration-option-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-option-severity () 'common-lisp:string)
(common-lisp:deftype configuration-option-value () 'common-lisp:string)
(common-lisp:deftype configuration-option-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-options-description common-lisp:nil
                       ((options :initarg :options :type
                         (common-lisp:or configuration-option-descriptions-list
                                         common-lisp:null)
                         :accessor %configuration-options-description-options
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor
                         %configuration-options-description-platform-arn
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor
                         %configuration-options-description-solution-stack-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-options-description
                    'make-configuration-options-description))
 (common-lisp:defun make-configuration-options-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options platform-arn solution-stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'configuration-options-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-options-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-options-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-options-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration-settings-description common-lisp:nil
                       ((option-settings :initarg :option-settings :type
                         (common-lisp:or configuration-option-settings-list
                                         common-lisp:null)
                         :accessor
                         %configuration-settings-description-option-settings
                         :initform common-lisp:nil)
                        (date-updated :initarg :date-updated :type
                         (common-lisp:or update-date common-lisp:null)
                         :accessor
                         %configuration-settings-description-date-updated
                         :initform common-lisp:nil)
                        (date-created :initarg :date-created :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         %configuration-settings-description-date-created
                         :initform common-lisp:nil)
                        (deployment-status :initarg :deployment-status :type
                         (common-lisp:or configuration-deployment-status
                                         common-lisp:null)
                         :accessor
                         %configuration-settings-description-deployment-status
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %configuration-settings-description-environment-name
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %configuration-settings-description-description
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor
                         %configuration-settings-description-template-name
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %configuration-settings-description-application-name
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor
                         %configuration-settings-description-platform-arn
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor
                         %configuration-settings-description-solution-stack-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-settings-description
                    'make-configuration-settings-description))
 (common-lisp:defun make-configuration-settings-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key option-settings date-updated date-created
                     deployment-status environment-name description
                     template-name application-name platform-arn
                     solution-stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'configuration-settings-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "DeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-settings-description-list ()
   '(trivial-types:proper-list configuration-settings-description))
 (common-lisp:defun |make-configuration-settings-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-settings-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass configuration-settings-descriptions common-lisp:nil
                       ((configuration-settings :initarg
                         :configuration-settings :type
                         (common-lisp:or
                          configuration-settings-description-list
                          common-lisp:null)
                         :accessor
                         %configuration-settings-descriptions-configuration-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-settings-descriptions
                    'make-configuration-settings-descriptions))
 (common-lisp:defun make-configuration-settings-descriptions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'configuration-settings-descriptions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-descriptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-descriptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-settings))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-descriptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration-settings-validation-messages
                       common-lisp:nil
                       ((messages :initarg :messages :type
                         (common-lisp:or validation-messages-list
                                         common-lisp:null)
                         :accessor
                         %configuration-settings-validation-messages-messages
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-settings-validation-messages
                    'make-configuration-settings-validation-messages))
 (common-lisp:defun make-configuration-settings-validation-messages
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key messages)
   (common-lisp:apply #'common-lisp:make-instance
                      'configuration-settings-validation-messages
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-validation-messages))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-validation-messages))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "Messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-validation-messages))
   common-lisp:nil))
(common-lisp:deftype configuration-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-template-names-list ()
   '(trivial-types:proper-list configuration-template-name))
 (common-lisp:defun |make-configuration-template-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-template-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-application-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-application-message-tags :initform
                         common-lisp:nil)
                        (resource-lifecycle-config :initarg
                         :resource-lifecycle-config :type
                         (common-lisp:or application-resource-lifecycle-config
                                         common-lisp:null)
                         :accessor
                         %create-application-message-resource-lifecycle-config
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-application-message-description
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %create-application-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-application-message
                    'make-create-application-message))
 (common-lisp:defun make-create-application-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-lifecycle-config
                     description application-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "ResourceLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-version-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-application-version-message-tags :initform
                         common-lisp:nil)
                        (process :initarg :process :type
                         (common-lisp:or application-version-proccess
                                         common-lisp:null)
                         :accessor %create-application-version-message-process
                         :initform common-lisp:nil)
                        (auto-create-application :initarg
                         :auto-create-application :type
                         (common-lisp:or auto-create-application
                                         common-lisp:null)
                         :accessor
                         %create-application-version-message-auto-create-application
                         :initform common-lisp:nil)
                        (build-configuration :initarg :build-configuration
                         :type
                         (common-lisp:or build-configuration common-lisp:null)
                         :accessor
                         %create-application-version-message-build-configuration
                         :initform common-lisp:nil)
                        (source-bundle :initarg :source-bundle :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-application-version-message-source-bundle
                         :initform common-lisp:nil)
                        (source-build-information :initarg
                         :source-build-information :type
                         (common-lisp:or source-build-information
                                         common-lisp:null)
                         :accessor
                         %create-application-version-message-source-build-information
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %create-application-version-message-description
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor
                         %create-application-version-message-version-label
                         :initform
                         (common-lisp:error ":version-label is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %create-application-version-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-application-version-message
                    'make-create-application-version-message))
 (common-lisp:defun make-create-application-version-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags process auto-create-application
                     build-configuration source-bundle source-build-information
                     description version-label application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-application-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-build-information))
      (common-lisp:list
       (common-lisp:cons "SourceBuildInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bundle))
      (common-lisp:list
       (common-lisp:cons "SourceBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-configuration))
      (common-lisp:list
       (common-lisp:cons "BuildConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-create-application))
      (common-lisp:list
       (common-lisp:cons "AutoCreateApplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process))
      (common-lisp:list
       (common-lisp:cons "Process"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-template-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-configuration-template-message-tags :initform
                         common-lisp:nil)
                        (option-settings :initarg :option-settings :type
                         (common-lisp:or configuration-option-settings-list
                                         common-lisp:null)
                         :accessor
                         %create-configuration-template-message-option-settings
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %create-configuration-template-message-description
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %create-configuration-template-message-environment-id
                         :initform common-lisp:nil)
                        (source-configuration :initarg :source-configuration
                         :type
                         (common-lisp:or source-configuration common-lisp:null)
                         :accessor
                         %create-configuration-template-message-source-configuration
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor
                         %create-configuration-template-message-platform-arn
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor
                         %create-configuration-template-message-solution-stack-name
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor
                         %create-configuration-template-message-template-name
                         :initform
                         (common-lisp:error ":template-name is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %create-configuration-template-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-configuration-template-message
                    'make-create-configuration-template-message))
 (common-lisp:defun make-create-configuration-template-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags option-settings description
                     environment-id source-configuration platform-arn
                     solution-stack-name template-name application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-template-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-template-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-template-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-template-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-message common-lisp:nil
                       ((operations-role :initarg :operations-role :type
                         (common-lisp:or operations-role common-lisp:null)
                         :accessor %create-environment-message-operations-role
                         :initform common-lisp:nil)
                        (options-to-remove :initarg :options-to-remove :type
                         (common-lisp:or options-specifier-list
                                         common-lisp:null)
                         :accessor
                         %create-environment-message-options-to-remove
                         :initform common-lisp:nil)
                        (option-settings :initarg :option-settings :type
                         (common-lisp:or configuration-option-settings-list
                                         common-lisp:null)
                         :accessor %create-environment-message-option-settings
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor %create-environment-message-platform-arn
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor
                         %create-environment-message-solution-stack-name
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor %create-environment-message-template-name
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor %create-environment-message-version-label
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-environment-message-tags :initform
                         common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or environment-tier common-lisp:null)
                         :accessor %create-environment-message-tier :initform
                         common-lisp:nil)
                        (cnameprefix :initarg :cnameprefix :type
                         (common-lisp:or dnscname-prefix common-lisp:null)
                         :accessor %create-environment-message-cnameprefix
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-environment-message-description
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %create-environment-message-group-name :initform
                         common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %create-environment-message-environment-name
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %create-environment-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-environment-message
                    'make-create-environment-message))
 (common-lisp:defun make-create-environment-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operations-role options-to-remove
                     option-settings platform-arn solution-stack-name
                     template-name version-label tags tier cnameprefix
                     description group-name environment-name application-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cnameprefix))
      (common-lisp:list
       (common-lisp:cons "CNAMEPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-remove))
      (common-lisp:list
       (common-lisp:cons "OptionsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-role))
      (common-lisp:list
       (common-lisp:cons "OperationsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-platform-version-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-platform-version-request-tags :initform
                         common-lisp:nil)
                        (option-settings :initarg :option-settings :type
                         (common-lisp:or configuration-option-settings-list
                                         common-lisp:null)
                         :accessor
                         %create-platform-version-request-option-settings
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %create-platform-version-request-environment-name
                         :initform common-lisp:nil)
                        (platform-definition-bundle :initarg
                         :platform-definition-bundle :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-platform-version-request-platform-definition-bundle
                         :initform
                         (common-lisp:error
                          ":platform-definition-bundle is required"))
                        (platform-version :initarg :platform-version :type
                         (common-lisp:or platform-version common-lisp:null)
                         :accessor
                         %create-platform-version-request-platform-version
                         :initform
                         (common-lisp:error ":platform-version is required"))
                        (platform-name :initarg :platform-name :type
                         (common-lisp:or platform-name common-lisp:null)
                         :accessor
                         %create-platform-version-request-platform-name
                         :initform
                         (common-lisp:error ":platform-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-platform-version-request
                    'make-create-platform-version-request))
 (common-lisp:defun make-create-platform-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags option-settings environment-name
                     platform-definition-bundle platform-version platform-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-platform-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-name))
      (common-lisp:list
       (common-lisp:cons "PlatformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-definition-bundle))
      (common-lisp:list
       (common-lisp:cons "PlatformDefinitionBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-platform-version-result common-lisp:nil
                       ((builder :initarg :builder :type
                         (common-lisp:or builder common-lisp:null) :accessor
                         %create-platform-version-result-builder :initform
                         common-lisp:nil)
                        (platform-summary :initarg :platform-summary :type
                         (common-lisp:or platform-summary common-lisp:null)
                         :accessor
                         %create-platform-version-result-platform-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-platform-version-result
                    'make-create-platform-version-result))
 (common-lisp:defun make-create-platform-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key builder platform-summary)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-platform-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-summary))
      (common-lisp:list
       (common-lisp:cons "PlatformSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'builder))
      (common-lisp:list
       (common-lisp:cons "Builder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-storage-location-result-message common-lisp:nil
                       ((s3bucket :initarg :s3bucket :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %create-storage-location-result-message-s3bucket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-storage-location-result-message
                    'make-create-storage-location-result-message))
 (common-lisp:defun make-create-storage-location-result-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-storage-location-result-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-location-result-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-location-result-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-location-result-message))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-ami common-lisp:nil
                       ((image-id :initarg :image-id :type
                         (common-lisp:or image-id common-lisp:null) :accessor
                         %custom-ami-image-id :initform common-lisp:nil)
                        (virtualization-type :initarg :virtualization-type
                         :type
                         (common-lisp:or virtualization-type common-lisp:null)
                         :accessor %custom-ami-virtualization-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'custom-ami 'make-custom-ami))
 (common-lisp:defun make-custom-ami
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-id virtualization-type)
   (common-lisp:apply #'common-lisp:make-instance 'custom-ami
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-ami))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-ami))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-ami))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-ami-list ()
   '(trivial-types:proper-list custom-ami))
 (common-lisp:defun |make-custom-ami-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-ami))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dnscname () 'common-lisp:string)
(common-lisp:deftype dnscname-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-application-message common-lisp:nil
                       ((terminate-env-by-force :initarg
                         :terminate-env-by-force :type
                         (common-lisp:or terminate-env-force common-lisp:null)
                         :accessor
                         %delete-application-message-terminate-env-by-force
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %delete-application-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-message
                    'make-delete-application-message))
 (common-lisp:defun make-delete-application-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terminate-env-by-force application-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-env-by-force))
      (common-lisp:list
       (common-lisp:cons "TerminateEnvByForce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-version-message common-lisp:nil
                       ((delete-source-bundle :initarg :delete-source-bundle
                         :type
                         (common-lisp:or delete-source-bundle common-lisp:null)
                         :accessor
                         %delete-application-version-message-delete-source-bundle
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor
                         %delete-application-version-message-version-label
                         :initform
                         (common-lisp:error ":version-label is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %delete-application-version-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-version-message
                    'make-delete-application-version-message))
 (common-lisp:defun make-delete-application-version-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-source-bundle version-label
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-application-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-source-bundle))
      (common-lisp:list
       (common-lisp:cons "DeleteSourceBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-template-message common-lisp:nil
                       ((template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor
                         %delete-configuration-template-message-template-name
                         :initform
                         (common-lisp:error ":template-name is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %delete-configuration-template-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-template-message
                    'make-delete-configuration-template-message))
 (common-lisp:defun make-delete-configuration-template-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-name application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-template-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-template-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-template-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-template-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-configuration-message common-lisp:nil
                       ((environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %delete-environment-configuration-message-environment-name
                         :initform
                         (common-lisp:error ":environment-name is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %delete-environment-configuration-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-environment-configuration-message
                    'make-delete-environment-configuration-message))
 (common-lisp:defun make-delete-environment-configuration-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-configuration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-platform-version-request common-lisp:nil
                       ((platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor
                         %delete-platform-version-request-platform-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-platform-version-request
                    'make-delete-platform-version-request))
 (common-lisp:defun make-delete-platform-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key platform-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-platform-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-platform-version-result common-lisp:nil
                       ((platform-summary :initarg :platform-summary :type
                         (common-lisp:or platform-summary common-lisp:null)
                         :accessor
                         %delete-platform-version-result-platform-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-platform-version-result
                    'make-delete-platform-version-result))
 (common-lisp:defun make-delete-platform-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key platform-summary)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-platform-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-summary))
      (common-lisp:list
       (common-lisp:cons "PlatformSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-result))
   common-lisp:nil))
(common-lisp:deftype delete-source-bundle () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass deployment common-lisp:nil
                       ((deployment-time :initarg :deployment-time :type
                         (common-lisp:or deployment-timestamp common-lisp:null)
                         :accessor %deployment-deployment-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deployment-status :initform common-lisp:nil)
                        (deployment-id :initarg :deployment-id :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %deployment-deployment-id :initform
                         common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deployment-version-label :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defun make-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-time status deployment-id
                     version-label)
   (common-lisp:apply #'common-lisp:make-instance 'deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-time))
      (common-lisp:list
       (common-lisp:cons "DeploymentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:deftype deployment-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-account-attributes-result common-lisp:nil
                       ((resource-quotas :initarg :resource-quotas :type
                         (common-lisp:or resource-quotas common-lisp:null)
                         :accessor
                         %describe-account-attributes-result-resource-quotas
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-result
                    'make-describe-account-attributes-result))
 (common-lisp:defun make-describe-account-attributes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-quotas)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-attributes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-quotas))
      (common-lisp:list
       (common-lisp:cons "ResourceQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-versions-message common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-application-versions-message-next-token
                         :initform common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor
                         %describe-application-versions-message-max-records
                         :initform common-lisp:nil)
                        (version-labels :initarg :version-labels :type
                         (common-lisp:or version-labels-list common-lisp:null)
                         :accessor
                         %describe-application-versions-message-version-labels
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %describe-application-versions-message-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-application-versions-message
                    'make-describe-application-versions-message))
 (common-lisp:defun make-describe-application-versions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-records version-labels
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-versions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-labels))
      (common-lisp:list
       (common-lisp:cons "VersionLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-applications-message common-lisp:nil
                       ((application-names :initarg :application-names :type
                         (common-lisp:or application-names-list
                                         common-lisp:null)
                         :accessor
                         %describe-applications-message-application-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-applications-message
                    'make-describe-applications-message))
 (common-lisp:defun make-describe-applications-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-applications-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-names))
      (common-lisp:list
       (common-lisp:cons "ApplicationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-options-message common-lisp:nil
                       ((options :initarg :options :type
                         (common-lisp:or options-specifier-list
                                         common-lisp:null)
                         :accessor
                         %describe-configuration-options-message-options
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor
                         %describe-configuration-options-message-platform-arn
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor
                         %describe-configuration-options-message-solution-stack-name
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %describe-configuration-options-message-environment-name
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor
                         %describe-configuration-options-message-template-name
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %describe-configuration-options-message-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-options-message
                    'make-describe-configuration-options-message))
 (common-lisp:defun make-describe-configuration-options-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options platform-arn solution-stack-name
                     environment-name template-name application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-settings-message common-lisp:nil
                       ((environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %describe-configuration-settings-message-environment-name
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor
                         %describe-configuration-settings-message-template-name
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %describe-configuration-settings-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-settings-message
                    'make-describe-configuration-settings-message))
 (common-lisp:defun make-describe-configuration-settings-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name template-name
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-settings-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-settings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-settings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-settings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-environment-health-request common-lisp:nil
                       ((attribute-names :initarg :attribute-names :type
                         (common-lisp:or environment-health-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-environment-health-request-attribute-names
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %describe-environment-health-request-environment-id
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %describe-environment-health-request-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-health-request
                    'make-describe-environment-health-request))
 (common-lisp:defun make-describe-environment-health-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-names environment-id
                     environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-environment-health-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-environment-health-result common-lisp:nil
                       ((refreshed-at :initarg :refreshed-at :type
                         (common-lisp:or refreshed-at common-lisp:null)
                         :accessor
                         %describe-environment-health-result-refreshed-at
                         :initform common-lisp:nil)
                        (instances-health :initarg :instances-health :type
                         (common-lisp:or instance-health-summary
                                         common-lisp:null)
                         :accessor
                         %describe-environment-health-result-instances-health
                         :initform common-lisp:nil)
                        (application-metrics :initarg :application-metrics
                         :type
                         (common-lisp:or application-metrics common-lisp:null)
                         :accessor
                         %describe-environment-health-result-application-metrics
                         :initform common-lisp:nil)
                        (causes :initarg :causes :type
                         (common-lisp:or causes common-lisp:null) :accessor
                         %describe-environment-health-result-causes :initform
                         common-lisp:nil)
                        (color :initarg :color :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-environment-health-result-color :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or environment-health common-lisp:null)
                         :accessor %describe-environment-health-result-status
                         :initform common-lisp:nil)
                        (health-status :initarg :health-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-environment-health-result-health-status
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %describe-environment-health-result-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-health-result
                    'make-describe-environment-health-result))
 (common-lisp:defun make-describe-environment-health-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key refreshed-at instances-health
                     application-metrics causes color status health-status
                     environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-environment-health-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causes))
      (common-lisp:list
       (common-lisp:cons "Causes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-metrics))
      (common-lisp:list
       (common-lisp:cons "ApplicationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-health))
      (common-lisp:list
       (common-lisp:cons "InstancesHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refreshed-at))
      (common-lisp:list
       (common-lisp:cons "RefreshedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-environment-managed-action-history-request
                       common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or managed-action-history-max-items
                                         common-lisp:null)
                         :accessor
                         %describe-environment-managed-action-history-request-max-items
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-environment-managed-action-history-request-next-token
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %describe-environment-managed-action-history-request-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %describe-environment-managed-action-history-request-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-managed-action-history-request
                    'make-describe-environment-managed-action-history-request))
 (common-lisp:defun make-describe-environment-managed-action-history-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items next-token environment-name
                     environment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-environment-managed-action-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-environment-managed-action-history-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-environment-managed-action-history-result-next-token
                         :initform common-lisp:nil)
                        (managed-action-history-items :initarg
                         :managed-action-history-items :type
                         (common-lisp:or managed-action-history-items
                                         common-lisp:null)
                         :accessor
                         %describe-environment-managed-action-history-result-managed-action-history-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-managed-action-history-result
                    'make-describe-environment-managed-action-history-result))
 (common-lisp:defun make-describe-environment-managed-action-history-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token managed-action-history-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-environment-managed-action-history-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-action-history-items))
      (common-lisp:list
       (common-lisp:cons "ManagedActionHistoryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-environment-managed-actions-request
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or action-status common-lisp:null)
                         :accessor
                         %describe-environment-managed-actions-request-status
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-environment-managed-actions-request-environment-id
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-environment-managed-actions-request-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-managed-actions-request
                    'make-describe-environment-managed-actions-request))
 (common-lisp:defun make-describe-environment-managed-actions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status environment-id environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-environment-managed-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-environment-managed-actions-result
                       common-lisp:nil
                       ((managed-actions :initarg :managed-actions :type
                         (common-lisp:or managed-actions common-lisp:null)
                         :accessor
                         %describe-environment-managed-actions-result-managed-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-managed-actions-result
                    'make-describe-environment-managed-actions-result))
 (common-lisp:defun make-describe-environment-managed-actions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key managed-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-environment-managed-actions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-actions))
      (common-lisp:list
       (common-lisp:cons "ManagedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-environment-resources-message common-lisp:nil
                       ((environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %describe-environment-resources-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %describe-environment-resources-message-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-resources-message
                    'make-describe-environment-resources-message))
 (common-lisp:defun make-describe-environment-resources-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name environment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-environment-resources-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-resources-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-resources-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-resources-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-environments-message common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-environments-message-next-token :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %describe-environments-message-max-records
                         :initform common-lisp:nil)
                        (included-deleted-back-to :initarg
                         :included-deleted-back-to :type
                         (common-lisp:or include-deleted-back-to
                                         common-lisp:null)
                         :accessor
                         %describe-environments-message-included-deleted-back-to
                         :initform common-lisp:nil)
                        (include-deleted :initarg :include-deleted :type
                         (common-lisp:or include-deleted common-lisp:null)
                         :accessor
                         %describe-environments-message-include-deleted
                         :initform common-lisp:nil)
                        (environment-names :initarg :environment-names :type
                         (common-lisp:or environment-names-list
                                         common-lisp:null)
                         :accessor
                         %describe-environments-message-environment-names
                         :initform common-lisp:nil)
                        (environment-ids :initarg :environment-ids :type
                         (common-lisp:or environment-id-list common-lisp:null)
                         :accessor
                         %describe-environments-message-environment-ids
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor %describe-environments-message-version-label
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %describe-environments-message-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-environments-message
                    'make-describe-environments-message))
 (common-lisp:defun make-describe-environments-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-records
                     included-deleted-back-to include-deleted environment-names
                     environment-ids version-label application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-environments-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environments-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environments-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-ids))
      (common-lisp:list
       (common-lisp:cons "EnvironmentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-names))
      (common-lisp:list
       (common-lisp:cons "EnvironmentNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-deleted))
      (common-lisp:list
       (common-lisp:cons "IncludeDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'included-deleted-back-to))
      (common-lisp:list
       (common-lisp:cons "IncludedDeletedBackTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environments-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-message common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %describe-events-message-next-token :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or max-records common-lisp:null)
                         :accessor %describe-events-message-max-records
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or time-filter-end common-lisp:null)
                         :accessor %describe-events-message-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or time-filter-start common-lisp:null)
                         :accessor %describe-events-message-start-time
                         :initform common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or event-severity common-lisp:null)
                         :accessor %describe-events-message-severity :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         %describe-events-message-request-id :initform
                         common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor %describe-events-message-platform-arn
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %describe-events-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor %describe-events-message-environment-id
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor %describe-events-message-template-name
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor %describe-events-message-version-label
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %describe-events-message-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defun make-describe-events-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-records end-time
                     start-time severity request-id platform-arn
                     environment-name environment-id template-name
                     version-label application-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instances-health-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instances-health-request-next-token
                         :initform common-lisp:nil)
                        (attribute-names :initarg :attribute-names :type
                         (common-lisp:or instances-health-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-instances-health-request-attribute-names
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %describe-instances-health-request-environment-id
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %describe-instances-health-request-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instances-health-request
                    'make-describe-instances-health-request))
 (common-lisp:defun make-describe-instances-health-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token attribute-names environment-id
                     environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instances-health-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instances-health-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instances-health-result-next-token :initform
                         common-lisp:nil)
                        (refreshed-at :initarg :refreshed-at :type
                         (common-lisp:or refreshed-at common-lisp:null)
                         :accessor
                         %describe-instances-health-result-refreshed-at
                         :initform common-lisp:nil)
                        (instance-health-list :initarg :instance-health-list
                         :type
                         (common-lisp:or instance-health-list common-lisp:null)
                         :accessor
                         %describe-instances-health-result-instance-health-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instances-health-result
                    'make-describe-instances-health-result))
 (common-lisp:defun make-describe-instances-health-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token refreshed-at
                     instance-health-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instances-health-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-health-list))
      (common-lisp:list
       (common-lisp:cons "InstanceHealthList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refreshed-at))
      (common-lisp:list
       (common-lisp:cons "RefreshedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-platform-version-request common-lisp:nil
                       ((platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor
                         %describe-platform-version-request-platform-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-platform-version-request
                    'make-describe-platform-version-request))
 (common-lisp:defun make-describe-platform-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key platform-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-platform-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-platform-version-result common-lisp:nil
                       ((platform-description :initarg :platform-description
                         :type
                         (common-lisp:or platform-description common-lisp:null)
                         :accessor
                         %describe-platform-version-result-platform-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-platform-version-result
                    'make-describe-platform-version-result))
 (common-lisp:defun make-describe-platform-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key platform-description)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-platform-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-description))
      (common-lisp:list
       (common-lisp:cons "PlatformDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-environment-operations-role-message
                       common-lisp:nil
                       ((environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %disassociate-environment-operations-role-message-environment-name
                         :initform
                         (common-lisp:error ":environment-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-environment-operations-role-message
                    'make-disassociate-environment-operations-role-message))
 (common-lisp:defun make-disassociate-environment-operations-role-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-environment-operations-role-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-environment-operations-role-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-environment-operations-role-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-environment-operations-role-message))
   common-lisp:nil))
(common-lisp:deftype ec2instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition elastic-beanstalk-service-exception
     (elasticbeanstalk-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       elastic-beanstalk-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'elastic-beanstalk-service-exception
                    'elastic-beanstalk-service-exception-message)))
(common-lisp:deftype endpoint-url () 'common-lisp:string)
(common-lisp:deftype environment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment-description common-lisp:nil
                       ((operations-role :initarg :operations-role :type
                         (common-lisp:or operations-role common-lisp:null)
                         :accessor %environment-description-operations-role
                         :initform common-lisp:nil)
                        (environment-arn :initarg :environment-arn :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor %environment-description-environment-arn
                         :initform common-lisp:nil)
                        (environment-links :initarg :environment-links :type
                         (common-lisp:or environment-links common-lisp:null)
                         :accessor %environment-description-environment-links
                         :initform common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or environment-tier common-lisp:null)
                         :accessor %environment-description-tier :initform
                         common-lisp:nil)
                        (resources :initarg :resources :type
                         (common-lisp:or environment-resources-description
                                         common-lisp:null)
                         :accessor %environment-description-resources :initform
                         common-lisp:nil)
                        (health-status :initarg :health-status :type
                         (common-lisp:or environment-health-status
                                         common-lisp:null)
                         :accessor %environment-description-health-status
                         :initform common-lisp:nil)
                        (health :initarg :health :type
                         (common-lisp:or environment-health common-lisp:null)
                         :accessor %environment-description-health :initform
                         common-lisp:nil)
                        (abortable-operation-in-progress :initarg
                         :abortable-operation-in-progress :type
                         (common-lisp:or abortable-operation-in-progress
                                         common-lisp:null)
                         :accessor
                         %environment-description-abortable-operation-in-progress
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor %environment-description-status :initform
                         common-lisp:nil)
                        (date-updated :initarg :date-updated :type
                         (common-lisp:or update-date common-lisp:null)
                         :accessor %environment-description-date-updated
                         :initform common-lisp:nil)
                        (date-created :initarg :date-created :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor %environment-description-date-created
                         :initform common-lisp:nil)
                        (cname :initarg :cname :type
                         (common-lisp:or dnscname common-lisp:null) :accessor
                         %environment-description-cname :initform
                         common-lisp:nil)
                        (endpoint-url :initarg :endpoint-url :type
                         (common-lisp:or endpoint-url common-lisp:null)
                         :accessor %environment-description-endpoint-url
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %environment-description-description
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor %environment-description-template-name
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor %environment-description-platform-arn
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor %environment-description-solution-stack-name
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor %environment-description-version-label
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %environment-description-application-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor %environment-description-environment-id
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %environment-description-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'environment-description 'make-environment-description))
 (common-lisp:defun make-environment-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operations-role environment-arn
                     environment-links tier resources health-status health
                     abortable-operation-in-progress status date-updated
                     date-created cname endpoint-url description template-name
                     platform-arn solution-stack-name version-label
                     application-name environment-id environment-name)
   (common-lisp:apply #'common-lisp:make-instance 'environment-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cname))
      (common-lisp:list
       (common-lisp:cons "CNAME"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abortable-operation-in-progress))
      (common-lisp:list
       (common-lisp:cons "AbortableOperationInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "Health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-links))
      (common-lisp:list
       (common-lisp:cons "EnvironmentLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "EnvironmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-role))
      (common-lisp:list
       (common-lisp:cons "OperationsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-descriptions-list ()
   '(trivial-types:proper-list environment-description))
 (common-lisp:defun |make-environment-descriptions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-descriptions-message common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %environment-descriptions-message-next-token :initform
                         common-lisp:nil)
                        (environments :initarg :environments :type
                         (common-lisp:or environment-descriptions-list
                                         common-lisp:null)
                         :accessor
                         %environment-descriptions-message-environments
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'environment-descriptions-message
                    'make-environment-descriptions-message))
 (common-lisp:defun make-environment-descriptions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token environments)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-descriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "Environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-descriptions-message))
   common-lisp:nil))
(common-lisp:deftype environment-health () 'common-lisp:string)
(common-lisp:deftype environment-health-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-health-attributes ()
   '(trivial-types:proper-list environment-health-attribute))
 (common-lisp:defun |make-environment-health-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-health-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-health-status () 'common-lisp:string)
(common-lisp:deftype environment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-id-list ()
   '(trivial-types:proper-list environment-id))
 (common-lisp:defun |make-environment-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-info-description common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %environment-info-description-message :initform
                         common-lisp:nil)
                        (sample-timestamp :initarg :sample-timestamp :type
                         (common-lisp:or sample-timestamp common-lisp:null)
                         :accessor
                         %environment-info-description-sample-timestamp
                         :initform common-lisp:nil)
                        (ec2instance-id :initarg :ec2instance-id :type
                         (common-lisp:or ec2instance-id common-lisp:null)
                         :accessor %environment-info-description-ec2instance-id
                         :initform common-lisp:nil)
                        (info-type :initarg :info-type :type
                         (common-lisp:or environment-info-type
                                         common-lisp:null)
                         :accessor %environment-info-description-info-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'environment-info-description
                    'make-environment-info-description))
 (common-lisp:defun make-environment-info-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message sample-timestamp ec2instance-id
                     info-type)
   (common-lisp:apply #'common-lisp:make-instance 'environment-info-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-info-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-info-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info-type))
      (common-lisp:list
       (common-lisp:cons "InfoType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "Ec2InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-timestamp))
      (common-lisp:list
       (common-lisp:cons "SampleTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-info-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-info-description-list ()
   '(trivial-types:proper-list environment-info-description))
 (common-lisp:defun |make-environment-info-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-info-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-info-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment-link common-lisp:nil
                       ((environment-name :initarg :environment-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %environment-link-environment-name :initform
                         common-lisp:nil)
                        (link-name :initarg :link-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %environment-link-link-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'environment-link 'make-environment-link))
 (common-lisp:defun make-environment-link
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name link-name)
   (common-lisp:apply #'common-lisp:make-instance 'environment-link
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-links ()
   '(trivial-types:proper-list environment-link))
 (common-lisp:defun |make-environment-links|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-link))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-names-list ()
   '(trivial-types:proper-list environment-name))
 (common-lisp:defun |make-environment-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-resource-description common-lisp:nil
                       ((queues :initarg :queues :type
                         (common-lisp:or queue-list common-lisp:null) :accessor
                         %environment-resource-description-queues :initform
                         common-lisp:nil)
                        (triggers :initarg :triggers :type
                         (common-lisp:or trigger-list common-lisp:null)
                         :accessor %environment-resource-description-triggers
                         :initform common-lisp:nil)
                        (load-balancers :initarg :load-balancers :type
                         (common-lisp:or load-balancer-list common-lisp:null)
                         :accessor
                         %environment-resource-description-load-balancers
                         :initform common-lisp:nil)
                        (launch-templates :initarg :launch-templates :type
                         (common-lisp:or launch-template-list common-lisp:null)
                         :accessor
                         %environment-resource-description-launch-templates
                         :initform common-lisp:nil)
                        (launch-configurations :initarg :launch-configurations
                         :type
                         (common-lisp:or launch-configuration-list
                                         common-lisp:null)
                         :accessor
                         %environment-resource-description-launch-configurations
                         :initform common-lisp:nil)
                        (instances :initarg :instances :type
                         (common-lisp:or instance-list common-lisp:null)
                         :accessor %environment-resource-description-instances
                         :initform common-lisp:nil)
                        (auto-scaling-groups :initarg :auto-scaling-groups
                         :type
                         (common-lisp:or auto-scaling-group-list
                                         common-lisp:null)
                         :accessor
                         %environment-resource-description-auto-scaling-groups
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %environment-resource-description-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'environment-resource-description
                    'make-environment-resource-description))
 (common-lisp:defun make-environment-resource-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queues triggers load-balancers
                     launch-templates launch-configurations instances
                     auto-scaling-groups environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-resource-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configurations))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-templates))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "Triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queues))
      (common-lisp:list
       (common-lisp:cons "Queues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-resource-descriptions-message
                       common-lisp:nil
                       ((environment-resources :initarg :environment-resources
                         :type
                         (common-lisp:or environment-resource-description
                                         common-lisp:null)
                         :accessor
                         %environment-resource-descriptions-message-environment-resources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'environment-resource-descriptions-message
                    'make-environment-resource-descriptions-message))
 (common-lisp:defun make-environment-resource-descriptions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-resources)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-resource-descriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-resources))
      (common-lisp:list
       (common-lisp:cons "EnvironmentResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-descriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-resources-description common-lisp:nil
                       ((load-balancer :initarg :load-balancer :type
                         (common-lisp:or load-balancer-description
                                         common-lisp:null)
                         :accessor
                         %environment-resources-description-load-balancer
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'environment-resources-description
                    'make-environment-resources-description))
 (common-lisp:defun make-environment-resources-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-resources-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-resources-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-resources-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer))
      (common-lisp:list
       (common-lisp:cons "LoadBalancer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-resources-description))
   common-lisp:nil))
(common-lisp:deftype environment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment-tier common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %environment-tier-version :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %environment-tier-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %environment-tier-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'environment-tier 'make-environment-tier))
 (common-lisp:defun make-environment-tier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version type name)
   (common-lisp:apply #'common-lisp:make-instance 'environment-tier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-tier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-tier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-tier))
   common-lisp:nil))
(common-lisp:deftype event-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-description common-lisp:nil
                       ((severity :initarg :severity :type
                         (common-lisp:or event-severity common-lisp:null)
                         :accessor %event-description-severity :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         %event-description-request-id :initform
                         common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor %event-description-platform-arn :initform
                         common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %event-description-environment-name
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor %event-description-template-name :initform
                         common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor %event-description-version-label :initform
                         common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %event-description-application-name
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or event-message common-lisp:null)
                         :accessor %event-description-message :initform
                         common-lisp:nil)
                        (event-date :initarg :event-date :type
                         (common-lisp:or event-date common-lisp:null) :accessor
                         %event-description-event-date :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-description 'make-event-description))
 (common-lisp:defun make-event-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity request-id platform-arn
                     environment-name template-name version-label
                     application-name message event-date)
   (common-lisp:apply #'common-lisp:make-instance 'event-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-date))
      (common-lisp:list
       (common-lisp:cons "EventDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-description-list ()
   '(trivial-types:proper-list event-description))
 (common-lisp:defun |make-event-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-descriptions-message common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %event-descriptions-message-next-token :initform
                         common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-description-list
                                         common-lisp:null)
                         :accessor %event-descriptions-message-events :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-descriptions-message
                    'make-event-descriptions-message))
 (common-lisp:defun make-event-descriptions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token events)
   (common-lisp:apply #'common-lisp:make-instance 'event-descriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-descriptions-message))
   common-lisp:nil))
(common-lisp:deftype event-message () 'common-lisp:string)
(common-lisp:deftype event-severity () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype failure-type () 'common-lisp:string)
(common-lisp:deftype file-type-extension () 'common-lisp:string)
(common-lisp:deftype force-terminate () 'common-lisp:boolean)
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:deftype image-id () 'common-lisp:string)
(common-lisp:deftype include-deleted () 'common-lisp:boolean)
(common-lisp:deftype include-deleted-back-to () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %instance-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defun make-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-health-list ()
   '(trivial-types:proper-list single-instance-health))
 (common-lisp:defun |make-instance-health-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list single-instance-health))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-health-summary common-lisp:nil
                       ((severe :initarg :severe :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %instance-health-summary-severe :initform
                         common-lisp:nil)
                        (degraded :initarg :degraded :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %instance-health-summary-degraded :initform
                         common-lisp:nil)
                        (warning :initarg :warning :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %instance-health-summary-warning :initform
                         common-lisp:nil)
                        (info :initarg :info :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %instance-health-summary-info :initform
                         common-lisp:nil)
                        (ok :initarg :ok :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %instance-health-summary-ok :initform
                         common-lisp:nil)
                        (pending :initarg :pending :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %instance-health-summary-pending :initform
                         common-lisp:nil)
                        (unknown :initarg :unknown :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %instance-health-summary-unknown :initform
                         common-lisp:nil)
                        (no-data :initarg :no-data :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %instance-health-summary-no-data :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-health-summary 'make-instance-health-summary))
 (common-lisp:defun make-instance-health-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severe degraded warning info ok pending
                     unknown no-data)
   (common-lisp:apply #'common-lisp:make-instance 'instance-health-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-data))
      (common-lisp:list
       (common-lisp:cons "NoData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "Unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "Pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ok))
      (common-lisp:list
       (common-lisp:cons "Ok"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info))
      (common-lisp:list
       (common-lisp:cons "Info"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning))
      (common-lisp:list
       (common-lisp:cons "Warning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'degraded))
      (common-lisp:list
       (common-lisp:cons "Degraded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severe))
      (common-lisp:list
       (common-lisp:cons "Severe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   common-lisp:nil))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-list () '(trivial-types:proper-list instance))
 (common-lisp:defun |make-instance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instances-health-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instances-health-attributes ()
   '(trivial-types:proper-list instances-health-attribute))
 (common-lisp:defun |make-instances-health-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instances-health-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition insufficient-privileges-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-privileges-exception)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-request-exception)))
(common-lisp:progn
 (common-lisp:defclass latency common-lisp:nil
                       ((p10 :initarg :p10 :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %latency-p10 :initform common-lisp:nil)
                        (p50 :initarg :p50 :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %latency-p50 :initform common-lisp:nil)
                        (p75 :initarg :p75 :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %latency-p75 :initform common-lisp:nil)
                        (p85 :initarg :p85 :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %latency-p85 :initform common-lisp:nil)
                        (p90 :initarg :p90 :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %latency-p90 :initform common-lisp:nil)
                        (p95 :initarg :p95 :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %latency-p95 :initform common-lisp:nil)
                        (p99 :initarg :p99 :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %latency-p99 :initform common-lisp:nil)
                        (p999 :initarg :p999 :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor %latency-p999 :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'latency 'make-latency))
 (common-lisp:defun make-latency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key p10 p50 p75 p85 p90 p95 p99 p999)
   (common-lisp:apply #'common-lisp:make-instance 'latency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input latency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input latency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p999))
      (common-lisp:list
       (common-lisp:cons "P999"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p99))
      (common-lisp:list
       (common-lisp:cons "P99"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p95))
      (common-lisp:list
       (common-lisp:cons "P95"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p90))
      (common-lisp:list
       (common-lisp:cons "P90"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p85))
      (common-lisp:list
       (common-lisp:cons "P85"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p75))
      (common-lisp:list
       (common-lisp:cons "P75"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p50))
      (common-lisp:list
       (common-lisp:cons "P50"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p10))
      (common-lisp:list
       (common-lisp:cons "P10"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input latency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-configuration common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %launch-configuration-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-configuration 'make-launch-configuration))
 (common-lisp:defun make-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'launch-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-configuration-list ()
   '(trivial-types:proper-list launch-configuration))
 (common-lisp:defun |make-launch-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass launch-template common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %launch-template-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'launch-template 'make-launch-template))
 (common-lisp:defun make-launch-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'launch-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-template-list ()
   '(trivial-types:proper-list launch-template))
 (common-lisp:defun |make-launch-template-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launched-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-available-solution-stacks-result-message
                       common-lisp:nil
                       ((solution-stack-details :initarg
                         :solution-stack-details :type
                         (common-lisp:or available-solution-stack-details-list
                                         common-lisp:null)
                         :accessor
                         %list-available-solution-stacks-result-message-solution-stack-details
                         :initform common-lisp:nil)
                        (solution-stacks :initarg :solution-stacks :type
                         (common-lisp:or available-solution-stack-names-list
                                         common-lisp:null)
                         :accessor
                         %list-available-solution-stacks-result-message-solution-stacks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-available-solution-stacks-result-message
                    'make-list-available-solution-stacks-result-message))
 (common-lisp:defun make-list-available-solution-stacks-result-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key solution-stack-details solution-stacks)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-available-solution-stacks-result-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-solution-stacks-result-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-solution-stacks-result-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stacks))
      (common-lisp:list
       (common-lisp:cons "SolutionStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'solution-stack-details))
      (common-lisp:list
       (common-lisp:cons "SolutionStackDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-solution-stacks-result-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-platform-branches-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-platform-branches-request-next-token :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or platform-branch-max-records
                                         common-lisp:null)
                         :accessor %list-platform-branches-request-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or search-filters common-lisp:null)
                         :accessor %list-platform-branches-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-platform-branches-request
                    'make-list-platform-branches-request))
 (common-lisp:defun make-list-platform-branches-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-records filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-platform-branches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-platform-branches-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-platform-branches-result-next-token :initform
                         common-lisp:nil)
                        (platform-branch-summary-list :initarg
                         :platform-branch-summary-list :type
                         (common-lisp:or platform-branch-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-platform-branches-result-platform-branch-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-platform-branches-result
                    'make-list-platform-branches-result))
 (common-lisp:defun make-list-platform-branches-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token platform-branch-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-platform-branches-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-summary-list))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-platform-versions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-platform-versions-request-next-token :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or platform-max-records common-lisp:null)
                         :accessor %list-platform-versions-request-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or platform-filters common-lisp:null)
                         :accessor %list-platform-versions-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-platform-versions-request
                    'make-list-platform-versions-request))
 (common-lisp:defun make-list-platform-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-records filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-platform-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-platform-versions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-platform-versions-result-next-token :initform
                         common-lisp:nil)
                        (platform-summary-list :initarg :platform-summary-list
                         :type
                         (common-lisp:or platform-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-platform-versions-result-platform-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-platform-versions-result
                    'make-list-platform-versions-result))
 (common-lisp:defun make-list-platform-versions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token platform-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-platform-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-summary-list))
      (common-lisp:list
       (common-lisp:cons "PlatformSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-message common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-message-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defun make-list-tags-for-resource-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener common-lisp:nil
                       ((port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %listener-port :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %listener-protocol :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defun make-listener
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port protocol)
   (common-lisp:apply #'common-lisp:make-instance 'listener
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-average ()
   '(trivial-types:proper-list load-average-value))
 (common-lisp:defun |make-load-average|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-average-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-average-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass load-balancer common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %load-balancer-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'load-balancer 'make-load-balancer))
 (common-lisp:defun make-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer-description common-lisp:nil
                       ((listeners :initarg :listeners :type
                         (common-lisp:or load-balancer-listeners-description
                                         common-lisp:null)
                         :accessor %load-balancer-description-listeners
                         :initform common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %load-balancer-description-domain :initform
                         common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %load-balancer-description-load-balancer-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-description
                    'make-load-balancer-description))
 (common-lisp:defun make-load-balancer-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key listeners domain load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-list ()
   '(trivial-types:proper-list load-balancer))
 (common-lisp:defun |make-load-balancer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype load-balancer-listeners-description ()
   '(trivial-types:proper-list listener))
 (common-lisp:defun |make-load-balancer-listeners-description|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintainer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass managed-action common-lisp:nil
                       ((window-start-time :initarg :window-start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %managed-action-window-start-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or action-status common-lisp:null)
                         :accessor %managed-action-status :initform
                         common-lisp:nil)
                        (action-type :initarg :action-type :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor %managed-action-action-type :initform
                         common-lisp:nil)
                        (action-description :initarg :action-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-action-action-description :initform
                         common-lisp:nil)
                        (action-id :initarg :action-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-action-action-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'managed-action 'make-managed-action))
 (common-lisp:defun make-managed-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-start-time status action-type
                     action-description action-id)
   (common-lisp:apply #'common-lisp:make-instance 'managed-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-description))
      (common-lisp:list
       (common-lisp:cons "ActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-start-time))
      (common-lisp:list
       (common-lisp:cons "WindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass managed-action-history-item common-lisp:nil
                       ((finished-time :initarg :finished-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %managed-action-history-item-finished-time :initform
                         common-lisp:nil)
                        (executed-time :initarg :executed-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %managed-action-history-item-executed-time :initform
                         common-lisp:nil)
                        (failure-description :initarg :failure-description
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %managed-action-history-item-failure-description
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or action-history-status
                                         common-lisp:null)
                         :accessor %managed-action-history-item-status
                         :initform common-lisp:nil)
                        (failure-type :initarg :failure-type :type
                         (common-lisp:or failure-type common-lisp:null)
                         :accessor %managed-action-history-item-failure-type
                         :initform common-lisp:nil)
                        (action-description :initarg :action-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-action-history-item-action-description
                         :initform common-lisp:nil)
                        (action-type :initarg :action-type :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor %managed-action-history-item-action-type
                         :initform common-lisp:nil)
                        (action-id :initarg :action-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-action-history-item-action-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'managed-action-history-item
                    'make-managed-action-history-item))
 (common-lisp:defun make-managed-action-history-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finished-time executed-time
                     failure-description status failure-type action-description
                     action-type action-id)
   (common-lisp:apply #'common-lisp:make-instance 'managed-action-history-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-action-history-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-action-history-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-description))
      (common-lisp:list
       (common-lisp:cons "ActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "FailureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-description))
      (common-lisp:list
       (common-lisp:cons "FailureDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executed-time))
      (common-lisp:list
       (common-lisp:cons "ExecutedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-time))
      (common-lisp:list
       (common-lisp:cons "FinishedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-action-history-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-action-history-items ()
   '(trivial-types:proper-list managed-action-history-item))
 (common-lisp:defun |make-managed-action-history-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-action-history-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype managed-action-history-max-items () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition managed-action-invalid-state-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'managed-action-invalid-state-exception)))
(common-lisp:progn
 (common-lisp:deftype managed-actions ()
   '(trivial-types:proper-list managed-action))
 (common-lisp:defun |make-managed-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass max-age-rule common-lisp:nil
                       ((delete-source-from-s3 :initarg :delete-source-from-s3
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %max-age-rule-delete-source-from-s3
                         :initform common-lisp:nil)
                        (max-age-in-days :initarg :max-age-in-days :type
                         (common-lisp:or boxed-int common-lisp:null) :accessor
                         %max-age-rule-max-age-in-days :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %max-age-rule-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export (common-lisp:list 'max-age-rule 'make-max-age-rule))
 (common-lisp:defun make-max-age-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-source-from-s3 max-age-in-days
                     enabled)
   (common-lisp:apply #'common-lisp:make-instance 'max-age-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input max-age-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input max-age-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-in-days))
      (common-lisp:list
       (common-lisp:cons "MaxAgeInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-source-from-s3))
      (common-lisp:list
       (common-lisp:cons "DeleteSourceFromS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input max-age-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass max-count-rule common-lisp:nil
                       ((delete-source-from-s3 :initarg :delete-source-from-s3
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %max-count-rule-delete-source-from-s3
                         :initform common-lisp:nil)
                        (max-count :initarg :max-count :type
                         (common-lisp:or boxed-int common-lisp:null) :accessor
                         %max-count-rule-max-count :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %max-count-rule-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export (common-lisp:list 'max-count-rule 'make-max-count-rule))
 (common-lisp:defun make-max-count-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-source-from-s3 max-count enabled)
   (common-lisp:apply #'common-lisp:make-instance 'max-count-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input max-count-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input max-count-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "MaxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-source-from-s3))
      (common-lisp:list
       (common-lisp:cons "DeleteSourceFromS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input max-count-rule))
   common-lisp:nil))
(common-lisp:deftype max-records () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype nullable-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:deftype nullable-long () 'common-lisp:integer)
(common-lisp:deftype operating-system-name () 'common-lisp:string)
(common-lisp:deftype operating-system-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-in-progress-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-in-progress-exception)))
(common-lisp:deftype operations-role () 'common-lisp:string)
(common-lisp:deftype option-namespace () 'common-lisp:string)
(common-lisp:deftype option-restriction-max-length () 'common-lisp:integer)
(common-lisp:deftype option-restriction-max-value () 'common-lisp:integer)
(common-lisp:deftype option-restriction-min-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass option-restriction-regex common-lisp:nil
                       ((label :initarg :label :type
                         (common-lisp:or regex-label common-lisp:null)
                         :accessor %option-restriction-regex-label :initform
                         common-lisp:nil)
                        (pattern :initarg :pattern :type
                         (common-lisp:or regex-pattern common-lisp:null)
                         :accessor %option-restriction-regex-pattern :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'option-restriction-regex 'make-option-restriction-regex))
 (common-lisp:defun make-option-restriction-regex
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label pattern)
   (common-lisp:apply #'common-lisp:make-instance 'option-restriction-regex
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-restriction-regex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-restriction-regex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-restriction-regex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass option-specification common-lisp:nil
                       ((option-name :initarg :option-name :type
                         (common-lisp:or configuration-option-name
                                         common-lisp:null)
                         :accessor %option-specification-option-name :initform
                         common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or option-namespace common-lisp:null)
                         :accessor %option-specification-namespace :initform
                         common-lisp:nil)
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %option-specification-resource-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'option-specification 'make-option-specification))
 (common-lisp:defun make-option-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key option-name namespace resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'option-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype options-specifier-list ()
   '(trivial-types:proper-list option-specification))
 (common-lisp:defun |make-options-specifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-arn () 'common-lisp:string)
(common-lisp:deftype platform-branch-lifecycle-state () 'common-lisp:string)
(common-lisp:deftype platform-branch-max-records () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass platform-branch-summary common-lisp:nil
                       ((supported-tier-list :initarg :supported-tier-list
                         :type
                         (common-lisp:or supported-tier-list common-lisp:null)
                         :accessor %platform-branch-summary-supported-tier-list
                         :initform common-lisp:nil)
                        (branch-order :initarg :branch-order :type
                         (common-lisp:or branch-order common-lisp:null)
                         :accessor %platform-branch-summary-branch-order
                         :initform common-lisp:nil)
                        (lifecycle-state :initarg :lifecycle-state :type
                         (common-lisp:or platform-branch-lifecycle-state
                                         common-lisp:null)
                         :accessor %platform-branch-summary-lifecycle-state
                         :initform common-lisp:nil)
                        (branch-name :initarg :branch-name :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor %platform-branch-summary-branch-name
                         :initform common-lisp:nil)
                        (platform-name :initarg :platform-name :type
                         (common-lisp:or platform-name common-lisp:null)
                         :accessor %platform-branch-summary-platform-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'platform-branch-summary 'make-platform-branch-summary))
 (common-lisp:defun make-platform-branch-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supported-tier-list branch-order
                     lifecycle-state branch-name platform-name)
   (common-lisp:apply #'common-lisp:make-instance 'platform-branch-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          platform-branch-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          platform-branch-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-name))
      (common-lisp:list
       (common-lisp:cons "PlatformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "BranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "LifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-order))
      (common-lisp:list
       (common-lisp:cons "BranchOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-tier-list))
      (common-lisp:list
       (common-lisp:cons "SupportedTierList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          platform-branch-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype platform-branch-summary-list ()
   '(trivial-types:proper-list platform-branch-summary))
 (common-lisp:defun |make-platform-branch-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-branch-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass platform-description common-lisp:nil
                       ((platform-branch-lifecycle-state :initarg
                         :platform-branch-lifecycle-state :type
                         (common-lisp:or platform-branch-lifecycle-state
                                         common-lisp:null)
                         :accessor
                         %platform-description-platform-branch-lifecycle-state
                         :initform common-lisp:nil)
                        (platform-branch-name :initarg :platform-branch-name
                         :type (common-lisp:or branch-name common-lisp:null)
                         :accessor %platform-description-platform-branch-name
                         :initform common-lisp:nil)
                        (platform-lifecycle-state :initarg
                         :platform-lifecycle-state :type
                         (common-lisp:or platform-lifecycle-state
                                         common-lisp:null)
                         :accessor
                         %platform-description-platform-lifecycle-state
                         :initform common-lisp:nil)
                        (supported-addon-list :initarg :supported-addon-list
                         :type
                         (common-lisp:or supported-addon-list common-lisp:null)
                         :accessor %platform-description-supported-addon-list
                         :initform common-lisp:nil)
                        (supported-tier-list :initarg :supported-tier-list
                         :type
                         (common-lisp:or supported-tier-list common-lisp:null)
                         :accessor %platform-description-supported-tier-list
                         :initform common-lisp:nil)
                        (custom-ami-list :initarg :custom-ami-list :type
                         (common-lisp:or custom-ami-list common-lisp:null)
                         :accessor %platform-description-custom-ami-list
                         :initform common-lisp:nil)
                        (frameworks :initarg :frameworks :type
                         (common-lisp:or platform-frameworks common-lisp:null)
                         :accessor %platform-description-frameworks :initform
                         common-lisp:nil)
                        (programming-languages :initarg :programming-languages
                         :type
                         (common-lisp:or platform-programming-languages
                                         common-lisp:null)
                         :accessor %platform-description-programming-languages
                         :initform common-lisp:nil)
                        (operating-system-version :initarg
                         :operating-system-version :type
                         (common-lisp:or operating-system-version
                                         common-lisp:null)
                         :accessor
                         %platform-description-operating-system-version
                         :initform common-lisp:nil)
                        (operating-system-name :initarg :operating-system-name
                         :type
                         (common-lisp:or operating-system-name
                                         common-lisp:null)
                         :accessor %platform-description-operating-system-name
                         :initform common-lisp:nil)
                        (maintainer :initarg :maintainer :type
                         (common-lisp:or maintainer common-lisp:null) :accessor
                         %platform-description-maintainer :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %platform-description-description :initform
                         common-lisp:nil)
                        (platform-category :initarg :platform-category :type
                         (common-lisp:or platform-category common-lisp:null)
                         :accessor %platform-description-platform-category
                         :initform common-lisp:nil)
                        (date-updated :initarg :date-updated :type
                         (common-lisp:or update-date common-lisp:null)
                         :accessor %platform-description-date-updated :initform
                         common-lisp:nil)
                        (date-created :initarg :date-created :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor %platform-description-date-created :initform
                         common-lisp:nil)
                        (platform-status :initarg :platform-status :type
                         (common-lisp:or platform-status common-lisp:null)
                         :accessor %platform-description-platform-status
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor %platform-description-solution-stack-name
                         :initform common-lisp:nil)
                        (platform-version :initarg :platform-version :type
                         (common-lisp:or platform-version common-lisp:null)
                         :accessor %platform-description-platform-version
                         :initform common-lisp:nil)
                        (platform-name :initarg :platform-name :type
                         (common-lisp:or platform-name common-lisp:null)
                         :accessor %platform-description-platform-name
                         :initform common-lisp:nil)
                        (platform-owner :initarg :platform-owner :type
                         (common-lisp:or platform-owner common-lisp:null)
                         :accessor %platform-description-platform-owner
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor %platform-description-platform-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'platform-description 'make-platform-description))
 (common-lisp:defun make-platform-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key platform-branch-lifecycle-state
                     platform-branch-name platform-lifecycle-state
                     supported-addon-list supported-tier-list custom-ami-list
                     frameworks programming-languages operating-system-version
                     operating-system-name maintainer description
                     platform-category date-updated date-created
                     platform-status solution-stack-name platform-version
                     platform-name platform-owner platform-arn)
   (common-lisp:apply #'common-lisp:make-instance 'platform-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-owner))
      (common-lisp:list
       (common-lisp:cons "PlatformOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-name))
      (common-lisp:list
       (common-lisp:cons "PlatformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-status))
      (common-lisp:list
       (common-lisp:cons "PlatformStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-category))
      (common-lisp:list
       (common-lisp:cons "PlatformCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintainer))
      (common-lisp:list
       (common-lisp:cons "Maintainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-name))
      (common-lisp:list
       (common-lisp:cons "OperatingSystemName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-version))
      (common-lisp:list
       (common-lisp:cons "OperatingSystemVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'programming-languages))
      (common-lisp:list
       (common-lisp:cons "ProgrammingLanguages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frameworks))
      (common-lisp:list
       (common-lisp:cons "Frameworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-list))
      (common-lisp:list
       (common-lisp:cons "CustomAmiList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-tier-list))
      (common-lisp:list
       (common-lisp:cons "SupportedTierList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-addon-list))
      (common-lisp:list
       (common-lisp:cons "SupportedAddonList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "PlatformLifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-name))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchLifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass platform-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or platform-filter-value-list
                                         common-lisp:null)
                         :accessor %platform-filter-values :initform
                         common-lisp:nil)
                        (operator :initarg :operator :type
                         (common-lisp:or platform-filter-operator
                                         common-lisp:null)
                         :accessor %platform-filter-operator :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or platform-filter-type common-lisp:null)
                         :accessor %platform-filter-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'platform-filter 'make-platform-filter))
 (common-lisp:defun make-platform-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values operator type)
   (common-lisp:apply #'common-lisp:make-instance 'platform-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-filter))
   common-lisp:nil))
(common-lisp:deftype platform-filter-operator () 'common-lisp:string)
(common-lisp:deftype platform-filter-type () 'common-lisp:string)
(common-lisp:deftype platform-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platform-filter-value-list ()
   '(trivial-types:proper-list platform-filter-value))
 (common-lisp:defun |make-platform-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype platform-filters ()
   '(trivial-types:proper-list platform-filter))
 (common-lisp:defun |make-platform-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass platform-framework common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %platform-framework-version :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %platform-framework-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'platform-framework 'make-platform-framework))
 (common-lisp:defun make-platform-framework
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance 'platform-framework
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-framework))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-framework))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-framework))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype platform-frameworks ()
   '(trivial-types:proper-list platform-framework))
 (common-lisp:defun |make-platform-frameworks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-framework))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-lifecycle-state () 'common-lisp:string)
(common-lisp:deftype platform-max-records () 'common-lisp:integer)
(common-lisp:deftype platform-name () 'common-lisp:string)
(common-lisp:deftype platform-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass platform-programming-language common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %platform-programming-language-version :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %platform-programming-language-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'platform-programming-language
                    'make-platform-programming-language))
 (common-lisp:defun make-platform-programming-language
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'platform-programming-language
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          platform-programming-language))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          platform-programming-language))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          platform-programming-language))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype platform-programming-languages ()
   '(trivial-types:proper-list platform-programming-language))
 (common-lisp:defun |make-platform-programming-languages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            platform-programming-language))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass platform-summary common-lisp:nil
                       ((platform-branch-lifecycle-state :initarg
                         :platform-branch-lifecycle-state :type
                         (common-lisp:or platform-branch-lifecycle-state
                                         common-lisp:null)
                         :accessor
                         %platform-summary-platform-branch-lifecycle-state
                         :initform common-lisp:nil)
                        (platform-branch-name :initarg :platform-branch-name
                         :type (common-lisp:or branch-name common-lisp:null)
                         :accessor %platform-summary-platform-branch-name
                         :initform common-lisp:nil)
                        (platform-version :initarg :platform-version :type
                         (common-lisp:or platform-version common-lisp:null)
                         :accessor %platform-summary-platform-version :initform
                         common-lisp:nil)
                        (platform-lifecycle-state :initarg
                         :platform-lifecycle-state :type
                         (common-lisp:or platform-lifecycle-state
                                         common-lisp:null)
                         :accessor %platform-summary-platform-lifecycle-state
                         :initform common-lisp:nil)
                        (supported-addon-list :initarg :supported-addon-list
                         :type
                         (common-lisp:or supported-addon-list common-lisp:null)
                         :accessor %platform-summary-supported-addon-list
                         :initform common-lisp:nil)
                        (supported-tier-list :initarg :supported-tier-list
                         :type
                         (common-lisp:or supported-tier-list common-lisp:null)
                         :accessor %platform-summary-supported-tier-list
                         :initform common-lisp:nil)
                        (operating-system-version :initarg
                         :operating-system-version :type
                         (common-lisp:or operating-system-version
                                         common-lisp:null)
                         :accessor %platform-summary-operating-system-version
                         :initform common-lisp:nil)
                        (operating-system-name :initarg :operating-system-name
                         :type
                         (common-lisp:or operating-system-name
                                         common-lisp:null)
                         :accessor %platform-summary-operating-system-name
                         :initform common-lisp:nil)
                        (platform-category :initarg :platform-category :type
                         (common-lisp:or platform-category common-lisp:null)
                         :accessor %platform-summary-platform-category
                         :initform common-lisp:nil)
                        (platform-status :initarg :platform-status :type
                         (common-lisp:or platform-status common-lisp:null)
                         :accessor %platform-summary-platform-status :initform
                         common-lisp:nil)
                        (platform-owner :initarg :platform-owner :type
                         (common-lisp:or platform-owner common-lisp:null)
                         :accessor %platform-summary-platform-owner :initform
                         common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor %platform-summary-platform-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'platform-summary 'make-platform-summary))
 (common-lisp:defun make-platform-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key platform-branch-lifecycle-state
                     platform-branch-name platform-version
                     platform-lifecycle-state supported-addon-list
                     supported-tier-list operating-system-version
                     operating-system-name platform-category platform-status
                     platform-owner platform-arn)
   (common-lisp:apply #'common-lisp:make-instance 'platform-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-owner))
      (common-lisp:list
       (common-lisp:cons "PlatformOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-status))
      (common-lisp:list
       (common-lisp:cons "PlatformStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-category))
      (common-lisp:list
       (common-lisp:cons "PlatformCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-name))
      (common-lisp:list
       (common-lisp:cons "OperatingSystemName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-version))
      (common-lisp:list
       (common-lisp:cons "OperatingSystemVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-tier-list))
      (common-lisp:list
       (common-lisp:cons "SupportedTierList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-addon-list))
      (common-lisp:list
       (common-lisp:cons "SupportedAddonList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "PlatformLifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-name))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchLifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype platform-summary-list ()
   '(trivial-types:proper-list platform-summary))
 (common-lisp:defun |make-platform-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition platform-version-still-referenced-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'platform-version-still-referenced-exception)))
(common-lisp:progn
 (common-lisp:defclass queue common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %queue-url :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %queue-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'queue 'make-queue))
 (common-lisp:defun make-queue
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url name)
   (common-lisp:apply #'common-lisp:make-instance 'queue
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-list () '(trivial-types:proper-list queue))
 (common-lisp:defun |make-queue-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rebuild-environment-message common-lisp:nil
                       ((environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %rebuild-environment-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor %rebuild-environment-message-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rebuild-environment-message
                    'make-rebuild-environment-message))
 (common-lisp:defun make-rebuild-environment-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name environment-id)
   (common-lisp:apply #'common-lisp:make-instance 'rebuild-environment-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-environment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-environment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-environment-message))
   common-lisp:nil))
(common-lisp:deftype refreshed-at () 'common-lisp:string)
(common-lisp:deftype regex-label () 'common-lisp:string)
(common-lisp:deftype regex-pattern () 'common-lisp:string)
(common-lisp:deftype request-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass request-environment-info-message common-lisp:nil
                       ((info-type :initarg :info-type :type
                         (common-lisp:or environment-info-type
                                         common-lisp:null)
                         :accessor %request-environment-info-message-info-type
                         :initform
                         (common-lisp:error ":info-type is required"))
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %request-environment-info-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %request-environment-info-message-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'request-environment-info-message
                    'make-request-environment-info-message))
 (common-lisp:defun make-request-environment-info-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key info-type environment-name
                     environment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'request-environment-info-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-environment-info-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-environment-info-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info-type))
      (common-lisp:list
       (common-lisp:cons "InfoType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-environment-info-message))
   common-lisp:nil))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass resource-quota common-lisp:nil
                       ((maximum :initarg :maximum :type
                         (common-lisp:or boxed-int common-lisp:null) :accessor
                         %resource-quota-maximum :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-quota 'make-resource-quota))
 (common-lisp:defun make-resource-quota
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum)
   (common-lisp:apply #'common-lisp:make-instance 'resource-quota
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-quota))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-quota))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-quota))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-quotas common-lisp:nil
                       ((custom-platform-quota :initarg :custom-platform-quota
                         :type (common-lisp:or resource-quota common-lisp:null)
                         :accessor %resource-quotas-custom-platform-quota
                         :initform common-lisp:nil)
                        (configuration-template-quota :initarg
                         :configuration-template-quota :type
                         (common-lisp:or resource-quota common-lisp:null)
                         :accessor
                         %resource-quotas-configuration-template-quota
                         :initform common-lisp:nil)
                        (environment-quota :initarg :environment-quota :type
                         (common-lisp:or resource-quota common-lisp:null)
                         :accessor %resource-quotas-environment-quota :initform
                         common-lisp:nil)
                        (application-version-quota :initarg
                         :application-version-quota :type
                         (common-lisp:or resource-quota common-lisp:null)
                         :accessor %resource-quotas-application-version-quota
                         :initform common-lisp:nil)
                        (application-quota :initarg :application-quota :type
                         (common-lisp:or resource-quota common-lisp:null)
                         :accessor %resource-quotas-application-quota :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-quotas 'make-resource-quotas))
 (common-lisp:defun make-resource-quotas
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-platform-quota
                     configuration-template-quota environment-quota
                     application-version-quota application-quota)
   (common-lisp:apply #'common-lisp:make-instance 'resource-quotas
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-quotas))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-quotas))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-quota))
      (common-lisp:list
       (common-lisp:cons "ApplicationQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-quota))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-quota))
      (common-lisp:list
       (common-lisp:cons "EnvironmentQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-template-quota))
      (common-lisp:list
       (common-lisp:cons "ConfigurationTemplateQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-platform-quota))
      (common-lisp:list
       (common-lisp:cons "CustomPlatformQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-quotas))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-tags-description-message common-lisp:nil
                       ((resource-tags :initarg :resource-tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %resource-tags-description-message-resource-tags
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %resource-tags-description-message-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-tags-description-message
                    'make-resource-tags-description-message))
 (common-lisp:defun make-resource-tags-description-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-tags-description-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-tags-description-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-tags-description-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-tags-description-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-type-not-supported-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-type-not-supported-exception)))
(common-lisp:progn
 (common-lisp:defclass restart-app-server-message common-lisp:nil
                       ((environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %restart-app-server-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor %restart-app-server-message-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restart-app-server-message
                    'make-restart-app-server-message))
 (common-lisp:defun make-restart-app-server-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name environment-id)
   (common-lisp:apply #'common-lisp:make-instance 'restart-app-server-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restart-app-server-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restart-app-server-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restart-app-server-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-environment-info-message common-lisp:nil
                       ((info-type :initarg :info-type :type
                         (common-lisp:or environment-info-type
                                         common-lisp:null)
                         :accessor %retrieve-environment-info-message-info-type
                         :initform
                         (common-lisp:error ":info-type is required"))
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %retrieve-environment-info-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %retrieve-environment-info-message-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'retrieve-environment-info-message
                    'make-retrieve-environment-info-message))
 (common-lisp:defun make-retrieve-environment-info-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key info-type environment-name
                     environment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'retrieve-environment-info-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info-type))
      (common-lisp:list
       (common-lisp:cons "InfoType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-environment-info-result-message common-lisp:nil
                       ((environment-info :initarg :environment-info :type
                         (common-lisp:or environment-info-description-list
                                         common-lisp:null)
                         :accessor
                         %retrieve-environment-info-result-message-environment-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'retrieve-environment-info-result-message
                    'make-retrieve-environment-info-result-message))
 (common-lisp:defun make-retrieve-environment-info-result-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'retrieve-environment-info-result-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-result-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-result-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-info))
      (common-lisp:list
       (common-lisp:cons "EnvironmentInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-result-message))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((s3key :initarg :s3key :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %s3location-s3key :initform common-lisp:nil)
                        (s3bucket :initarg :s3bucket :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %s3location-s3bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition s3location-not-in-service-region-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 's3location-not-in-service-region-exception)))
(common-lisp:progn
 (common-lisp:define-condition s3subscription-required-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 's3subscription-required-exception)))
(common-lisp:deftype sample-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass search-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or search-filter-values common-lisp:null)
                         :accessor %search-filter-values :initform
                         common-lisp:nil)
                        (operator :initarg :operator :type
                         (common-lisp:or search-filter-operator
                                         common-lisp:null)
                         :accessor %search-filter-operator :initform
                         common-lisp:nil)
                        (attribute :initarg :attribute :type
                         (common-lisp:or search-filter-attribute
                                         common-lisp:null)
                         :accessor %search-filter-attribute :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'search-filter 'make-search-filter))
 (common-lisp:defun make-search-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values operator attribute)
   (common-lisp:apply #'common-lisp:make-instance 'search-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-filter))
   common-lisp:nil))
(common-lisp:deftype search-filter-attribute () 'common-lisp:string)
(common-lisp:deftype search-filter-operator () 'common-lisp:string)
(common-lisp:deftype search-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-filter-values ()
   '(trivial-types:proper-list search-filter-value))
 (common-lisp:defun |make-search-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype search-filters ()
   '(trivial-types:proper-list search-filter))
 (common-lisp:defun |make-search-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass single-instance-health common-lisp:nil
                       ((instance-type :initarg :instance-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %single-instance-health-instance-type :initform
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %single-instance-health-availability-zone :initform
                         common-lisp:nil)
                        (deployment :initarg :deployment :type
                         (common-lisp:or deployment common-lisp:null) :accessor
                         %single-instance-health-deployment :initform
                         common-lisp:nil)
                        (system :initarg :system :type
                         (common-lisp:or system-status common-lisp:null)
                         :accessor %single-instance-health-system :initform
                         common-lisp:nil)
                        (application-metrics :initarg :application-metrics
                         :type
                         (common-lisp:or application-metrics common-lisp:null)
                         :accessor %single-instance-health-application-metrics
                         :initform common-lisp:nil)
                        (launched-at :initarg :launched-at :type
                         (common-lisp:or launched-at common-lisp:null)
                         :accessor %single-instance-health-launched-at
                         :initform common-lisp:nil)
                        (causes :initarg :causes :type
                         (common-lisp:or causes common-lisp:null) :accessor
                         %single-instance-health-causes :initform
                         common-lisp:nil)
                        (color :initarg :color :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %single-instance-health-color :initform
                         common-lisp:nil)
                        (health-status :initarg :health-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %single-instance-health-health-status :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %single-instance-health-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'single-instance-health 'make-single-instance-health))
 (common-lisp:defun make-single-instance-health
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-type availability-zone
                     deployment system application-metrics launched-at causes
                     color health-status instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'single-instance-health
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          single-instance-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          single-instance-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causes))
      (common-lisp:list
       (common-lisp:cons "Causes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "LaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-metrics))
      (common-lisp:list
       (common-lisp:cons "ApplicationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system))
      (common-lisp:list
       (common-lisp:cons "System"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment))
      (common-lisp:list
       (common-lisp:cons "Deployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          single-instance-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass solution-stack-description common-lisp:nil
                       ((permitted-file-types :initarg :permitted-file-types
                         :type
                         (common-lisp:or solution-stack-file-type-list
                                         common-lisp:null)
                         :accessor
                         %solution-stack-description-permitted-file-types
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor
                         %solution-stack-description-solution-stack-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'solution-stack-description
                    'make-solution-stack-description))
 (common-lisp:defun make-solution-stack-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permitted-file-types solution-stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'solution-stack-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          solution-stack-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          solution-stack-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permitted-file-types))
      (common-lisp:list
       (common-lisp:cons "PermittedFileTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          solution-stack-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype solution-stack-file-type-list ()
   '(trivial-types:proper-list file-type-extension))
 (common-lisp:defun |make-solution-stack-file-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-type-extension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype solution-stack-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-build-information common-lisp:nil
                       ((source-location :initarg :source-location :type
                         (common-lisp:or source-location common-lisp:null)
                         :accessor %source-build-information-source-location
                         :initform
                         (common-lisp:error ":source-location is required"))
                        (source-repository :initarg :source-repository :type
                         (common-lisp:or source-repository common-lisp:null)
                         :accessor %source-build-information-source-repository
                         :initform
                         (common-lisp:error ":source-repository is required"))
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %source-build-information-source-type
                         :initform
                         (common-lisp:error ":source-type is required"))))
 (common-lisp:export
  (common-lisp:list 'source-build-information 'make-source-build-information))
 (common-lisp:defun make-source-build-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-location source-repository
                     source-type)
   (common-lisp:apply #'common-lisp:make-instance 'source-build-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-build-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-build-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-repository))
      (common-lisp:list
       (common-lisp:cons "SourceRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-location))
      (common-lisp:list
       (common-lisp:cons "SourceLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-build-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition source-bundle-deletion-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-bundle-deletion-exception)))
(common-lisp:progn
 (common-lisp:defclass source-configuration common-lisp:nil
                       ((template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor %source-configuration-template-name
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %source-configuration-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defun make-source-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-name application-name)
   (common-lisp:apply #'common-lisp:make-instance 'source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:deftype source-location () 'common-lisp:string)
(common-lisp:deftype source-repository () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass status-codes common-lisp:nil
                       ((status5xx :initarg :status5xx :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %status-codes-status5xx :initform
                         common-lisp:nil)
                        (status4xx :initarg :status4xx :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %status-codes-status4xx :initform
                         common-lisp:nil)
                        (status3xx :initarg :status3xx :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %status-codes-status3xx :initform
                         common-lisp:nil)
                        (status2xx :initarg :status2xx :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %status-codes-status2xx :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'status-codes 'make-status-codes))
 (common-lisp:defun make-status-codes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status5xx status4xx status3xx status2xx)
   (common-lisp:apply #'common-lisp:make-instance 'status-codes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-codes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-codes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status2xx))
      (common-lisp:list
       (common-lisp:cons "Status2xx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status3xx))
      (common-lisp:list
       (common-lisp:cons "Status3xx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status4xx))
      (common-lisp:list
       (common-lisp:cons "Status4xx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status5xx))
      (common-lisp:list
       (common-lisp:cons "Status5xx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-codes))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype supported-addon () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-addon-list ()
   '(trivial-types:proper-list supported-addon))
 (common-lisp:defun |make-supported-addon-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-addon))
   aws-sdk/generator/shape::members))
(common-lisp:deftype supported-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-tier-list ()
   '(trivial-types:proper-list supported-tier))
 (common-lisp:defun |make-supported-tier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-tier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass swap-environment-cnames-message common-lisp:nil
                       ((destination-environment-name :initarg
                         :destination-environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %swap-environment-cnames-message-destination-environment-name
                         :initform common-lisp:nil)
                        (destination-environment-id :initarg
                         :destination-environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %swap-environment-cnames-message-destination-environment-id
                         :initform common-lisp:nil)
                        (source-environment-name :initarg
                         :source-environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %swap-environment-cnames-message-source-environment-name
                         :initform common-lisp:nil)
                        (source-environment-id :initarg :source-environment-id
                         :type (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %swap-environment-cnames-message-source-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'swap-environment-cnames-message
                    'make-swap-environment-cnames-message))
 (common-lisp:defun make-swap-environment-cnames-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-environment-name
                     destination-environment-id source-environment-name
                     source-environment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'swap-environment-cnames-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          swap-environment-cnames-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          swap-environment-cnames-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-environment-id))
      (common-lisp:list
       (common-lisp:cons "SourceEnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-environment-name))
      (common-lisp:list
       (common-lisp:cons "SourceEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-environment-id))
      (common-lisp:list
       (common-lisp:cons "DestinationEnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-environment-name))
      (common-lisp:list
       (common-lisp:cons "DestinationEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          swap-environment-cnames-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass system-status common-lisp:nil
                       ((load-average :initarg :load-average :type
                         (common-lisp:or load-average common-lisp:null)
                         :accessor %system-status-load-average :initform
                         common-lisp:nil)
                        (cpuutilization :initarg :cpuutilization :type
                         (common-lisp:or cpuutilization common-lisp:null)
                         :accessor %system-status-cpuutilization :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'system-status 'make-system-status))
 (common-lisp:defun make-system-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-average cpuutilization)
   (common-lisp:apply #'common-lisp:make-instance 'system-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input system-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input system-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpuutilization))
      (common-lisp:list
       (common-lisp:cons "CPUUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-average))
      (common-lisp:list
       (common-lisp:cons "LoadAverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input system-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype terminate-env-force () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass terminate-environment-message common-lisp:nil
                       ((force-terminate :initarg :force-terminate :type
                         (common-lisp:or force-terminate common-lisp:null)
                         :accessor
                         %terminate-environment-message-force-terminate
                         :initform common-lisp:nil)
                        (terminate-resources :initarg :terminate-resources
                         :type
                         (common-lisp:or terminate-environment-resources
                                         common-lisp:null)
                         :accessor
                         %terminate-environment-message-terminate-resources
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %terminate-environment-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor
                         %terminate-environment-message-environment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'terminate-environment-message
                    'make-terminate-environment-message))
 (common-lisp:defun make-terminate-environment-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-terminate terminate-resources
                     environment-name environment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-environment-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-environment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-environment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-resources))
      (common-lisp:list
       (common-lisp:cons "TerminateResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-terminate))
      (common-lisp:list
       (common-lisp:cons "ForceTerminate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-environment-message))
   common-lisp:nil))
(common-lisp:deftype terminate-environment-resources () 'common-lisp:boolean)
(common-lisp:deftype time-filter-end () 'common-lisp:string)
(common-lisp:deftype time-filter-start () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-application-versions-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'too-many-application-versions-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-applications-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-applications-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-buckets-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-buckets-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-configuration-templates-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'too-many-configuration-templates-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-environments-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-environments-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-platforms-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-platforms-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defclass trigger common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %trigger-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'trigger 'make-trigger))
 (common-lisp:defun make-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trigger-list () '(trivial-types:proper-list trigger))
 (common-lisp:defun |make-trigger-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-application-message common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-application-message-description
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %update-application-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-application-message
                    'make-update-application-message))
 (common-lisp:defun make-update-application-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description application-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-resource-lifecycle-message
                       common-lisp:nil
                       ((resource-lifecycle-config :initarg
                         :resource-lifecycle-config :type
                         (common-lisp:or application-resource-lifecycle-config
                                         common-lisp:null)
                         :accessor
                         %update-application-resource-lifecycle-message-resource-lifecycle-config
                         :initform
                         (common-lisp:error
                          ":resource-lifecycle-config is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %update-application-resource-lifecycle-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-application-resource-lifecycle-message
                    'make-update-application-resource-lifecycle-message))
 (common-lisp:defun make-update-application-resource-lifecycle-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-lifecycle-config
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-application-resource-lifecycle-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-resource-lifecycle-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-resource-lifecycle-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "ResourceLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-resource-lifecycle-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-version-message common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %update-application-version-message-description
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor
                         %update-application-version-message-version-label
                         :initform
                         (common-lisp:error ":version-label is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %update-application-version-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-application-version-message
                    'make-update-application-version-message))
 (common-lisp:defun make-update-application-version-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description version-label
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-application-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-template-message common-lisp:nil
                       ((options-to-remove :initarg :options-to-remove :type
                         (common-lisp:or options-specifier-list
                                         common-lisp:null)
                         :accessor
                         %update-configuration-template-message-options-to-remove
                         :initform common-lisp:nil)
                        (option-settings :initarg :option-settings :type
                         (common-lisp:or configuration-option-settings-list
                                         common-lisp:null)
                         :accessor
                         %update-configuration-template-message-option-settings
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %update-configuration-template-message-description
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor
                         %update-configuration-template-message-template-name
                         :initform
                         (common-lisp:error ":template-name is required"))
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %update-configuration-template-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-configuration-template-message
                    'make-update-configuration-template-message))
 (common-lisp:defun make-update-configuration-template-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options-to-remove option-settings
                     description template-name application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-template-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-template-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-template-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-remove))
      (common-lisp:list
       (common-lisp:cons "OptionsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-template-message))
   common-lisp:nil))
(common-lisp:deftype update-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-environment-message common-lisp:nil
                       ((options-to-remove :initarg :options-to-remove :type
                         (common-lisp:or options-specifier-list
                                         common-lisp:null)
                         :accessor
                         %update-environment-message-options-to-remove
                         :initform common-lisp:nil)
                        (option-settings :initarg :option-settings :type
                         (common-lisp:or configuration-option-settings-list
                                         common-lisp:null)
                         :accessor %update-environment-message-option-settings
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or platform-arn common-lisp:null)
                         :accessor %update-environment-message-platform-arn
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or solution-stack-name common-lisp:null)
                         :accessor
                         %update-environment-message-solution-stack-name
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor %update-environment-message-template-name
                         :initform common-lisp:nil)
                        (version-label :initarg :version-label :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor %update-environment-message-version-label
                         :initform common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or environment-tier common-lisp:null)
                         :accessor %update-environment-message-tier :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-environment-message-description
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         %update-environment-message-group-name :initform
                         common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %update-environment-message-environment-name
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or environment-id common-lisp:null)
                         :accessor %update-environment-message-environment-id
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %update-environment-message-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-environment-message
                    'make-update-environment-message))
 (common-lisp:defun make-update-environment-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options-to-remove option-settings
                     platform-arn solution-stack-name template-name
                     version-label tier description group-name environment-name
                     environment-id application-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-remove))
      (common-lisp:list
       (common-lisp:cons "OptionsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-tags-for-resource-message common-lisp:nil
                       ((tags-to-remove :initarg :tags-to-remove :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         %update-tags-for-resource-message-tags-to-remove
                         :initform common-lisp:nil)
                        (tags-to-add :initarg :tags-to-add :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %update-tags-for-resource-message-tags-to-add
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %update-tags-for-resource-message-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-tags-for-resource-message
                    'make-update-tags-for-resource-message))
 (common-lisp:defun make-update-tags-for-resource-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags-to-remove tags-to-add resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-tags-for-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-add))
      (common-lisp:list
       (common-lisp:cons "TagsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-remove))
      (common-lisp:list
       (common-lisp:cons "TagsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:deftype user-defined-option () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass validate-configuration-settings-message common-lisp:nil
                       ((option-settings :initarg :option-settings :type
                         (common-lisp:or configuration-option-settings-list
                                         common-lisp:null)
                         :accessor
                         %validate-configuration-settings-message-option-settings
                         :initform
                         (common-lisp:error ":option-settings is required"))
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor
                         %validate-configuration-settings-message-environment-name
                         :initform common-lisp:nil)
                        (template-name :initarg :template-name :type
                         (common-lisp:or configuration-template-name
                                         common-lisp:null)
                         :accessor
                         %validate-configuration-settings-message-template-name
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %validate-configuration-settings-message-application-name
                         :initform
                         (common-lisp:error ":application-name is required"))))
 (common-lisp:export
  (common-lisp:list 'validate-configuration-settings-message
                    'make-validate-configuration-settings-message))
 (common-lisp:defun make-validate-configuration-settings-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key option-settings environment-name
                     template-name application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-configuration-settings-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-settings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-settings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-settings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validation-message common-lisp:nil
                       ((option-name :initarg :option-name :type
                         (common-lisp:or configuration-option-name
                                         common-lisp:null)
                         :accessor %validation-message-option-name :initform
                         common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or option-namespace common-lisp:null)
                         :accessor %validation-message-namespace :initform
                         common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or validation-severity common-lisp:null)
                         :accessor %validation-message-severity :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or validation-message-string
                                         common-lisp:null)
                         :accessor %validation-message-message :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validation-message 'make-validation-message))
 (common-lisp:defun make-validation-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key option-name namespace severity message)
   (common-lisp:apply #'common-lisp:make-instance 'validation-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-message))
   common-lisp:nil))
(common-lisp:deftype validation-message-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype validation-messages-list ()
   '(trivial-types:proper-list validation-message))
 (common-lisp:defun |make-validation-messages-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-severity () 'common-lisp:string)
(common-lisp:deftype version-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype version-labels ()
   '(trivial-types:proper-list version-label))
 (common-lisp:defun |make-version-labels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype version-labels-list ()
   '(trivial-types:proper-list version-label))
 (common-lisp:defun |make-version-labels-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-label))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtualization-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun abort-environment-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-abort-environment-update-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "AbortEnvironmentUpdate" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'abort-environment-update))
(common-lisp:progn
 (common-lisp:defun apply-environment-managed-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name environment-id
                     action-id)
   (common-lisp:declare
    (common-lisp:ignorable environment-name environment-id action-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-environment-managed-action-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "ApplyEnvironmentManagedAction" "2010-12-01"))
      common-lisp:nil "ApplyEnvironmentManagedActionResult" *error-map*)))
 (common-lisp:export 'apply-environment-managed-action))
(common-lisp:progn
 (common-lisp:defun associate-environment-operations-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name operations-role)
   (common-lisp:declare
    (common-lisp:ignorable environment-name operations-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-environment-operations-role-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "AssociateEnvironmentOperationsRole" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-environment-operations-role))
(common-lisp:progn
 (common-lisp:defun check-dnsavailability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cnameprefix)
   (common-lisp:declare (common-lisp:ignorable cnameprefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-check-dnsavailability-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "CheckDNSAvailability" "2010-12-01"))
      common-lisp:nil "CheckDNSAvailabilityResult" *error-map*)))
 (common-lisp:export 'check-dnsavailability))
(common-lisp:progn
 (common-lisp:defun compose-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name group-name
                     version-labels)
   (common-lisp:declare
    (common-lisp:ignorable application-name group-name version-labels))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-compose-environments-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "ComposeEnvironments" "2010-12-01"))
      common-lisp:nil "ComposeEnvironmentsResult" *error-map*)))
 (common-lisp:export 'compose-environments))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name description
                     resource-lifecycle-config tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name description
     resource-lifecycle-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "CreateApplication" "2010-12-01"))
      common-lisp:nil "CreateApplicationResult" *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     description source-build-information source-bundle
                     build-configuration auto-create-application process tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label description
     source-build-information source-bundle build-configuration
     auto-create-application process tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-application-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "CreateApplicationVersion" "2010-12-01"))
      common-lisp:nil "CreateApplicationVersionResult" *error-map*)))
 (common-lisp:export 'create-application-version))
(common-lisp:progn
 (common-lisp:defun create-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     solution-stack-name platform-arn source-configuration
                     environment-id description option-settings tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name solution-stack-name
     platform-arn source-configuration environment-id description
     option-settings tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configuration-template-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "CreateConfigurationTemplate" "2010-12-01"))
      common-lisp:nil "CreateConfigurationTemplateResult" *error-map*)))
 (common-lisp:export 'create-configuration-template))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name environment-name
                     group-name description cnameprefix tier tags version-label
                     template-name solution-stack-name platform-arn
                     option-settings options-to-remove operations-role)
   (common-lisp:declare
    (common-lisp:ignorable application-name environment-name group-name
     description cnameprefix tier tags version-label template-name
     solution-stack-name platform-arn option-settings options-to-remove
     operations-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "CreateEnvironment" "2010-12-01"))
      common-lisp:nil "CreateEnvironmentResult" *error-map*)))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-platform-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform-name platform-version
                     platform-definition-bundle environment-name
                     option-settings tags)
   (common-lisp:declare
    (common-lisp:ignorable platform-name platform-version
     platform-definition-bundle environment-name option-settings tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-platform-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "CreatePlatformVersion" "2010-12-01"))
      common-lisp:nil "CreatePlatformVersionResult" *error-map*)))
 (common-lisp:export 'create-platform-version))
(common-lisp:progn
 (common-lisp:defun create-storage-location ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'elasticbeanstalk-request :method "POST" :path
                                "/" :protocol :query :operation
                                "CreateStorageLocation" :params
                                `(("Action" ,@"CreateStorageLocation")
                                  ("Version" ,@"2010-12-01"))))
    common-lisp:nil "CreateStorageLocationResult" *error-map*))
 (common-lisp:export 'create-storage-location))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name terminate-env-by-force)
   (common-lisp:declare
    (common-lisp:ignorable application-name terminate-env-by-force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DeleteApplication" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     delete-source-bundle)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label
     delete-source-bundle))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DeleteApplicationVersion" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-version))
(common-lisp:progn
 (common-lisp:defun delete-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name)
   (common-lisp:declare (common-lisp:ignorable application-name template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configuration-template-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DeleteConfigurationTemplate" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configuration-template))
(common-lisp:progn
 (common-lisp:defun delete-environment-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name environment-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-configuration-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DeleteEnvironmentConfiguration" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment-configuration))
(common-lisp:progn
 (common-lisp:defun delete-platform-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform-arn)
   (common-lisp:declare (common-lisp:ignorable platform-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-platform-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DeletePlatformVersion" "2010-12-01"))
      common-lisp:nil "DeletePlatformVersionResult" *error-map*)))
 (common-lisp:export 'delete-platform-version))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'elasticbeanstalk-request :method "POST" :path
                                "/" :protocol :query :operation
                                "DescribeAccountAttributes" :params
                                `(("Action" ,@"DescribeAccountAttributes")
                                  ("Version" ,@"2010-12-01"))))
    common-lisp:nil "DescribeAccountAttributesResult" *error-map*))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-application-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-labels
                     max-records next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-labels max-records
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeApplicationVersions" "2010-12-01"))
      common-lisp:nil "DescribeApplicationVersionsResult" *error-map*)))
 (common-lisp:export 'describe-application-versions))
(common-lisp:progn
 (common-lisp:defun describe-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-names)
   (common-lisp:declare (common-lisp:ignorable application-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-applications-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeApplications" "2010-12-01"))
      common-lisp:nil "DescribeApplicationsResult" *error-map*)))
 (common-lisp:export 'describe-applications))
(common-lisp:progn
 (common-lisp:defun describe-configuration-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     environment-name solution-stack-name platform-arn options)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name environment-name
     solution-stack-name platform-arn options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeConfigurationOptions" "2010-12-01"))
      common-lisp:nil "DescribeConfigurationOptionsResult" *error-map*)))
 (common-lisp:export 'describe-configuration-options))
(common-lisp:progn
 (common-lisp:defun describe-configuration-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     environment-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-settings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeConfigurationSettings" "2010-12-01"))
      common-lisp:nil "DescribeConfigurationSettingsResult" *error-map*)))
 (common-lisp:export 'describe-configuration-settings))
(common-lisp:progn
 (common-lisp:defun describe-environment-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name environment-id
                     attribute-names)
   (common-lisp:declare
    (common-lisp:ignorable environment-name environment-id attribute-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-environment-health-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeEnvironmentHealth" "2010-12-01"))
      common-lisp:nil "DescribeEnvironmentHealthResult" *error-map*)))
 (common-lisp:export 'describe-environment-health))
(common-lisp:progn
 (common-lisp:defun describe-environment-managed-action-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name
                     next-token max-items)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name next-token
     max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-environment-managed-action-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeEnvironmentManagedActionHistory" "2010-12-01"))
      common-lisp:nil "DescribeEnvironmentManagedActionHistoryResult"
      *error-map*)))
 (common-lisp:export 'describe-environment-managed-action-history))
(common-lisp:progn
 (common-lisp:defun describe-environment-managed-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name environment-id status)
   (common-lisp:declare
    (common-lisp:ignorable environment-name environment-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-environment-managed-actions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeEnvironmentManagedActions" "2010-12-01"))
      common-lisp:nil "DescribeEnvironmentManagedActionsResult" *error-map*)))
 (common-lisp:export 'describe-environment-managed-actions))
(common-lisp:progn
 (common-lisp:defun describe-environment-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-environment-resources-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeEnvironmentResources" "2010-12-01"))
      common-lisp:nil "DescribeEnvironmentResourcesResult" *error-map*)))
 (common-lisp:export 'describe-environment-resources))
(common-lisp:progn
 (common-lisp:defun describe-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     environment-ids environment-names include-deleted
                     included-deleted-back-to max-records next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label environment-ids
     environment-names include-deleted included-deleted-back-to max-records
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-environments-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeEnvironments" "2010-12-01"))
      common-lisp:nil "DescribeEnvironmentsResult" *error-map*)))
 (common-lisp:export 'describe-environments))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     template-name environment-id environment-name platform-arn
                     request-id severity start-time end-time max-records
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label template-name
     environment-id environment-name platform-arn request-id severity
     start-time end-time max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeEvents" "2010-12-01"))
      common-lisp:nil "DescribeEventsResult" *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-instances-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name environment-id
                     attribute-names next-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-name environment-id attribute-names
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instances-health-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribeInstancesHealth" "2010-12-01"))
      common-lisp:nil "DescribeInstancesHealthResult" *error-map*)))
 (common-lisp:export 'describe-instances-health))
(common-lisp:progn
 (common-lisp:defun describe-platform-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform-arn)
   (common-lisp:declare (common-lisp:ignorable platform-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-platform-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DescribePlatformVersion" "2010-12-01"))
      common-lisp:nil "DescribePlatformVersionResult" *error-map*)))
 (common-lisp:export 'describe-platform-version))
(common-lisp:progn
 (common-lisp:defun disassociate-environment-operations-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name)
   (common-lisp:declare (common-lisp:ignorable environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-environment-operations-role-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "DisassociateEnvironmentOperationsRole" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-environment-operations-role))
(common-lisp:progn
 (common-lisp:defun list-available-solution-stacks ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'elasticbeanstalk-request :method "POST" :path
                                "/" :protocol :query :operation
                                "ListAvailableSolutionStacks" :params
                                `(("Action" ,@"ListAvailableSolutionStacks")
                                  ("Version" ,@"2010-12-01"))))
    common-lisp:nil "ListAvailableSolutionStacksResult" *error-map*))
 (common-lisp:export 'list-available-solution-stacks))
(common-lisp:progn
 (common-lisp:defun list-platform-branches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-platform-branches-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "ListPlatformBranches" "2010-12-01"))
      common-lisp:nil "ListPlatformBranchesResult" *error-map*)))
 (common-lisp:export 'list-platform-branches))
(common-lisp:progn
 (common-lisp:defun list-platform-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-platform-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "ListPlatformVersions" "2010-12-01"))
      common-lisp:nil "ListPlatformVersionsResult" *error-map*)))
 (common-lisp:export 'list-platform-versions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "ListTagsForResource" "2010-12-01"))
      common-lisp:nil "ListTagsForResourceResult" *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun rebuild-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rebuild-environment-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "RebuildEnvironment" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'rebuild-environment))
(common-lisp:progn
 (common-lisp:defun request-environment-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name
                     info-type)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name info-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-environment-info-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "RequestEnvironmentInfo" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'request-environment-info))
(common-lisp:progn
 (common-lisp:defun restart-app-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restart-app-server-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "RestartAppServer" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restart-app-server))
(common-lisp:progn
 (common-lisp:defun retrieve-environment-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name
                     info-type)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name info-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-retrieve-environment-info-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "RetrieveEnvironmentInfo" "2010-12-01"))
      common-lisp:nil "RetrieveEnvironmentInfoResult" *error-map*)))
 (common-lisp:export 'retrieve-environment-info))
(common-lisp:progn
 (common-lisp:defun swap-environment-cnames
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-environment-id
                     source-environment-name destination-environment-id
                     destination-environment-name)
   (common-lisp:declare
    (common-lisp:ignorable source-environment-id source-environment-name
     destination-environment-id destination-environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-swap-environment-cnames-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "SwapEnvironmentCNAMEs" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'swap-environment-cnames))
(common-lisp:progn
 (common-lisp:defun terminate-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name
                     terminate-resources force-terminate)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name terminate-resources
     force-terminate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-environment-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "TerminateEnvironment" "2010-12-01"))
      common-lisp:nil "TerminateEnvironmentResult" *error-map*)))
 (common-lisp:export 'terminate-environment))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name description)
   (common-lisp:declare (common-lisp:ignorable application-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "UpdateApplication" "2010-12-01"))
      common-lisp:nil "UpdateApplicationResult" *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-application-resource-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     resource-lifecycle-config)
   (common-lisp:declare
    (common-lisp:ignorable application-name resource-lifecycle-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-application-resource-lifecycle-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "UpdateApplicationResourceLifecycle" "2010-12-01"))
      common-lisp:nil "UpdateApplicationResourceLifecycleResult" *error-map*)))
 (common-lisp:export 'update-application-resource-lifecycle))
(common-lisp:progn
 (common-lisp:defun update-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     description)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-application-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "UpdateApplicationVersion" "2010-12-01"))
      common-lisp:nil "UpdateApplicationVersionResult" *error-map*)))
 (common-lisp:export 'update-application-version))
(common-lisp:progn
 (common-lisp:defun update-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     description option-settings options-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name description
     option-settings options-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configuration-template-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "UpdateConfigurationTemplate" "2010-12-01"))
      common-lisp:nil "UpdateConfigurationTemplateResult" *error-map*)))
 (common-lisp:export 'update-configuration-template))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name environment-id
                     environment-name group-name description tier version-label
                     template-name solution-stack-name platform-arn
                     option-settings options-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable application-name environment-id environment-name
     group-name description tier version-label template-name
     solution-stack-name platform-arn option-settings options-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "UpdateEnvironment" "2010-12-01"))
      common-lisp:nil "UpdateEnvironmentResult" *error-map*)))
 (common-lisp:export 'update-environment))
(common-lisp:progn
 (common-lisp:defun update-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags-to-add tags-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn tags-to-add tags-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "UpdateTagsForResource" "2010-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun validate-configuration-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     environment-name option-settings)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name environment-name
     option-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-configuration-settings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST"
        :query "/" "ValidateConfigurationSettings" "2010-12-01"))
      common-lisp:nil "ValidateConfigurationSettingsResult" *error-map*)))
 (common-lisp:export 'validate-configuration-settings))
