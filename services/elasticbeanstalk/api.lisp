;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/elasticbeanstalk/api
  (:use)
  (:nicknames #:aws/elasticbeanstalk)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elasticbeanstalk/api)
(common-lisp:progn
 (common-lisp:define-condition elasticbeanstalk-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elasticbeanstalk-error))
(common-lisp:progn
 (common-lisp:defclass elasticbeanstalk-request
                       (aws-sdk/query-request:query-request) common-lisp:nil
                       (:default-initargs :service "elasticbeanstalk"
                        :api-version "2010-12-01" :host-prefix
                        "elasticbeanstalk" :signing-name common-lisp:nil
                        :global-host common-lisp:nil))
 (common-lisp:export 'elasticbeanstalk-request))
(common-lisp:defvar *error-map*
  '(("CodeBuildNotInServiceRegionException"
     . code-build-not-in-service-region-exception)
    ("ElasticBeanstalkServiceException" . elastic-beanstalk-service-exception)
    ("InsufficientPrivilegesException" . insufficient-privileges-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("ManagedActionInvalidStateException"
     . managed-action-invalid-state-exception)
    ("OperationInProgressException" . operation-in-progress-exception)
    ("PlatformVersionStillReferencedException"
     . platform-version-still-referenced-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceTypeNotSupportedException"
     . resource-type-not-supported-exception)
    ("S3LocationNotInServiceRegionException"
     . s3location-not-in-service-region-exception)
    ("S3SubscriptionRequiredException" . s3subscription-required-exception)
    ("SourceBundleDeletionException" . source-bundle-deletion-exception)
    ("TooManyApplicationVersionsException"
     . too-many-application-versions-exception)
    ("TooManyApplicationsException" . too-many-applications-exception)
    ("TooManyBucketsException" . too-many-buckets-exception)
    ("TooManyConfigurationTemplatesException"
     . too-many-configuration-templates-exception)
    ("TooManyEnvironmentsException" . too-many-environments-exception)
    ("TooManyPlatformsException" . too-many-platforms-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (abort-environment-update-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-abort-environment-update-message-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'abort-environment-update-message
                    'make-abort-environment-update-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-environment-update-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-environment-update-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-environment-update-message))
   common-lisp:nil))
(common-lisp:deftype abortable-operation-in-progress () 'common-lisp:boolean)
(common-lisp:deftype action-history-status () 'common-lisp:string)
(common-lisp:deftype action-status () 'common-lisp:string)
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-description-"))
   (application-arn common-lisp:nil :type
    (common-lisp:or application-arn common-lisp:null))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or update-date common-lisp:null))
   (versions common-lisp:nil :type
    (common-lisp:or version-labels-list common-lisp:null))
   (configuration-templates common-lisp:nil :type
    (common-lisp:or configuration-template-names-list common-lisp:null))
   (resource-lifecycle-config common-lisp:nil :type
    (common-lisp:or application-resource-lifecycle-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-description 'make-application-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-templates))
      (common-lisp:list
       (common-lisp:cons "ConfigurationTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "ResourceLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-description-list ()
   '(trivial-types:proper-list application-description))
 (common-lisp:defun make-application-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-description-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-description-message-"))
   (application common-lisp:nil :type
    (common-lisp:or application-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-description-message
                    'make-application-description-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-description-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-description-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "Application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-description-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-descriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-descriptions-message-"))
   (applications common-lisp:nil :type
    (common-lisp:or application-description-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-descriptions-message
                    'make-application-descriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-descriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-metrics-"))
   (duration common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (request-count common-lisp:nil :type
    (common-lisp:or request-count common-lisp:null))
   (status-codes common-lisp:nil :type
    (common-lisp:or status-codes common-lisp:null))
   (latency common-lisp:nil :type (common-lisp:or latency common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-metrics 'make-application-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-count))
      (common-lisp:list
       (common-lisp:cons "RequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-codes))
      (common-lisp:list
       (common-lisp:cons "StatusCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency))
      (common-lisp:list
       (common-lisp:cons "Latency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-metrics))
   common-lisp:nil))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-names-list ()
   '(trivial-types:proper-list application-name))
 (common-lisp:defun make-application-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-resource-lifecycle-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-resource-lifecycle-config-"))
   (service-role common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (version-lifecycle-config common-lisp:nil :type
    (common-lisp:or application-version-lifecycle-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-resource-lifecycle-config
                    'make-application-resource-lifecycle-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "VersionLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-resource-lifecycle-description-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-application-resource-lifecycle-description-message-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (resource-lifecycle-config common-lisp:nil :type
    (common-lisp:or application-resource-lifecycle-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-resource-lifecycle-description-message
                    'make-application-resource-lifecycle-description-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-description-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-description-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "ResourceLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-resource-lifecycle-description-message))
   common-lisp:nil))
(common-lisp:deftype application-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-version-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-version-description-"))
   (application-version-arn common-lisp:nil :type
    (common-lisp:or application-version-arn common-lisp:null))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (version-label common-lisp:nil :type
    (common-lisp:or version-label common-lisp:null))
   (source-build-information common-lisp:nil :type
    (common-lisp:or source-build-information common-lisp:null))
   (build-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-bundle common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or update-date common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or application-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-version-description
                    'make-application-version-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-build-information))
      (common-lisp:list
       (common-lisp:cons "SourceBuildInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-arn))
      (common-lisp:list
       (common-lisp:cons "BuildArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bundle))
      (common-lisp:list
       (common-lisp:cons "SourceBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-version-description-list ()
   '(trivial-types:proper-list application-version-description))
 (common-lisp:defun make-application-version-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-version-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-version-description-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-version-description-message-"))
   (application-version common-lisp:nil :type
    (common-lisp:or application-version-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-version-description-message
                    'make-application-version-description-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-description-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-version-descriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-version-descriptions-message-"))
   (application-versions common-lisp:nil :type
    (common-lisp:or application-version-description-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-version-descriptions-message
                    'make-application-version-descriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-versions))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-descriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-version-lifecycle-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-version-lifecycle-config-"))
   (max-count-rule common-lisp:nil :type
    (common-lisp:or max-count-rule common-lisp:null))
   (max-age-rule common-lisp:nil :type
    (common-lisp:or max-age-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-version-lifecycle-config
                    'make-application-version-lifecycle-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-lifecycle-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-lifecycle-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count-rule))
      (common-lisp:list
       (common-lisp:cons "MaxCountRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-rule))
      (common-lisp:list
       (common-lisp:cons "MaxAgeRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-lifecycle-config))
   common-lisp:nil))
(common-lisp:deftype application-version-proccess () 'common-lisp:boolean)
(common-lisp:deftype application-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (apply-environment-managed-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-environment-managed-action-request-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (action-id (common-lisp:error ":action-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-environment-managed-action-request
                    'make-apply-environment-managed-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-environment-managed-action-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-environment-managed-action-result-"))
   (action-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (action-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (action-type common-lisp:nil :type
    (common-lisp:or action-type common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-environment-managed-action-result
                    'make-apply-environment-managed-action-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-description))
      (common-lisp:list
       (common-lisp:cons "ActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-environment-managed-action-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-environment-operations-role-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-environment-operations-role-message-"))
   (environment-name (common-lisp:error ":environment-name is required") :type
    (common-lisp:or environment-name common-lisp:null))
   (operations-role (common-lisp:error ":operations-role is required") :type
    (common-lisp:or operations-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-environment-operations-role-message
                    'make-associate-environment-operations-role-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-environment-operations-role-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-environment-operations-role-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-role))
      (common-lisp:list
       (common-lisp:cons "OperationsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-environment-operations-role-message))
   common-lisp:nil))
(common-lisp:deftype auto-create-application () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-group-"))
   (name common-lisp:nil :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun make-auto-scaling-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype available-solution-stack-details-list ()
   '(trivial-types:proper-list solution-stack-description))
 (common-lisp:defun make-available-solution-stack-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            solution-stack-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype available-solution-stack-names-list ()
   '(trivial-types:proper-list solution-stack-name))
 (common-lisp:defun make-available-solution-stack-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list solution-stack-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-int () 'common-lisp:integer)
(common-lisp:deftype branch-name () 'common-lisp:string)
(common-lisp:deftype branch-order () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (build-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-build-configuration-"))
   (artifact-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (code-build-service-role
    (common-lisp:error ":code-build-service-role is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (compute-type common-lisp:nil :type
    (common-lisp:or compute-type common-lisp:null))
   (image (common-lisp:error ":image is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (timeout-in-minutes common-lisp:nil :type
    (common-lisp:or boxed-int common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'build-configuration 'make-build-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input build-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input build-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-name))
      (common-lisp:list
       (common-lisp:cons "ArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-build-service-role))
      (common-lisp:list
       (common-lisp:cons "CodeBuildServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "ComputeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input build-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (builder (:copier common-lisp:nil) (:conc-name "struct-shape-builder-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'builder 'make-builder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input builder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input builder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input builder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cpuutilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-cpuutilization-"))
   (user common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (nice common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (system common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (idle common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (iowait common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (irq common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (soft-irq common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (privileged common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cpuutilization 'make-cpuutilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cpuutilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cpuutilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nice))
      (common-lisp:list
       (common-lisp:cons "Nice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system))
      (common-lisp:list
       (common-lisp:cons "System"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "Idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iowait))
      (common-lisp:list
       (common-lisp:cons "IOWait"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'irq))
      (common-lisp:list
       (common-lisp:cons "IRQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soft-irq))
      (common-lisp:list
       (common-lisp:cons "SoftIRQ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cpuutilization))
   common-lisp:nil))
(common-lisp:deftype cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype causes () '(trivial-types:proper-list cause))
 (common-lisp:defun make-causes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cause))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (check-dnsavailability-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-dnsavailability-message-"))
   (cnameprefix (common-lisp:error ":cnameprefix is required") :type
    (common-lisp:or dnscname-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'check-dnsavailability-message
                    'make-check-dnsavailability-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cnameprefix))
      (common-lisp:list
       (common-lisp:cons "CNAMEPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (check-dnsavailability-result-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-dnsavailability-result-message-"))
   (available common-lisp:nil :type
    (common-lisp:or cname-availability common-lisp:null))
   (fully-qualified-cname common-lisp:nil :type
    (common-lisp:or dnscname common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'check-dnsavailability-result-message
                    'make-check-dnsavailability-result-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-result-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-result-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available))
      (common-lisp:list
       (common-lisp:cons "Available"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-cname))
      (common-lisp:list
       (common-lisp:cons "FullyQualifiedCNAME"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-dnsavailability-result-message))
   common-lisp:nil))
(common-lisp:deftype cname-availability () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition code-build-not-in-service-region-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'code-build-not-in-service-region-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (compose-environments-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-compose-environments-message-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or group-name common-lisp:null))
   (version-labels common-lisp:nil :type
    (common-lisp:or version-labels common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compose-environments-message
                    'make-compose-environments-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compose-environments-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compose-environments-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-labels))
      (common-lisp:list
       (common-lisp:cons "VersionLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compose-environments-message))
   common-lisp:nil))
(common-lisp:deftype compute-type () 'common-lisp:string)
(common-lisp:deftype configuration-deployment-status () 'common-lisp:string)
(common-lisp:deftype configuration-option-default-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-option-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-option-description-"))
   (namespace common-lisp:nil :type
    (common-lisp:or option-namespace common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or configuration-option-name common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or configuration-option-default-value common-lisp:null))
   (change-severity common-lisp:nil :type
    (common-lisp:or configuration-option-severity common-lisp:null))
   (user-defined common-lisp:nil :type
    (common-lisp:or user-defined-option common-lisp:null))
   (value-type common-lisp:nil :type
    (common-lisp:or configuration-option-value-type common-lisp:null))
   (value-options common-lisp:nil :type
    (common-lisp:or configuration-option-possible-values common-lisp:null))
   (min-value common-lisp:nil :type
    (common-lisp:or option-restriction-min-value common-lisp:null))
   (max-value common-lisp:nil :type
    (common-lisp:or option-restriction-max-value common-lisp:null))
   (max-length common-lisp:nil :type
    (common-lisp:or option-restriction-max-length common-lisp:null))
   (regex common-lisp:nil :type
    (common-lisp:or option-restriction-regex common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-option-description
                    'make-configuration-option-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-severity))
      (common-lisp:list
       (common-lisp:cons "ChangeSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined))
      (common-lisp:list
       (common-lisp:cons "UserDefined"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-type))
      (common-lisp:list
       (common-lisp:cons "ValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-options))
      (common-lisp:list
       (common-lisp:cons "ValueOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length))
      (common-lisp:list
       (common-lisp:cons "MaxLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "Regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-option-descriptions-list ()
   '(trivial-types:proper-list configuration-option-description))
 (common-lisp:defun make-configuration-option-descriptions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-option-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-option-name () 'common-lisp:string)
(common-lisp:deftype configuration-option-possible-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-option-possible-values ()
   '(trivial-types:proper-list configuration-option-possible-value))
 (common-lisp:defun make-configuration-option-possible-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-option-possible-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-option-setting (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-option-setting-"))
   (resource-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or option-namespace common-lisp:null))
   (option-name common-lisp:nil :type
    (common-lisp:or configuration-option-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or configuration-option-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-option-setting
                    'make-configuration-option-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-option-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-option-settings-list ()
   '(trivial-types:proper-list configuration-option-setting))
 (common-lisp:defun make-configuration-option-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-option-severity () 'common-lisp:string)
(common-lisp:deftype configuration-option-value () 'common-lisp:string)
(common-lisp:deftype configuration-option-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-options-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-options-description-"))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or configuration-option-descriptions-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-options-description
                    'make-configuration-options-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-options-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-options-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-options-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-settings-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-settings-description-"))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (deployment-status common-lisp:nil :type
    (common-lisp:or configuration-deployment-status common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or update-date common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or configuration-option-settings-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-settings-description
                    'make-configuration-settings-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "DeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-settings-description-list ()
   '(trivial-types:proper-list configuration-settings-description))
 (common-lisp:defun make-configuration-settings-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-settings-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-settings-descriptions (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-settings-descriptions-"))
   (configuration-settings common-lisp:nil :type
    (common-lisp:or configuration-settings-description-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-settings-descriptions
                    'make-configuration-settings-descriptions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-descriptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-descriptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-settings))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-descriptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-settings-validation-messages (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-settings-validation-messages-"))
   (messages common-lisp:nil :type
    (common-lisp:or validation-messages-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-settings-validation-messages
                    'make-configuration-settings-validation-messages))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-validation-messages))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-validation-messages))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "Messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-settings-validation-messages))
   common-lisp:nil))
(common-lisp:deftype configuration-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-template-names-list ()
   '(trivial-types:proper-list configuration-template-name))
 (common-lisp:defun make-configuration-template-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-template-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (resource-lifecycle-config common-lisp:nil :type
    (common-lisp:or application-resource-lifecycle-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-message
                    'make-create-application-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "ResourceLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-version-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (version-label (common-lisp:error ":version-label is required") :type
    (common-lisp:or version-label common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (source-build-information common-lisp:nil :type
    (common-lisp:or source-build-information common-lisp:null))
   (source-bundle common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null))
   (build-configuration common-lisp:nil :type
    (common-lisp:or build-configuration common-lisp:null))
   (auto-create-application common-lisp:nil :type
    (common-lisp:or auto-create-application common-lisp:null))
   (process common-lisp:nil :type
    (common-lisp:or application-version-proccess common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-version-message
                    'make-create-application-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-build-information))
      (common-lisp:list
       (common-lisp:cons "SourceBuildInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bundle))
      (common-lisp:list
       (common-lisp:cons "SourceBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-configuration))
      (common-lisp:list
       (common-lisp:cons "BuildConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-create-application))
      (common-lisp:list
       (common-lisp:cons "AutoCreateApplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process))
      (common-lisp:list
       (common-lisp:cons "Process"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-configuration-template-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-configuration-template-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or configuration-option-settings-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configuration-template-message
                    'make-create-configuration-template-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-template-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-template-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-template-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-environment-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-environment-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or group-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (cnameprefix common-lisp:nil :type
    (common-lisp:or dnscname-prefix common-lisp:null))
   (tier common-lisp:nil :type
    (common-lisp:or environment-tier common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (version-label common-lisp:nil :type
    (common-lisp:or version-label common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or configuration-option-settings-list common-lisp:null))
   (options-to-remove common-lisp:nil :type
    (common-lisp:or options-specifier-list common-lisp:null))
   (operations-role common-lisp:nil :type
    (common-lisp:or operations-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-environment-message
                    'make-create-environment-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cnameprefix))
      (common-lisp:list
       (common-lisp:cons "CNAMEPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-remove))
      (common-lisp:list
       (common-lisp:cons "OptionsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-role))
      (common-lisp:list
       (common-lisp:cons "OperationsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-platform-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-platform-version-request-"))
   (platform-name (common-lisp:error ":platform-name is required") :type
    (common-lisp:or platform-name common-lisp:null))
   (platform-version (common-lisp:error ":platform-version is required") :type
    (common-lisp:or platform-version common-lisp:null))
   (platform-definition-bundle
    (common-lisp:error ":platform-definition-bundle is required") :type
    (common-lisp:or s3location common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or configuration-option-settings-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-platform-version-request
                    'make-create-platform-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-name))
      (common-lisp:list
       (common-lisp:cons "PlatformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-definition-bundle))
      (common-lisp:list
       (common-lisp:cons "PlatformDefinitionBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-platform-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-platform-version-result-"))
   (platform-summary common-lisp:nil :type
    (common-lisp:or platform-summary common-lisp:null))
   (builder common-lisp:nil :type (common-lisp:or builder common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-platform-version-result
                    'make-create-platform-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-summary))
      (common-lisp:list
       (common-lisp:cons "PlatformSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'builder))
      (common-lisp:list
       (common-lisp:cons "Builder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-platform-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-storage-location-result-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-storage-location-result-message-"))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-storage-location-result-message
                    'make-create-storage-location-result-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-location-result-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-location-result-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-location-result-message))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-ami (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-ami-"))
   (virtualization-type common-lisp:nil :type
    (common-lisp:or virtualization-type common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or image-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'custom-ami 'make-custom-ami))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-ami))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-ami))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-ami))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-ami-list ()
   '(trivial-types:proper-list custom-ami))
 (common-lisp:defun make-custom-ami-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-ami))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dnscname () 'common-lisp:string)
(common-lisp:deftype dnscname-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (terminate-env-by-force common-lisp:nil :type
    (common-lisp:or terminate-env-force common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-message
                    'make-delete-application-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-env-by-force))
      (common-lisp:list
       (common-lisp:cons "TerminateEnvByForce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-version-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (version-label (common-lisp:error ":version-label is required") :type
    (common-lisp:or version-label common-lisp:null))
   (delete-source-bundle common-lisp:nil :type
    (common-lisp:or delete-source-bundle common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-version-message
                    'make-delete-application-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-source-bundle))
      (common-lisp:list
       (common-lisp:cons "DeleteSourceBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configuration-template-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-configuration-template-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or configuration-template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-template-message
                    'make-delete-configuration-template-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-template-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-template-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-template-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-environment-configuration-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-environment-configuration-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (environment-name (common-lisp:error ":environment-name is required") :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-environment-configuration-message
                    'make-delete-environment-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-platform-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-platform-version-request-"))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-platform-version-request
                    'make-delete-platform-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-platform-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-platform-version-result-"))
   (platform-summary common-lisp:nil :type
    (common-lisp:or platform-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-platform-version-result
                    'make-delete-platform-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-summary))
      (common-lisp:list
       (common-lisp:cons "PlatformSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-platform-version-result))
   common-lisp:nil))
(common-lisp:deftype delete-source-bundle () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (deployment (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-"))
   (version-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deployment-id common-lisp:nil :type
    (common-lisp:or nullable-long common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (deployment-time common-lisp:nil :type
    (common-lisp:or deployment-timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-time))
      (common-lisp:list
       (common-lisp:cons "DeploymentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:deftype deployment-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-attributes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-attributes-result-"))
   (resource-quotas common-lisp:nil :type
    (common-lisp:or resource-quotas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-result
                    'make-describe-account-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-quotas))
      (common-lisp:list
       (common-lisp:cons "ResourceQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-versions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-versions-message-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (version-labels common-lisp:nil :type
    (common-lisp:or version-labels-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-versions-message
                    'make-describe-application-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-labels))
      (common-lisp:list
       (common-lisp:cons "VersionLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-applications-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-applications-message-"))
   (application-names common-lisp:nil :type
    (common-lisp:or application-names-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-applications-message
                    'make-describe-applications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-names))
      (common-lisp:list
       (common-lisp:cons "ApplicationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-configuration-options-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-configuration-options-message-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or options-specifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-options-message
                    'make-describe-configuration-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-configuration-settings-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-configuration-settings-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-settings-message
                    'make-describe-configuration-settings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-settings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-settings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-settings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-environment-health-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-environment-health-request-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (attribute-names common-lisp:nil :type
    (common-lisp:or environment-health-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-health-request
                    'make-describe-environment-health-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-environment-health-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-environment-health-result-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (health-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or environment-health common-lisp:null))
   (color common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (causes common-lisp:nil :type (common-lisp:or causes common-lisp:null))
   (application-metrics common-lisp:nil :type
    (common-lisp:or application-metrics common-lisp:null))
   (instances-health common-lisp:nil :type
    (common-lisp:or instance-health-summary common-lisp:null))
   (refreshed-at common-lisp:nil :type
    (common-lisp:or refreshed-at common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-health-result
                    'make-describe-environment-health-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causes))
      (common-lisp:list
       (common-lisp:cons "Causes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-metrics))
      (common-lisp:list
       (common-lisp:cons "ApplicationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-health))
      (common-lisp:list
       (common-lisp:cons "InstancesHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refreshed-at))
      (common-lisp:list
       (common-lisp:cons "RefreshedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-health-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-environment-managed-action-history-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-environment-managed-action-history-request-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or managed-action-history-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-managed-action-history-request
                    'make-describe-environment-managed-action-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-environment-managed-action-history-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-environment-managed-action-history-result-"))
   (managed-action-history-items common-lisp:nil :type
    (common-lisp:or managed-action-history-items common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-managed-action-history-result
                    'make-describe-environment-managed-action-history-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-action-history-items))
      (common-lisp:list
       (common-lisp:cons "ManagedActionHistoryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-action-history-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-environment-managed-actions-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-environment-managed-actions-request-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-managed-actions-request
                    'make-describe-environment-managed-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-environment-managed-actions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-environment-managed-actions-result-"))
   (managed-actions common-lisp:nil :type
    (common-lisp:or managed-actions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-managed-actions-result
                    'make-describe-environment-managed-actions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-actions))
      (common-lisp:list
       (common-lisp:cons "ManagedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-managed-actions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-environment-resources-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-environment-resources-message-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-environment-resources-message
                    'make-describe-environment-resources-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-resources-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-resources-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environment-resources-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-environments-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-environments-message-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (version-label common-lisp:nil :type
    (common-lisp:or version-label common-lisp:null))
   (environment-ids common-lisp:nil :type
    (common-lisp:or environment-id-list common-lisp:null))
   (environment-names common-lisp:nil :type
    (common-lisp:or environment-names-list common-lisp:null))
   (include-deleted common-lisp:nil :type
    (common-lisp:or include-deleted common-lisp:null))
   (included-deleted-back-to common-lisp:nil :type
    (common-lisp:or include-deleted-back-to common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-environments-message
                    'make-describe-environments-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-environments-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-environments-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-ids))
      (common-lisp:list
       (common-lisp:cons "EnvironmentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-names))
      (common-lisp:list
       (common-lisp:cons "EnvironmentNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-deleted))
      (common-lisp:list
       (common-lisp:cons "IncludeDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'included-deleted-back-to))
      (common-lisp:list
       (common-lisp:cons "IncludedDeletedBackTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-environments-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-events-message-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (version-label common-lisp:nil :type
    (common-lisp:or version-label common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or event-severity common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-filter-start common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or time-filter-end common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instances-health-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instances-health-request-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (attribute-names common-lisp:nil :type
    (common-lisp:or instances-health-attributes common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instances-health-request
                    'make-describe-instances-health-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instances-health-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instances-health-result-"))
   (instance-health-list common-lisp:nil :type
    (common-lisp:or instance-health-list common-lisp:null))
   (refreshed-at common-lisp:nil :type
    (common-lisp:or refreshed-at common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instances-health-result
                    'make-describe-instances-health-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-health-list))
      (common-lisp:list
       (common-lisp:cons "InstanceHealthList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refreshed-at))
      (common-lisp:list
       (common-lisp:cons "RefreshedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-health-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-platform-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-platform-version-request-"))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-platform-version-request
                    'make-describe-platform-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-platform-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-platform-version-result-"))
   (platform-description common-lisp:nil :type
    (common-lisp:or platform-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-platform-version-result
                    'make-describe-platform-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-description))
      (common-lisp:list
       (common-lisp:cons "PlatformDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-platform-version-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-environment-operations-role-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-environment-operations-role-message-"))
   (environment-name (common-lisp:error ":environment-name is required") :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-environment-operations-role-message
                    'make-disassociate-environment-operations-role-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-environment-operations-role-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-environment-operations-role-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-environment-operations-role-message))
   common-lisp:nil))
(common-lisp:deftype ec2instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition elastic-beanstalk-service-exception
     (elasticbeanstalk-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       elastic-beanstalk-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'elastic-beanstalk-service-exception
                    'elastic-beanstalk-service-exception-message)))
(common-lisp:deftype endpoint-url () 'common-lisp:string)
(common-lisp:deftype environment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-description-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (version-label common-lisp:nil :type
    (common-lisp:or version-label common-lisp:null))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (endpoint-url common-lisp:nil :type
    (common-lisp:or endpoint-url common-lisp:null))
   (cname common-lisp:nil :type (common-lisp:or dnscname common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or update-date common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or environment-status common-lisp:null))
   (abortable-operation-in-progress common-lisp:nil :type
    (common-lisp:or abortable-operation-in-progress common-lisp:null))
   (health common-lisp:nil :type
    (common-lisp:or environment-health common-lisp:null))
   (health-status common-lisp:nil :type
    (common-lisp:or environment-health-status common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or environment-resources-description common-lisp:null))
   (tier common-lisp:nil :type
    (common-lisp:or environment-tier common-lisp:null))
   (environment-links common-lisp:nil :type
    (common-lisp:or environment-links common-lisp:null))
   (environment-arn common-lisp:nil :type
    (common-lisp:or environment-arn common-lisp:null))
   (operations-role common-lisp:nil :type
    (common-lisp:or operations-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-description 'make-environment-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cname))
      (common-lisp:list
       (common-lisp:cons "CNAME"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abortable-operation-in-progress))
      (common-lisp:list
       (common-lisp:cons "AbortableOperationInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "Health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-links))
      (common-lisp:list
       (common-lisp:cons "EnvironmentLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "EnvironmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations-role))
      (common-lisp:list
       (common-lisp:cons "OperationsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-descriptions-list ()
   '(trivial-types:proper-list environment-description))
 (common-lisp:defun make-environment-descriptions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-descriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-descriptions-message-"))
   (environments common-lisp:nil :type
    (common-lisp:or environment-descriptions-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-descriptions-message
                    'make-environment-descriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "Environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-descriptions-message))
   common-lisp:nil))
(common-lisp:deftype environment-health () 'common-lisp:string)
(common-lisp:deftype environment-health-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-health-attributes ()
   '(trivial-types:proper-list environment-health-attribute))
 (common-lisp:defun make-environment-health-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-health-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-health-status () 'common-lisp:string)
(common-lisp:deftype environment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-id-list ()
   '(trivial-types:proper-list environment-id))
 (common-lisp:defun make-environment-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-info-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-info-description-"))
   (info-type common-lisp:nil :type
    (common-lisp:or environment-info-type common-lisp:null))
   (ec2instance-id common-lisp:nil :type
    (common-lisp:or ec2instance-id common-lisp:null))
   (sample-timestamp common-lisp:nil :type
    (common-lisp:or sample-timestamp common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-info-description
                    'make-environment-info-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-info-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-info-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info-type))
      (common-lisp:list
       (common-lisp:cons "InfoType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "Ec2InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-timestamp))
      (common-lisp:list
       (common-lisp:cons "SampleTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-info-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-info-description-list ()
   '(trivial-types:proper-list environment-info-description))
 (common-lisp:defun make-environment-info-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-info-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-info-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment-link (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-link-"))
   (link-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-link 'make-environment-link))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-links ()
   '(trivial-types:proper-list environment-link))
 (common-lisp:defun make-environment-links
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-link))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-names-list ()
   '(trivial-types:proper-list environment-name))
 (common-lisp:defun make-environment-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-resource-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-resource-description-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (auto-scaling-groups common-lisp:nil :type
    (common-lisp:or auto-scaling-group-list common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or instance-list common-lisp:null))
   (launch-configurations common-lisp:nil :type
    (common-lisp:or launch-configuration-list common-lisp:null))
   (launch-templates common-lisp:nil :type
    (common-lisp:or launch-template-list common-lisp:null))
   (load-balancers common-lisp:nil :type
    (common-lisp:or load-balancer-list common-lisp:null))
   (triggers common-lisp:nil :type
    (common-lisp:or trigger-list common-lisp:null))
   (queues common-lisp:nil :type (common-lisp:or queue-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-resource-description
                    'make-environment-resource-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configurations))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-templates))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "Triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queues))
      (common-lisp:list
       (common-lisp:cons "Queues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-resource-descriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-resource-descriptions-message-"))
   (environment-resources common-lisp:nil :type
    (common-lisp:or environment-resource-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-resource-descriptions-message
                    'make-environment-resource-descriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-resources))
      (common-lisp:list
       (common-lisp:cons "EnvironmentResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-resource-descriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-resources-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-resources-description-"))
   (load-balancer common-lisp:nil :type
    (common-lisp:or load-balancer-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-resources-description
                    'make-environment-resources-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-resources-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-resources-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer))
      (common-lisp:list
       (common-lisp:cons "LoadBalancer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-resources-description))
   common-lisp:nil))
(common-lisp:deftype environment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (environment-tier (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-tier-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-tier 'make-environment-tier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-tier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-tier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-tier))
   common-lisp:nil))
(common-lisp:deftype event-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-description-"))
   (event-date common-lisp:nil :type
    (common-lisp:or event-date common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or event-message common-lisp:null))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (version-label common-lisp:nil :type
    (common-lisp:or version-label common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or event-severity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-description 'make-event-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-date))
      (common-lisp:list
       (common-lisp:cons "EventDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-description-list ()
   '(trivial-types:proper-list event-description))
 (common-lisp:defun make-event-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-descriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-descriptions-message-"))
   (events common-lisp:nil :type
    (common-lisp:or event-description-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-descriptions-message
                    'make-event-descriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-descriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-descriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-descriptions-message))
   common-lisp:nil))
(common-lisp:deftype event-message () 'common-lisp:string)
(common-lisp:deftype event-severity () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype failure-type () 'common-lisp:string)
(common-lisp:deftype file-type-extension () 'common-lisp:string)
(common-lisp:deftype force-terminate () 'common-lisp:boolean)
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:deftype image-id () 'common-lisp:string)
(common-lisp:deftype include-deleted () 'common-lisp:boolean)
(common-lisp:deftype include-deleted-back-to () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance (:copier common-lisp:nil) (:conc-name "struct-shape-instance-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-health-list ()
   '(trivial-types:proper-list single-instance-health))
 (common-lisp:defun make-instance-health-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list single-instance-health))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-health-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-health-summary-"))
   (no-data common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (unknown common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (pending common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (ok common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (info common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (warning common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (degraded common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (severe common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-health-summary 'make-instance-health-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-data))
      (common-lisp:list
       (common-lisp:cons "NoData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown))
      (common-lisp:list
       (common-lisp:cons "Unknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "Pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ok))
      (common-lisp:list
       (common-lisp:cons "Ok"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info))
      (common-lisp:list
       (common-lisp:cons "Info"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning))
      (common-lisp:list
       (common-lisp:cons "Warning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'degraded))
      (common-lisp:list
       (common-lisp:cons "Degraded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severe))
      (common-lisp:list
       (common-lisp:cons "Severe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   common-lisp:nil))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-list () '(trivial-types:proper-list instance))
 (common-lisp:defun make-instance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instances-health-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instances-health-attributes ()
   '(trivial-types:proper-list instances-health-attribute))
 (common-lisp:defun make-instances-health-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instances-health-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition insufficient-privileges-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-privileges-exception)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-request-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (latency (:copier common-lisp:nil) (:conc-name "struct-shape-latency-"))
   (p999 common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (p99 common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (p95 common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (p90 common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (p85 common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (p75 common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (p50 common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (p10 common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'latency 'make-latency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input latency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input latency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p999))
      (common-lisp:list
       (common-lisp:cons "P999"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p99))
      (common-lisp:list
       (common-lisp:cons "P99"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p95))
      (common-lisp:list
       (common-lisp:cons "P95"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p90))
      (common-lisp:list
       (common-lisp:cons "P90"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p85))
      (common-lisp:list
       (common-lisp:cons "P85"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p75))
      (common-lisp:list
       (common-lisp:cons "P75"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p50))
      (common-lisp:list
       (common-lisp:cons "P50"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'p10))
      (common-lisp:list
       (common-lisp:cons "P10"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input latency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-configuration-"))
   (name common-lisp:nil :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-configuration 'make-launch-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-configuration-list ()
   '(trivial-types:proper-list launch-configuration))
 (common-lisp:defun make-launch-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-template-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'launch-template 'make-launch-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-template-list ()
   '(trivial-types:proper-list launch-template))
 (common-lisp:defun make-launch-template-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launched-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-available-solution-stacks-result-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-available-solution-stacks-result-message-"))
   (solution-stacks common-lisp:nil :type
    (common-lisp:or available-solution-stack-names-list common-lisp:null))
   (solution-stack-details common-lisp:nil :type
    (common-lisp:or available-solution-stack-details-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-available-solution-stacks-result-message
                    'make-list-available-solution-stacks-result-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-solution-stacks-result-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-solution-stacks-result-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stacks))
      (common-lisp:list
       (common-lisp:cons "SolutionStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'solution-stack-details))
      (common-lisp:list
       (common-lisp:cons "SolutionStackDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-solution-stacks-result-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-platform-branches-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-platform-branches-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or search-filters common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or platform-branch-max-records common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-platform-branches-request
                    'make-list-platform-branches-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-platform-branches-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-platform-branches-result-"))
   (platform-branch-summary-list common-lisp:nil :type
    (common-lisp:or platform-branch-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-platform-branches-result
                    'make-list-platform-branches-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-summary-list))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-branches-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-platform-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-platform-versions-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or platform-filters common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or platform-max-records common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-platform-versions-request
                    'make-list-platform-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-platform-versions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-platform-versions-result-"))
   (platform-summary-list common-lisp:nil :type
    (common-lisp:or platform-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-platform-versions-result
                    'make-list-platform-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-summary-list))
      (common-lisp:list
       (common-lisp:cons "PlatformSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-platform-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-message-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener (:copier common-lisp:nil) (:conc-name "struct-shape-listener-"))
   (protocol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-average ()
   '(trivial-types:proper-list load-average-value))
 (common-lisp:defun make-load-average
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-average-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-average-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-"))
   (name common-lisp:nil :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'load-balancer 'make-load-balancer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-description-"))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (listeners common-lisp:nil :type
    (common-lisp:or load-balancer-listeners-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-description
                    'make-load-balancer-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-list ()
   '(trivial-types:proper-list load-balancer))
 (common-lisp:defun make-load-balancer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype load-balancer-listeners-description ()
   '(trivial-types:proper-list listener))
 (common-lisp:defun make-load-balancer-listeners-description
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintainer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (managed-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-action-"))
   (action-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (action-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (action-type common-lisp:nil :type
    (common-lisp:or action-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-status common-lisp:null))
   (window-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'managed-action 'make-managed-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-description))
      (common-lisp:list
       (common-lisp:cons "ActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-start-time))
      (common-lisp:list
       (common-lisp:cons "WindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-action-history-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-action-history-item-"))
   (action-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (action-type common-lisp:nil :type
    (common-lisp:or action-type common-lisp:null))
   (action-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (failure-type common-lisp:nil :type
    (common-lisp:or failure-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-history-status common-lisp:null))
   (failure-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (executed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (finished-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-action-history-item
                    'make-managed-action-history-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-action-history-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-action-history-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-description))
      (common-lisp:list
       (common-lisp:cons "ActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "FailureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-description))
      (common-lisp:list
       (common-lisp:cons "FailureDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executed-time))
      (common-lisp:list
       (common-lisp:cons "ExecutedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-time))
      (common-lisp:list
       (common-lisp:cons "FinishedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-action-history-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-action-history-items ()
   '(trivial-types:proper-list managed-action-history-item))
 (common-lisp:defun make-managed-action-history-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-action-history-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype managed-action-history-max-items () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition managed-action-invalid-state-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'managed-action-invalid-state-exception)))
(common-lisp:progn
 (common-lisp:deftype managed-actions ()
   '(trivial-types:proper-list managed-action))
 (common-lisp:defun make-managed-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (max-age-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-max-age-rule-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (max-age-in-days common-lisp:nil :type
    (common-lisp:or boxed-int common-lisp:null))
   (delete-source-from-s3 common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'max-age-rule 'make-max-age-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input max-age-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input max-age-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-in-days))
      (common-lisp:list
       (common-lisp:cons "MaxAgeInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-source-from-s3))
      (common-lisp:list
       (common-lisp:cons "DeleteSourceFromS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input max-age-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (max-count-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-max-count-rule-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (max-count common-lisp:nil :type
    (common-lisp:or boxed-int common-lisp:null))
   (delete-source-from-s3 common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'max-count-rule 'make-max-count-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input max-count-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input max-count-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "MaxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-source-from-s3))
      (common-lisp:list
       (common-lisp:cons "DeleteSourceFromS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input max-count-rule))
   common-lisp:nil))
(common-lisp:deftype max-records () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype nullable-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:deftype nullable-long () 'common-lisp:integer)
(common-lisp:deftype operating-system-name () 'common-lisp:string)
(common-lisp:deftype operating-system-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-in-progress-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-in-progress-exception)))
(common-lisp:deftype operations-role () 'common-lisp:string)
(common-lisp:deftype option-namespace () 'common-lisp:string)
(common-lisp:deftype option-restriction-max-length () 'common-lisp:integer)
(common-lisp:deftype option-restriction-max-value () 'common-lisp:integer)
(common-lisp:deftype option-restriction-min-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (option-restriction-regex (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-restriction-regex-"))
   (pattern common-lisp:nil :type
    (common-lisp:or regex-pattern common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or regex-label common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'option-restriction-regex 'make-option-restriction-regex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-restriction-regex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-restriction-regex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-restriction-regex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (option-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-specification-"))
   (resource-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or option-namespace common-lisp:null))
   (option-name common-lisp:nil :type
    (common-lisp:or configuration-option-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'option-specification 'make-option-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype options-specifier-list ()
   '(trivial-types:proper-list option-specification))
 (common-lisp:defun make-options-specifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-arn () 'common-lisp:string)
(common-lisp:deftype platform-branch-lifecycle-state () 'common-lisp:string)
(common-lisp:deftype platform-branch-max-records () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (platform-branch-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-platform-branch-summary-"))
   (platform-name common-lisp:nil :type
    (common-lisp:or platform-name common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null))
   (lifecycle-state common-lisp:nil :type
    (common-lisp:or platform-branch-lifecycle-state common-lisp:null))
   (branch-order common-lisp:nil :type
    (common-lisp:or branch-order common-lisp:null))
   (supported-tier-list common-lisp:nil :type
    (common-lisp:or supported-tier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'platform-branch-summary 'make-platform-branch-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          platform-branch-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          platform-branch-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-name))
      (common-lisp:list
       (common-lisp:cons "PlatformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "BranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "LifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-order))
      (common-lisp:list
       (common-lisp:cons "BranchOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-tier-list))
      (common-lisp:list
       (common-lisp:cons "SupportedTierList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          platform-branch-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype platform-branch-summary-list ()
   '(trivial-types:proper-list platform-branch-summary))
 (common-lisp:defun make-platform-branch-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-branch-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (platform-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-platform-description-"))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (platform-owner common-lisp:nil :type
    (common-lisp:or platform-owner common-lisp:null))
   (platform-name common-lisp:nil :type
    (common-lisp:or platform-name common-lisp:null))
   (platform-version common-lisp:nil :type
    (common-lisp:or platform-version common-lisp:null))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (platform-status common-lisp:nil :type
    (common-lisp:or platform-status common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or update-date common-lisp:null))
   (platform-category common-lisp:nil :type
    (common-lisp:or platform-category common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (maintainer common-lisp:nil :type
    (common-lisp:or maintainer common-lisp:null))
   (operating-system-name common-lisp:nil :type
    (common-lisp:or operating-system-name common-lisp:null))
   (operating-system-version common-lisp:nil :type
    (common-lisp:or operating-system-version common-lisp:null))
   (programming-languages common-lisp:nil :type
    (common-lisp:or platform-programming-languages common-lisp:null))
   (frameworks common-lisp:nil :type
    (common-lisp:or platform-frameworks common-lisp:null))
   (custom-ami-list common-lisp:nil :type
    (common-lisp:or custom-ami-list common-lisp:null))
   (supported-tier-list common-lisp:nil :type
    (common-lisp:or supported-tier-list common-lisp:null))
   (supported-addon-list common-lisp:nil :type
    (common-lisp:or supported-addon-list common-lisp:null))
   (platform-lifecycle-state common-lisp:nil :type
    (common-lisp:or platform-lifecycle-state common-lisp:null))
   (platform-branch-name common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null))
   (platform-branch-lifecycle-state common-lisp:nil :type
    (common-lisp:or platform-branch-lifecycle-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'platform-description 'make-platform-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-owner))
      (common-lisp:list
       (common-lisp:cons "PlatformOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-name))
      (common-lisp:list
       (common-lisp:cons "PlatformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-status))
      (common-lisp:list
       (common-lisp:cons "PlatformStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-category))
      (common-lisp:list
       (common-lisp:cons "PlatformCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintainer))
      (common-lisp:list
       (common-lisp:cons "Maintainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-name))
      (common-lisp:list
       (common-lisp:cons "OperatingSystemName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-version))
      (common-lisp:list
       (common-lisp:cons "OperatingSystemVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'programming-languages))
      (common-lisp:list
       (common-lisp:cons "ProgrammingLanguages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frameworks))
      (common-lisp:list
       (common-lisp:cons "Frameworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-ami-list))
      (common-lisp:list
       (common-lisp:cons "CustomAmiList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-tier-list))
      (common-lisp:list
       (common-lisp:cons "SupportedTierList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-addon-list))
      (common-lisp:list
       (common-lisp:cons "SupportedAddonList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "PlatformLifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-name))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchLifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (platform-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-platform-filter-"))
   (type common-lisp:nil :type
    (common-lisp:or platform-filter-type common-lisp:null))
   (operator common-lisp:nil :type
    (common-lisp:or platform-filter-operator common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or platform-filter-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'platform-filter 'make-platform-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-filter))
   common-lisp:nil))
(common-lisp:deftype platform-filter-operator () 'common-lisp:string)
(common-lisp:deftype platform-filter-type () 'common-lisp:string)
(common-lisp:deftype platform-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platform-filter-value-list ()
   '(trivial-types:proper-list platform-filter-value))
 (common-lisp:defun make-platform-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype platform-filters ()
   '(trivial-types:proper-list platform-filter))
 (common-lisp:defun make-platform-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (platform-framework (:copier common-lisp:nil)
      (:conc-name "struct-shape-platform-framework-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'platform-framework 'make-platform-framework))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-framework))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-framework))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-framework))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype platform-frameworks ()
   '(trivial-types:proper-list platform-framework))
 (common-lisp:defun make-platform-frameworks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-framework))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-lifecycle-state () 'common-lisp:string)
(common-lisp:deftype platform-max-records () 'common-lisp:integer)
(common-lisp:deftype platform-name () 'common-lisp:string)
(common-lisp:deftype platform-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (platform-programming-language (:copier common-lisp:nil)
      (:conc-name "struct-shape-platform-programming-language-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'platform-programming-language
                    'make-platform-programming-language))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          platform-programming-language))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          platform-programming-language))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          platform-programming-language))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype platform-programming-languages ()
   '(trivial-types:proper-list platform-programming-language))
 (common-lisp:defun make-platform-programming-languages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            platform-programming-language))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (platform-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-platform-summary-"))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (platform-owner common-lisp:nil :type
    (common-lisp:or platform-owner common-lisp:null))
   (platform-status common-lisp:nil :type
    (common-lisp:or platform-status common-lisp:null))
   (platform-category common-lisp:nil :type
    (common-lisp:or platform-category common-lisp:null))
   (operating-system-name common-lisp:nil :type
    (common-lisp:or operating-system-name common-lisp:null))
   (operating-system-version common-lisp:nil :type
    (common-lisp:or operating-system-version common-lisp:null))
   (supported-tier-list common-lisp:nil :type
    (common-lisp:or supported-tier-list common-lisp:null))
   (supported-addon-list common-lisp:nil :type
    (common-lisp:or supported-addon-list common-lisp:null))
   (platform-lifecycle-state common-lisp:nil :type
    (common-lisp:or platform-lifecycle-state common-lisp:null))
   (platform-version common-lisp:nil :type
    (common-lisp:or platform-version common-lisp:null))
   (platform-branch-name common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null))
   (platform-branch-lifecycle-state common-lisp:nil :type
    (common-lisp:or platform-branch-lifecycle-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'platform-summary 'make-platform-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-owner))
      (common-lisp:list
       (common-lisp:cons "PlatformOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-status))
      (common-lisp:list
       (common-lisp:cons "PlatformStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-category))
      (common-lisp:list
       (common-lisp:cons "PlatformCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-name))
      (common-lisp:list
       (common-lisp:cons "OperatingSystemName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-version))
      (common-lisp:list
       (common-lisp:cons "OperatingSystemVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-tier-list))
      (common-lisp:list
       (common-lisp:cons "SupportedTierList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-addon-list))
      (common-lisp:list
       (common-lisp:cons "SupportedAddonList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "PlatformLifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-name))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-branch-lifecycle-state))
      (common-lisp:list
       (common-lisp:cons "PlatformBranchLifecycleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype platform-summary-list ()
   '(trivial-types:proper-list platform-summary))
 (common-lisp:defun make-platform-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition platform-version-still-referenced-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'platform-version-still-referenced-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (queue (:copier common-lisp:nil) (:conc-name "struct-shape-queue-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'queue 'make-queue))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-list () '(trivial-types:proper-list queue))
 (common-lisp:defun make-queue-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rebuild-environment-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-rebuild-environment-message-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rebuild-environment-message
                    'make-rebuild-environment-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-environment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-environment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-environment-message))
   common-lisp:nil))
(common-lisp:deftype refreshed-at () 'common-lisp:string)
(common-lisp:deftype regex-label () 'common-lisp:string)
(common-lisp:deftype regex-pattern () 'common-lisp:string)
(common-lisp:deftype request-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (request-environment-info-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-environment-info-message-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (info-type (common-lisp:error ":info-type is required") :type
    (common-lisp:or environment-info-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-environment-info-message
                    'make-request-environment-info-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-environment-info-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-environment-info-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info-type))
      (common-lisp:list
       (common-lisp:cons "InfoType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-environment-info-message))
   common-lisp:nil))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-quota (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-quota-"))
   (maximum common-lisp:nil :type (common-lisp:or boxed-int common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-quota 'make-resource-quota))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-quota))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-quota))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "Maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-quota))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-quotas (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-quotas-"))
   (application-quota common-lisp:nil :type
    (common-lisp:or resource-quota common-lisp:null))
   (application-version-quota common-lisp:nil :type
    (common-lisp:or resource-quota common-lisp:null))
   (environment-quota common-lisp:nil :type
    (common-lisp:or resource-quota common-lisp:null))
   (configuration-template-quota common-lisp:nil :type
    (common-lisp:or resource-quota common-lisp:null))
   (custom-platform-quota common-lisp:nil :type
    (common-lisp:or resource-quota common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-quotas 'make-resource-quotas))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-quotas))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-quotas))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-quota))
      (common-lisp:list
       (common-lisp:cons "ApplicationQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-quota))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-quota))
      (common-lisp:list
       (common-lisp:cons "EnvironmentQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-template-quota))
      (common-lisp:list
       (common-lisp:cons "ConfigurationTemplateQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-platform-quota))
      (common-lisp:list
       (common-lisp:cons "CustomPlatformQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-quotas))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-tags-description-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-tags-description-message-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-tags-description-message
                    'make-resource-tags-description-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-tags-description-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-tags-description-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-tags-description-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-type-not-supported-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-type-not-supported-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (restart-app-server-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restart-app-server-message-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restart-app-server-message
                    'make-restart-app-server-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restart-app-server-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restart-app-server-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restart-app-server-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (retrieve-environment-info-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-retrieve-environment-info-message-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (info-type (common-lisp:error ":info-type is required") :type
    (common-lisp:or environment-info-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retrieve-environment-info-message
                    'make-retrieve-environment-info-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info-type))
      (common-lisp:list
       (common-lisp:cons "InfoType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (retrieve-environment-info-result-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-retrieve-environment-info-result-message-"))
   (environment-info common-lisp:nil :type
    (common-lisp:or environment-info-description-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retrieve-environment-info-result-message
                    'make-retrieve-environment-info-result-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-result-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-result-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-info))
      (common-lisp:list
       (common-lisp:cons "EnvironmentInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-environment-info-result-message))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (s3key common-lisp:nil :type (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition s3location-not-in-service-region-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 's3location-not-in-service-region-exception)))
(common-lisp:progn
 (common-lisp:define-condition s3subscription-required-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 's3subscription-required-exception)))
(common-lisp:deftype sample-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-filter-"))
   (attribute common-lisp:nil :type
    (common-lisp:or search-filter-attribute common-lisp:null))
   (operator common-lisp:nil :type
    (common-lisp:or search-filter-operator common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or search-filter-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-filter 'make-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-filter))
   common-lisp:nil))
(common-lisp:deftype search-filter-attribute () 'common-lisp:string)
(common-lisp:deftype search-filter-operator () 'common-lisp:string)
(common-lisp:deftype search-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-filter-values ()
   '(trivial-types:proper-list search-filter-value))
 (common-lisp:defun make-search-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype search-filters ()
   '(trivial-types:proper-list search-filter))
 (common-lisp:defun make-search-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (single-instance-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-single-instance-health-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (health-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (color common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (causes common-lisp:nil :type (common-lisp:or causes common-lisp:null))
   (launched-at common-lisp:nil :type
    (common-lisp:or launched-at common-lisp:null))
   (application-metrics common-lisp:nil :type
    (common-lisp:or application-metrics common-lisp:null))
   (system common-lisp:nil :type
    (common-lisp:or system-status common-lisp:null))
   (deployment common-lisp:nil :type
    (common-lisp:or deployment common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'single-instance-health 'make-single-instance-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          single-instance-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          single-instance-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color))
      (common-lisp:list
       (common-lisp:cons "Color"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causes))
      (common-lisp:list
       (common-lisp:cons "Causes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "LaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-metrics))
      (common-lisp:list
       (common-lisp:cons "ApplicationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system))
      (common-lisp:list
       (common-lisp:cons "System"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment))
      (common-lisp:list
       (common-lisp:cons "Deployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          single-instance-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (solution-stack-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-solution-stack-description-"))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (permitted-file-types common-lisp:nil :type
    (common-lisp:or solution-stack-file-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'solution-stack-description
                    'make-solution-stack-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          solution-stack-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          solution-stack-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permitted-file-types))
      (common-lisp:list
       (common-lisp:cons "PermittedFileTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          solution-stack-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype solution-stack-file-type-list ()
   '(trivial-types:proper-list file-type-extension))
 (common-lisp:defun make-solution-stack-file-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-type-extension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype solution-stack-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-build-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-build-information-"))
   (source-type (common-lisp:error ":source-type is required") :type
    (common-lisp:or source-type common-lisp:null))
   (source-repository (common-lisp:error ":source-repository is required")
    :type (common-lisp:or source-repository common-lisp:null))
   (source-location (common-lisp:error ":source-location is required") :type
    (common-lisp:or source-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-build-information 'make-source-build-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-build-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-build-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-repository))
      (common-lisp:list
       (common-lisp:cons "SourceRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-location))
      (common-lisp:list
       (common-lisp:cons "SourceLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-build-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition source-bundle-deletion-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-bundle-deletion-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-configuration-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:deftype source-location () 'common-lisp:string)
(common-lisp:deftype source-repository () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (status-codes (:copier common-lisp:nil)
      (:conc-name "struct-shape-status-codes-"))
   (status2xx common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (status3xx common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (status4xx common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (status5xx common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'status-codes 'make-status-codes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-codes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-codes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status2xx))
      (common-lisp:list
       (common-lisp:cons "Status2xx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status3xx))
      (common-lisp:list
       (common-lisp:cons "Status3xx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status4xx))
      (common-lisp:list
       (common-lisp:cons "Status4xx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status5xx))
      (common-lisp:list
       (common-lisp:cons "Status5xx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-codes))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype supported-addon () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-addon-list ()
   '(trivial-types:proper-list supported-addon))
 (common-lisp:defun make-supported-addon-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-addon))
   aws-sdk/generator/shape::members))
(common-lisp:deftype supported-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-tier-list ()
   '(trivial-types:proper-list supported-tier))
 (common-lisp:defun make-supported-tier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-tier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (swap-environment-cnames-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-swap-environment-cnames-message-"))
   (source-environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (source-environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (destination-environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (destination-environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'swap-environment-cnames-message
                    'make-swap-environment-cnames-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          swap-environment-cnames-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          swap-environment-cnames-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-environment-id))
      (common-lisp:list
       (common-lisp:cons "SourceEnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-environment-name))
      (common-lisp:list
       (common-lisp:cons "SourceEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-environment-id))
      (common-lisp:list
       (common-lisp:cons "DestinationEnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-environment-name))
      (common-lisp:list
       (common-lisp:cons "DestinationEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          swap-environment-cnames-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (system-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-system-status-"))
   (cpuutilization common-lisp:nil :type
    (common-lisp:or cpuutilization common-lisp:null))
   (load-average common-lisp:nil :type
    (common-lisp:or load-average common-lisp:null)))
 (common-lisp:export (common-lisp:list 'system-status 'make-system-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input system-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input system-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpuutilization))
      (common-lisp:list
       (common-lisp:cons "CPUUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-average))
      (common-lisp:list
       (common-lisp:cons "LoadAverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input system-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype terminate-env-force () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-environment-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-environment-message-"))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (terminate-resources common-lisp:nil :type
    (common-lisp:or terminate-environment-resources common-lisp:null))
   (force-terminate common-lisp:nil :type
    (common-lisp:or force-terminate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-environment-message
                    'make-terminate-environment-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-environment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-environment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-resources))
      (common-lisp:list
       (common-lisp:cons "TerminateResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-terminate))
      (common-lisp:list
       (common-lisp:cons "ForceTerminate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-environment-message))
   common-lisp:nil))
(common-lisp:deftype terminate-environment-resources () 'common-lisp:boolean)
(common-lisp:deftype time-filter-end () 'common-lisp:string)
(common-lisp:deftype time-filter-start () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-application-versions-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'too-many-application-versions-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-applications-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-applications-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-buckets-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-buckets-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-configuration-templates-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'too-many-configuration-templates-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-environments-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-environments-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-platforms-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-platforms-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (elasticbeanstalk-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (trigger (:copier common-lisp:nil) (:conc-name "struct-shape-trigger-"))
   (name common-lisp:nil :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trigger 'make-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trigger-list () '(trivial-types:proper-list trigger))
 (common-lisp:defun make-trigger-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-message
                    'make-update-application-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-resource-lifecycle-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-application-resource-lifecycle-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (resource-lifecycle-config
    (common-lisp:error ":resource-lifecycle-config is required") :type
    (common-lisp:or application-resource-lifecycle-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-resource-lifecycle-message
                    'make-update-application-resource-lifecycle-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-resource-lifecycle-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-resource-lifecycle-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "ResourceLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-resource-lifecycle-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-version-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (version-label (common-lisp:error ":version-label is required") :type
    (common-lisp:or version-label common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-version-message
                    'make-update-application-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configuration-template-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configuration-template-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or configuration-option-settings-list common-lisp:null))
   (options-to-remove common-lisp:nil :type
    (common-lisp:or options-specifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configuration-template-message
                    'make-update-configuration-template-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-template-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-template-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-remove))
      (common-lisp:list
       (common-lisp:cons "OptionsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-template-message))
   common-lisp:nil))
(common-lisp:deftype update-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-environment-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-environment-message-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or environment-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or group-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (tier common-lisp:nil :type
    (common-lisp:or environment-tier common-lisp:null))
   (version-label common-lisp:nil :type
    (common-lisp:or version-label common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or solution-stack-name common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or platform-arn common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or configuration-option-settings-list common-lisp:null))
   (options-to-remove common-lisp:nil :type
    (common-lisp:or options-specifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-environment-message
                    'make-update-environment-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-remove))
      (common-lisp:list
       (common-lisp:cons "OptionsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-tags-for-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-tags-for-resource-message-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags-to-add common-lisp:nil :type
    (common-lisp:or tag-list common-lisp:null))
   (tags-to-remove common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-tags-for-resource-message
                    'make-update-tags-for-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-add))
      (common-lisp:list
       (common-lisp:cons "TagsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-remove))
      (common-lisp:list
       (common-lisp:cons "TagsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:deftype user-defined-option () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (validate-configuration-settings-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-configuration-settings-message-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or configuration-template-name common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (option-settings (common-lisp:error ":option-settings is required") :type
    (common-lisp:or configuration-option-settings-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-configuration-settings-message
                    'make-validate-configuration-settings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-settings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-settings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-settings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-message-"))
   (message common-lisp:nil :type
    (common-lisp:or validation-message-string common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or validation-severity common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or option-namespace common-lisp:null))
   (option-name common-lisp:nil :type
    (common-lisp:or configuration-option-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-message 'make-validation-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-message))
   common-lisp:nil))
(common-lisp:deftype validation-message-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype validation-messages-list ()
   '(trivial-types:proper-list validation-message))
 (common-lisp:defun make-validation-messages-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-severity () 'common-lisp:string)
(common-lisp:deftype version-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype version-labels ()
   '(trivial-types:proper-list version-label))
 (common-lisp:defun make-version-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype version-labels-list ()
   '(trivial-types:proper-list version-label))
 (common-lisp:defun make-version-labels-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-label))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtualization-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun abort-environment-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-abort-environment-update-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "AbortEnvironmentUpdate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'abort-environment-update))
(common-lisp:progn
 (common-lisp:defun apply-environment-managed-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name environment-id
                     action-id)
   (common-lisp:declare
    (common-lisp:ignorable environment-name environment-id action-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-environment-managed-action-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "ApplyEnvironmentManagedAction"))
      common-lisp:nil "ApplyEnvironmentManagedActionResult" *error-map*)))
 (common-lisp:export 'apply-environment-managed-action))
(common-lisp:progn
 (common-lisp:defun associate-environment-operations-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name operations-role)
   (common-lisp:declare
    (common-lisp:ignorable environment-name operations-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-environment-operations-role-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateEnvironmentOperationsRole"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-environment-operations-role))
(common-lisp:progn
 (common-lisp:defun check-dnsavailability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cnameprefix)
   (common-lisp:declare (common-lisp:ignorable cnameprefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-check-dnsavailability-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "CheckDNSAvailability"))
      common-lisp:nil "CheckDNSAvailabilityResult" *error-map*)))
 (common-lisp:export 'check-dnsavailability))
(common-lisp:progn
 (common-lisp:defun compose-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name group-name
                     version-labels)
   (common-lisp:declare
    (common-lisp:ignorable application-name group-name version-labels))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-compose-environments-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "ComposeEnvironments"))
      common-lisp:nil "ComposeEnvironmentsResult" *error-map*)))
 (common-lisp:export 'compose-environments))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name description
                     resource-lifecycle-config tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name description
     resource-lifecycle-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "CreateApplication"))
      common-lisp:nil "CreateApplicationResult" *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     description source-build-information source-bundle
                     build-configuration auto-create-application process tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label description
     source-build-information source-bundle build-configuration
     auto-create-application process tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-application-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "CreateApplicationVersion"))
      common-lisp:nil "CreateApplicationVersionResult" *error-map*)))
 (common-lisp:export 'create-application-version))
(common-lisp:progn
 (common-lisp:defun create-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     solution-stack-name platform-arn source-configuration
                     environment-id description option-settings tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name solution-stack-name
     platform-arn source-configuration environment-id description
     option-settings tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configuration-template-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "CreateConfigurationTemplate"))
      common-lisp:nil "CreateConfigurationTemplateResult" *error-map*)))
 (common-lisp:export 'create-configuration-template))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name environment-name
                     group-name description cnameprefix tier tags version-label
                     template-name solution-stack-name platform-arn
                     option-settings options-to-remove operations-role)
   (common-lisp:declare
    (common-lisp:ignorable application-name environment-name group-name
     description cnameprefix tier tags version-label template-name
     solution-stack-name platform-arn option-settings options-to-remove
     operations-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "CreateEnvironment"))
      common-lisp:nil "CreateEnvironmentResult" *error-map*)))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-platform-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform-name platform-version
                     platform-definition-bundle environment-name
                     option-settings tags)
   (common-lisp:declare
    (common-lisp:ignorable platform-name platform-version
     platform-definition-bundle environment-name option-settings tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-platform-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "CreatePlatformVersion"))
      common-lisp:nil "CreatePlatformVersionResult" *error-map*)))
 (common-lisp:export 'create-platform-version))
(common-lisp:progn
 (common-lisp:defun create-storage-location ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'elasticbeanstalk-request :method "POST" :path
                                "/" :operation "CreateStorageLocation"))
    common-lisp:nil "CreateStorageLocationResult" *error-map*))
 (common-lisp:export 'create-storage-location))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name terminate-env-by-force)
   (common-lisp:declare
    (common-lisp:ignorable application-name terminate-env-by-force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     delete-source-bundle)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label
     delete-source-bundle))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteApplicationVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application-version))
(common-lisp:progn
 (common-lisp:defun delete-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name)
   (common-lisp:declare (common-lisp:ignorable application-name template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configuration-template-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configuration-template))
(common-lisp:progn
 (common-lisp:defun delete-environment-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name environment-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-configuration-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteEnvironmentConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment-configuration))
(common-lisp:progn
 (common-lisp:defun delete-platform-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform-arn)
   (common-lisp:declare (common-lisp:ignorable platform-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-platform-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DeletePlatformVersion"))
      common-lisp:nil "DeletePlatformVersionResult" *error-map*)))
 (common-lisp:export 'delete-platform-version))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'elasticbeanstalk-request :method "POST" :path
                                "/" :operation "DescribeAccountAttributes"))
    common-lisp:nil "DescribeAccountAttributesResult" *error-map*))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-application-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-labels
                     max-records next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-labels max-records
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeApplicationVersions"))
      common-lisp:nil "DescribeApplicationVersionsResult" *error-map*)))
 (common-lisp:export 'describe-application-versions))
(common-lisp:progn
 (common-lisp:defun describe-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-names)
   (common-lisp:declare (common-lisp:ignorable application-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-applications-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeApplications"))
      common-lisp:nil "DescribeApplicationsResult" *error-map*)))
 (common-lisp:export 'describe-applications))
(common-lisp:progn
 (common-lisp:defun describe-configuration-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     environment-name solution-stack-name platform-arn options)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name environment-name
     solution-stack-name platform-arn options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeConfigurationOptions"))
      common-lisp:nil "DescribeConfigurationOptionsResult" *error-map*)))
 (common-lisp:export 'describe-configuration-options))
(common-lisp:progn
 (common-lisp:defun describe-configuration-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     environment-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-settings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeConfigurationSettings"))
      common-lisp:nil "DescribeConfigurationSettingsResult" *error-map*)))
 (common-lisp:export 'describe-configuration-settings))
(common-lisp:progn
 (common-lisp:defun describe-environment-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name environment-id
                     attribute-names)
   (common-lisp:declare
    (common-lisp:ignorable environment-name environment-id attribute-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-environment-health-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeEnvironmentHealth"))
      common-lisp:nil "DescribeEnvironmentHealthResult" *error-map*)))
 (common-lisp:export 'describe-environment-health))
(common-lisp:progn
 (common-lisp:defun describe-environment-managed-action-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name
                     next-token max-items)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name next-token
     max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-environment-managed-action-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeEnvironmentManagedActionHistory"))
      common-lisp:nil "DescribeEnvironmentManagedActionHistoryResult"
      *error-map*)))
 (common-lisp:export 'describe-environment-managed-action-history))
(common-lisp:progn
 (common-lisp:defun describe-environment-managed-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name environment-id status)
   (common-lisp:declare
    (common-lisp:ignorable environment-name environment-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-environment-managed-actions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeEnvironmentManagedActions"))
      common-lisp:nil "DescribeEnvironmentManagedActionsResult" *error-map*)))
 (common-lisp:export 'describe-environment-managed-actions))
(common-lisp:progn
 (common-lisp:defun describe-environment-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-environment-resources-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeEnvironmentResources"))
      common-lisp:nil "DescribeEnvironmentResourcesResult" *error-map*)))
 (common-lisp:export 'describe-environment-resources))
(common-lisp:progn
 (common-lisp:defun describe-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     environment-ids environment-names include-deleted
                     included-deleted-back-to max-records next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label environment-ids
     environment-names include-deleted included-deleted-back-to max-records
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-environments-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeEnvironments"))
      common-lisp:nil "DescribeEnvironmentsResult" *error-map*)))
 (common-lisp:export 'describe-environments))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     template-name environment-id environment-name platform-arn
                     request-id severity start-time end-time max-records
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label template-name
     environment-id environment-name platform-arn request-id severity
     start-time end-time max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeEvents"))
      common-lisp:nil "DescribeEventsResult" *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-instances-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name environment-id
                     attribute-names next-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-name environment-id attribute-names
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instances-health-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeInstancesHealth"))
      common-lisp:nil "DescribeInstancesHealthResult" *error-map*)))
 (common-lisp:export 'describe-instances-health))
(common-lisp:progn
 (common-lisp:defun describe-platform-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform-arn)
   (common-lisp:declare (common-lisp:ignorable platform-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-platform-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DescribePlatformVersion"))
      common-lisp:nil "DescribePlatformVersionResult" *error-map*)))
 (common-lisp:export 'describe-platform-version))
(common-lisp:progn
 (common-lisp:defun disassociate-environment-operations-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name)
   (common-lisp:declare (common-lisp:ignorable environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-environment-operations-role-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateEnvironmentOperationsRole"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-environment-operations-role))
(common-lisp:progn
 (common-lisp:defun list-available-solution-stacks ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'elasticbeanstalk-request :method "POST" :path
                                "/" :operation "ListAvailableSolutionStacks"))
    common-lisp:nil "ListAvailableSolutionStacksResult" *error-map*))
 (common-lisp:export 'list-available-solution-stacks))
(common-lisp:progn
 (common-lisp:defun list-platform-branches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-platform-branches-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "ListPlatformBranches"))
      common-lisp:nil "ListPlatformBranchesResult" *error-map*)))
 (common-lisp:export 'list-platform-branches))
(common-lisp:progn
 (common-lisp:defun list-platform-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-platform-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "ListPlatformVersions"))
      common-lisp:nil "ListPlatformVersionsResult" *error-map*)))
 (common-lisp:export 'list-platform-versions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "ListTagsForResource"))
      common-lisp:nil "ListTagsForResourceResult" *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun rebuild-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rebuild-environment-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "RebuildEnvironment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'rebuild-environment))
(common-lisp:progn
 (common-lisp:defun request-environment-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name
                     info-type)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name info-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-environment-info-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "RequestEnvironmentInfo"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'request-environment-info))
(common-lisp:progn
 (common-lisp:defun restart-app-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restart-app-server-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "RestartAppServer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restart-app-server))
(common-lisp:progn
 (common-lisp:defun retrieve-environment-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name
                     info-type)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name info-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-retrieve-environment-info-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "RetrieveEnvironmentInfo"))
      common-lisp:nil "RetrieveEnvironmentInfoResult" *error-map*)))
 (common-lisp:export 'retrieve-environment-info))
(common-lisp:progn
 (common-lisp:defun swap-environment-cnames
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-environment-id
                     source-environment-name destination-environment-id
                     destination-environment-name)
   (common-lisp:declare
    (common-lisp:ignorable source-environment-id source-environment-name
     destination-environment-id destination-environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-swap-environment-cnames-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "SwapEnvironmentCNAMEs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'swap-environment-cnames))
(common-lisp:progn
 (common-lisp:defun terminate-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id environment-name
                     terminate-resources force-terminate)
   (common-lisp:declare
    (common-lisp:ignorable environment-id environment-name terminate-resources
     force-terminate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-environment-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "TerminateEnvironment"))
      common-lisp:nil "TerminateEnvironmentResult" *error-map*)))
 (common-lisp:export 'terminate-environment))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name description)
   (common-lisp:declare (common-lisp:ignorable application-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateApplication"))
      common-lisp:nil "UpdateApplicationResult" *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-application-resource-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     resource-lifecycle-config)
   (common-lisp:declare
    (common-lisp:ignorable application-name resource-lifecycle-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-application-resource-lifecycle-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateApplicationResourceLifecycle"))
      common-lisp:nil "UpdateApplicationResourceLifecycleResult" *error-map*)))
 (common-lisp:export 'update-application-resource-lifecycle))
(common-lisp:progn
 (common-lisp:defun update-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name version-label
                     description)
   (common-lisp:declare
    (common-lisp:ignorable application-name version-label description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-application-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateApplicationVersion"))
      common-lisp:nil "UpdateApplicationVersionResult" *error-map*)))
 (common-lisp:export 'update-application-version))
(common-lisp:progn
 (common-lisp:defun update-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     description option-settings options-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name description
     option-settings options-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configuration-template-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateConfigurationTemplate"))
      common-lisp:nil "UpdateConfigurationTemplateResult" *error-map*)))
 (common-lisp:export 'update-configuration-template))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name environment-id
                     environment-name group-name description tier version-label
                     template-name solution-stack-name platform-arn
                     option-settings options-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable application-name environment-id environment-name
     group-name description tier version-label template-name
     solution-stack-name platform-arn option-settings options-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateEnvironment"))
      common-lisp:nil "UpdateEnvironmentResult" *error-map*)))
 (common-lisp:export 'update-environment))
(common-lisp:progn
 (common-lisp:defun update-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags-to-add tags-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn tags-to-add tags-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun validate-configuration-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name template-name
                     environment-name option-settings)
   (common-lisp:declare
    (common-lisp:ignorable application-name template-name environment-name
     option-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-configuration-settings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticbeanstalk-request aws-sdk/generator/operation::input "POST" "/"
        "ValidateConfigurationSettings"))
      common-lisp:nil "ValidateConfigurationSettingsResult" *error-map*)))
 (common-lisp:export 'validate-configuration-settings))
