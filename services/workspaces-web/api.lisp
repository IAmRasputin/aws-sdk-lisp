;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/workspaces-web/api
  (:use)
  (:nicknames #:aws/workspaces-web)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/workspaces-web/api)
(common-lisp:progn
 (common-lisp:defclass workspaces-web-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "workspaces-web" :protocol
                        :rest-json))
 (common-lisp:export 'workspaces-web-request))
(common-lisp:progn
 (common-lisp:define-condition workspaces-web-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'workspaces-web-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (workspaces-web-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-browser-settings-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-browser-settings-request-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))
                        (browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %associate-browser-settings-request-browser-settings-arn
                         :initform
                         (common-lisp:error
                          ":browsersettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-browser-settings-request
                    'make-associate-browser-settings-request))
 (common-lisp:defun make-associate-browser-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn browser-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-browser-settings-response common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-browser-settings-response-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))
                        (browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %associate-browser-settings-response-browser-settings-arn
                         :initform
                         (common-lisp:error
                          ":browsersettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-browser-settings-response
                    'make-associate-browser-settings-response))
 (common-lisp:defun make-associate-browser-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn browser-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-network-settings-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-network-settings-request-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))
                        (network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %associate-network-settings-request-network-settings-arn
                         :initform
                         (common-lisp:error
                          ":networksettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-network-settings-request
                    'make-associate-network-settings-request))
 (common-lisp:defun make-associate-network-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn network-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-network-settings-response common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-network-settings-response-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))
                        (network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %associate-network-settings-response-network-settings-arn
                         :initform
                         (common-lisp:error
                          ":networksettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-network-settings-response
                    'make-associate-network-settings-response))
 (common-lisp:defun make-associate-network-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn network-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-trust-store-request common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-trust-store-request-trust-store-arn
                         :initform
                         (common-lisp:error ":truststorearn is required"))
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-trust-store-request-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-trust-store-request
                    'make-associate-trust-store-request))
 (common-lisp:defun make-associate-trust-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-trust-store-response common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-trust-store-response-trust-store-arn
                         :initform
                         (common-lisp:error ":truststorearn is required"))
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-trust-store-response-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-trust-store-response
                    'make-associate-trust-store-response))
 (common-lisp:defun make-associate-trust-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-access-logging-settings-request
                       common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-user-access-logging-settings-request-user-access-logging-settings-arn
                         :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required"))
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-user-access-logging-settings-request-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-user-access-logging-settings-request
                    'make-associate-user-access-logging-settings-request))
 (common-lisp:defun make-associate-user-access-logging-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings-arn
                     portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-access-logging-settings-response
                       common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-user-access-logging-settings-response-user-access-logging-settings-arn
                         :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required"))
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-user-access-logging-settings-response-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-user-access-logging-settings-response
                    'make-associate-user-access-logging-settings-response))
 (common-lisp:defun make-associate-user-access-logging-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings-arn
                     portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-settings-request common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-user-settings-request-user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required"))
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-user-settings-request-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-user-settings-request
                    'make-associate-user-settings-request))
 (common-lisp:defun make-associate-user-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-settings-response common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-user-settings-response-user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required"))
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-user-settings-response-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-user-settings-response
                    'make-associate-user-settings-response))
 (common-lisp:defun make-associate-user-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-settings-response))
   common-lisp:nil))
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:deftype browser-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass browser-settings common-lisp:nil
                       ((browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %browser-settings-browser-settings-arn :initform
                         (common-lisp:error ":browsersettingsarn is required"))
                        (browser-policy :initarg :|browserPolicy| :type
                         (common-lisp:or browser-policy common-lisp:null)
                         :accessor %browser-settings-browser-policy :initform
                         common-lisp:nil)
                        (associated-portal-arns :initarg
                         :|associatedPortalArns| :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %browser-settings-associated-portal-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'browser-settings 'make-browser-settings))
 (common-lisp:defun make-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key browser-settings-arn browser-policy
                     associated-portal-arns)
   (common-lisp:apply #'common-lisp:make-instance 'browser-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input browser-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input browser-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-policy))
      (common-lisp:list
       (common-lisp:cons "browserPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input browser-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype browser-settings-list ()
   '(trivial-types:proper-list browser-settings-summary))
 (common-lisp:defun |make-browser-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            browser-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass browser-settings-summary common-lisp:nil
                       ((browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %browser-settings-summary-browser-settings-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'browser-settings-summary 'make-browser-settings-summary))
 (common-lisp:defun make-browser-settings-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key browser-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance 'browser-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          browser-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          browser-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          browser-settings-summary))
   common-lisp:nil))
(common-lisp:deftype browser-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((thumbprint :initarg :|thumbprint| :type
                         (common-lisp:or certificate-thumbprint
                                         common-lisp:null)
                         :accessor %certificate-thumbprint :initform
                         common-lisp:nil)
                        (subject :initarg :|subject| :type
                         (common-lisp:or certificate-principal
                                         common-lisp:null)
                         :accessor %certificate-subject :initform
                         common-lisp:nil)
                        (not-valid-before :initarg :|notValidBefore| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %certificate-not-valid-before :initform
                         common-lisp:nil)
                        (not-valid-after :initarg :|notValidAfter| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %certificate-not-valid-after :initform
                         common-lisp:nil)
                        (issuer :initarg :|issuer| :type
                         (common-lisp:or certificate-principal
                                         common-lisp:null)
                         :accessor %certificate-issuer :initform
                         common-lisp:nil)
                        (body :initarg :|body| :type
                         (common-lisp:or certificate-authority-body
                                         common-lisp:null)
                         :accessor %certificate-body :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defun make-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thumbprint subject not-valid-before
                     not-valid-after issuer body)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-after))
      (common-lisp:list
       (common-lisp:cons "notValidAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-before))
      (common-lisp:list
       (common-lisp:cons "notValidBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint))
      (common-lisp:list
       (common-lisp:cons "thumbprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-authority-body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype certificate-list ()
   '(trivial-types:proper-list certificate-authority-body))
 (common-lisp:defun |make-certificate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            certificate-authority-body))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate-summary common-lisp:nil
                       ((thumbprint :initarg :|thumbprint| :type
                         (common-lisp:or certificate-thumbprint
                                         common-lisp:null)
                         :accessor %certificate-summary-thumbprint :initform
                         common-lisp:nil)
                        (subject :initarg :|subject| :type
                         (common-lisp:or certificate-principal
                                         common-lisp:null)
                         :accessor %certificate-summary-subject :initform
                         common-lisp:nil)
                        (not-valid-before :initarg :|notValidBefore| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %certificate-summary-not-valid-before :initform
                         common-lisp:nil)
                        (not-valid-after :initarg :|notValidAfter| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %certificate-summary-not-valid-after :initform
                         common-lisp:nil)
                        (issuer :initarg :|issuer| :type
                         (common-lisp:or certificate-principal
                                         common-lisp:null)
                         :accessor %certificate-summary-issuer :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'certificate-summary 'make-certificate-summary))
 (common-lisp:defun make-certificate-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thumbprint subject not-valid-before
                     not-valid-after issuer)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-after))
      (common-lisp:list
       (common-lisp:cons "notValidAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-before))
      (common-lisp:list
       (common-lisp:cons "notValidBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint))
      (common-lisp:list
       (common-lisp:cons "thumbprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-summary-list ()
   '(trivial-types:proper-list certificate-summary))
 (common-lisp:defun |make-certificate-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-thumbprint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-thumbprint-list ()
   '(trivial-types:proper-list certificate-thumbprint))
 (common-lisp:defun |make-certificate-thumbprint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-thumbprint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (workspaces-web-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-browser-settings-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-browser-settings-request-tags :initform
                         common-lisp:nil)
                        (customer-managed-key :initarg :|customerManagedKey|
                         :type (common-lisp:or |keyArn| common-lisp:null)
                         :accessor
                         %create-browser-settings-request-customer-managed-key
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-browser-settings-request-client-token
                         :initform common-lisp:nil)
                        (browser-policy :initarg :|browserPolicy| :type
                         (common-lisp:or browser-policy common-lisp:null)
                         :accessor
                         %create-browser-settings-request-browser-policy
                         :initform
                         (common-lisp:error ":browserpolicy is required"))
                        (additional-encryption-context :initarg
                         :|additionalEncryptionContext| :type
                         (common-lisp:or encryption-context-map
                                         common-lisp:null)
                         :accessor
                         %create-browser-settings-request-additional-encryption-context
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-browser-settings-request
                    'make-create-browser-settings-request))
 (common-lisp:defun make-create-browser-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags customer-managed-key client-token
                     browser-policy additional-encryption-context)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-encryption-context))
      (common-lisp:list
       (common-lisp:cons "additionalEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-policy))
      (common-lisp:list
       (common-lisp:cons "browserPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-key))
      (common-lisp:list
       (common-lisp:cons "customerManagedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-browser-settings-response common-lisp:nil
                       ((browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %create-browser-settings-response-browser-settings-arn
                         :initform
                         (common-lisp:error
                          ":browsersettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-browser-settings-response
                    'make-create-browser-settings-response))
 (common-lisp:defun make-create-browser-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key browser-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-identity-provider-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-identity-provider-request-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))
                        (identity-provider-type :initarg
                         :|identityProviderType| :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         %create-identity-provider-request-identity-provider-type
                         :initform
                         (common-lisp:error
                          ":identityprovidertype is required"))
                        (identity-provider-name :initarg
                         :|identityProviderName| :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         %create-identity-provider-request-identity-provider-name
                         :initform
                         (common-lisp:error
                          ":identityprovidername is required"))
                        (identity-provider-details :initarg
                         :|identityProviderDetails| :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor
                         %create-identity-provider-request-identity-provider-details
                         :initform
                         (common-lisp:error
                          ":identityproviderdetails is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-identity-provider-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-identity-provider-request
                    'make-create-identity-provider-request))
 (common-lisp:defun make-create-identity-provider-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn identity-provider-type
                     identity-provider-name identity-provider-details
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "identityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "identityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-identity-provider-response common-lisp:nil
                       ((identity-provider-arn :initarg :|identityProviderArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %create-identity-provider-response-identity-provider-arn
                         :initform
                         (common-lisp:error
                          ":identityproviderarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-identity-provider-response
                    'make-create-identity-provider-response))
 (common-lisp:defun make-create-identity-provider-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-settings-request common-lisp:nil
                       ((vpc-id :initarg :|vpcId| :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %create-network-settings-request-vpc-id :initform
                         (common-lisp:error ":vpcid is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-network-settings-request-tags :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor %create-network-settings-request-subnet-ids
                         :initform
                         (common-lisp:error ":subnetids is required"))
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor
                         %create-network-settings-request-security-group-ids
                         :initform
                         (common-lisp:error ":securitygroupids is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-network-settings-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-network-settings-request
                    'make-create-network-settings-request))
 (common-lisp:defun make-create-network-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id tags subnet-ids security-group-ids
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-settings-response common-lisp:nil
                       ((network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %create-network-settings-response-network-settings-arn
                         :initform
                         (common-lisp:error
                          ":networksettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-network-settings-response
                    'make-create-network-settings-response))
 (common-lisp:defun make-create-network-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portal-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-portal-request-tags :initform common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %create-portal-request-display-name
                         :initform common-lisp:nil)
                        (customer-managed-key :initarg :|customerManagedKey|
                         :type (common-lisp:or |keyArn| common-lisp:null)
                         :accessor %create-portal-request-customer-managed-key
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-portal-request-client-token
                         :initform common-lisp:nil)
                        (authentication-type :initarg :|authenticationType|
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %create-portal-request-authentication-type
                         :initform common-lisp:nil)
                        (additional-encryption-context :initarg
                         :|additionalEncryptionContext| :type
                         (common-lisp:or encryption-context-map
                                         common-lisp:null)
                         :accessor
                         %create-portal-request-additional-encryption-context
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-portal-request 'make-create-portal-request))
 (common-lisp:defun make-create-portal-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags display-name customer-managed-key
                     client-token authentication-type
                     additional-encryption-context)
   (common-lisp:apply #'common-lisp:make-instance 'create-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-encryption-context))
      (common-lisp:list
       (common-lisp:cons "additionalEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-key))
      (common-lisp:list
       (common-lisp:cons "customerManagedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-portal-response common-lisp:nil
                       ((portal-endpoint :initarg :|portalEndpoint| :type
                         (common-lisp:or portal-endpoint common-lisp:null)
                         :accessor %create-portal-response-portal-endpoint
                         :initform
                         (common-lisp:error ":portalendpoint is required"))
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-portal-response-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-portal-response 'make-create-portal-response))
 (common-lisp:defun make-create-portal-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-endpoint portal-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-endpoint))
      (common-lisp:list
       (common-lisp:cons "portalEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trust-store-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-trust-store-request-tags :initform
                         common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-trust-store-request-client-token
                         :initform common-lisp:nil)
                        (certificate-list :initarg :|certificateList| :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor %create-trust-store-request-certificate-list
                         :initform
                         (common-lisp:error ":certificatelist is required"))))
 (common-lisp:export
  (common-lisp:list 'create-trust-store-request
                    'make-create-trust-store-request))
 (common-lisp:defun make-create-trust-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-token certificate-list)
   (common-lisp:apply #'common-lisp:make-instance 'create-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-list))
      (common-lisp:list
       (common-lisp:cons "certificateList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trust-store-response common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-trust-store-response-trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-trust-store-response
                    'make-create-trust-store-response))
 (common-lisp:defun make-create-trust-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-access-logging-settings-request
                       common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-user-access-logging-settings-request-tags
                         :initform common-lisp:nil)
                        (kinesis-stream-arn :initarg :|kinesisStreamArn| :type
                         (common-lisp:or kinesis-stream-arn common-lisp:null)
                         :accessor
                         %create-user-access-logging-settings-request-kinesis-stream-arn
                         :initform
                         (common-lisp:error ":kinesisstreamarn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-user-access-logging-settings-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-user-access-logging-settings-request
                    'make-create-user-access-logging-settings-request))
 (common-lisp:defun make-create-user-access-logging-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags kinesis-stream-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-arn))
      (common-lisp:list
       (common-lisp:cons "kinesisStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-access-logging-settings-response
                       common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-user-access-logging-settings-response-user-access-logging-settings-arn
                         :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-user-access-logging-settings-response
                    'make-create-user-access-logging-settings-response))
 (common-lisp:defun make-create-user-access-logging-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-settings-request common-lisp:nil
                       ((upload-allowed :initarg :|uploadAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %create-user-settings-request-upload-allowed
                         :initform
                         (common-lisp:error ":uploadallowed is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-user-settings-request-tags :initform
                         common-lisp:nil)
                        (print-allowed :initarg :|printAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %create-user-settings-request-print-allowed
                         :initform
                         (common-lisp:error ":printallowed is required"))
                        (paste-allowed :initarg :|pasteAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %create-user-settings-request-paste-allowed
                         :initform
                         (common-lisp:error ":pasteallowed is required"))
                        (idle-disconnect-timeout-in-minutes :initarg
                         :|idleDisconnectTimeoutInMinutes| :type
                         (common-lisp:or idle-disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         %create-user-settings-request-idle-disconnect-timeout-in-minutes
                         :initform common-lisp:nil)
                        (download-allowed :initarg :|downloadAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         %create-user-settings-request-download-allowed
                         :initform
                         (common-lisp:error ":downloadallowed is required"))
                        (disconnect-timeout-in-minutes :initarg
                         :|disconnectTimeoutInMinutes| :type
                         (common-lisp:or disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         %create-user-settings-request-disconnect-timeout-in-minutes
                         :initform common-lisp:nil)
                        (copy-allowed :initarg :|copyAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %create-user-settings-request-copy-allowed
                         :initform
                         (common-lisp:error ":copyallowed is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-user-settings-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-user-settings-request
                    'make-create-user-settings-request))
 (common-lisp:defun make-create-user-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upload-allowed tags print-allowed
                     paste-allowed idle-disconnect-timeout-in-minutes
                     download-allowed disconnect-timeout-in-minutes
                     copy-allowed client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-allowed))
      (common-lisp:list
       (common-lisp:cons "copyAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "disconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-allowed))
      (common-lisp:list
       (common-lisp:cons "downloadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "idleDisconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paste-allowed))
      (common-lisp:list
       (common-lisp:cons "pasteAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'print-allowed))
      (common-lisp:list
       (common-lisp:cons "printAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-allowed))
      (common-lisp:list
       (common-lisp:cons "uploadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-settings-response common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-user-settings-response-user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-user-settings-response
                    'make-create-user-settings-response))
 (common-lisp:defun make-create-user-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-browser-settings-request common-lisp:nil
                       ((browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %delete-browser-settings-request-browser-settings-arn
                         :initform
                         (common-lisp:error
                          ":browsersettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-browser-settings-request
                    'make-delete-browser-settings-request))
 (common-lisp:defun make-delete-browser-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key browser-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-browser-settings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-browser-settings-response
                    'make-delete-browser-settings-response))
 (common-lisp:defun make-delete-browser-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-provider-request common-lisp:nil
                       ((identity-provider-arn :initarg :|identityProviderArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %delete-identity-provider-request-identity-provider-arn
                         :initform
                         (common-lisp:error
                          ":identityproviderarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-identity-provider-request
                    'make-delete-identity-provider-request))
 (common-lisp:defun make-delete-identity-provider-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-provider-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-identity-provider-response
                    'make-delete-identity-provider-response))
 (common-lisp:defun make-delete-identity-provider-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-settings-request common-lisp:nil
                       ((network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %delete-network-settings-request-network-settings-arn
                         :initform
                         (common-lisp:error
                          ":networksettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-network-settings-request
                    'make-delete-network-settings-request))
 (common-lisp:defun make-delete-network-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-settings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-network-settings-response
                    'make-delete-network-settings-response))
 (common-lisp:defun make-delete-network-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portal-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-portal-request-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-portal-request 'make-delete-portal-request))
 (common-lisp:defun make-delete-portal-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-portal-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-portal-response 'make-delete-portal-response))
 (common-lisp:defun make-delete-portal-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trust-store-request common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-trust-store-request-trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-trust-store-request
                    'make-delete-trust-store-request))
 (common-lisp:defun make-delete-trust-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trust-store-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-trust-store-response
                    'make-delete-trust-store-response))
 (common-lisp:defun make-delete-trust-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-access-logging-settings-request
                       common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-user-access-logging-settings-request-user-access-logging-settings-arn
                         :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-user-access-logging-settings-request
                    'make-delete-user-access-logging-settings-request))
 (common-lisp:defun make-delete-user-access-logging-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-access-logging-settings-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-user-access-logging-settings-response
                    'make-delete-user-access-logging-settings-response))
 (common-lisp:defun make-delete-user-access-logging-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-settings-request common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-user-settings-request-user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-user-settings-request
                    'make-delete-user-settings-request))
 (common-lisp:defun make-delete-user-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-settings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-user-settings-response
                    'make-delete-user-settings-response))
 (common-lisp:defun make-delete-user-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-browser-settings-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %disassociate-browser-settings-request-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-browser-settings-request
                    'make-disassociate-browser-settings-request))
 (common-lisp:defun make-disassociate-browser-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-browser-settings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-browser-settings-response
                    'make-disassociate-browser-settings-response))
 (common-lisp:defun make-disassociate-browser-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-network-settings-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %disassociate-network-settings-request-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-network-settings-request
                    'make-disassociate-network-settings-request))
 (common-lisp:defun make-disassociate-network-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-network-settings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-network-settings-response
                    'make-disassociate-network-settings-response))
 (common-lisp:defun make-disassociate-network-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-trust-store-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %disassociate-trust-store-request-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-trust-store-request
                    'make-disassociate-trust-store-request))
 (common-lisp:defun make-disassociate-trust-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-trust-store-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-trust-store-response
                    'make-disassociate-trust-store-response))
 (common-lisp:defun make-disassociate-trust-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-access-logging-settings-request
                       common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %disassociate-user-access-logging-settings-request-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-access-logging-settings-request
                    'make-disassociate-user-access-logging-settings-request))
 (common-lisp:defun make-disassociate-user-access-logging-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-access-logging-settings-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-user-access-logging-settings-response
                    'make-disassociate-user-access-logging-settings-response))
 (common-lisp:defun make-disassociate-user-access-logging-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-settings-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %disassociate-user-settings-request-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-settings-request
                    'make-disassociate-user-settings-request))
 (common-lisp:defun make-disassociate-user-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-settings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-user-settings-response
                    'make-disassociate-user-settings-response))
 (common-lisp:defun make-disassociate-user-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-settings-response))
   common-lisp:nil))
(common-lisp:deftype disconnect-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype enabled-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype encryption-context-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-encryption-context-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-browser-settings-request common-lisp:nil
                       ((browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %get-browser-settings-request-browser-settings-arn
                         :initform
                         (common-lisp:error
                          ":browsersettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-browser-settings-request
                    'make-get-browser-settings-request))
 (common-lisp:defun make-get-browser-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key browser-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-browser-settings-response common-lisp:nil
                       ((browser-settings :initarg :|browserSettings| :type
                         (common-lisp:or browser-settings common-lisp:null)
                         :accessor
                         %get-browser-settings-response-browser-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-browser-settings-response
                    'make-get-browser-settings-response))
 (common-lisp:defun make-get-browser-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key browser-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-settings))
      (common-lisp:list
       (common-lisp:cons "browserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-provider-request common-lisp:nil
                       ((identity-provider-arn :initarg :|identityProviderArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %get-identity-provider-request-identity-provider-arn
                         :initform
                         (common-lisp:error
                          ":identityproviderarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-identity-provider-request
                    'make-get-identity-provider-request))
 (common-lisp:defun make-get-identity-provider-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-provider-response common-lisp:nil
                       ((identity-provider :initarg :|identityProvider| :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         %get-identity-provider-response-identity-provider
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-identity-provider-response
                    'make-get-identity-provider-response))
 (common-lisp:defun make-get-identity-provider-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "identityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-settings-request common-lisp:nil
                       ((network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %get-network-settings-request-network-settings-arn
                         :initform
                         (common-lisp:error
                          ":networksettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-network-settings-request
                    'make-get-network-settings-request))
 (common-lisp:defun make-get-network-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-settings-response common-lisp:nil
                       ((network-settings :initarg :|networkSettings| :type
                         (common-lisp:or network-settings common-lisp:null)
                         :accessor
                         %get-network-settings-response-network-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-network-settings-response
                    'make-get-network-settings-response))
 (common-lisp:defun make-get-network-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "networkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portal-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-portal-request-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-portal-request 'make-get-portal-request))
 (common-lisp:defun make-get-portal-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portal-response common-lisp:nil
                       ((portal :initarg :|portal| :type
                         (common-lisp:or portal common-lisp:null) :accessor
                         %get-portal-response-portal :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-portal-response 'make-get-portal-response))
 (common-lisp:defun make-get-portal-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal)
   (common-lisp:apply #'common-lisp:make-instance 'get-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal))
      (common-lisp:list
       (common-lisp:cons "portal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portal-service-provider-metadata-request
                       common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-portal-service-provider-metadata-request-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-portal-service-provider-metadata-request
                    'make-get-portal-service-provider-metadata-request))
 (common-lisp:defun make-get-portal-service-provider-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-portal-service-provider-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-portal-service-provider-metadata-response
                       common-lisp:nil
                       ((service-provider-saml-metadata :initarg
                         :|serviceProviderSamlMetadata| :type
                         (common-lisp:or saml-metadata common-lisp:null)
                         :accessor
                         %get-portal-service-provider-metadata-response-service-provider-saml-metadata
                         :initform common-lisp:nil)
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-portal-service-provider-metadata-response-portal-arn
                         :initform
                         (common-lisp:error ":portalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-portal-service-provider-metadata-response
                    'make-get-portal-service-provider-metadata-response))
 (common-lisp:defun make-get-portal-service-provider-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-provider-saml-metadata
                     portal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-portal-service-provider-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-provider-saml-metadata))
      (common-lisp:list
       (common-lisp:cons "serviceProviderSamlMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-portal-service-provider-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-certificate-request common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-trust-store-certificate-request-trust-store-arn
                         :initform
                         (common-lisp:error ":truststorearn is required"))
                        (thumbprint :initarg :|thumbprint| :type
                         (common-lisp:or certificate-thumbprint
                                         common-lisp:null)
                         :accessor
                         %get-trust-store-certificate-request-thumbprint
                         :initform
                         (common-lisp:error ":thumbprint is required"))))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-certificate-request
                    'make-get-trust-store-certificate-request))
 (common-lisp:defun make-get-trust-store-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn thumbprint)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-trust-store-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-certificate-response common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-trust-store-certificate-response-trust-store-arn
                         :initform common-lisp:nil)
                        (certificate :initarg :|certificate| :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor
                         %get-trust-store-certificate-response-certificate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-certificate-response
                    'make-get-trust-store-certificate-response))
 (common-lisp:defun make-get-trust-store-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn certificate)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-trust-store-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-request common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-trust-store-request-trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-request 'make-get-trust-store-request))
 (common-lisp:defun make-get-trust-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-response common-lisp:nil
                       ((trust-store :initarg :|trustStore| :type
                         (common-lisp:or trust-store common-lisp:null)
                         :accessor %get-trust-store-response-trust-store
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-response 'make-get-trust-store-response))
 (common-lisp:defun make-get-trust-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store)
   (common-lisp:apply #'common-lisp:make-instance 'get-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store))
      (common-lisp:list
       (common-lisp:cons "trustStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-access-logging-settings-request common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-user-access-logging-settings-request-user-access-logging-settings-arn
                         :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-user-access-logging-settings-request
                    'make-get-user-access-logging-settings-request))
 (common-lisp:defun make-get-user-access-logging-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-access-logging-settings-response
                       common-lisp:nil
                       ((user-access-logging-settings :initarg
                         :|userAccessLoggingSettings| :type
                         (common-lisp:or user-access-logging-settings
                                         common-lisp:null)
                         :accessor
                         %get-user-access-logging-settings-response-user-access-logging-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-user-access-logging-settings-response
                    'make-get-user-access-logging-settings-response))
 (common-lisp:defun make-get-user-access-logging-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-settings-request common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-user-settings-request-user-settings-arn :initform
                         (common-lisp:error ":usersettingsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-user-settings-request
                    'make-get-user-settings-request))
 (common-lisp:defun make-get-user-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-settings-response common-lisp:nil
                       ((user-settings :initarg :|userSettings| :type
                         (common-lisp:or user-settings common-lisp:null)
                         :accessor %get-user-settings-response-user-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-user-settings-response
                    'make-get-user-settings-response))
 (common-lisp:defun make-get-user-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "userSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-provider common-lisp:nil
                       ((identity-provider-type :initarg
                         :|identityProviderType| :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor %identity-provider-identity-provider-type
                         :initform common-lisp:nil)
                        (identity-provider-name :initarg
                         :|identityProviderName| :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor %identity-provider-identity-provider-name
                         :initform common-lisp:nil)
                        (identity-provider-details :initarg
                         :|identityProviderDetails| :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor %identity-provider-identity-provider-details
                         :initform common-lisp:nil)
                        (identity-provider-arn :initarg :|identityProviderArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %identity-provider-identity-provider-arn :initform
                         (common-lisp:error
                          ":identityproviderarn is required"))))
 (common-lisp:export
  (common-lisp:list 'identity-provider 'make-identity-provider))
 (common-lisp:defun make-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider-type
                     identity-provider-name identity-provider-details
                     identity-provider-arn)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "identityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "identityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-provider-details () 'common-lisp:hash-table)
 (common-lisp:defun |make-identity-provider-details|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype identity-provider-list ()
   '(trivial-types:proper-list identity-provider-summary))
 (common-lisp:defun |make-identity-provider-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            identity-provider-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identity-provider-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identity-provider-summary common-lisp:nil
                       ((identity-provider-type :initarg
                         :|identityProviderType| :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         %identity-provider-summary-identity-provider-type
                         :initform common-lisp:nil)
                        (identity-provider-name :initarg
                         :|identityProviderName| :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         %identity-provider-summary-identity-provider-name
                         :initform common-lisp:nil)
                        (identity-provider-arn :initarg :|identityProviderArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %identity-provider-summary-identity-provider-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'identity-provider-summary
                    'make-identity-provider-summary))
 (common-lisp:defun make-identity-provider-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider-type
                     identity-provider-name identity-provider-arn)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-arn))
      (common-lisp:list
       (common-lisp:cons "identityProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "identityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-summary))
   common-lisp:nil))
(common-lisp:deftype identity-provider-type () 'common-lisp:string)
(common-lisp:deftype idle-disconnect-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (workspaces-web-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype kinesis-stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-browser-settings-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-browser-settings-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-browser-settings-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-browser-settings-request
                    'make-list-browser-settings-request))
 (common-lisp:defun make-list-browser-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-browser-settings-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-browser-settings-response-next-token
                         :initform common-lisp:nil)
                        (browser-settings :initarg :|browserSettings| :type
                         (common-lisp:or browser-settings-list
                                         common-lisp:null)
                         :accessor
                         %list-browser-settings-response-browser-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-browser-settings-response
                    'make-list-browser-settings-response))
 (common-lisp:defun make-list-browser-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token browser-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-settings))
      (common-lisp:list
       (common-lisp:cons "browserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-providers-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-identity-providers-request-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-identity-providers-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-identity-providers-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-identity-providers-request
                    'make-list-identity-providers-request))
 (common-lisp:defun make-list-identity-providers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-providers-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-identity-providers-response-next-token
                         :initform common-lisp:nil)
                        (identity-providers :initarg :|identityProviders| :type
                         (common-lisp:or identity-provider-list
                                         common-lisp:null)
                         :accessor
                         %list-identity-providers-response-identity-providers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-identity-providers-response
                    'make-list-identity-providers-response))
 (common-lisp:defun make-list-identity-providers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token identity-providers)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-providers))
      (common-lisp:list
       (common-lisp:cons "identityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-settings-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-network-settings-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-network-settings-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-network-settings-request
                    'make-list-network-settings-request))
 (common-lisp:defun make-list-network-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-settings-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-network-settings-response-next-token
                         :initform common-lisp:nil)
                        (network-settings :initarg :|networkSettings| :type
                         (common-lisp:or network-settings-list
                                         common-lisp:null)
                         :accessor
                         %list-network-settings-response-network-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-network-settings-response
                    'make-list-network-settings-response))
 (common-lisp:defun make-list-network-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token network-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "networkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portals-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-portals-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-portals-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-portals-request 'make-list-portals-request))
 (common-lisp:defun make-list-portals-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-portals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-portals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-portals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-portals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-portals-response common-lisp:nil
                       ((portals :initarg :|portals| :type
                         (common-lisp:or portal-list common-lisp:null)
                         :accessor %list-portals-response-portals :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-portals-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-portals-response 'make-list-portals-response))
 (common-lisp:defun make-list-portals-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portals next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-portals-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portals))
      (common-lisp:list
       (common-lisp:cons "portals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-trust-store-certificates-request common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-trust-store-certificates-request-trust-store-arn
                         :initform
                         (common-lisp:error ":truststorearn is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-trust-store-certificates-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-trust-store-certificates-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-trust-store-certificates-request
                    'make-list-trust-store-certificates-request))
 (common-lisp:defun make-list-trust-store-certificates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-trust-store-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-trust-store-certificates-response common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-trust-store-certificates-response-trust-store-arn
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-trust-store-certificates-response-next-token
                         :initform common-lisp:nil)
                        (certificate-list :initarg :|certificateList| :type
                         (common-lisp:or certificate-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-trust-store-certificates-response-certificate-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-trust-store-certificates-response
                    'make-list-trust-store-certificates-response))
 (common-lisp:defun make-list-trust-store-certificates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn next-token
                     certificate-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-trust-store-certificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-list))
      (common-lisp:list
       (common-lisp:cons "certificateList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-store-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-trust-stores-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-trust-stores-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-trust-stores-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-trust-stores-request
                    'make-list-trust-stores-request))
 (common-lisp:defun make-list-trust-stores-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-trust-stores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-trust-stores-response common-lisp:nil
                       ((trust-stores :initarg :|trustStores| :type
                         (common-lisp:or trust-store-summary-list
                                         common-lisp:null)
                         :accessor %list-trust-stores-response-trust-stores
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-trust-stores-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-trust-stores-response
                    'make-list-trust-stores-response))
 (common-lisp:defun make-list-trust-stores-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-stores next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-trust-stores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-stores))
      (common-lisp:list
       (common-lisp:cons "trustStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trust-stores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-access-logging-settings-request
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-user-access-logging-settings-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-user-access-logging-settings-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-user-access-logging-settings-request
                    'make-list-user-access-logging-settings-request))
 (common-lisp:defun make-list-user-access-logging-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-access-logging-settings-response
                       common-lisp:nil
                       ((user-access-logging-settings :initarg
                         :|userAccessLoggingSettings| :type
                         (common-lisp:or user-access-logging-settings-list
                                         common-lisp:null)
                         :accessor
                         %list-user-access-logging-settings-response-user-access-logging-settings
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-user-access-logging-settings-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-user-access-logging-settings-response
                    'make-list-user-access-logging-settings-response))
 (common-lisp:defun make-list-user-access-logging-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-settings-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-user-settings-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-user-settings-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-user-settings-request
                    'make-list-user-settings-request))
 (common-lisp:defun make-list-user-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-settings-response common-lisp:nil
                       ((user-settings :initarg :|userSettings| :type
                         (common-lisp:or user-settings-list common-lisp:null)
                         :accessor %list-user-settings-response-user-settings
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-user-settings-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-user-settings-response
                    'make-list-user-settings-response))
 (common-lisp:defun make-list-user-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "userSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-settings-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass network-settings common-lisp:nil
                       ((vpc-id :initarg :|vpcId| :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %network-settings-vpc-id :initform common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor %network-settings-subnet-ids :initform
                         common-lisp:nil)
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor %network-settings-security-group-ids
                         :initform common-lisp:nil)
                        (network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %network-settings-network-settings-arn :initform
                         (common-lisp:error ":networksettingsarn is required"))
                        (associated-portal-arns :initarg
                         :|associatedPortalArns| :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %network-settings-associated-portal-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-settings 'make-network-settings))
 (common-lisp:defun make-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id subnet-ids security-group-ids
                     network-settings-arn associated-portal-arns)
   (common-lisp:apply #'common-lisp:make-instance 'network-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-settings-list ()
   '(trivial-types:proper-list network-settings-summary))
 (common-lisp:defun |make-network-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            network-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-settings-summary common-lisp:nil
                       ((vpc-id :initarg :|vpcId| :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %network-settings-summary-vpc-id :initform
                         common-lisp:nil)
                        (network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %network-settings-summary-network-settings-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-settings-summary 'make-network-settings-summary))
 (common-lisp:defun make-network-settings-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id network-settings-arn)
   (common-lisp:apply #'common-lisp:make-instance 'network-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-settings-summary))
   common-lisp:nil))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass portal common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %portal-user-settings-arn :initform common-lisp:nil)
                        (user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %portal-user-access-logging-settings-arn :initform
                         common-lisp:nil)
                        (trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %portal-trust-store-arn :initform common-lisp:nil)
                        (status-reason :initarg :|statusReason| :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor %portal-status-reason :initform
                         common-lisp:nil)
                        (renderer-type :initarg :|rendererType| :type
                         (common-lisp:or renderer-type common-lisp:null)
                         :accessor %portal-renderer-type :initform
                         common-lisp:nil)
                        (portal-status :initarg :|portalStatus| :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor %portal-portal-status :initform
                         common-lisp:nil)
                        (portal-endpoint :initarg :|portalEndpoint| :type
                         (common-lisp:or portal-endpoint common-lisp:null)
                         :accessor %portal-portal-endpoint :initform
                         common-lisp:nil)
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %portal-portal-arn :initform common-lisp:nil)
                        (network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %portal-network-settings-arn :initform
                         common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %portal-display-name :initform
                         common-lisp:nil)
                        (creation-date :initarg :|creationDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %portal-creation-date :initform common-lisp:nil)
                        (browser-type :initarg :|browserType| :type
                         (common-lisp:or browser-type common-lisp:null)
                         :accessor %portal-browser-type :initform
                         common-lisp:nil)
                        (browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %portal-browser-settings-arn :initform
                         common-lisp:nil)
                        (authentication-type :initarg :|authenticationType|
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %portal-authentication-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'portal 'make-portal))
 (common-lisp:defun make-portal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn
                     user-access-logging-settings-arn trust-store-arn
                     status-reason renderer-type portal-status portal-endpoint
                     portal-arn network-settings-arn display-name creation-date
                     browser-type browser-settings-arn authentication-type)
   (common-lisp:apply #'common-lisp:make-instance 'portal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-type))
      (common-lisp:list
       (common-lisp:cons "browserType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-endpoint))
      (common-lisp:list
       (common-lisp:cons "portalEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renderer-type))
      (common-lisp:list
       (common-lisp:cons "rendererType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal))
   common-lisp:nil))
(common-lisp:deftype portal-endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype portal-list ()
   '(trivial-types:proper-list portal-summary))
 (common-lisp:defun |make-portal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list portal-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype portal-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass portal-summary common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %portal-summary-user-settings-arn :initform
                         common-lisp:nil)
                        (user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %portal-summary-user-access-logging-settings-arn
                         :initform common-lisp:nil)
                        (trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %portal-summary-trust-store-arn :initform
                         common-lisp:nil)
                        (renderer-type :initarg :|rendererType| :type
                         (common-lisp:or renderer-type common-lisp:null)
                         :accessor %portal-summary-renderer-type :initform
                         common-lisp:nil)
                        (portal-status :initarg :|portalStatus| :type
                         (common-lisp:or portal-status common-lisp:null)
                         :accessor %portal-summary-portal-status :initform
                         common-lisp:nil)
                        (portal-endpoint :initarg :|portalEndpoint| :type
                         (common-lisp:or portal-endpoint common-lisp:null)
                         :accessor %portal-summary-portal-endpoint :initform
                         common-lisp:nil)
                        (portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %portal-summary-portal-arn :initform common-lisp:nil)
                        (network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %portal-summary-network-settings-arn :initform
                         common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %portal-summary-display-name :initform
                         common-lisp:nil)
                        (creation-date :initarg :|creationDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %portal-summary-creation-date :initform
                         common-lisp:nil)
                        (browser-type :initarg :|browserType| :type
                         (common-lisp:or browser-type common-lisp:null)
                         :accessor %portal-summary-browser-type :initform
                         common-lisp:nil)
                        (browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %portal-summary-browser-settings-arn :initform
                         common-lisp:nil)
                        (authentication-type :initarg :|authenticationType|
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %portal-summary-authentication-type
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'portal-summary 'make-portal-summary))
 (common-lisp:defun make-portal-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn
                     user-access-logging-settings-arn trust-store-arn
                     renderer-type portal-status portal-endpoint portal-arn
                     network-settings-arn display-name creation-date
                     browser-type browser-settings-arn authentication-type)
   (common-lisp:apply #'common-lisp:make-instance 'portal-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'browser-settings-arn))
      (common-lisp:list
       (common-lisp:cons "browserSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-type))
      (common-lisp:list
       (common-lisp:cons "browserType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-settings-arn))
      (common-lisp:list
       (common-lisp:cons "networkSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-endpoint))
      (common-lisp:list
       (common-lisp:cons "portalEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renderer-type))
      (common-lisp:list
       (common-lisp:cons "rendererType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal-summary))
   common-lisp:nil))
(common-lisp:deftype quota-code () 'common-lisp:string)
(common-lisp:deftype renderer-type () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (workspaces-web-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype saml-metadata () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (workspaces-web-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype status-reason () 'common-lisp:string)
(common-lisp:deftype string-type () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-exception-message () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %tag-resource-request-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (workspaces-web-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (workspaces-web-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :|resourceName| :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass trust-store common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %trust-store-trust-store-arn :initform
                         common-lisp:nil)
                        (associated-portal-arns :initarg
                         :|associatedPortalArns| :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %trust-store-associated-portal-arns :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'trust-store 'make-trust-store))
 (common-lisp:defun make-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn associated-portal-arns)
   (common-lisp:apply #'common-lisp:make-instance 'trust-store
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trust-store))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trust-store))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trust-store))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass trust-store-summary common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %trust-store-summary-trust-store-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'trust-store-summary 'make-trust-store-summary))
 (common-lisp:defun make-trust-store-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:apply #'common-lisp:make-instance 'trust-store-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trust-store-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trust-store-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trust-store-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trust-store-summary-list ()
   '(trivial-types:proper-list trust-store-summary))
 (common-lisp:defun |make-trust-store-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-store-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-browser-settings-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-browser-settings-request-client-token
                         :initform common-lisp:nil)
                        (browser-settings-arn :initarg :|browserSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %update-browser-settings-request-browser-settings-arn
                         :initform
                         (common-lisp:error ":browsersettingsarn is required"))
                        (browser-policy :initarg :|browserPolicy| :type
                         (common-lisp:or browser-policy common-lisp:null)
                         :accessor
                         %update-browser-settings-request-browser-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-browser-settings-request
                    'make-update-browser-settings-request))
 (common-lisp:defun make-update-browser-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token browser-settings-arn
                     browser-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-browser-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-policy))
      (common-lisp:list
       (common-lisp:cons "browserPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-browser-settings-response common-lisp:nil
                       ((browser-settings :initarg :|browserSettings| :type
                         (common-lisp:or browser-settings common-lisp:null)
                         :accessor
                         %update-browser-settings-response-browser-settings
                         :initform
                         (common-lisp:error ":browsersettings is required"))))
 (common-lisp:export
  (common-lisp:list 'update-browser-settings-response
                    'make-update-browser-settings-response))
 (common-lisp:defun make-update-browser-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key browser-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-browser-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'browser-settings))
      (common-lisp:list
       (common-lisp:cons "browserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-browser-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-identity-provider-request common-lisp:nil
                       ((identity-provider-type :initarg
                         :|identityProviderType| :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         %update-identity-provider-request-identity-provider-type
                         :initform common-lisp:nil)
                        (identity-provider-name :initarg
                         :|identityProviderName| :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         %update-identity-provider-request-identity-provider-name
                         :initform common-lisp:nil)
                        (identity-provider-details :initarg
                         :|identityProviderDetails| :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor
                         %update-identity-provider-request-identity-provider-details
                         :initform common-lisp:nil)
                        (identity-provider-arn :initarg :|identityProviderArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %update-identity-provider-request-identity-provider-arn
                         :initform
                         (common-lisp:error
                          ":identityproviderarn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-identity-provider-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-identity-provider-request
                    'make-update-identity-provider-request))
 (common-lisp:defun make-update-identity-provider-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider-type
                     identity-provider-name identity-provider-details
                     identity-provider-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "identityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "identityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "identityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-identity-provider-response common-lisp:nil
                       ((identity-provider :initarg :|identityProvider| :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor
                         %update-identity-provider-response-identity-provider
                         :initform
                         (common-lisp:error ":identityprovider is required"))))
 (common-lisp:export
  (common-lisp:list 'update-identity-provider-response
                    'make-update-identity-provider-response))
 (common-lisp:defun make-update-identity-provider-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "identityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-settings-request common-lisp:nil
                       ((vpc-id :initarg :|vpcId| :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %update-network-settings-request-vpc-id :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor %update-network-settings-request-subnet-ids
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor
                         %update-network-settings-request-security-group-ids
                         :initform common-lisp:nil)
                        (network-settings-arn :initarg :|networkSettingsArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %update-network-settings-request-network-settings-arn
                         :initform
                         (common-lisp:error ":networksettingsarn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-network-settings-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-network-settings-request
                    'make-update-network-settings-request))
 (common-lisp:defun make-update-network-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id subnet-ids security-group-ids
                     network-settings-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-settings-response common-lisp:nil
                       ((network-settings :initarg :|networkSettings| :type
                         (common-lisp:or network-settings common-lisp:null)
                         :accessor
                         %update-network-settings-response-network-settings
                         :initform
                         (common-lisp:error ":networksettings is required"))))
 (common-lisp:export
  (common-lisp:list 'update-network-settings-response
                    'make-update-network-settings-response))
 (common-lisp:defun make-update-network-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "networkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portal-request common-lisp:nil
                       ((portal-arn :initarg :|portalArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-portal-request-portal-arn :initform
                         (common-lisp:error ":portalarn is required"))
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %update-portal-request-display-name
                         :initform common-lisp:nil)
                        (authentication-type :initarg :|authenticationType|
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %update-portal-request-authentication-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-portal-request 'make-update-portal-request))
 (common-lisp:defun make-update-portal-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal-arn display-name
                     authentication-type)
   (common-lisp:apply #'common-lisp:make-instance 'update-portal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-portal-response common-lisp:nil
                       ((portal :initarg :|portal| :type
                         (common-lisp:or portal common-lisp:null) :accessor
                         %update-portal-response-portal :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-portal-response 'make-update-portal-response))
 (common-lisp:defun make-update-portal-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key portal)
   (common-lisp:apply #'common-lisp:make-instance 'update-portal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal))
      (common-lisp:list
       (common-lisp:cons "portal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-trust-store-request common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-trust-store-request-trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-trust-store-request-client-token
                         :initform common-lisp:nil)
                        (certificates-to-delete :initarg
                         :|certificatesToDelete| :type
                         (common-lisp:or certificate-thumbprint-list
                                         common-lisp:null)
                         :accessor
                         %update-trust-store-request-certificates-to-delete
                         :initform common-lisp:nil)
                        (certificates-to-add :initarg :|certificatesToAdd|
                         :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         %update-trust-store-request-certificates-to-add
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-trust-store-request
                    'make-update-trust-store-request))
 (common-lisp:defun make-update-trust-store-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn client-token
                     certificates-to-delete certificates-to-add)
   (common-lisp:apply #'common-lisp:make-instance 'update-trust-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates-to-add))
      (common-lisp:list
       (common-lisp:cons "certificatesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificates-to-delete))
      (common-lisp:list
       (common-lisp:cons "certificatesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-trust-store-response common-lisp:nil
                       ((trust-store-arn :initarg :|trustStoreArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-trust-store-response-trust-store-arn :initform
                         (common-lisp:error ":truststorearn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-trust-store-response
                    'make-update-trust-store-response))
 (common-lisp:defun make-update-trust-store-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-trust-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "trustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trust-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-access-logging-settings-request
                       common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-user-access-logging-settings-request-user-access-logging-settings-arn
                         :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required"))
                        (kinesis-stream-arn :initarg :|kinesisStreamArn| :type
                         (common-lisp:or kinesis-stream-arn common-lisp:null)
                         :accessor
                         %update-user-access-logging-settings-request-kinesis-stream-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-user-access-logging-settings-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-user-access-logging-settings-request
                    'make-update-user-access-logging-settings-request))
 (common-lisp:defun make-update-user-access-logging-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings-arn
                     kinesis-stream-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-access-logging-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-arn))
      (common-lisp:list
       (common-lisp:cons "kinesisStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-access-logging-settings-response
                       common-lisp:nil
                       ((user-access-logging-settings :initarg
                         :|userAccessLoggingSettings| :type
                         (common-lisp:or user-access-logging-settings
                                         common-lisp:null)
                         :accessor
                         %update-user-access-logging-settings-response-user-access-logging-settings
                         :initform
                         (common-lisp:error
                          ":useraccessloggingsettings is required"))))
 (common-lisp:export
  (common-lisp:list 'update-user-access-logging-settings-response
                    'make-update-user-access-logging-settings-response))
 (common-lisp:defun make-update-user-access-logging-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-access-logging-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-access-logging-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-settings-request common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-user-settings-request-user-settings-arn
                         :initform
                         (common-lisp:error ":usersettingsarn is required"))
                        (upload-allowed :initarg :|uploadAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %update-user-settings-request-upload-allowed
                         :initform common-lisp:nil)
                        (print-allowed :initarg :|printAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %update-user-settings-request-print-allowed
                         :initform common-lisp:nil)
                        (paste-allowed :initarg :|pasteAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %update-user-settings-request-paste-allowed
                         :initform common-lisp:nil)
                        (idle-disconnect-timeout-in-minutes :initarg
                         :|idleDisconnectTimeoutInMinutes| :type
                         (common-lisp:or idle-disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         %update-user-settings-request-idle-disconnect-timeout-in-minutes
                         :initform common-lisp:nil)
                        (download-allowed :initarg :|downloadAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor
                         %update-user-settings-request-download-allowed
                         :initform common-lisp:nil)
                        (disconnect-timeout-in-minutes :initarg
                         :|disconnectTimeoutInMinutes| :type
                         (common-lisp:or disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         %update-user-settings-request-disconnect-timeout-in-minutes
                         :initform common-lisp:nil)
                        (copy-allowed :initarg :|copyAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %update-user-settings-request-copy-allowed
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-user-settings-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-user-settings-request
                    'make-update-user-settings-request))
 (common-lisp:defun make-update-user-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn upload-allowed
                     print-allowed paste-allowed
                     idle-disconnect-timeout-in-minutes download-allowed
                     disconnect-timeout-in-minutes copy-allowed client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-allowed))
      (common-lisp:list
       (common-lisp:cons "copyAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "disconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-allowed))
      (common-lisp:list
       (common-lisp:cons "downloadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "idleDisconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paste-allowed))
      (common-lisp:list
       (common-lisp:cons "pasteAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'print-allowed))
      (common-lisp:list
       (common-lisp:cons "printAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-allowed))
      (common-lisp:list
       (common-lisp:cons "uploadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-settings-response common-lisp:nil
                       ((user-settings :initarg :|userSettings| :type
                         (common-lisp:or user-settings common-lisp:null)
                         :accessor %update-user-settings-response-user-settings
                         :initform
                         (common-lisp:error ":usersettings is required"))))
 (common-lisp:export
  (common-lisp:list 'update-user-settings-response
                    'make-update-user-settings-response))
 (common-lisp:defun make-update-user-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "userSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-access-logging-settings common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %user-access-logging-settings-user-access-logging-settings-arn
                         :initform
                         (common-lisp:error
                          ":useraccessloggingsettingsarn is required"))
                        (kinesis-stream-arn :initarg :|kinesisStreamArn| :type
                         (common-lisp:or kinesis-stream-arn common-lisp:null)
                         :accessor
                         %user-access-logging-settings-kinesis-stream-arn
                         :initform common-lisp:nil)
                        (associated-portal-arns :initarg
                         :|associatedPortalArns| :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %user-access-logging-settings-associated-portal-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'user-access-logging-settings
                    'make-user-access-logging-settings))
 (common-lisp:defun make-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings-arn
                     kinesis-stream-arn associated-portal-arns)
   (common-lisp:apply #'common-lisp:make-instance 'user-access-logging-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-arn))
      (common-lisp:list
       (common-lisp:cons "kinesisStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-access-logging-settings-list ()
   '(trivial-types:proper-list user-access-logging-settings-summary))
 (common-lisp:defun |make-user-access-logging-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            user-access-logging-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-access-logging-settings-summary common-lisp:nil
                       ((user-access-logging-settings-arn :initarg
                         :|userAccessLoggingSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %user-access-logging-settings-summary-user-access-logging-settings-arn
                         :initform common-lisp:nil)
                        (kinesis-stream-arn :initarg :|kinesisStreamArn| :type
                         (common-lisp:or kinesis-stream-arn common-lisp:null)
                         :accessor
                         %user-access-logging-settings-summary-kinesis-stream-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'user-access-logging-settings-summary
                    'make-user-access-logging-settings-summary))
 (common-lisp:defun make-user-access-logging-settings-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-access-logging-settings-arn
                     kinesis-stream-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'user-access-logging-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-arn))
      (common-lisp:list
       (common-lisp:cons "kinesisStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-access-logging-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userAccessLoggingSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-access-logging-settings-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-settings common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %user-settings-user-settings-arn :initform
                         (common-lisp:error ":usersettingsarn is required"))
                        (upload-allowed :initarg :|uploadAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-upload-allowed :initform
                         common-lisp:nil)
                        (print-allowed :initarg :|printAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-print-allowed :initform
                         common-lisp:nil)
                        (paste-allowed :initarg :|pasteAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-paste-allowed :initform
                         common-lisp:nil)
                        (idle-disconnect-timeout-in-minutes :initarg
                         :|idleDisconnectTimeoutInMinutes| :type
                         (common-lisp:or idle-disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         %user-settings-idle-disconnect-timeout-in-minutes
                         :initform common-lisp:nil)
                        (download-allowed :initarg :|downloadAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-download-allowed :initform
                         common-lisp:nil)
                        (disconnect-timeout-in-minutes :initarg
                         :|disconnectTimeoutInMinutes| :type
                         (common-lisp:or disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor %user-settings-disconnect-timeout-in-minutes
                         :initform common-lisp:nil)
                        (copy-allowed :initarg :|copyAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-copy-allowed :initform
                         common-lisp:nil)
                        (associated-portal-arns :initarg
                         :|associatedPortalArns| :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %user-settings-associated-portal-arns :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user-settings 'make-user-settings))
 (common-lisp:defun make-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn upload-allowed
                     print-allowed paste-allowed
                     idle-disconnect-timeout-in-minutes download-allowed
                     disconnect-timeout-in-minutes copy-allowed
                     associated-portal-arns)
   (common-lisp:apply #'common-lisp:make-instance 'user-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-portal-arns))
      (common-lisp:list
       (common-lisp:cons "associatedPortalArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-allowed))
      (common-lisp:list
       (common-lisp:cons "copyAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "disconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-allowed))
      (common-lisp:list
       (common-lisp:cons "downloadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "idleDisconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paste-allowed))
      (common-lisp:list
       (common-lisp:cons "pasteAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'print-allowed))
      (common-lisp:list
       (common-lisp:cons "printAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-allowed))
      (common-lisp:list
       (common-lisp:cons "uploadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-settings-list ()
   '(trivial-types:proper-list user-settings-summary))
 (common-lisp:defun |make-user-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-settings-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-settings-summary common-lisp:nil
                       ((user-settings-arn :initarg :|userSettingsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %user-settings-summary-user-settings-arn :initform
                         common-lisp:nil)
                        (upload-allowed :initarg :|uploadAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-summary-upload-allowed
                         :initform common-lisp:nil)
                        (print-allowed :initarg :|printAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-summary-print-allowed
                         :initform common-lisp:nil)
                        (paste-allowed :initarg :|pasteAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-summary-paste-allowed
                         :initform common-lisp:nil)
                        (idle-disconnect-timeout-in-minutes :initarg
                         :|idleDisconnectTimeoutInMinutes| :type
                         (common-lisp:or idle-disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         %user-settings-summary-idle-disconnect-timeout-in-minutes
                         :initform common-lisp:nil)
                        (download-allowed :initarg :|downloadAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-summary-download-allowed
                         :initform common-lisp:nil)
                        (disconnect-timeout-in-minutes :initarg
                         :|disconnectTimeoutInMinutes| :type
                         (common-lisp:or disconnect-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         %user-settings-summary-disconnect-timeout-in-minutes
                         :initform common-lisp:nil)
                        (copy-allowed :initarg :|copyAllowed| :type
                         (common-lisp:or enabled-type common-lisp:null)
                         :accessor %user-settings-summary-copy-allowed
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'user-settings-summary 'make-user-settings-summary))
 (common-lisp:defun make-user-settings-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-settings-arn upload-allowed
                     print-allowed paste-allowed
                     idle-disconnect-timeout-in-minutes download-allowed
                     disconnect-timeout-in-minutes copy-allowed)
   (common-lisp:apply #'common-lisp:make-instance 'user-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-allowed))
      (common-lisp:list
       (common-lisp:cons "copyAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "disconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-allowed))
      (common-lisp:list
       (common-lisp:cons "downloadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "idleDisconnectTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paste-allowed))
      (common-lisp:list
       (common-lisp:cons "pasteAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'print-allowed))
      (common-lisp:list
       (common-lisp:cons "printAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-allowed))
      (common-lisp:list
       (common-lisp:cons "uploadAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings-arn))
      (common-lisp:list
       (common-lisp:cons "userSettingsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-settings-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (workspaces-web-error)
     ((field-list :initarg :|fieldList| :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))
                        (message :initarg :|message| :type
                         (common-lisp:or exception-message common-lisp:null)
                         :accessor %validation-exception-field-message
                         :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name message)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype |keyArn| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key browser-settings-arn portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable browser-settings-arn portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-browser-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/browserSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateBrowserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-browser-settings))
(common-lisp:progn
 (common-lisp:defun associate-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-settings-arn portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable network-settings-arn portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-network-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/networkSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateNetworkSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-network-settings))
(common-lisp:progn
 (common-lisp:defun associate-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/trustStores"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateTrustStore"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-trust-store))
(common-lisp:progn
 (common-lisp:defun associate-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn
                     user-access-logging-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable portal-arn user-access-logging-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/userAccessLoggingSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateUserAccessLoggingSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun associate-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn user-settings-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn user-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/userSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "AssociateUserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-user-settings))
(common-lisp:progn
 (common-lisp:defun create-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-encryption-context
                     browser-policy client-token customer-managed-key tags)
   (common-lisp:declare
    (common-lisp:ignorable additional-encryption-context browser-policy
     client-token customer-managed-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/browserSettings"
                                                        "CreateBrowserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-browser-settings))
(common-lisp:progn
 (common-lisp:defun create-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-provider-details
                     identity-provider-name identity-provider-type portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-provider-details
     identity-provider-name identity-provider-type portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/identityProviders"
                                                        "CreateIdentityProvider"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-identity-provider))
(common-lisp:progn
 (common-lisp:defun create-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token security-group-ids
                     subnet-ids tags vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token security-group-ids subnet-ids tags
     vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/networkSettings"
                                                        "CreateNetworkSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-network-settings))
(common-lisp:progn
 (common-lisp:defun create-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-encryption-context
                     authentication-type client-token customer-managed-key
                     display-name tags)
   (common-lisp:declare
    (common-lisp:ignorable additional-encryption-context authentication-type
     client-token customer-managed-key display-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/portals"
                                                        "CreatePortal"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-portal))
(common-lisp:progn
 (common-lisp:defun create-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-list client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable certificate-list client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/trustStores"
                                                        "CreateTrustStore"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-trust-store))
(common-lisp:progn
 (common-lisp:defun create-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token kinesis-stream-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token kinesis-stream-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/userAccessLoggingSettings"
                                                        "CreateUserAccessLoggingSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun create-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token copy-allowed
                     disconnect-timeout-in-minutes download-allowed
                     idle-disconnect-timeout-in-minutes paste-allowed
                     print-allowed tags upload-allowed)
   (common-lisp:declare
    (common-lisp:ignorable client-token copy-allowed
     disconnect-timeout-in-minutes download-allowed
     idle-disconnect-timeout-in-minutes paste-allowed print-allowed tags
     upload-allowed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/userSettings"
                                                        "CreateUserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user-settings))
(common-lisp:progn
 (common-lisp:defun delete-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key browser-settings-arn)
   (common-lisp:declare (common-lisp:ignorable browser-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/browserSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'browser-settings-arn)))
                                                        "DeleteBrowserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-browser-settings))
(common-lisp:progn
 (common-lisp:defun delete-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-provider-arn)
   (common-lisp:declare (common-lisp:ignorable identity-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identityProviders/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'identity-provider-arn)))
                                                        "DeleteIdentityProvider"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-identity-provider))
(common-lisp:progn
 (common-lisp:defun delete-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-settings-arn)
   (common-lisp:declare (common-lisp:ignorable network-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/networkSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'network-settings-arn)))
                                                        "DeleteNetworkSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-network-settings))
(common-lisp:progn
 (common-lisp:defun delete-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DeletePortal"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-portal))
(common-lisp:progn
 (common-lisp:defun delete-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "DeleteTrustStore"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-trust-store))
(common-lisp:progn
 (common-lisp:defun delete-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-access-logging-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable user-access-logging-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userAccessLoggingSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-access-logging-settings-arn)))
                                                        "DeleteUserAccessLoggingSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun delete-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-settings-arn)
   (common-lisp:declare (common-lisp:ignorable user-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-settings-arn)))
                                                        "DeleteUserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-browser-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/browserSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateBrowserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-browser-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-network-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/networkSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateNetworkSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-network-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/trustStores"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateTrustStore"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-trust-store))
(common-lisp:progn
 (common-lisp:defun disassociate-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/userAccessLoggingSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateUserAccessLoggingSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun disassociate-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-user-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/userSettings"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "DisassociateUserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-user-settings))
(common-lisp:progn
 (common-lisp:defun get-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key browser-settings-arn)
   (common-lisp:declare (common-lisp:ignorable browser-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/browserSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'browser-settings-arn)))
                                                        "GetBrowserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-browser-settings))
(common-lisp:progn
 (common-lisp:defun get-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-provider-arn)
   (common-lisp:declare (common-lisp:ignorable identity-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identityProviders/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'identity-provider-arn)))
                                                        "GetIdentityProvider"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-identity-provider))
(common-lisp:progn
 (common-lisp:defun get-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-settings-arn)
   (common-lisp:declare (common-lisp:ignorable network-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/networkSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'network-settings-arn)))
                                                        "GetNetworkSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-network-settings))
(common-lisp:progn
 (common-lisp:defun get-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "GetPortal"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-portal))
(common-lisp:progn
 (common-lisp:defun get-portal-service-provider-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-arn)
   (common-lisp:declare (common-lisp:ignorable portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-portal-service-provider-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portalIdp/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "GetPortalServiceProviderMetadata"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-portal-service-provider-metadata))
(common-lisp:progn
 (common-lisp:defun get-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "GetTrustStore"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-trust-store))
(common-lisp:progn
 (common-lisp:defun get-trust-store-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thumbprint trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable thumbprint trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-trust-store-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A/certificate"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "GetTrustStoreCertificate"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-trust-store-certificate))
(common-lisp:progn
 (common-lisp:defun get-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-access-logging-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable user-access-logging-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userAccessLoggingSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-access-logging-settings-arn)))
                                                        "GetUserAccessLoggingSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun get-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-settings-arn)
   (common-lisp:declare (common-lisp:ignorable user-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-settings-arn)))
                                                        "GetUserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-settings))
(common-lisp:progn
 (common-lisp:defun list-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/browserSettings"
                                                        "ListBrowserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-browser-settings))
(common-lisp:progn
 (common-lisp:defun list-identity-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identity-providers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A/identityProviders"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "ListIdentityProviders"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-identity-providers))
(common-lisp:progn
 (common-lisp:defun list-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/networkSettings"
                                                        "ListNetworkSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-network-settings))
(common-lisp:progn
 (common-lisp:defun list-portals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-portals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/portals"
                                                        "ListPortals"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-portals))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'resource-arn)))
                                                        "ListTagsForResource"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-trust-store-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token trust-store-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-trust-store-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A/certificates"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "ListTrustStoreCertificates"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-trust-store-certificates))
(common-lisp:progn
 (common-lisp:defun list-trust-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-trust-stores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/trustStores"
                                                        "ListTrustStores"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-trust-stores))
(common-lisp:progn
 (common-lisp:defun list-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/userAccessLoggingSettings"
                                                        "ListUserAccessLoggingSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun list-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/userSettings"
                                                        "ListUserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-user-settings))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable client-token resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'resource-arn)))
                                                        "TagResource"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'resource-arn)))
                                                        "UntagResource"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-browser-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key browser-policy browser-settings-arn
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable browser-policy browser-settings-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-browser-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/browserSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'browser-settings-arn)))
                                                        "UpdateBrowserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-browser-settings))
(common-lisp:progn
 (common-lisp:defun update-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token identity-provider-arn
                     identity-provider-details identity-provider-name
                     identity-provider-type)
   (common-lisp:declare
    (common-lisp:ignorable client-token identity-provider-arn
     identity-provider-details identity-provider-name identity-provider-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identityProviders/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'identity-provider-arn)))
                                                        "UpdateIdentityProvider"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-identity-provider))
(common-lisp:progn
 (common-lisp:defun update-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token network-settings-arn
                     security-group-ids subnet-ids vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token network-settings-arn security-group-ids
     subnet-ids vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-network-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/networkSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'network-settings-arn)))
                                                        "UpdateNetworkSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-network-settings))
(common-lisp:progn
 (common-lisp:defun update-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-type display-name
                     portal-arn)
   (common-lisp:declare
    (common-lisp:ignorable authentication-type display-name portal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'portal-arn)))
                                                        "UpdatePortal"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-portal))
(common-lisp:progn
 (common-lisp:defun update-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificates-to-add
                     certificates-to-delete client-token trust-store-arn)
   (common-lisp:declare
    (common-lisp:ignorable certificates-to-add certificates-to-delete
     client-token trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trust-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/trustStores/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'trust-store-arn)))
                                                        "UpdateTrustStore"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-trust-store))
(common-lisp:progn
 (common-lisp:defun update-user-access-logging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token kinesis-stream-arn
                     user-access-logging-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token kinesis-stream-arn
     user-access-logging-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-access-logging-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userAccessLoggingSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-access-logging-settings-arn)))
                                                        "UpdateUserAccessLoggingSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-access-logging-settings))
(common-lisp:progn
 (common-lisp:defun update-user-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token copy-allowed
                     disconnect-timeout-in-minutes download-allowed
                     idle-disconnect-timeout-in-minutes paste-allowed
                     print-allowed upload-allowed user-settings-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token copy-allowed
     disconnect-timeout-in-minutes download-allowed
     idle-disconnect-timeout-in-minutes paste-allowed print-allowed
     upload-allowed user-settings-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-web-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/userSettings/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'user-settings-arn)))
                                                        "UpdateUserSettings"
                                                        "2020-07-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-settings))
