;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/workdocs/api
  (:use)
  (:nicknames #:aws/workdocs)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/workdocs/api)
(common-lisp:progn
 (common-lisp:define-condition workdocs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'workdocs-error))
(common-lisp:progn
 (common-lisp:defclass workdocs-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "workdocs" :api-version
                        "2016-05-01" :host-prefix "workdocs" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'workdocs-request))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConflictingOperationException" . conflicting-operation-exception)
    ("CustomMetadataLimitExceededException"
     . custom-metadata-limit-exceeded-exception)
    ("DeactivatingLastSystemUserException"
     . deactivating-last-system-user-exception)
    ("DocumentLockedForCommentsException"
     . document-locked-for-comments-exception)
    ("DraftUploadOutOfSyncException" . draft-upload-out-of-sync-exception)
    ("EntityAlreadyExistsException" . entity-already-exists-exception)
    ("EntityNotExistsException" . entity-not-exists-exception)
    ("FailedDependencyException" . failed-dependency-exception)
    ("IllegalUserStateException" . illegal-user-state-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("InvalidCommentOperationException" . invalid-comment-operation-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("InvalidPasswordException" . invalid-password-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ProhibitedStateException" . prohibited-state-exception)
    ("RequestedEntityTooLargeException" . requested-entity-too-large-exception)
    ("ResourceAlreadyCheckedOutException"
     . resource-already-checked-out-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("StorageLimitExceededException" . storage-limit-exceeded-exception)
    ("StorageLimitWillExceedException" . storage-limit-will-exceed-exception)
    ("TooManyLabelsException" . too-many-labels-exception)
    ("TooManySubscriptionsException" . too-many-subscriptions-exception)
    ("UnauthorizedOperationException" . unauthorized-operation-exception)
    ("UnauthorizedResourceAccessException"
     . unauthorized-resource-access-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (abort-document-version-upload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-abort-document-version-upload-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or document-version-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'abort-document-version-upload-request
                    'make-abort-document-version-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-document-version-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-document-version-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-document-version-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activate-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-activate-user-request-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activate-user-request 'make-activate-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activate-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-activate-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activate-user-response 'make-activate-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity (:copier common-lisp:nil) (:conc-name "struct-shape-activity-"))
   (type common-lisp:nil :type (common-lisp:or activity-type common-lisp:null))
   (time-stamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (is-indirect-activity common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null))
   (organization-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (initiator common-lisp:nil :type
    (common-lisp:or user-metadata common-lisp:null))
   (participants common-lisp:nil :type
    (common-lisp:or participants common-lisp:null))
   (resource-metadata common-lisp:nil :type
    (common-lisp:or resource-metadata common-lisp:null))
   (original-parent common-lisp:nil :type
    (common-lisp:or resource-metadata common-lisp:null))
   (comment-metadata common-lisp:nil :type
    (common-lisp:or comment-metadata common-lisp:null)))
 (common-lisp:export (common-lisp:list 'activity 'make-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-stamp))
      (common-lisp:list
       (common-lisp:cons "TimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-indirect-activity))
      (common-lisp:list
       (common-lisp:cons "IsIndirectActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiator))
      (common-lisp:list
       (common-lisp:cons "Initiator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participants))
      (common-lisp:list
       (common-lisp:cons "Participants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-metadata))
      (common-lisp:list
       (common-lisp:cons "ResourceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-parent))
      (common-lisp:list
       (common-lisp:cons "OriginalParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-metadata))
      (common-lisp:list
       (common-lisp:cons "CommentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity))
   common-lisp:nil))
(common-lisp:deftype activity-names-filter-type () 'common-lisp:string)
(common-lisp:deftype activity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-resource-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-resource-permissions-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (principals (common-lisp:error ":principals is required") :type
    (common-lisp:or share-principal-list common-lisp:null))
   (notification-options common-lisp:nil :type
    (common-lisp:or notification-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-resource-permissions-request
                    'make-add-resource-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-options))
      (common-lisp:list
       (common-lisp:cons "NotificationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-resource-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-resource-permissions-response-"))
   (share-results common-lisp:nil :type
    (common-lisp:or share-results-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-resource-permissions-response
                    'make-add-resource-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-results))
      (common-lisp:list
       (common-lisp:cons "ShareResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-response))
   common-lisp:nil))
(common-lisp:deftype additional-response-field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-response-fields-list ()
   '(trivial-types:proper-list additional-response-field-type))
 (common-lisp:defun make-additional-response-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            additional-response-field-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype authentication-header-type () 'common-lisp:string)
(common-lisp:deftype boolean-enum-type () 'common-lisp:string)
(common-lisp:deftype boolean-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (comment (:copier common-lisp:nil) (:conc-name "struct-shape-comment-"))
   (comment-id (common-lisp:error ":comment-id is required") :type
    (common-lisp:or comment-id-type common-lisp:null))
   (parent-id common-lisp:nil :type
    (common-lisp:or comment-id-type common-lisp:null))
   (thread-id common-lisp:nil :type
    (common-lisp:or comment-id-type common-lisp:null))
   (text common-lisp:nil :type
    (common-lisp:or comment-text-type common-lisp:null))
   (contributor common-lisp:nil :type (common-lisp:or user common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or comment-status-type common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or comment-visibility-type common-lisp:null))
   (recipient-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'comment 'make-comment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input comment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input comment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-id))
      (common-lisp:list
       (common-lisp:cons "CommentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-id))
      (common-lisp:list
       (common-lisp:cons "ThreadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contributor))
      (common-lisp:list
       (common-lisp:cons "Contributor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient-id))
      (common-lisp:list
       (common-lisp:cons "RecipientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input comment))
   common-lisp:nil))
(common-lisp:deftype comment-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype comment-list () '(trivial-types:proper-list comment))
 (common-lisp:defun make-comment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list comment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (comment-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-comment-metadata-"))
   (comment-id common-lisp:nil :type
    (common-lisp:or comment-id-type common-lisp:null))
   (contributor common-lisp:nil :type (common-lisp:or user common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (comment-status common-lisp:nil :type
    (common-lisp:or comment-status-type common-lisp:null))
   (recipient-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (contributor-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'comment-metadata 'make-comment-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input comment-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input comment-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-id))
      (common-lisp:list
       (common-lisp:cons "CommentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contributor))
      (common-lisp:list
       (common-lisp:cons "Contributor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-status))
      (common-lisp:list
       (common-lisp:cons "CommentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient-id))
      (common-lisp:list
       (common-lisp:cons "RecipientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contributor-id))
      (common-lisp:list
       (common-lisp:cons "ContributorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input comment-metadata))
   common-lisp:nil))
(common-lisp:deftype comment-status-type () 'common-lisp:string)
(common-lisp:deftype comment-text-type () 'common-lisp:string)
(common-lisp:deftype comment-visibility-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflicting-operation-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflicting-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflicting-operation-exception
                    'conflicting-operation-exception-message)))
(common-lisp:deftype content-category-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-comment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-comment-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (parent-id common-lisp:nil :type
    (common-lisp:or comment-id-type common-lisp:null))
   (thread-id common-lisp:nil :type
    (common-lisp:or comment-id-type common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or comment-text-type common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or comment-visibility-type common-lisp:null))
   (notify-collaborators common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-comment-request 'make-create-comment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-id))
      (common-lisp:list
       (common-lisp:cons "ThreadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-collaborators))
      (common-lisp:list
       (common-lisp:cons "NotifyCollaborators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-comment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-comment-response-"))
   (comment common-lisp:nil :type (common-lisp:or comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-comment-response 'make-create-comment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-metadata-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (custom-metadata (common-lisp:error ":custom-metadata is required") :type
    (common-lisp:or custom-metadata-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-metadata-request
                    'make-create-custom-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-metadata))
      (common-lisp:list
       (common-lisp:cons "CustomMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-metadata-response-")))
 (common-lisp:export
  (common-lisp:list 'create-custom-metadata-response
                    'make-create-custom-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-folder-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (parent-folder-id (common-lisp:error ":parent-folder-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-folder-request 'make-create-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-folder-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-folder-response-"))
   (metadata common-lisp:nil :type
    (common-lisp:or folder-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-folder-response 'make-create-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-labels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-labels-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (labels (common-lisp:error ":labels is required") :type
    (common-lisp:or shared-labels common-lisp:null))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-labels-request 'make-create-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-labels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-labels-response-")))
 (common-lisp:export
  (common-lisp:list 'create-labels-response 'make-create-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-notification-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-notification-subscription-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (endpoint (common-lisp:error ":endpoint is required") :type
    (common-lisp:or subscription-end-point-type common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or subscription-protocol-type common-lisp:null))
   (subscription-type (common-lisp:error ":subscription-type is required")
    :type (common-lisp:or subscription-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-notification-subscription-request
                    'make-create-notification-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-type))
      (common-lisp:list
       (common-lisp:cons "SubscriptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-notification-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-notification-subscription-response-"))
   (subscription common-lisp:nil :type
    (common-lisp:or subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-notification-subscription-response
                    'make-create-notification-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "Subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-request-"))
   (organization-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (username (common-lisp:error ":username is required") :type
    (common-lisp:or username-type common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or email-address-type common-lisp:null))
   (given-name (common-lisp:error ":given-name is required") :type
    (common-lisp:or user-attribute-value-type common-lisp:null))
   (surname (common-lisp:error ":surname is required") :type
    (common-lisp:or user-attribute-value-type common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password-type common-lisp:null))
   (time-zone-id common-lisp:nil :type
    (common-lisp:or time-zone-id-type common-lisp:null))
   (storage-rule common-lisp:nil :type
    (common-lisp:or storage-rule-type common-lisp:null))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-rule))
      (common-lisp:list
       (common-lisp:cons "StorageRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-metadata-key-list ()
   '(trivial-types:proper-list custom-metadata-key-type))
 (common-lisp:defun make-custom-metadata-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-metadata-key-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-metadata-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition custom-metadata-limit-exceeded-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       custom-metadata-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'custom-metadata-limit-exceeded-exception
                    'custom-metadata-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype custom-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun make-custom-metadata-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype custom-metadata-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (date-range-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-range-type-"))
   (start-value common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-value common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'date-range-type 'make-date-range-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-range-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-range-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-value))
      (common-lisp:list
       (common-lisp:cons "EndValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-range-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deactivate-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deactivate-user-request-"))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deactivate-user-request 'make-deactivate-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deactivating-last-system-user-exception
     (workdocs-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deactivating-last-system-user-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-comment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-comment-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (comment-id (common-lisp:error ":comment-id is required") :type
    (common-lisp:or comment-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-comment-request 'make-delete-comment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-comment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-comment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-comment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-metadata-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (keys common-lisp:nil :type
    (common-lisp:or custom-metadata-key-list common-lisp:null))
   (delete-all common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-metadata-request
                    'make-delete-custom-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-metadata-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-custom-metadata-response
                    'make-delete-custom-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-document-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-document-request 'make-delete-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-document-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-document-version-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (delete-prior-versions
    (common-lisp:error ":delete-prior-versions is required") :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-document-version-request
                    'make-delete-document-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-folder-contents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-folder-contents-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-contents-request
                    'make-delete-folder-contents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-contents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-contents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-folder-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-request 'make-delete-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-labels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-labels-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (labels common-lisp:nil :type
    (common-lisp:or shared-labels common-lisp:null))
   (delete-all common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-labels-request 'make-delete-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-labels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-labels-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-labels-response 'make-delete-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-notification-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-notification-subscription-request-"))
   (subscription-id (common-lisp:error ":subscription-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-notification-subscription-request
                    'make-delete-notification-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-activities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-activities-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (organization-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (activity-types common-lisp:nil :type
    (common-lisp:or activity-names-filter-type common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (include-indirect-activities common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or search-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-activities-request
                    'make-describe-activities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-activities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-activities-response-"))
   (user-activities common-lisp:nil :type
    (common-lisp:or user-activities common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or search-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-activities-response
                    'make-describe-activities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-activities))
      (common-lisp:list
       (common-lisp:cons "UserActivities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-comments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-comments-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-comments-request
                    'make-describe-comments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-comments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-comments-response-"))
   (comments common-lisp:nil :type
    (common-lisp:or comment-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-comments-response
                    'make-describe-comments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comments))
      (common-lisp:list
       (common-lisp:cons "Comments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-document-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-document-versions-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (include common-lisp:nil :type
    (common-lisp:or field-names-type common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or field-names-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-document-versions-request
                    'make-describe-document-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-document-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-document-versions-response-"))
   (document-versions common-lisp:nil :type
    (common-lisp:or document-version-metadata-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-document-versions-response
                    'make-describe-document-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-versions))
      (common-lisp:list
       (common-lisp:cons "DocumentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-folder-contents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-folder-contents-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (sort common-lisp:nil :type
    (common-lisp:or resource-sort-type common-lisp:null))
   (order common-lisp:nil :type (common-lisp:or order-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or folder-content-type common-lisp:null))
   (include common-lisp:nil :type
    (common-lisp:or field-names-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-contents-request
                    'make-describe-folder-contents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-folder-contents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-folder-contents-response-"))
   (folders common-lisp:nil :type
    (common-lisp:or folder-metadata-list common-lisp:null))
   (documents common-lisp:nil :type
    (common-lisp:or document-metadata-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-contents-response
                    'make-describe-folder-contents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folders))
      (common-lisp:list
       (common-lisp:cons "Folders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "Documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-groups-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (search-query (common-lisp:error ":search-query is required") :type
    (common-lisp:or search-query-type common-lisp:null))
   (organization-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker-type common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or positive-integer-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-groups-request 'make-describe-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-groups-response-"))
   (groups common-lisp:nil :type
    (common-lisp:or group-metadata-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-groups-response 'make-describe-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notification-subscriptions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-notification-subscriptions-request-"))
   (organization-id (common-lisp:error ":organization-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notification-subscriptions-request
                    'make-describe-notification-subscriptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notification-subscriptions-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-notification-subscriptions-response-"))
   (subscriptions common-lisp:nil :type
    (common-lisp:or subscription-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notification-subscriptions-response
                    'make-describe-notification-subscriptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriptions))
      (common-lisp:list
       (common-lisp:cons "Subscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-permissions-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-permissions-request
                    'make-describe-resource-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-permissions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-permissions-response-"))
   (principals common-lisp:nil :type
    (common-lisp:or principal-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-permissions-response
                    'make-describe-resource-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-root-folders-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-root-folders-request-"))
   (authentication-token
    (common-lisp:error ":authentication-token is required") :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-root-folders-request
                    'make-describe-root-folders-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-root-folders-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-root-folders-response-"))
   (folders common-lisp:nil :type
    (common-lisp:or folder-metadata-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-root-folders-response
                    'make-describe-root-folders-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folders))
      (common-lisp:list
       (common-lisp:cons "Folders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-users-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (organization-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (user-ids common-lisp:nil :type
    (common-lisp:or user-ids-type common-lisp:null))
   (query common-lisp:nil :type
    (common-lisp:or search-query-type common-lisp:null))
   (include common-lisp:nil :type
    (common-lisp:or user-filter-type common-lisp:null))
   (order common-lisp:nil :type (common-lisp:or order-type common-lisp:null))
   (sort common-lisp:nil :type
    (common-lisp:or user-sort-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or field-names-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-users-request 'make-describe-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-users-response-"))
   (users common-lisp:nil :type
    (common-lisp:or organization-user-list common-lisp:null))
   (total-number-of-users common-lisp:nil :type
    (common-lisp:or size-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-users-response 'make-describe-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-users))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   common-lisp:nil))
(common-lisp:deftype document-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition document-locked-for-comments-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       document-locked-for-comments-exception-message)))
 (common-lisp:export
  (common-lisp:list 'document-locked-for-comments-exception
                    'document-locked-for-comments-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (document-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-metadata-"))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (creator-id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (parent-folder-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (modified-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (latest-version-metadata common-lisp:nil :type
    (common-lisp:or document-version-metadata common-lisp:null))
   (resource-state common-lisp:nil :type
    (common-lisp:or resource-state-type common-lisp:null))
   (labels common-lisp:nil :type
    (common-lisp:or shared-labels common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-metadata 'make-document-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "CreatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-metadata))
      (common-lisp:list
       (common-lisp:cons "LatestVersionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "ResourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-metadata-list ()
   '(trivial-types:proper-list document-metadata))
 (common-lisp:defun make-document-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-source-url-map () 'common-lisp:hash-table)
 (common-lisp:defun make-document-source-url-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype document-status-type () 'common-lisp:string)
(common-lisp:deftype document-thumbnail-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-thumbnail-url-map () 'common-lisp:hash-table)
 (common-lisp:defun make-document-thumbnail-url-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype document-version-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (document-version-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-version-metadata-"))
   (id common-lisp:nil :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or document-content-type common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size-type common-lisp:null))
   (signature common-lisp:nil :type
    (common-lisp:or hash-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or document-status-type common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (modified-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (content-created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (content-modified-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (creator-id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (thumbnail common-lisp:nil :type
    (common-lisp:or document-thumbnail-url-map common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or document-source-url-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-version-metadata
                    'make-document-version-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-version-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-version-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-created-timestamp))
      (common-lisp:list
       (common-lisp:cons "ContentCreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ContentModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "CreatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail))
      (common-lisp:list
       (common-lisp:cons "Thumbnail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-version-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-version-metadata-list ()
   '(trivial-types:proper-list document-version-metadata))
 (common-lisp:defun make-document-version-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-version-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition draft-upload-out-of-sync-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       draft-upload-out-of-sync-exception-message)))
 (common-lisp:export
  (common-lisp:list 'draft-upload-out-of-sync-exception
                    'draft-upload-out-of-sync-exception-message)))
(common-lisp:deftype email-address-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-already-exists-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-already-exists-exception
                    'entity-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:deftype entity-id-list () '(trivial-types:proper-list id-type))
 (common-lisp:defun make-entity-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition entity-not-exists-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-not-exists-exception-message)
      (entity-ids :initarg :entity-ids :initform common-lisp:nil :reader
       entity-not-exists-exception-entity-ids)))
 (common-lisp:export
  (common-lisp:list 'entity-not-exists-exception
                    'entity-not-exists-exception-message
                    'entity-not-exists-exception-entity-ids)))
(common-lisp:deftype error-message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition failed-dependency-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       failed-dependency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'failed-dependency-exception
                    'failed-dependency-exception-message)))
(common-lisp:deftype field-names-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filters (:copier common-lisp:nil) (:conc-name "struct-shape-filters-"))
   (text-locales common-lisp:nil :type
    (common-lisp:or text-locale-type-list common-lisp:null))
   (content-categories common-lisp:nil :type
    (common-lisp:or search-content-category-type-list common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or search-resource-type-list common-lisp:null))
   (labels common-lisp:nil :type
    (common-lisp:or search-label-list common-lisp:null))
   (principals common-lisp:nil :type
    (common-lisp:or search-principal-type-list common-lisp:null))
   (ancestor-ids common-lisp:nil :type
    (common-lisp:or search-ancestor-id-list common-lisp:null))
   (search-collection-types common-lisp:nil :type
    (common-lisp:or search-collection-type-list common-lisp:null))
   (size-range common-lisp:nil :type
    (common-lisp:or long-range-type common-lisp:null))
   (created-range common-lisp:nil :type
    (common-lisp:or date-range-type common-lisp:null))
   (modified-range common-lisp:nil :type
    (common-lisp:or date-range-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filters 'make-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-locales))
      (common-lisp:list
       (common-lisp:cons "TextLocales"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-categories))
      (common-lisp:list
       (common-lisp:cons "ContentCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ancestor-ids))
      (common-lisp:list
       (common-lisp:cons "AncestorIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'search-collection-types))
      (common-lisp:list
       (common-lisp:cons "SearchCollectionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-range))
      (common-lisp:list
       (common-lisp:cons "SizeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-range))
      (common-lisp:list
       (common-lisp:cons "CreatedRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-range))
      (common-lisp:list
       (common-lisp:cons "ModifiedRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filters))
   common-lisp:nil))
(common-lisp:deftype folder-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (folder-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-folder-metadata-"))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (creator-id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (parent-folder-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (modified-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (resource-state common-lisp:nil :type
    (common-lisp:or resource-state-type common-lisp:null))
   (signature common-lisp:nil :type
    (common-lisp:or hash-type common-lisp:null))
   (labels common-lisp:nil :type
    (common-lisp:or shared-labels common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size-type common-lisp:null))
   (latest-version-size common-lisp:nil :type
    (common-lisp:or size-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'folder-metadata 'make-folder-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "CreatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "ResourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-size))
      (common-lisp:list
       (common-lisp:cons "LatestVersionSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-metadata-list ()
   '(trivial-types:proper-list folder-metadata))
 (common-lisp:defun make-folder-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-current-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-current-user-request-"))
   (authentication-token
    (common-lisp:error ":authentication-token is required") :type
    (common-lisp:or authentication-header-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-current-user-request 'make-get-current-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-current-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-current-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-current-user-response
                    'make-get-current-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-path-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-path-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or field-names-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-path-request
                    'make-get-document-path-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-path-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-path-response-"))
   (path common-lisp:nil :type
    (common-lisp:or resource-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-path-response
                    'make-get-document-path-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (include-custom-metadata common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-request 'make-get-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-response-"))
   (metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (custom-metadata common-lisp:nil :type
    (common-lisp:or custom-metadata-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-response 'make-get-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-metadata))
      (common-lisp:list
       (common-lisp:cons "CustomMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-version-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or field-names-type common-lisp:null))
   (include-custom-metadata common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-version-request
                    'make-get-document-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-document-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-document-version-response-"))
   (metadata common-lisp:nil :type
    (common-lisp:or document-version-metadata common-lisp:null))
   (custom-metadata common-lisp:nil :type
    (common-lisp:or custom-metadata-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-document-version-response
                    'make-get-document-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-metadata))
      (common-lisp:list
       (common-lisp:cons "CustomMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-folder-path-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-folder-path-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or field-names-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-folder-path-request 'make-get-folder-path-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-folder-path-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-folder-path-response-"))
   (path common-lisp:nil :type
    (common-lisp:or resource-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-folder-path-response 'make-get-folder-path-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-folder-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (include-custom-metadata common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-folder-request 'make-get-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-folder-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-folder-response-"))
   (metadata common-lisp:nil :type
    (common-lisp:or folder-metadata common-lisp:null))
   (custom-metadata common-lisp:nil :type
    (common-lisp:or custom-metadata-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-folder-response 'make-get-folder-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-metadata))
      (common-lisp:list
       (common-lisp:cons "CustomMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resources-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (collection-type common-lisp:nil :type
    (common-lisp:or resource-collection-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resources-request 'make-get-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resources-response-"))
   (folders common-lisp:nil :type
    (common-lisp:or folder-metadata-list common-lisp:null))
   (documents common-lisp:nil :type
    (common-lisp:or document-metadata-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or page-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resources-response 'make-get-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folders))
      (common-lisp:list
       (common-lisp:cons "Folders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "Documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-metadata-"))
   (id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or group-name-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-metadata 'make-group-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-metadata-list ()
   '(trivial-types:proper-list group-metadata))
 (common-lisp:defun make-group-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype group-name-type () 'common-lisp:string)
(common-lisp:deftype hash-type () 'common-lisp:string)
(common-lisp:deftype header-name-type () 'common-lisp:string)
(common-lisp:deftype header-value-type () 'common-lisp:string)
(common-lisp:deftype id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition illegal-user-state-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-user-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-user-state-exception
                    'illegal-user-state-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (initiate-document-version-upload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-initiate-document-version-upload-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (content-created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (content-modified-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or document-content-type common-lisp:null))
   (document-size-in-bytes common-lisp:nil :type
    (common-lisp:or size-type common-lisp:null))
   (parent-folder-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'initiate-document-version-upload-request
                    'make-initiate-document-version-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-created-timestamp))
      (common-lisp:list
       (common-lisp:cons "ContentCreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ContentModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "DocumentSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (initiate-document-version-upload-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-initiate-document-version-upload-response-"))
   (metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (upload-metadata common-lisp:nil :type
    (common-lisp:or upload-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'initiate-document-version-upload-response
                    'make-initiate-document-version-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-metadata))
      (common-lisp:list
       (common-lisp:cons "UploadMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-comment-operation-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-comment-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-comment-operation-exception
                    'invalid-comment-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-operation-exception
                    'invalid-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-password-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-password-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-password-exception
                    'invalid-password-exception-message)))
(common-lisp:deftype language-code-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype limit-type () 'common-lisp:integer)
(common-lisp:deftype locale-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (long-range-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-long-range-type-"))
   (start-value common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null))
   (end-value common-lisp:nil :type
    (common-lisp:or long-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'long-range-type 'make-long-range-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input long-range-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input long-range-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-value))
      (common-lisp:list
       (common-lisp:cons "EndValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input long-range-type))
   common-lisp:nil))
(common-lisp:deftype long-type () 'common-lisp:integer)
(common-lisp:deftype marker-type () 'common-lisp:string)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:deftype next-marker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-options-"))
   (send-email common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null))
   (email-message common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-options 'make-notification-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-email))
      (common-lisp:list
       (common-lisp:cons "SendEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-message))
      (common-lisp:list
       (common-lisp:cons "EmailMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-options))
   common-lisp:nil))
(common-lisp:deftype order-by-field-type () 'common-lisp:string)
(common-lisp:deftype order-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organization-user-list ()
   '(trivial-types:proper-list user))
 (common-lisp:defun make-organization-user-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-marker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (participants (:copier common-lisp:nil)
      (:conc-name "struct-shape-participants-"))
   (users common-lisp:nil :type
    (common-lisp:or user-metadata-list common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or group-metadata-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'participants 'make-participants))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input participants))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input participants))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input participants))
   common-lisp:nil))
(common-lisp:deftype password-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (permission-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-permission-info-"))
   (role common-lisp:nil :type (common-lisp:or role-type common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or role-permission-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'permission-info 'make-permission-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype permission-info-list ()
   '(trivial-types:proper-list permission-info))
 (common-lisp:defun make-permission-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype positive-integer-type () 'common-lisp:integer)
(common-lisp:deftype positive-size-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (principal (:copier common-lisp:nil)
      (:conc-name "struct-shape-principal-"))
   (id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or principal-type common-lisp:null))
   (roles common-lisp:nil :type
    (common-lisp:or permission-info-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'principal 'make-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-list () '(trivial-types:proper-list principal))
 (common-lisp:defun make-principal-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype principal-role-type () 'common-lisp:string)
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition prohibited-state-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       prohibited-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'prohibited-state-exception
                    'prohibited-state-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-all-resource-permissions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-all-resource-permissions-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-all-resource-permissions-request
                    'make-remove-all-resource-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-resource-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-resource-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-resource-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-resource-permission-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-resource-permission-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (principal-id (common-lisp:error ":principal-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (principal-type common-lisp:nil :type
    (common-lisp:or principal-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-resource-permission-request
                    'make-remove-resource-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-resource-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-resource-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-resource-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition requested-entity-too-large-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       requested-entity-too-large-exception-message)))
 (common-lisp:export
  (common-lisp:list 'requested-entity-too-large-exception
                    'requested-entity-too-large-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-already-checked-out-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-checked-out-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-checked-out-exception
                    'resource-already-checked-out-exception-message)))
(common-lisp:deftype resource-collection-type () 'common-lisp:string)
(common-lisp:deftype resource-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-metadata-"))
   (type common-lisp:nil :type (common-lisp:or resource-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (original-name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or user-metadata common-lisp:null))
   (parent-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-metadata 'make-resource-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-name))
      (common-lisp:list
       (common-lisp:cons "OriginalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-metadata))
   common-lisp:nil))
(common-lisp:deftype resource-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-path (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-path-"))
   (components common-lisp:nil :type
    (common-lisp:or resource-path-component-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-path 'make-resource-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "Components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-path-component (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-path-component-"))
   (id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-path-component 'make-resource-path-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-path-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-path-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-path-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-path-component-list ()
   '(trivial-types:proper-list resource-path-component))
 (common-lisp:defun make-resource-path-component-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-path-component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-sort-type () 'common-lisp:string)
(common-lisp:deftype resource-state-type () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (response-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-response-item-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or response-item-type common-lisp:null))
   (web-url common-lisp:nil :type
    (common-lisp:or response-item-web-url common-lisp:null))
   (document-metadata common-lisp:nil :type
    (common-lisp:or document-metadata common-lisp:null))
   (folder-metadata common-lisp:nil :type
    (common-lisp:or folder-metadata common-lisp:null))
   (comment-metadata common-lisp:nil :type
    (common-lisp:or comment-metadata common-lisp:null))
   (document-version-metadata common-lisp:nil :type
    (common-lisp:or document-version-metadata common-lisp:null)))
 (common-lisp:export (common-lisp:list 'response-item 'make-response-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-url))
      (common-lisp:list
       (common-lisp:cons "WebUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-metadata))
      (common-lisp:list
       (common-lisp:cons "FolderMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-metadata))
      (common-lisp:list
       (common-lisp:cons "CommentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-version-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentVersionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-item))
   common-lisp:nil))
(common-lisp:deftype response-item-type () 'common-lisp:string)
(common-lisp:deftype response-item-web-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype response-items-list ()
   '(trivial-types:proper-list response-item))
 (common-lisp:defun make-response-items-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list response-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-document-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-document-versions-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-document-versions-request
                    'make-restore-document-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-document-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-document-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-document-versions-request))
   common-lisp:nil))
(common-lisp:deftype role-permission-type () 'common-lisp:string)
(common-lisp:deftype role-type () 'common-lisp:string)
(common-lisp:deftype search-ancestor-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-ancestor-id-list ()
   '(trivial-types:proper-list search-ancestor-id))
 (common-lisp:defun make-search-ancestor-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-ancestor-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-collection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-collection-type-list ()
   '(trivial-types:proper-list search-collection-type))
 (common-lisp:defun make-search-collection-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-collection-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype search-content-category-type-list ()
   '(trivial-types:proper-list content-category-type))
 (common-lisp:defun make-search-content-category-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-category-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-label-list ()
   '(trivial-types:proper-list search-label))
 (common-lisp:defun make-search-label-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-label))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-marker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-principal-role-list ()
   '(trivial-types:proper-list principal-role-type))
 (common-lisp:defun make-search-principal-role-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-role-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-principal-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-principal-type-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (roles common-lisp:nil :type
    (common-lisp:or search-principal-role-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-principal-type 'make-search-principal-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-principal-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-principal-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-principal-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-principal-type-list ()
   '(trivial-types:proper-list search-principal-type))
 (common-lisp:defun make-search-principal-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-principal-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-query-scope-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-query-scope-type-list ()
   '(trivial-types:proper-list search-query-scope-type))
 (common-lisp:defun make-search-query-scope-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-query-scope-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-query-type () 'common-lisp:string)
(common-lisp:deftype search-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-resource-type-list ()
   '(trivial-types:proper-list search-resource-type))
 (common-lisp:defun make-search-resource-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (query-text common-lisp:nil :type
    (common-lisp:or search-query-type common-lisp:null))
   (query-scopes common-lisp:nil :type
    (common-lisp:or search-query-scope-type-list common-lisp:null))
   (organization-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (additional-response-fields common-lisp:nil :type
    (common-lisp:or additional-response-fields-list common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null))
   (order-by common-lisp:nil :type
    (common-lisp:or search-result-sort-list common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or search-results-limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or next-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-request 'make-search-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-text))
      (common-lisp:list
       (common-lisp:cons "QueryText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-scopes))
      (common-lisp:list
       (common-lisp:cons "QueryScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-response-fields))
      (common-lisp:list
       (common-lisp:cons "AdditionalResponseFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "OrderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-resources-response-"))
   (items common-lisp:nil :type
    (common-lisp:or response-items-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or next-marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-resources-response
                    'make-search-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-result-sort-list ()
   '(trivial-types:proper-list search-sort-result))
 (common-lisp:defun make-search-result-sort-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-sort-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-results-limit-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (search-sort-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-sort-result-"))
   (field common-lisp:nil :type
    (common-lisp:or order-by-field-type common-lisp:null))
   (order common-lisp:nil :type (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-sort-result 'make-search-sort-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-sort-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-sort-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-sort-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (share-principal (:copier common-lisp:nil)
      (:conc-name "struct-shape-share-principal-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or principal-type common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'share-principal 'make-share-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype share-principal-list ()
   '(trivial-types:proper-list share-principal))
 (common-lisp:defun make-share-principal-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list share-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (share-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-share-result-"))
   (principal-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (invitee-principal-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or share-status-type common-lisp:null))
   (share-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'share-result 'make-share-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invitee-principal-id))
      (common-lisp:list
       (common-lisp:cons "InviteePrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype share-results-list ()
   '(trivial-types:proper-list share-result))
 (common-lisp:defun make-share-results-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list share-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype share-status-type () 'common-lisp:string)
(common-lisp:deftype shared-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype shared-labels ()
   '(trivial-types:proper-list shared-label))
 (common-lisp:defun make-shared-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shared-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype signed-header-map () 'common-lisp:hash-table)
 (common-lisp:defun make-signed-header-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype size-type () 'common-lisp:integer)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition storage-limit-exceeded-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       storage-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'storage-limit-exceeded-exception
                    'storage-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition storage-limit-will-exceed-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       storage-limit-will-exceed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'storage-limit-will-exceed-exception
                    'storage-limit-will-exceed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-rule-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-rule-type-"))
   (storage-allocated-in-bytes common-lisp:nil :type
    (common-lisp:or positive-size-type common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or storage-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-rule-type 'make-storage-rule-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-rule-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-rule-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-allocated-in-bytes))
      (common-lisp:list
       (common-lisp:cons "StorageAllocatedInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-rule-type))
   common-lisp:nil))
(common-lisp:deftype storage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscription-"))
   (subscription-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (end-point common-lisp:nil :type
    (common-lisp:or subscription-end-point-type common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or subscription-protocol-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subscription 'make-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "SubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-point))
      (common-lisp:list
       (common-lisp:cons "EndPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscription))
   common-lisp:nil))
(common-lisp:deftype subscription-end-point-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subscription-list ()
   '(trivial-types:proper-list subscription))
 (common-lisp:defun make-subscription-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscription))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-protocol-type () 'common-lisp:string)
(common-lisp:deftype subscription-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype text-locale-type-list ()
   '(trivial-types:proper-list language-code-type))
 (common-lisp:defun make-text-locale-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time-zone-id-type () 'common-lisp:string)
(common-lisp:deftype timestamp-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-labels-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-labels-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-labels-exception
                    'too-many-labels-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-subscriptions-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-subscriptions-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-subscriptions-exception
                    'too-many-subscriptions-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-operation-exception
     (workdocs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unauthorized-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-resource-access-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-resource-access-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-resource-access-exception
                    'unauthorized-resource-access-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-document-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-document-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (parent-folder-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (resource-state common-lisp:nil :type
    (common-lisp:or resource-state-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-document-request 'make-update-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "ResourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-document-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-document-version-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or document-version-id-type common-lisp:null))
   (version-status common-lisp:nil :type
    (common-lisp:or document-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-document-version-request
                    'make-update-document-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-status))
      (common-lisp:list
       (common-lisp:cons "VersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-folder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-folder-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (folder-id (common-lisp:error ":folder-id is required") :type
    (common-lisp:or resource-id-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (parent-folder-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (resource-state common-lisp:nil :type
    (common-lisp:or resource-state-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-folder-request 'make-update-folder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "ResourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-request-"))
   (authentication-token common-lisp:nil :type
    (common-lisp:or authentication-header-type common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or id-type common-lisp:null))
   (given-name common-lisp:nil :type
    (common-lisp:or user-attribute-value-type common-lisp:null))
   (surname common-lisp:nil :type
    (common-lisp:or user-attribute-value-type common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or user-type common-lisp:null))
   (storage-rule common-lisp:nil :type
    (common-lisp:or storage-rule-type common-lisp:null))
   (time-zone-id common-lisp:nil :type
    (common-lisp:or time-zone-id-type common-lisp:null))
   (locale common-lisp:nil :type (common-lisp:or locale-type common-lisp:null))
   (grant-poweruser-privileges common-lisp:nil :type
    (common-lisp:or boolean-enum-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-rule))
      (common-lisp:list
       (common-lisp:cons "StorageRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grant-poweruser-privileges))
      (common-lisp:list
       (common-lisp:cons "GrantPoweruserPrivileges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-metadata-"))
   (upload-url common-lisp:nil :type
    (common-lisp:or url-type common-lisp:null))
   (signed-headers common-lisp:nil :type
    (common-lisp:or signed-header-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'upload-metadata 'make-upload-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-url))
      (common-lisp:list
       (common-lisp:cons "UploadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-headers))
      (common-lisp:list
       (common-lisp:cons "SignedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-metadata))
   common-lisp:nil))
(common-lisp:deftype url-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user (:copier common-lisp:nil) (:conc-name "struct-shape-user-"))
   (id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or username-type common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or email-address-type common-lisp:null))
   (given-name common-lisp:nil :type
    (common-lisp:or user-attribute-value-type common-lisp:null))
   (surname common-lisp:nil :type
    (common-lisp:or user-attribute-value-type common-lisp:null))
   (organization-id common-lisp:nil :type
    (common-lisp:or id-type common-lisp:null))
   (root-folder-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (recycle-bin-folder-id common-lisp:nil :type
    (common-lisp:or resource-id-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or user-status-type common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or user-type common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (modified-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (time-zone-id common-lisp:nil :type
    (common-lisp:or time-zone-id-type common-lisp:null))
   (locale common-lisp:nil :type (common-lisp:or locale-type common-lisp:null))
   (storage common-lisp:nil :type
    (common-lisp:or user-storage-metadata common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-folder-id))
      (common-lisp:list
       (common-lisp:cons "RootFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recycle-bin-folder-id))
      (common-lisp:list
       (common-lisp:cons "RecycleBinFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-activities () '(trivial-types:proper-list activity))
 (common-lisp:defun make-user-activities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-attribute-value-type () 'common-lisp:string)
(common-lisp:deftype user-filter-type () 'common-lisp:string)
(common-lisp:deftype user-ids-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-metadata-"))
   (id common-lisp:nil :type (common-lisp:or id-type common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or username-type common-lisp:null))
   (given-name common-lisp:nil :type
    (common-lisp:or user-attribute-value-type common-lisp:null))
   (surname common-lisp:nil :type
    (common-lisp:or user-attribute-value-type common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or email-address-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-metadata 'make-user-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-metadata-list ()
   '(trivial-types:proper-list user-metadata))
 (common-lisp:defun make-user-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-sort-type () 'common-lisp:string)
(common-lisp:deftype user-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-storage-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-storage-metadata-"))
   (storage-utilized-in-bytes common-lisp:nil :type
    (common-lisp:or size-type common-lisp:null))
   (storage-rule common-lisp:nil :type
    (common-lisp:or storage-rule-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-storage-metadata 'make-user-storage-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-storage-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-storage-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-utilized-in-bytes))
      (common-lisp:list
       (common-lisp:cons "StorageUtilizedInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-rule))
      (common-lisp:list
       (common-lisp:cons "StorageRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-storage-metadata))
   common-lisp:nil))
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:deftype username-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun abort-document-version-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-abort-document-version-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "AbortDocumentVersionUpload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'abort-document-version-upload))
(common-lisp:progn
 (common-lisp:defun activate-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id authentication-token)
   (common-lisp:declare (common-lisp:ignorable user-id authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/users/~A/activation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "ActivateUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-user))
(common-lisp:progn
 (common-lisp:defun add-resource-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     principals notification-options)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id principals
     notification-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-resource-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "AddResourcePermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-resource-permissions))
(common-lisp:progn
 (common-lisp:defun create-comment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id parent-id thread-id text visibility
                     notify-collaborators)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id
     parent-id thread-id text visibility notify-collaborators))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-comment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A/comment"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "CreateComment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-comment))
(common-lisp:progn
 (common-lisp:defun create-custom-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     version-id custom-metadata)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id version-id
     custom-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/customMetadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "CreateCustomMetadata"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-metadata))
(common-lisp:progn
 (common-lisp:defun create-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token name
                     parent-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token name parent-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/api/v1/folders"
                                                        "CreateFolder"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-folder))
(common-lisp:progn
 (common-lisp:defun create-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id labels authentication-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-id labels authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/labels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "CreateLabels"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-labels))
(common-lisp:progn
 (common-lisp:defun create-notification-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id endpoint protocol
                     subscription-type)
   (common-lisp:declare
    (common-lisp:ignorable organization-id endpoint protocol
     subscription-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-notification-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/organizations/~A/subscriptions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'organization-id))))
                                                        "CreateNotificationSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-notification-subscription))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id username email-address
                     given-name surname password time-zone-id storage-rule
                     authentication-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-id username email-address given-name
     surname password time-zone-id storage-rule authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/api/v1/users"
                                                        "CreateUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun deactivate-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id authentication-token)
   (common-lisp:declare (common-lisp:ignorable user-id authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/users/~A/activation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeactivateUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-user))
(common-lisp:progn
 (common-lisp:defun delete-comment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id comment-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id
     comment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-comment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A/comment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'comment-id))))
                                                        "DeleteComment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-comment))
(common-lisp:progn
 (common-lisp:defun delete-custom-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     version-id keys delete-all)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id version-id keys
     delete-all))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/customMetadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "DeleteCustomMetadata"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-metadata))
(common-lisp:progn
 (common-lisp:defun delete-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "DeleteDocument"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-document))
(common-lisp:progn
 (common-lisp:defun delete-document-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id delete-prior-versions)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id
     delete-prior-versions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-document-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documentVersions/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "DeleteDocumentVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-document-version))
(common-lisp:progn
 (common-lisp:defun delete-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id)
   (common-lisp:declare (common-lisp:ignorable authentication-token folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DeleteFolder"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-folder))
(common-lisp:progn
 (common-lisp:defun delete-folder-contents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id)
   (common-lisp:declare (common-lisp:ignorable authentication-token folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-folder-contents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DeleteFolderContents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-folder-contents))
(common-lisp:progn
 (common-lisp:defun delete-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id authentication-token labels
                     delete-all)
   (common-lisp:declare
    (common-lisp:ignorable resource-id authentication-token labels delete-all))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/labels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "DeleteLabels"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-labels))
(common-lisp:progn
 (common-lisp:defun delete-notification-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-id organization-id)
   (common-lisp:declare
    (common-lisp:ignorable subscription-id organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-notification-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/organizations/~A/subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'organization-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscription-id))))
                                                        "DeleteNotificationSubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-notification-subscription))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token user-id)
   (common-lisp:declare (common-lisp:ignorable authentication-token user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeleteUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun describe-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token start-time end-time
                     organization-id activity-types resource-id user-id
                     include-indirect-activities limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token start-time end-time
     organization-id activity-types resource-id user-id
     include-indirect-activities limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-activities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/api/v1/activities"
                                                        "DescribeActivities"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-activities))
(common-lisp:progn
 (common-lisp:defun describe-comments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id limit
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-comments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A/comments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "DescribeComments"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-comments))
(common-lisp:progn
 (common-lisp:defun describe-document-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id marker
                     limit include fields)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id marker limit
     include fields))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-document-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "DescribeDocumentVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-document-versions))
(common-lisp:progn
 (common-lisp:defun describe-folder-contents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id sort order
                     limit marker type include)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token folder-id sort order limit
     marker type include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-folder-contents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DescribeFolderContents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-folder-contents))
(common-lisp:progn
 (common-lisp:defun describe-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token search-query
                     organization-id marker limit)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token search-query organization-id
     marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/api/v1/groups"
                                                        "DescribeGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-groups))
(common-lisp:progn
 (common-lisp:defun describe-notification-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id marker limit)
   (common-lisp:declare (common-lisp:ignorable organization-id marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-notification-subscriptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/organizations/~A/subscriptions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'organization-id))))
                                                        "DescribeNotificationSubscriptions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-notification-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-resource-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     principal-id limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id principal-id limit
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-resource-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "DescribeResourcePermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource-permissions))
(common-lisp:progn
 (common-lisp:defun describe-root-folders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-root-folders-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/api/v1/me/root"
                                                        "DescribeRootFolders"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-root-folders))
(common-lisp:progn
 (common-lisp:defun describe-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token organization-id
                     user-ids query include order sort marker limit fields)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token organization-id user-ids query
     include order sort marker limit fields))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/api/v1/users"
                                                        "DescribeUsers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-users))
(common-lisp:progn
 (common-lisp:defun get-current-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token)
   (common-lisp:declare (common-lisp:ignorable authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-current-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/api/v1/me"
                                                        "GetCurrentUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-current-user))
(common-lisp:progn
 (common-lisp:defun get-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     include-custom-metadata)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id
     include-custom-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "GetDocument"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document))
(common-lisp:progn
 (common-lisp:defun get-document-path
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id limit
                     fields marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id limit fields
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-document-path-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/path"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "GetDocumentPath"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document-path))
(common-lisp:progn
 (common-lisp:defun get-document-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id fields include-custom-metadata)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id fields
     include-custom-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-document-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "GetDocumentVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document-version))
(common-lisp:progn
 (common-lisp:defun get-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id
                     include-custom-metadata)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token folder-id
     include-custom-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "GetFolder"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-folder))
(common-lisp:progn
 (common-lisp:defun get-folder-path
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id limit
                     fields marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token folder-id limit fields marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-folder-path-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A/path"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "GetFolderPath"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-folder-path))
(common-lisp:progn
 (common-lisp:defun get-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token user-id
                     collection-type limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token user-id collection-type limit
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/api/v1/resources"
                                                        "GetResources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resources))
(common-lisp:progn
 (common-lisp:defun initiate-document-version-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token id name
                     content-created-timestamp content-modified-timestamp
                     content-type document-size-in-bytes parent-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token id name
     content-created-timestamp content-modified-timestamp content-type
     document-size-in-bytes parent-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-initiate-document-version-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/api/v1/documents"
                                                        "InitiateDocumentVersionUpload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'initiate-document-version-upload))
(common-lisp:progn
 (common-lisp:defun remove-all-resource-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-all-resource-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "RemoveAllResourcePermissions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-all-resource-permissions))
(common-lisp:progn
 (common-lisp:defun remove-resource-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     principal-id principal-type)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id principal-id
     principal-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-resource-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/permissions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "RemoveResourcePermission"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-resource-permission))
(common-lisp:progn
 (common-lisp:defun restore-document-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-document-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documentVersions/restore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "RestoreDocumentVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-document-versions))
(common-lisp:progn
 (common-lisp:defun search-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token query-text
                     query-scopes organization-id additional-response-fields
                     filters order-by limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token query-text query-scopes
     organization-id additional-response-fields filters order-by limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/api/v1/search"
                                                        "SearchResources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-resources))
(common-lisp:progn
 (common-lisp:defun update-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id name
                     parent-folder-id resource-state)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id name
     parent-folder-id resource-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "UpdateDocument"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-document))
(common-lisp:progn
 (common-lisp:defun update-document-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id version-status)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id
     version-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-document-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "UpdateDocumentVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-document-version))
(common-lisp:progn
 (common-lisp:defun update-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id name
                     parent-folder-id resource-state)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token folder-id name parent-folder-id
     resource-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "UpdateFolder"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-folder))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token user-id given-name
                     surname type storage-rule time-zone-id locale
                     grant-poweruser-privileges)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token user-id given-name surname type
     storage-rule time-zone-id locale grant-poweruser-privileges))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUser"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
