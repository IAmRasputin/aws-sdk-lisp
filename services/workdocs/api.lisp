;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/workdocs/api
  (:use)
  (:nicknames #:aws/workdocs)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/workdocs/api)
(common-lisp:progn
 (common-lisp:defclass workdocs-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "workdocs" :protocol
                        :rest-json))
 (common-lisp:export 'workdocs-request))
(common-lisp:progn
 (common-lisp:define-condition workdocs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'workdocs-error))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConflictingOperationException" . conflicting-operation-exception)
    ("CustomMetadataLimitExceededException"
     . custom-metadata-limit-exceeded-exception)
    ("DeactivatingLastSystemUserException"
     . deactivating-last-system-user-exception)
    ("DocumentLockedForCommentsException"
     . document-locked-for-comments-exception)
    ("DraftUploadOutOfSyncException" . draft-upload-out-of-sync-exception)
    ("EntityAlreadyExistsException" . entity-already-exists-exception)
    ("EntityNotExistsException" . entity-not-exists-exception)
    ("FailedDependencyException" . failed-dependency-exception)
    ("IllegalUserStateException" . illegal-user-state-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("InvalidCommentOperationException" . invalid-comment-operation-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("InvalidPasswordException" . invalid-password-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ProhibitedStateException" . prohibited-state-exception)
    ("RequestedEntityTooLargeException" . requested-entity-too-large-exception)
    ("ResourceAlreadyCheckedOutException"
     . resource-already-checked-out-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("StorageLimitExceededException" . storage-limit-exceeded-exception)
    ("StorageLimitWillExceedException" . storage-limit-will-exceed-exception)
    ("TooManyLabelsException" . too-many-labels-exception)
    ("TooManySubscriptionsException" . too-many-subscriptions-exception)
    ("UnauthorizedOperationException" . unauthorized-operation-exception)
    ("UnauthorizedResourceAccessException"
     . unauthorized-resource-access-exception)))
(common-lisp:progn
 (common-lisp:defclass abort-document-version-upload-request common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor
                         %abort-document-version-upload-request-version-id
                         :initform
                         (common-lisp:error ":version-id is required"))
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %abort-document-version-upload-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %abort-document-version-upload-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'abort-document-version-upload-request
                    'make-abort-document-version-upload-request))
 (common-lisp:defun make-abort-document-version-upload-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id document-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-document-version-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-document-version-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-document-version-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-document-version-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-user-request common-lisp:nil
                       ((authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %activate-user-request-authentication-token
                         :initform common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %activate-user-request-user-id :initform
                         (common-lisp:error ":user-id is required"))))
 (common-lisp:export
  (common-lisp:list 'activate-user-request 'make-activate-user-request))
 (common-lisp:defun make-activate-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-token user-id)
   (common-lisp:apply #'common-lisp:make-instance 'activate-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-user-response common-lisp:nil
                       ((user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %activate-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-user-response 'make-activate-user-response))
 (common-lisp:defun make-activate-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user)
   (common-lisp:apply #'common-lisp:make-instance 'activate-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activity common-lisp:nil
                       ((comment-metadata :initarg :comment-metadata :type
                         (common-lisp:or comment-metadata common-lisp:null)
                         :accessor %activity-comment-metadata :initform
                         common-lisp:nil)
                        (original-parent :initarg :original-parent :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %activity-original-parent :initform
                         common-lisp:nil)
                        (resource-metadata :initarg :resource-metadata :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %activity-resource-metadata :initform
                         common-lisp:nil)
                        (participants :initarg :participants :type
                         (common-lisp:or participants common-lisp:null)
                         :accessor %activity-participants :initform
                         common-lisp:nil)
                        (initiator :initarg :initiator :type
                         (common-lisp:or user-metadata common-lisp:null)
                         :accessor %activity-initiator :initform
                         common-lisp:nil)
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %activity-organization-id :initform common-lisp:nil)
                        (is-indirect-activity :initarg :is-indirect-activity
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor %activity-is-indirect-activity :initform
                         common-lisp:nil)
                        (time-stamp :initarg :time-stamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %activity-time-stamp :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or activity-type common-lisp:null)
                         :accessor %activity-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'activity 'make-activity))
 (common-lisp:defun make-activity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment-metadata original-parent
                     resource-metadata participants initiator organization-id
                     is-indirect-activity time-stamp type)
   (common-lisp:apply #'common-lisp:make-instance 'activity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-stamp))
      (common-lisp:list
       (common-lisp:cons "TimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-indirect-activity))
      (common-lisp:list
       (common-lisp:cons "IsIndirectActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiator))
      (common-lisp:list
       (common-lisp:cons "Initiator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participants))
      (common-lisp:list
       (common-lisp:cons "Participants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-metadata))
      (common-lisp:list
       (common-lisp:cons "ResourceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-parent))
      (common-lisp:list
       (common-lisp:cons "OriginalParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-metadata))
      (common-lisp:list
       (common-lisp:cons "CommentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity))
   common-lisp:nil))
(common-lisp:deftype activity-names-filter-type () 'common-lisp:string)
(common-lisp:deftype activity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-resource-permissions-request common-lisp:nil
                       ((notification-options :initarg :notification-options
                         :type
                         (common-lisp:or notification-options common-lisp:null)
                         :accessor
                         %add-resource-permissions-request-notification-options
                         :initform common-lisp:nil)
                        (principals :initarg :principals :type
                         (common-lisp:or share-principal-list common-lisp:null)
                         :accessor %add-resource-permissions-request-principals
                         :initform
                         (common-lisp:error ":principals is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %add-resource-permissions-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %add-resource-permissions-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-resource-permissions-request
                    'make-add-resource-permissions-request))
 (common-lisp:defun make-add-resource-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-options principals
                     resource-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-resource-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-options))
      (common-lisp:list
       (common-lisp:cons "NotificationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-resource-permissions-response common-lisp:nil
                       ((share-results :initarg :share-results :type
                         (common-lisp:or share-results-list common-lisp:null)
                         :accessor
                         %add-resource-permissions-response-share-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-resource-permissions-response
                    'make-add-resource-permissions-response))
 (common-lisp:defun make-add-resource-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key share-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-resource-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-results))
      (common-lisp:list
       (common-lisp:cons "ShareResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-resource-permissions-response))
   common-lisp:nil))
(common-lisp:deftype additional-response-field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-response-fields-list ()
   '(trivial-types:proper-list additional-response-field-type))
 (common-lisp:defun |make-additional-response-fields-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            additional-response-field-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype authentication-header-type () 'common-lisp:string)
(common-lisp:deftype boolean-enum-type () 'common-lisp:string)
(common-lisp:deftype boolean-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass comment common-lisp:nil
                       ((recipient-id :initarg :recipient-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %comment-recipient-id :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or comment-visibility-type
                                         common-lisp:null)
                         :accessor %comment-visibility :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or comment-status-type common-lisp:null)
                         :accessor %comment-status :initform common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %comment-created-timestamp :initform
                         common-lisp:nil)
                        (contributor :initarg :contributor :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %comment-contributor :initform common-lisp:nil)
                        (text :initarg :text :type
                         (common-lisp:or comment-text-type common-lisp:null)
                         :accessor %comment-text :initform common-lisp:nil)
                        (thread-id :initarg :thread-id :type
                         (common-lisp:or comment-id-type common-lisp:null)
                         :accessor %comment-thread-id :initform
                         common-lisp:nil)
                        (parent-id :initarg :parent-id :type
                         (common-lisp:or comment-id-type common-lisp:null)
                         :accessor %comment-parent-id :initform
                         common-lisp:nil)
                        (comment-id :initarg :comment-id :type
                         (common-lisp:or comment-id-type common-lisp:null)
                         :accessor %comment-comment-id :initform
                         (common-lisp:error ":comment-id is required"))))
 (common-lisp:export (common-lisp:list 'comment 'make-comment))
 (common-lisp:defun make-comment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recipient-id visibility status
                     created-timestamp contributor text thread-id parent-id
                     comment-id)
   (common-lisp:apply #'common-lisp:make-instance 'comment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input comment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input comment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-id))
      (common-lisp:list
       (common-lisp:cons "CommentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-id))
      (common-lisp:list
       (common-lisp:cons "ThreadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contributor))
      (common-lisp:list
       (common-lisp:cons "Contributor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient-id))
      (common-lisp:list
       (common-lisp:cons "RecipientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input comment))
   common-lisp:nil))
(common-lisp:deftype comment-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype comment-list () '(trivial-types:proper-list comment))
 (common-lisp:defun |make-comment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list comment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass comment-metadata common-lisp:nil
                       ((contributor-id :initarg :contributor-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %comment-metadata-contributor-id :initform
                         common-lisp:nil)
                        (recipient-id :initarg :recipient-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %comment-metadata-recipient-id :initform
                         common-lisp:nil)
                        (comment-status :initarg :comment-status :type
                         (common-lisp:or comment-status-type common-lisp:null)
                         :accessor %comment-metadata-comment-status :initform
                         common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %comment-metadata-created-timestamp
                         :initform common-lisp:nil)
                        (contributor :initarg :contributor :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %comment-metadata-contributor :initform
                         common-lisp:nil)
                        (comment-id :initarg :comment-id :type
                         (common-lisp:or comment-id-type common-lisp:null)
                         :accessor %comment-metadata-comment-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'comment-metadata 'make-comment-metadata))
 (common-lisp:defun make-comment-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contributor-id recipient-id
                     comment-status created-timestamp contributor comment-id)
   (common-lisp:apply #'common-lisp:make-instance 'comment-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input comment-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input comment-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-id))
      (common-lisp:list
       (common-lisp:cons "CommentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contributor))
      (common-lisp:list
       (common-lisp:cons "Contributor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-status))
      (common-lisp:list
       (common-lisp:cons "CommentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient-id))
      (common-lisp:list
       (common-lisp:cons "RecipientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contributor-id))
      (common-lisp:list
       (common-lisp:cons "ContributorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input comment-metadata))
   common-lisp:nil))
(common-lisp:deftype comment-status-type () 'common-lisp:string)
(common-lisp:deftype comment-text-type () 'common-lisp:string)
(common-lisp:deftype comment-visibility-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflicting-operation-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflicting-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflicting-operation-exception
                    'conflicting-operation-exception-message)))
(common-lisp:deftype content-category-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-comment-request common-lisp:nil
                       ((notify-collaborators :initarg :notify-collaborators
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor %create-comment-request-notify-collaborators
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or comment-visibility-type
                                         common-lisp:null)
                         :accessor %create-comment-request-visibility :initform
                         common-lisp:nil)
                        (text :initarg :text :type
                         (common-lisp:or comment-text-type common-lisp:null)
                         :accessor %create-comment-request-text :initform
                         (common-lisp:error ":text is required"))
                        (thread-id :initarg :thread-id :type
                         (common-lisp:or comment-id-type common-lisp:null)
                         :accessor %create-comment-request-thread-id :initform
                         common-lisp:nil)
                        (parent-id :initarg :parent-id :type
                         (common-lisp:or comment-id-type common-lisp:null)
                         :accessor %create-comment-request-parent-id :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %create-comment-request-version-id :initform
                         (common-lisp:error ":version-id is required"))
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %create-comment-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %create-comment-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-comment-request 'make-create-comment-request))
 (common-lisp:defun make-create-comment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notify-collaborators visibility text
                     thread-id parent-id version-id document-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-comment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-id))
      (common-lisp:list
       (common-lisp:cons "ThreadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notify-collaborators))
      (common-lisp:list
       (common-lisp:cons "NotifyCollaborators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-comment-response common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or comment common-lisp:null) :accessor
                         %create-comment-response-comment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-comment-response 'make-create-comment-response))
 (common-lisp:defun make-create-comment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment)
   (common-lisp:apply #'common-lisp:make-instance 'create-comment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-comment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-metadata-request common-lisp:nil
                       ((custom-metadata :initarg :custom-metadata :type
                         (common-lisp:or custom-metadata-map common-lisp:null)
                         :accessor
                         %create-custom-metadata-request-custom-metadata
                         :initform
                         (common-lisp:error ":custom-metadata is required"))
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %create-custom-metadata-request-version-id
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %create-custom-metadata-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %create-custom-metadata-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-custom-metadata-request
                    'make-create-custom-metadata-request))
 (common-lisp:defun make-create-custom-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-metadata version-id resource-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-metadata))
      (common-lisp:list
       (common-lisp:cons "CustomMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-metadata-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-custom-metadata-response
                    'make-create-custom-metadata-response))
 (common-lisp:defun make-create-custom-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-folder-request common-lisp:nil
                       ((parent-folder-id :initarg :parent-folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %create-folder-request-parent-folder-id
                         :initform
                         (common-lisp:error ":parent-folder-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor %create-folder-request-name :initform
                         common-lisp:nil)
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %create-folder-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-folder-request 'make-create-folder-request))
 (common-lisp:defun make-create-folder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parent-folder-id name
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-folder-response common-lisp:nil
                       ((metadata :initarg :metadata :type
                         (common-lisp:or folder-metadata common-lisp:null)
                         :accessor %create-folder-response-metadata :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-folder-response 'make-create-folder-response))
 (common-lisp:defun make-create-folder-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata)
   (common-lisp:apply #'common-lisp:make-instance 'create-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-labels-request common-lisp:nil
                       ((authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %create-labels-request-authentication-token
                         :initform common-lisp:nil)
                        (labels :initarg :labels :type
                         (common-lisp:or shared-labels common-lisp:null)
                         :accessor %create-labels-request-labels :initform
                         (common-lisp:error ":labels is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %create-labels-request-resource-id :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-labels-request 'make-create-labels-request))
 (common-lisp:defun make-create-labels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-token labels resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-labels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-labels-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-labels-response 'make-create-labels-response))
 (common-lisp:defun make-create-labels-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-labels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-notification-subscription-request common-lisp:nil
                       ((subscription-type :initarg :subscription-type :type
                         (common-lisp:or subscription-type common-lisp:null)
                         :accessor
                         %create-notification-subscription-request-subscription-type
                         :initform
                         (common-lisp:error ":subscription-type is required"))
                        (protocol :initarg :protocol :type
                         (common-lisp:or subscription-protocol-type
                                         common-lisp:null)
                         :accessor
                         %create-notification-subscription-request-protocol
                         :initform (common-lisp:error ":protocol is required"))
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or subscription-end-point-type
                                         common-lisp:null)
                         :accessor
                         %create-notification-subscription-request-endpoint
                         :initform (common-lisp:error ":endpoint is required"))
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %create-notification-subscription-request-organization-id
                         :initform
                         (common-lisp:error ":organization-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-notification-subscription-request
                    'make-create-notification-subscription-request))
 (common-lisp:defun make-create-notification-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-type protocol endpoint
                     organization-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-notification-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-type))
      (common-lisp:list
       (common-lisp:cons "SubscriptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-notification-subscription-response
                       common-lisp:nil
                       ((subscription :initarg :subscription :type
                         (common-lisp:or subscription common-lisp:null)
                         :accessor
                         %create-notification-subscription-response-subscription
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-notification-subscription-response
                    'make-create-notification-subscription-response))
 (common-lisp:defun make-create-notification-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-notification-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "Subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %create-user-request-authentication-token
                         :initform common-lisp:nil)
                        (storage-rule :initarg :storage-rule :type
                         (common-lisp:or storage-rule-type common-lisp:null)
                         :accessor %create-user-request-storage-rule :initform
                         common-lisp:nil)
                        (time-zone-id :initarg :time-zone-id :type
                         (common-lisp:or time-zone-id-type common-lisp:null)
                         :accessor %create-user-request-time-zone-id :initform
                         common-lisp:nil)
                        (password :initarg :password :type
                         (common-lisp:or password-type common-lisp:null)
                         :accessor %create-user-request-password :initform
                         (common-lisp:error ":password is required"))
                        (surname :initarg :surname :type
                         (common-lisp:or user-attribute-value-type
                                         common-lisp:null)
                         :accessor %create-user-request-surname :initform
                         (common-lisp:error ":surname is required"))
                        (given-name :initarg :given-name :type
                         (common-lisp:or user-attribute-value-type
                                         common-lisp:null)
                         :accessor %create-user-request-given-name :initform
                         (common-lisp:error ":given-name is required"))
                        (email-address :initarg :email-address :type
                         (common-lisp:or email-address-type common-lisp:null)
                         :accessor %create-user-request-email-address :initform
                         common-lisp:nil)
                        (username :initarg :username :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor %create-user-request-username :initform
                         (common-lisp:error ":username is required"))
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %create-user-request-organization-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defun make-create-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-token storage-rule
                     time-zone-id password surname given-name email-address
                     username organization-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-rule))
      (common-lisp:list
       (common-lisp:cons "StorageRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil
                       ((user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %create-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defun make-create-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-metadata-key-list ()
   '(trivial-types:proper-list custom-metadata-key-type))
 (common-lisp:defun |make-custom-metadata-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-metadata-key-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-metadata-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition custom-metadata-limit-exceeded-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       custom-metadata-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'custom-metadata-limit-exceeded-exception
                    'custom-metadata-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype custom-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-custom-metadata-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype custom-metadata-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass date-range-type common-lisp:nil
                       ((end-value :initarg :end-value :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %date-range-type-end-value :initform
                         common-lisp:nil)
                        (start-value :initarg :start-value :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %date-range-type-start-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'date-range-type 'make-date-range-type))
 (common-lisp:defun make-date-range-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-value start-value)
   (common-lisp:apply #'common-lisp:make-instance 'date-range-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-range-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-range-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-value))
      (common-lisp:list
       (common-lisp:cons "EndValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-range-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deactivate-user-request common-lisp:nil
                       ((authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %deactivate-user-request-authentication-token
                         :initform common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %deactivate-user-request-user-id :initform
                         (common-lisp:error ":user-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deactivate-user-request 'make-deactivate-user-request))
 (common-lisp:defun make-deactivate-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-token user-id)
   (common-lisp:apply #'common-lisp:make-instance 'deactivate-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deactivating-last-system-user-exception
     (workdocs-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deactivating-last-system-user-exception)))
(common-lisp:progn
 (common-lisp:defclass delete-comment-request common-lisp:nil
                       ((comment-id :initarg :comment-id :type
                         (common-lisp:or comment-id-type common-lisp:null)
                         :accessor %delete-comment-request-comment-id :initform
                         (common-lisp:error ":comment-id is required"))
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %delete-comment-request-version-id :initform
                         (common-lisp:error ":version-id is required"))
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %delete-comment-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %delete-comment-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-comment-request 'make-delete-comment-request))
 (common-lisp:defun make-delete-comment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment-id version-id document-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-comment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-comment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-comment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-comment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-metadata-request common-lisp:nil
                       ((delete-all :initarg :delete-all :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor %delete-custom-metadata-request-delete-all
                         :initform common-lisp:nil)
                        (keys :initarg :keys :type
                         (common-lisp:or custom-metadata-key-list
                                         common-lisp:null)
                         :accessor %delete-custom-metadata-request-keys
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %delete-custom-metadata-request-version-id
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %delete-custom-metadata-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %delete-custom-metadata-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-metadata-request
                    'make-delete-custom-metadata-request))
 (common-lisp:defun make-delete-custom-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-all keys version-id resource-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-metadata-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-custom-metadata-response
                    'make-delete-custom-metadata-response))
 (common-lisp:defun make-delete-custom-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-document-request common-lisp:nil
                       ((document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %delete-document-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %delete-document-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-document-request 'make-delete-document-request))
 (common-lisp:defun make-delete-document-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-document-version-request common-lisp:nil
                       ((delete-prior-versions :initarg :delete-prior-versions
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %delete-document-version-request-delete-prior-versions
                         :initform
                         (common-lisp:error
                          ":delete-prior-versions is required"))
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %delete-document-version-request-version-id
                         :initform
                         (common-lisp:error ":version-id is required"))
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %delete-document-version-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %delete-document-version-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-document-version-request
                    'make-delete-document-version-request))
 (common-lisp:defun make-delete-document-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-prior-versions version-id
                     document-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-document-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-folder-contents-request common-lisp:nil
                       ((folder-id :initarg :folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %delete-folder-contents-request-folder-id
                         :initform
                         (common-lisp:error ":folder-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %delete-folder-contents-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-contents-request
                    'make-delete-folder-contents-request))
 (common-lisp:defun make-delete-folder-contents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key folder-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-folder-contents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-contents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-contents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-folder-request common-lisp:nil
                       ((folder-id :initarg :folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %delete-folder-request-folder-id :initform
                         (common-lisp:error ":folder-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %delete-folder-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-folder-request 'make-delete-folder-request))
 (common-lisp:defun make-delete-folder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key folder-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-labels-request common-lisp:nil
                       ((delete-all :initarg :delete-all :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor %delete-labels-request-delete-all :initform
                         common-lisp:nil)
                        (labels :initarg :labels :type
                         (common-lisp:or shared-labels common-lisp:null)
                         :accessor %delete-labels-request-labels :initform
                         common-lisp:nil)
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %delete-labels-request-authentication-token
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %delete-labels-request-resource-id :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-labels-request 'make-delete-labels-request))
 (common-lisp:defun make-delete-labels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-all labels authentication-token
                     resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-labels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-labels-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-labels-response 'make-delete-labels-response))
 (common-lisp:defun make-delete-labels-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-labels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-notification-subscription-request common-lisp:nil
                       ((organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %delete-notification-subscription-request-organization-id
                         :initform
                         (common-lisp:error ":organization-id is required"))
                        (subscription-id :initarg :subscription-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %delete-notification-subscription-request-subscription-id
                         :initform
                         (common-lisp:error ":subscription-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-notification-subscription-request
                    'make-delete-notification-subscription-request))
 (common-lisp:defun make-delete-notification-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organization-id subscription-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-notification-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((user-id :initarg :user-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %delete-user-request-user-id :initform
                         (common-lisp:error ":user-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %delete-user-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defun make-delete-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-activities-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or search-marker-type common-lisp:null)
                         :accessor %describe-activities-request-marker
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %describe-activities-request-limit :initform
                         common-lisp:nil)
                        (include-indirect-activities :initarg
                         :include-indirect-activities :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %describe-activities-request-include-indirect-activities
                         :initform common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %describe-activities-request-user-id :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %describe-activities-request-resource-id :initform
                         common-lisp:nil)
                        (activity-types :initarg :activity-types :type
                         (common-lisp:or activity-names-filter-type
                                         common-lisp:null)
                         :accessor %describe-activities-request-activity-types
                         :initform common-lisp:nil)
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %describe-activities-request-organization-id :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %describe-activities-request-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %describe-activities-request-start-time
                         :initform common-lisp:nil)
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %describe-activities-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-activities-request
                    'make-describe-activities-request))
 (common-lisp:defun make-describe-activities-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker limit include-indirect-activities
                     user-id resource-id activity-types organization-id
                     end-time start-time authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-activities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-activities-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or search-marker-type common-lisp:null)
                         :accessor %describe-activities-response-marker
                         :initform common-lisp:nil)
                        (user-activities :initarg :user-activities :type
                         (common-lisp:or user-activities common-lisp:null)
                         :accessor
                         %describe-activities-response-user-activities
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-activities-response
                    'make-describe-activities-response))
 (common-lisp:defun make-describe-activities-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker user-activities)
   (common-lisp:apply #'common-lisp:make-instance 'describe-activities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-activities))
      (common-lisp:list
       (common-lisp:cons "UserActivities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-comments-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor %describe-comments-request-marker :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %describe-comments-request-limit :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %describe-comments-request-version-id
                         :initform
                         (common-lisp:error ":version-id is required"))
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %describe-comments-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %describe-comments-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-comments-request
                    'make-describe-comments-request))
 (common-lisp:defun make-describe-comments-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker limit version-id document-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-comments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-comments-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor %describe-comments-response-marker :initform
                         common-lisp:nil)
                        (comments :initarg :comments :type
                         (common-lisp:or comment-list common-lisp:null)
                         :accessor %describe-comments-response-comments
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-comments-response
                    'make-describe-comments-response))
 (common-lisp:defun make-describe-comments-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker comments)
   (common-lisp:apply #'common-lisp:make-instance 'describe-comments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comments))
      (common-lisp:list
       (common-lisp:cons "Comments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-comments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-document-versions-request common-lisp:nil
                       ((fields :initarg :fields :type
                         (common-lisp:or field-names-type common-lisp:null)
                         :accessor %describe-document-versions-request-fields
                         :initform common-lisp:nil)
                        (include :initarg :include :type
                         (common-lisp:or field-names-type common-lisp:null)
                         :accessor %describe-document-versions-request-include
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %describe-document-versions-request-limit :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %describe-document-versions-request-marker
                         :initform common-lisp:nil)
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %describe-document-versions-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %describe-document-versions-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-document-versions-request
                    'make-describe-document-versions-request))
 (common-lisp:defun make-describe-document-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fields include limit marker document-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-document-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-document-versions-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %describe-document-versions-response-marker
                         :initform common-lisp:nil)
                        (document-versions :initarg :document-versions :type
                         (common-lisp:or document-version-metadata-list
                                         common-lisp:null)
                         :accessor
                         %describe-document-versions-response-document-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-document-versions-response
                    'make-describe-document-versions-response))
 (common-lisp:defun make-describe-document-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker document-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-document-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-versions))
      (common-lisp:list
       (common-lisp:cons "DocumentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-folder-contents-request common-lisp:nil
                       ((include :initarg :include :type
                         (common-lisp:or field-names-type common-lisp:null)
                         :accessor %describe-folder-contents-request-include
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or folder-content-type common-lisp:null)
                         :accessor %describe-folder-contents-request-type
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %describe-folder-contents-request-marker
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %describe-folder-contents-request-limit :initform
                         common-lisp:nil)
                        (order :initarg :order :type
                         (common-lisp:or order-type common-lisp:null) :accessor
                         %describe-folder-contents-request-order :initform
                         common-lisp:nil)
                        (sort :initarg :sort :type
                         (common-lisp:or resource-sort-type common-lisp:null)
                         :accessor %describe-folder-contents-request-sort
                         :initform common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %describe-folder-contents-request-folder-id
                         :initform
                         (common-lisp:error ":folder-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %describe-folder-contents-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-contents-request
                    'make-describe-folder-contents-request))
 (common-lisp:defun make-describe-folder-contents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include type marker limit order sort
                     folder-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-folder-contents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-folder-contents-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %describe-folder-contents-response-marker
                         :initform common-lisp:nil)
                        (documents :initarg :documents :type
                         (common-lisp:or document-metadata-list
                                         common-lisp:null)
                         :accessor %describe-folder-contents-response-documents
                         :initform common-lisp:nil)
                        (folders :initarg :folders :type
                         (common-lisp:or folder-metadata-list common-lisp:null)
                         :accessor %describe-folder-contents-response-folders
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-folder-contents-response
                    'make-describe-folder-contents-response))
 (common-lisp:defun make-describe-folder-contents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker documents folders)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-folder-contents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folders))
      (common-lisp:list
       (common-lisp:cons "Folders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "Documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-folder-contents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-groups-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or positive-integer-type
                                         common-lisp:null)
                         :accessor %describe-groups-request-limit :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor %describe-groups-request-marker :initform
                         common-lisp:nil)
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %describe-groups-request-organization-id :initform
                         common-lisp:nil)
                        (search-query :initarg :search-query :type
                         (common-lisp:or search-query-type common-lisp:null)
                         :accessor %describe-groups-request-search-query
                         :initform
                         (common-lisp:error ":search-query is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %describe-groups-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-groups-request 'make-describe-groups-request))
 (common-lisp:defun make-describe-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit marker organization-id search-query
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-groups-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor %describe-groups-response-marker :initform
                         common-lisp:nil)
                        (groups :initarg :groups :type
                         (common-lisp:or group-metadata-list common-lisp:null)
                         :accessor %describe-groups-response-groups :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-groups-response 'make-describe-groups-response))
 (common-lisp:defun make-describe-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker groups)
   (common-lisp:apply #'common-lisp:make-instance 'describe-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-notification-subscriptions-request
                       common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %describe-notification-subscriptions-request-limit
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor
                         %describe-notification-subscriptions-request-marker
                         :initform common-lisp:nil)
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %describe-notification-subscriptions-request-organization-id
                         :initform
                         (common-lisp:error ":organization-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-notification-subscriptions-request
                    'make-describe-notification-subscriptions-request))
 (common-lisp:defun make-describe-notification-subscriptions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit marker organization-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-notification-subscriptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-notification-subscriptions-response
                       common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor
                         %describe-notification-subscriptions-response-marker
                         :initform common-lisp:nil)
                        (subscriptions :initarg :subscriptions :type
                         (common-lisp:or subscription-list common-lisp:null)
                         :accessor
                         %describe-notification-subscriptions-response-subscriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-notification-subscriptions-response
                    'make-describe-notification-subscriptions-response))
 (common-lisp:defun make-describe-notification-subscriptions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker subscriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-notification-subscriptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriptions))
      (common-lisp:list
       (common-lisp:cons "Subscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notification-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-permissions-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor
                         %describe-resource-permissions-request-marker
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %describe-resource-permissions-request-limit :initform
                         common-lisp:nil)
                        (principal-id :initarg :principal-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %describe-resource-permissions-request-principal-id
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %describe-resource-permissions-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %describe-resource-permissions-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-permissions-request
                    'make-describe-resource-permissions-request))
 (common-lisp:defun make-describe-resource-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker limit principal-id resource-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-permissions-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor
                         %describe-resource-permissions-response-marker
                         :initform common-lisp:nil)
                        (principals :initarg :principals :type
                         (common-lisp:or principal-list common-lisp:null)
                         :accessor
                         %describe-resource-permissions-response-principals
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-permissions-response
                    'make-describe-resource-permissions-response))
 (common-lisp:defun make-describe-resource-permissions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker principals)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-root-folders-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %describe-root-folders-request-marker
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %describe-root-folders-request-limit :initform
                         common-lisp:nil)
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %describe-root-folders-request-authentication-token
                         :initform
                         (common-lisp:error
                          ":authentication-token is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-root-folders-request
                    'make-describe-root-folders-request))
 (common-lisp:defun make-describe-root-folders-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker limit authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-root-folders-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-root-folders-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %describe-root-folders-response-marker
                         :initform common-lisp:nil)
                        (folders :initarg :folders :type
                         (common-lisp:or folder-metadata-list common-lisp:null)
                         :accessor %describe-root-folders-response-folders
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-root-folders-response
                    'make-describe-root-folders-response))
 (common-lisp:defun make-describe-root-folders-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker folders)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-root-folders-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folders))
      (common-lisp:list
       (common-lisp:cons "Folders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-root-folders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-users-request common-lisp:nil
                       ((fields :initarg :fields :type
                         (common-lisp:or field-names-type common-lisp:null)
                         :accessor %describe-users-request-fields :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %describe-users-request-limit :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %describe-users-request-marker :initform
                         common-lisp:nil)
                        (sort :initarg :sort :type
                         (common-lisp:or user-sort-type common-lisp:null)
                         :accessor %describe-users-request-sort :initform
                         common-lisp:nil)
                        (order :initarg :order :type
                         (common-lisp:or order-type common-lisp:null) :accessor
                         %describe-users-request-order :initform
                         common-lisp:nil)
                        (include :initarg :include :type
                         (common-lisp:or user-filter-type common-lisp:null)
                         :accessor %describe-users-request-include :initform
                         common-lisp:nil)
                        (query :initarg :query :type
                         (common-lisp:or search-query-type common-lisp:null)
                         :accessor %describe-users-request-query :initform
                         common-lisp:nil)
                        (user-ids :initarg :user-ids :type
                         (common-lisp:or user-ids-type common-lisp:null)
                         :accessor %describe-users-request-user-ids :initform
                         common-lisp:nil)
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %describe-users-request-organization-id :initform
                         common-lisp:nil)
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %describe-users-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-users-request 'make-describe-users-request))
 (common-lisp:defun make-describe-users-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fields limit marker sort order include
                     query user-ids organization-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-users-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %describe-users-response-marker :initform
                         common-lisp:nil)
                        (total-number-of-users :initarg :total-number-of-users
                         :type (common-lisp:or size-type common-lisp:null)
                         :accessor
                         %describe-users-response-total-number-of-users
                         :initform common-lisp:nil)
                        (users :initarg :users :type
                         (common-lisp:or organization-user-list
                                         common-lisp:null)
                         :accessor %describe-users-response-users :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-users-response 'make-describe-users-response))
 (common-lisp:defun make-describe-users-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker total-number-of-users users)
   (common-lisp:apply #'common-lisp:make-instance 'describe-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-users))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-response))
   common-lisp:nil))
(common-lisp:deftype document-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition document-locked-for-comments-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       document-locked-for-comments-exception-message)))
 (common-lisp:export
  (common-lisp:list 'document-locked-for-comments-exception
                    'document-locked-for-comments-exception-message)))
(common-lisp:progn
 (common-lisp:defclass document-metadata common-lisp:nil
                       ((labels :initarg :labels :type
                         (common-lisp:or shared-labels common-lisp:null)
                         :accessor %document-metadata-labels :initform
                         common-lisp:nil)
                        (resource-state :initarg :resource-state :type
                         (common-lisp:or resource-state-type common-lisp:null)
                         :accessor %document-metadata-resource-state :initform
                         common-lisp:nil)
                        (latest-version-metadata :initarg
                         :latest-version-metadata :type
                         (common-lisp:or document-version-metadata
                                         common-lisp:null)
                         :accessor %document-metadata-latest-version-metadata
                         :initform common-lisp:nil)
                        (modified-timestamp :initarg :modified-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %document-metadata-modified-timestamp
                         :initform common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %document-metadata-created-timestamp
                         :initform common-lisp:nil)
                        (parent-folder-id :initarg :parent-folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %document-metadata-parent-folder-id
                         :initform common-lisp:nil)
                        (creator-id :initarg :creator-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %document-metadata-creator-id :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %document-metadata-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-metadata 'make-document-metadata))
 (common-lisp:defun make-document-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key labels resource-state
                     latest-version-metadata modified-timestamp
                     created-timestamp parent-folder-id creator-id id)
   (common-lisp:apply #'common-lisp:make-instance 'document-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "CreatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-metadata))
      (common-lisp:list
       (common-lisp:cons "LatestVersionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "ResourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-metadata-list ()
   '(trivial-types:proper-list document-metadata))
 (common-lisp:defun |make-document-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-source-url-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-document-source-url-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype document-status-type () 'common-lisp:string)
(common-lisp:deftype document-thumbnail-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-thumbnail-url-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-document-thumbnail-url-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype document-version-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-version-metadata common-lisp:nil
                       ((source :initarg :source :type
                         (common-lisp:or document-source-url-map
                                         common-lisp:null)
                         :accessor %document-version-metadata-source :initform
                         common-lisp:nil)
                        (thumbnail :initarg :thumbnail :type
                         (common-lisp:or document-thumbnail-url-map
                                         common-lisp:null)
                         :accessor %document-version-metadata-thumbnail
                         :initform common-lisp:nil)
                        (creator-id :initarg :creator-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %document-version-metadata-creator-id :initform
                         common-lisp:nil)
                        (content-modified-timestamp :initarg
                         :content-modified-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %document-version-metadata-content-modified-timestamp
                         :initform common-lisp:nil)
                        (content-created-timestamp :initarg
                         :content-created-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %document-version-metadata-content-created-timestamp
                         :initform common-lisp:nil)
                        (modified-timestamp :initarg :modified-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %document-version-metadata-modified-timestamp
                         :initform common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %document-version-metadata-created-timestamp
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or document-status-type common-lisp:null)
                         :accessor %document-version-metadata-status :initform
                         common-lisp:nil)
                        (signature :initarg :signature :type
                         (common-lisp:or hash-type common-lisp:null) :accessor
                         %document-version-metadata-signature :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or size-type common-lisp:null) :accessor
                         %document-version-metadata-size :initform
                         common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or document-content-type
                                         common-lisp:null)
                         :accessor %document-version-metadata-content-type
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor %document-version-metadata-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %document-version-metadata-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-version-metadata
                    'make-document-version-metadata))
 (common-lisp:defun make-document-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source thumbnail creator-id
                     content-modified-timestamp content-created-timestamp
                     modified-timestamp created-timestamp status signature size
                     content-type name id)
   (common-lisp:apply #'common-lisp:make-instance 'document-version-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-version-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-version-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-created-timestamp))
      (common-lisp:list
       (common-lisp:cons "ContentCreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ContentModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "CreatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail))
      (common-lisp:list
       (common-lisp:cons "Thumbnail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-version-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-version-metadata-list ()
   '(trivial-types:proper-list document-version-metadata))
 (common-lisp:defun |make-document-version-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-version-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition draft-upload-out-of-sync-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       draft-upload-out-of-sync-exception-message)))
 (common-lisp:export
  (common-lisp:list 'draft-upload-out-of-sync-exception
                    'draft-upload-out-of-sync-exception-message)))
(common-lisp:deftype email-address-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-already-exists-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-already-exists-exception
                    'entity-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:deftype entity-id-list () '(trivial-types:proper-list id-type))
 (common-lisp:defun |make-entity-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition entity-not-exists-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-not-exists-exception-message)
      (entity-ids :initarg :entity-ids :initform common-lisp:nil :reader
       entity-not-exists-exception-entity-ids)))
 (common-lisp:export
  (common-lisp:list 'entity-not-exists-exception
                    'entity-not-exists-exception-message
                    'entity-not-exists-exception-entity-ids)))
(common-lisp:deftype error-message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition failed-dependency-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       failed-dependency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'failed-dependency-exception
                    'failed-dependency-exception-message)))
(common-lisp:deftype field-names-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filters common-lisp:nil
                       ((modified-range :initarg :modified-range :type
                         (common-lisp:or date-range-type common-lisp:null)
                         :accessor %filters-modified-range :initform
                         common-lisp:nil)
                        (created-range :initarg :created-range :type
                         (common-lisp:or date-range-type common-lisp:null)
                         :accessor %filters-created-range :initform
                         common-lisp:nil)
                        (size-range :initarg :size-range :type
                         (common-lisp:or long-range-type common-lisp:null)
                         :accessor %filters-size-range :initform
                         common-lisp:nil)
                        (search-collection-types :initarg
                         :search-collection-types :type
                         (common-lisp:or search-collection-type-list
                                         common-lisp:null)
                         :accessor %filters-search-collection-types :initform
                         common-lisp:nil)
                        (ancestor-ids :initarg :ancestor-ids :type
                         (common-lisp:or search-ancestor-id-list
                                         common-lisp:null)
                         :accessor %filters-ancestor-ids :initform
                         common-lisp:nil)
                        (principals :initarg :principals :type
                         (common-lisp:or search-principal-type-list
                                         common-lisp:null)
                         :accessor %filters-principals :initform
                         common-lisp:nil)
                        (labels :initarg :labels :type
                         (common-lisp:or search-label-list common-lisp:null)
                         :accessor %filters-labels :initform common-lisp:nil)
                        (resource-types :initarg :resource-types :type
                         (common-lisp:or search-resource-type-list
                                         common-lisp:null)
                         :accessor %filters-resource-types :initform
                         common-lisp:nil)
                        (content-categories :initarg :content-categories :type
                         (common-lisp:or search-content-category-type-list
                                         common-lisp:null)
                         :accessor %filters-content-categories :initform
                         common-lisp:nil)
                        (text-locales :initarg :text-locales :type
                         (common-lisp:or text-locale-type-list
                                         common-lisp:null)
                         :accessor %filters-text-locales :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filters 'make-filters))
 (common-lisp:defun make-filters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key modified-range created-range size-range
                     search-collection-types ancestor-ids principals labels
                     resource-types content-categories text-locales)
   (common-lisp:apply #'common-lisp:make-instance 'filters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-locales))
      (common-lisp:list
       (common-lisp:cons "TextLocales"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-categories))
      (common-lisp:list
       (common-lisp:cons "ContentCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ancestor-ids))
      (common-lisp:list
       (common-lisp:cons "AncestorIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'search-collection-types))
      (common-lisp:list
       (common-lisp:cons "SearchCollectionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-range))
      (common-lisp:list
       (common-lisp:cons "SizeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-range))
      (common-lisp:list
       (common-lisp:cons "CreatedRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-range))
      (common-lisp:list
       (common-lisp:cons "ModifiedRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filters))
   common-lisp:nil))
(common-lisp:deftype folder-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass folder-metadata common-lisp:nil
                       ((latest-version-size :initarg :latest-version-size
                         :type (common-lisp:or size-type common-lisp:null)
                         :accessor %folder-metadata-latest-version-size
                         :initform common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or size-type common-lisp:null) :accessor
                         %folder-metadata-size :initform common-lisp:nil)
                        (labels :initarg :labels :type
                         (common-lisp:or shared-labels common-lisp:null)
                         :accessor %folder-metadata-labels :initform
                         common-lisp:nil)
                        (signature :initarg :signature :type
                         (common-lisp:or hash-type common-lisp:null) :accessor
                         %folder-metadata-signature :initform common-lisp:nil)
                        (resource-state :initarg :resource-state :type
                         (common-lisp:or resource-state-type common-lisp:null)
                         :accessor %folder-metadata-resource-state :initform
                         common-lisp:nil)
                        (modified-timestamp :initarg :modified-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %folder-metadata-modified-timestamp
                         :initform common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %folder-metadata-created-timestamp :initform
                         common-lisp:nil)
                        (parent-folder-id :initarg :parent-folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %folder-metadata-parent-folder-id :initform
                         common-lisp:nil)
                        (creator-id :initarg :creator-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %folder-metadata-creator-id :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor %folder-metadata-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %folder-metadata-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'folder-metadata 'make-folder-metadata))
 (common-lisp:defun make-folder-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latest-version-size size labels signature
                     resource-state modified-timestamp created-timestamp
                     parent-folder-id creator-id name id)
   (common-lisp:apply #'common-lisp:make-instance 'folder-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input folder-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input folder-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "CreatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "ResourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-size))
      (common-lisp:list
       (common-lisp:cons "LatestVersionSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input folder-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype folder-metadata-list ()
   '(trivial-types:proper-list folder-metadata))
 (common-lisp:defun |make-folder-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list folder-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-current-user-request common-lisp:nil
                       ((authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %get-current-user-request-authentication-token
                         :initform
                         (common-lisp:error
                          ":authentication-token is required"))))
 (common-lisp:export
  (common-lisp:list 'get-current-user-request 'make-get-current-user-request))
 (common-lisp:defun make-get-current-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-current-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-current-user-response common-lisp:nil
                       ((user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %get-current-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-current-user-response
                    'make-get-current-user-response))
 (common-lisp:defun make-get-current-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user)
   (common-lisp:apply #'common-lisp:make-instance 'get-current-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-current-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-document-path-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %get-document-path-request-marker :initform
                         common-lisp:nil)
                        (fields :initarg :fields :type
                         (common-lisp:or field-names-type common-lisp:null)
                         :accessor %get-document-path-request-fields :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %get-document-path-request-limit :initform
                         common-lisp:nil)
                        (document-id :initarg :document-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %get-document-path-request-document-id :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %get-document-path-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-document-path-request
                    'make-get-document-path-request))
 (common-lisp:defun make-get-document-path-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker fields limit document-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-document-path-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-document-path-response common-lisp:nil
                       ((path :initarg :path :type
                         (common-lisp:or resource-path common-lisp:null)
                         :accessor %get-document-path-response-path :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-document-path-response
                    'make-get-document-path-response))
 (common-lisp:defun make-get-document-path-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path)
   (common-lisp:apply #'common-lisp:make-instance 'get-document-path-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-path-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-document-request common-lisp:nil
                       ((include-custom-metadata :initarg
                         :include-custom-metadata :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %get-document-request-include-custom-metadata
                         :initform common-lisp:nil)
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %get-document-request-document-id :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %get-document-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-document-request 'make-get-document-request))
 (common-lisp:defun make-get-document-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-custom-metadata document-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-document-response common-lisp:nil
                       ((custom-metadata :initarg :custom-metadata :type
                         (common-lisp:or custom-metadata-map common-lisp:null)
                         :accessor %get-document-response-custom-metadata
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or document-metadata common-lisp:null)
                         :accessor %get-document-response-metadata :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-document-response 'make-get-document-response))
 (common-lisp:defun make-get-document-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-metadata metadata)
   (common-lisp:apply #'common-lisp:make-instance 'get-document-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-metadata))
      (common-lisp:list
       (common-lisp:cons "CustomMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-document-version-request common-lisp:nil
                       ((include-custom-metadata :initarg
                         :include-custom-metadata :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         %get-document-version-request-include-custom-metadata
                         :initform common-lisp:nil)
                        (fields :initarg :fields :type
                         (common-lisp:or field-names-type common-lisp:null)
                         :accessor %get-document-version-request-fields
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %get-document-version-request-version-id
                         :initform
                         (common-lisp:error ":version-id is required"))
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %get-document-version-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %get-document-version-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-document-version-request
                    'make-get-document-version-request))
 (common-lisp:defun make-get-document-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-custom-metadata fields version-id
                     document-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-document-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-document-version-response common-lisp:nil
                       ((custom-metadata :initarg :custom-metadata :type
                         (common-lisp:or custom-metadata-map common-lisp:null)
                         :accessor
                         %get-document-version-response-custom-metadata
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or document-version-metadata
                                         common-lisp:null)
                         :accessor %get-document-version-response-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-document-version-response
                    'make-get-document-version-response))
 (common-lisp:defun make-get-document-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-metadata metadata)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-document-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-metadata))
      (common-lisp:list
       (common-lisp:cons "CustomMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-document-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-folder-path-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %get-folder-path-request-marker :initform
                         common-lisp:nil)
                        (fields :initarg :fields :type
                         (common-lisp:or field-names-type common-lisp:null)
                         :accessor %get-folder-path-request-fields :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %get-folder-path-request-limit :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %get-folder-path-request-folder-id :initform
                         (common-lisp:error ":folder-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %get-folder-path-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-folder-path-request 'make-get-folder-path-request))
 (common-lisp:defun make-get-folder-path-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker fields limit folder-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-folder-path-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-folder-path-response common-lisp:nil
                       ((path :initarg :path :type
                         (common-lisp:or resource-path common-lisp:null)
                         :accessor %get-folder-path-response-path :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-folder-path-response 'make-get-folder-path-response))
 (common-lisp:defun make-get-folder-path-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path)
   (common-lisp:apply #'common-lisp:make-instance 'get-folder-path-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-folder-path-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-folder-request common-lisp:nil
                       ((include-custom-metadata :initarg
                         :include-custom-metadata :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor %get-folder-request-include-custom-metadata
                         :initform common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %get-folder-request-folder-id :initform
                         (common-lisp:error ":folder-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %get-folder-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-folder-request 'make-get-folder-request))
 (common-lisp:defun make-get-folder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-custom-metadata folder-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-folder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-folder-response common-lisp:nil
                       ((custom-metadata :initarg :custom-metadata :type
                         (common-lisp:or custom-metadata-map common-lisp:null)
                         :accessor %get-folder-response-custom-metadata
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or folder-metadata common-lisp:null)
                         :accessor %get-folder-response-metadata :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-folder-response 'make-get-folder-response))
 (common-lisp:defun make-get-folder-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-metadata metadata)
   (common-lisp:apply #'common-lisp:make-instance 'get-folder-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-folder-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-folder-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-metadata))
      (common-lisp:list
       (common-lisp:cons "CustomMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-folder-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resources-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %get-resources-request-marker :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         %get-resources-request-limit :initform
                         common-lisp:nil)
                        (collection-type :initarg :collection-type :type
                         (common-lisp:or resource-collection-type
                                         common-lisp:null)
                         :accessor %get-resources-request-collection-type
                         :initform common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %get-resources-request-user-id :initform
                         common-lisp:nil)
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %get-resources-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resources-request 'make-get-resources-request))
 (common-lisp:defun make-get-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker limit collection-type user-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resources-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or page-marker-type common-lisp:null)
                         :accessor %get-resources-response-marker :initform
                         common-lisp:nil)
                        (documents :initarg :documents :type
                         (common-lisp:or document-metadata-list
                                         common-lisp:null)
                         :accessor %get-resources-response-documents :initform
                         common-lisp:nil)
                        (folders :initarg :folders :type
                         (common-lisp:or folder-metadata-list common-lisp:null)
                         :accessor %get-resources-response-folders :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resources-response 'make-get-resources-response))
 (common-lisp:defun make-get-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker documents folders)
   (common-lisp:apply #'common-lisp:make-instance 'get-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folders))
      (common-lisp:list
       (common-lisp:cons "Folders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "Documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group-metadata common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or group-name-type common-lisp:null)
                         :accessor %group-metadata-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %group-metadata-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'group-metadata 'make-group-metadata))
 (common-lisp:defun make-group-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id)
   (common-lisp:apply #'common-lisp:make-instance 'group-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-metadata-list ()
   '(trivial-types:proper-list group-metadata))
 (common-lisp:defun |make-group-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype group-name-type () 'common-lisp:string)
(common-lisp:deftype hash-type () 'common-lisp:string)
(common-lisp:deftype header-name-type () 'common-lisp:string)
(common-lisp:deftype header-value-type () 'common-lisp:string)
(common-lisp:deftype id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition illegal-user-state-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-user-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-user-state-exception
                    'illegal-user-state-exception-message)))
(common-lisp:progn
 (common-lisp:defclass initiate-document-version-upload-request common-lisp:nil
                       ((parent-folder-id :initarg :parent-folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %initiate-document-version-upload-request-parent-folder-id
                         :initform common-lisp:nil)
                        (document-size-in-bytes :initarg
                         :document-size-in-bytes :type
                         (common-lisp:or size-type common-lisp:null) :accessor
                         %initiate-document-version-upload-request-document-size-in-bytes
                         :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or document-content-type
                                         common-lisp:null)
                         :accessor
                         %initiate-document-version-upload-request-content-type
                         :initform common-lisp:nil)
                        (content-modified-timestamp :initarg
                         :content-modified-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %initiate-document-version-upload-request-content-modified-timestamp
                         :initform common-lisp:nil)
                        (content-created-timestamp :initarg
                         :content-created-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor
                         %initiate-document-version-upload-request-content-created-timestamp
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor
                         %initiate-document-version-upload-request-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %initiate-document-version-upload-request-id
                         :initform common-lisp:nil)
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %initiate-document-version-upload-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'initiate-document-version-upload-request
                    'make-initiate-document-version-upload-request))
 (common-lisp:defun make-initiate-document-version-upload-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parent-folder-id document-size-in-bytes
                     content-type content-modified-timestamp
                     content-created-timestamp name id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'initiate-document-version-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-created-timestamp))
      (common-lisp:list
       (common-lisp:cons "ContentCreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ContentModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "DocumentSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass initiate-document-version-upload-response
                       common-lisp:nil
                       ((upload-metadata :initarg :upload-metadata :type
                         (common-lisp:or upload-metadata common-lisp:null)
                         :accessor
                         %initiate-document-version-upload-response-upload-metadata
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or document-metadata common-lisp:null)
                         :accessor
                         %initiate-document-version-upload-response-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'initiate-document-version-upload-response
                    'make-initiate-document-version-upload-response))
 (common-lisp:defun make-initiate-document-version-upload-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upload-metadata metadata)
   (common-lisp:apply #'common-lisp:make-instance
                      'initiate-document-version-upload-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-metadata))
      (common-lisp:list
       (common-lisp:cons "UploadMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-document-version-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-comment-operation-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-comment-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-comment-operation-exception
                    'invalid-comment-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-operation-exception
                    'invalid-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-password-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-password-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-password-exception
                    'invalid-password-exception-message)))
(common-lisp:deftype language-code-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype limit-type () 'common-lisp:integer)
(common-lisp:deftype locale-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass long-range-type common-lisp:nil
                       ((end-value :initarg :end-value :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %long-range-type-end-value :initform common-lisp:nil)
                        (start-value :initarg :start-value :type
                         (common-lisp:or long-type common-lisp:null) :accessor
                         %long-range-type-start-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'long-range-type 'make-long-range-type))
 (common-lisp:defun make-long-range-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-value start-value)
   (common-lisp:apply #'common-lisp:make-instance 'long-range-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input long-range-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input long-range-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-value))
      (common-lisp:list
       (common-lisp:cons "EndValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input long-range-type))
   common-lisp:nil))
(common-lisp:deftype long-type () 'common-lisp:integer)
(common-lisp:deftype marker-type () 'common-lisp:string)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:deftype next-marker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-options common-lisp:nil
                       ((email-message :initarg :email-message :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %notification-options-email-message
                         :initform common-lisp:nil)
                        (send-email :initarg :send-email :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor %notification-options-send-email :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-options 'make-notification-options))
 (common-lisp:defun make-notification-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key email-message send-email)
   (common-lisp:apply #'common-lisp:make-instance 'notification-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-email))
      (common-lisp:list
       (common-lisp:cons "SendEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-message))
      (common-lisp:list
       (common-lisp:cons "EmailMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-options))
   common-lisp:nil))
(common-lisp:deftype order-by-field-type () 'common-lisp:string)
(common-lisp:deftype order-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organization-user-list ()
   '(trivial-types:proper-list user))
 (common-lisp:defun |make-organization-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-marker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass participants common-lisp:nil
                       ((groups :initarg :groups :type
                         (common-lisp:or group-metadata-list common-lisp:null)
                         :accessor %participants-groups :initform
                         common-lisp:nil)
                        (users :initarg :users :type
                         (common-lisp:or user-metadata-list common-lisp:null)
                         :accessor %participants-users :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'participants 'make-participants))
 (common-lisp:defun make-participants
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key groups users)
   (common-lisp:apply #'common-lisp:make-instance 'participants
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input participants))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input participants))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input participants))
   common-lisp:nil))
(common-lisp:deftype password-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass permission-info common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or role-permission-type common-lisp:null)
                         :accessor %permission-info-type :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role-type common-lisp:null) :accessor
                         %permission-info-role :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'permission-info 'make-permission-info))
 (common-lisp:defun make-permission-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type role)
   (common-lisp:apply #'common-lisp:make-instance 'permission-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype permission-info-list ()
   '(trivial-types:proper-list permission-info))
 (common-lisp:defun |make-permission-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype positive-integer-type () 'common-lisp:integer)
(common-lisp:deftype positive-size-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass principal common-lisp:nil
                       ((roles :initarg :roles :type
                         (common-lisp:or permission-info-list common-lisp:null)
                         :accessor %principal-roles :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor %principal-type :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %principal-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'principal 'make-principal))
 (common-lisp:defun make-principal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key roles type id)
   (common-lisp:apply #'common-lisp:make-instance 'principal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-list () '(trivial-types:proper-list principal))
 (common-lisp:defun |make-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype principal-role-type () 'common-lisp:string)
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition prohibited-state-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       prohibited-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'prohibited-state-exception
                    'prohibited-state-exception-message)))
(common-lisp:progn
 (common-lisp:defclass remove-all-resource-permissions-request common-lisp:nil
                       ((resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %remove-all-resource-permissions-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %remove-all-resource-permissions-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-all-resource-permissions-request
                    'make-remove-all-resource-permissions-request))
 (common-lisp:defun make-remove-all-resource-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-all-resource-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-resource-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-resource-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-resource-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-resource-permission-request common-lisp:nil
                       ((principal-type :initarg :principal-type :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor
                         %remove-resource-permission-request-principal-type
                         :initform common-lisp:nil)
                        (principal-id :initarg :principal-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %remove-resource-permission-request-principal-id
                         :initform
                         (common-lisp:error ":principal-id is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %remove-resource-permission-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %remove-resource-permission-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-resource-permission-request
                    'make-remove-resource-permission-request))
 (common-lisp:defun make-remove-resource-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-type principal-id resource-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-resource-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-resource-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-resource-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-resource-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition requested-entity-too-large-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       requested-entity-too-large-exception-message)))
 (common-lisp:export
  (common-lisp:list 'requested-entity-too-large-exception
                    'requested-entity-too-large-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-already-checked-out-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-checked-out-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-checked-out-exception
                    'resource-already-checked-out-exception-message)))
(common-lisp:deftype resource-collection-type () 'common-lisp:string)
(common-lisp:deftype resource-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-metadata common-lisp:nil
                       ((parent-id :initarg :parent-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %resource-metadata-parent-id :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or user-metadata common-lisp:null)
                         :accessor %resource-metadata-owner :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %resource-metadata-version-id :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %resource-metadata-id :initform
                         common-lisp:nil)
                        (original-name :initarg :original-name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor %resource-metadata-original-name :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor %resource-metadata-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %resource-metadata-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-metadata 'make-resource-metadata))
 (common-lisp:defun make-resource-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parent-id owner version-id id
                     original-name name type)
   (common-lisp:apply #'common-lisp:make-instance 'resource-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-name))
      (common-lisp:list
       (common-lisp:cons "OriginalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-metadata))
   common-lisp:nil))
(common-lisp:deftype resource-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-path common-lisp:nil
                       ((components :initarg :components :type
                         (common-lisp:or resource-path-component-list
                                         common-lisp:null)
                         :accessor %resource-path-components :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-path 'make-resource-path))
 (common-lisp:defun make-resource-path
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key components)
   (common-lisp:apply #'common-lisp:make-instance 'resource-path
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "Components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-path-component common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor %resource-path-component-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %resource-path-component-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-path-component 'make-resource-path-component))
 (common-lisp:defun make-resource-path-component
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id)
   (common-lisp:apply #'common-lisp:make-instance 'resource-path-component
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-path-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-path-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-path-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-path-component-list ()
   '(trivial-types:proper-list resource-path-component))
 (common-lisp:defun |make-resource-path-component-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-path-component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-sort-type () 'common-lisp:string)
(common-lisp:deftype resource-state-type () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass response-item common-lisp:nil
                       ((document-version-metadata :initarg
                         :document-version-metadata :type
                         (common-lisp:or document-version-metadata
                                         common-lisp:null)
                         :accessor %response-item-document-version-metadata
                         :initform common-lisp:nil)
                        (comment-metadata :initarg :comment-metadata :type
                         (common-lisp:or comment-metadata common-lisp:null)
                         :accessor %response-item-comment-metadata :initform
                         common-lisp:nil)
                        (folder-metadata :initarg :folder-metadata :type
                         (common-lisp:or folder-metadata common-lisp:null)
                         :accessor %response-item-folder-metadata :initform
                         common-lisp:nil)
                        (document-metadata :initarg :document-metadata :type
                         (common-lisp:or document-metadata common-lisp:null)
                         :accessor %response-item-document-metadata :initform
                         common-lisp:nil)
                        (web-url :initarg :web-url :type
                         (common-lisp:or response-item-web-url
                                         common-lisp:null)
                         :accessor %response-item-web-url :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or response-item-type common-lisp:null)
                         :accessor %response-item-resource-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'response-item 'make-response-item))
 (common-lisp:defun make-response-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document-version-metadata
                     comment-metadata folder-metadata document-metadata web-url
                     resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'response-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-url))
      (common-lisp:list
       (common-lisp:cons "WebUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder-metadata))
      (common-lisp:list
       (common-lisp:cons "FolderMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment-metadata))
      (common-lisp:list
       (common-lisp:cons "CommentMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-version-metadata))
      (common-lisp:list
       (common-lisp:cons "DocumentVersionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-item))
   common-lisp:nil))
(common-lisp:deftype response-item-type () 'common-lisp:string)
(common-lisp:deftype response-item-web-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype response-items-list ()
   '(trivial-types:proper-list response-item))
 (common-lisp:defun |make-response-items-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list response-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass restore-document-versions-request common-lisp:nil
                       ((document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor
                         %restore-document-versions-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %restore-document-versions-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-document-versions-request
                    'make-restore-document-versions-request))
 (common-lisp:defun make-restore-document-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-document-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-document-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-document-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-document-versions-request))
   common-lisp:nil))
(common-lisp:deftype role-permission-type () 'common-lisp:string)
(common-lisp:deftype role-type () 'common-lisp:string)
(common-lisp:deftype search-ancestor-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-ancestor-id-list ()
   '(trivial-types:proper-list search-ancestor-id))
 (common-lisp:defun |make-search-ancestor-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-ancestor-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-collection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-collection-type-list ()
   '(trivial-types:proper-list search-collection-type))
 (common-lisp:defun |make-search-collection-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-collection-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype search-content-category-type-list ()
   '(trivial-types:proper-list content-category-type))
 (common-lisp:defun |make-search-content-category-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-category-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-label-list ()
   '(trivial-types:proper-list search-label))
 (common-lisp:defun |make-search-label-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-label))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-marker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-principal-role-list ()
   '(trivial-types:proper-list principal-role-type))
 (common-lisp:defun |make-search-principal-role-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-role-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-principal-type common-lisp:nil
                       ((roles :initarg :roles :type
                         (common-lisp:or search-principal-role-list
                                         common-lisp:null)
                         :accessor %search-principal-type-roles :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %search-principal-type-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'search-principal-type 'make-search-principal-type))
 (common-lisp:defun make-search-principal-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key roles id)
   (common-lisp:apply #'common-lisp:make-instance 'search-principal-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-principal-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-principal-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-principal-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-principal-type-list ()
   '(trivial-types:proper-list search-principal-type))
 (common-lisp:defun |make-search-principal-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-principal-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-query-scope-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-query-scope-type-list ()
   '(trivial-types:proper-list search-query-scope-type))
 (common-lisp:defun |make-search-query-scope-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-query-scope-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-query-type () 'common-lisp:string)
(common-lisp:deftype search-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-resource-type-list ()
   '(trivial-types:proper-list search-resource-type))
 (common-lisp:defun |make-search-resource-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-resources-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or next-marker-type common-lisp:null)
                         :accessor %search-resources-request-marker :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or search-results-limit-type
                                         common-lisp:null)
                         :accessor %search-resources-request-limit :initform
                         common-lisp:nil)
                        (order-by :initarg :order-by :type
                         (common-lisp:or search-result-sort-list
                                         common-lisp:null)
                         :accessor %search-resources-request-order-by :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %search-resources-request-filters :initform
                         common-lisp:nil)
                        (additional-response-fields :initarg
                         :additional-response-fields :type
                         (common-lisp:or additional-response-fields-list
                                         common-lisp:null)
                         :accessor
                         %search-resources-request-additional-response-fields
                         :initform common-lisp:nil)
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %search-resources-request-organization-id :initform
                         common-lisp:nil)
                        (query-scopes :initarg :query-scopes :type
                         (common-lisp:or search-query-scope-type-list
                                         common-lisp:null)
                         :accessor %search-resources-request-query-scopes
                         :initform common-lisp:nil)
                        (query-text :initarg :query-text :type
                         (common-lisp:or search-query-type common-lisp:null)
                         :accessor %search-resources-request-query-text
                         :initform common-lisp:nil)
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %search-resources-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-request 'make-search-resources-request))
 (common-lisp:defun make-search-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker limit order-by filters
                     additional-response-fields organization-id query-scopes
                     query-text authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'search-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-text))
      (common-lisp:list
       (common-lisp:cons "QueryText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-scopes))
      (common-lisp:list
       (common-lisp:cons "QueryScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-response-fields))
      (common-lisp:list
       (common-lisp:cons "AdditionalResponseFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "OrderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-resources-response common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or next-marker-type common-lisp:null)
                         :accessor %search-resources-response-marker :initform
                         common-lisp:nil)
                        (items :initarg :items :type
                         (common-lisp:or response-items-list common-lisp:null)
                         :accessor %search-resources-response-items :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-resources-response
                    'make-search-resources-response))
 (common-lisp:defun make-search-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker items)
   (common-lisp:apply #'common-lisp:make-instance 'search-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-result-sort-list ()
   '(trivial-types:proper-list search-sort-result))
 (common-lisp:defun |make-search-result-sort-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-sort-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-results-limit-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-sort-result common-lisp:nil
                       ((order :initarg :order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %search-sort-result-order :initform common-lisp:nil)
                        (field :initarg :field :type
                         (common-lisp:or order-by-field-type common-lisp:null)
                         :accessor %search-sort-result-field :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-sort-result 'make-search-sort-result))
 (common-lisp:defun make-search-sort-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order field)
   (common-lisp:apply #'common-lisp:make-instance 'search-sort-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-sort-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-sort-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-sort-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass share-principal common-lisp:nil
                       ((role :initarg :role :type
                         (common-lisp:or role-type common-lisp:null) :accessor
                         %share-principal-role :initform
                         (common-lisp:error ":role is required"))
                        (type :initarg :type :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor %share-principal-type :initform
                         (common-lisp:error ":type is required"))
                        (id :initarg :id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %share-principal-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'share-principal 'make-share-principal))
 (common-lisp:defun make-share-principal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role type id)
   (common-lisp:apply #'common-lisp:make-instance 'share-principal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype share-principal-list ()
   '(trivial-types:proper-list share-principal))
 (common-lisp:defun |make-share-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list share-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass share-result common-lisp:nil
                       ((status-message :initarg :status-message :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %share-result-status-message :initform
                         common-lisp:nil)
                        (share-id :initarg :share-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %share-result-share-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or share-status-type common-lisp:null)
                         :accessor %share-result-status :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role-type common-lisp:null) :accessor
                         %share-result-role :initform common-lisp:nil)
                        (invitee-principal-id :initarg :invitee-principal-id
                         :type (common-lisp:or id-type common-lisp:null)
                         :accessor %share-result-invitee-principal-id :initform
                         common-lisp:nil)
                        (principal-id :initarg :principal-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %share-result-principal-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'share-result 'make-share-result))
 (common-lisp:defun make-share-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message share-id status role
                     invitee-principal-id principal-id)
   (common-lisp:apply #'common-lisp:make-instance 'share-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invitee-principal-id))
      (common-lisp:list
       (common-lisp:cons "InviteePrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-id))
      (common-lisp:list
       (common-lisp:cons "ShareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype share-results-list ()
   '(trivial-types:proper-list share-result))
 (common-lisp:defun |make-share-results-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list share-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype share-status-type () 'common-lisp:string)
(common-lisp:deftype shared-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype shared-labels ()
   '(trivial-types:proper-list shared-label))
 (common-lisp:defun |make-shared-labels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shared-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype signed-header-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-signed-header-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype size-type () 'common-lisp:integer)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition storage-limit-exceeded-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       storage-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'storage-limit-exceeded-exception
                    'storage-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition storage-limit-will-exceed-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       storage-limit-will-exceed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'storage-limit-will-exceed-exception
                    'storage-limit-will-exceed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass storage-rule-type common-lisp:nil
                       ((storage-type :initarg :storage-type :type
                         (common-lisp:or storage-type common-lisp:null)
                         :accessor %storage-rule-type-storage-type :initform
                         common-lisp:nil)
                        (storage-allocated-in-bytes :initarg
                         :storage-allocated-in-bytes :type
                         (common-lisp:or positive-size-type common-lisp:null)
                         :accessor
                         %storage-rule-type-storage-allocated-in-bytes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'storage-rule-type 'make-storage-rule-type))
 (common-lisp:defun make-storage-rule-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-type storage-allocated-in-bytes)
   (common-lisp:apply #'common-lisp:make-instance 'storage-rule-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-rule-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-rule-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-allocated-in-bytes))
      (common-lisp:list
       (common-lisp:cons "StorageAllocatedInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-rule-type))
   common-lisp:nil))
(common-lisp:deftype storage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscription common-lisp:nil
                       ((protocol :initarg :protocol :type
                         (common-lisp:or subscription-protocol-type
                                         common-lisp:null)
                         :accessor %subscription-protocol :initform
                         common-lisp:nil)
                        (end-point :initarg :end-point :type
                         (common-lisp:or subscription-end-point-type
                                         common-lisp:null)
                         :accessor %subscription-end-point :initform
                         common-lisp:nil)
                        (subscription-id :initarg :subscription-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %subscription-subscription-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'subscription 'make-subscription))
 (common-lisp:defun make-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol end-point subscription-id)
   (common-lisp:apply #'common-lisp:make-instance 'subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "SubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-point))
      (common-lisp:list
       (common-lisp:cons "EndPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscription))
   common-lisp:nil))
(common-lisp:deftype subscription-end-point-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subscription-list ()
   '(trivial-types:proper-list subscription))
 (common-lisp:defun |make-subscription-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscription))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-protocol-type () 'common-lisp:string)
(common-lisp:deftype subscription-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype text-locale-type-list ()
   '(trivial-types:proper-list language-code-type))
 (common-lisp:defun |make-text-locale-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time-zone-id-type () 'common-lisp:string)
(common-lisp:deftype timestamp-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-labels-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-labels-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-labels-exception
                    'too-many-labels-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-subscriptions-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-subscriptions-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-subscriptions-exception
                    'too-many-subscriptions-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-operation-exception
     (workdocs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unauthorized-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-resource-access-exception
     (workdocs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-resource-access-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-resource-access-exception
                    'unauthorized-resource-access-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-document-request common-lisp:nil
                       ((resource-state :initarg :resource-state :type
                         (common-lisp:or resource-state-type common-lisp:null)
                         :accessor %update-document-request-resource-state
                         :initform common-lisp:nil)
                        (parent-folder-id :initarg :parent-folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %update-document-request-parent-folder-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor %update-document-request-name :initform
                         common-lisp:nil)
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %update-document-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %update-document-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-document-request 'make-update-document-request))
 (common-lisp:defun make-update-document-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-state parent-folder-id name
                     document-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "ResourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-document-version-request common-lisp:nil
                       ((version-status :initarg :version-status :type
                         (common-lisp:or document-version-status
                                         common-lisp:null)
                         :accessor
                         %update-document-version-request-version-status
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or document-version-id-type
                                         common-lisp:null)
                         :accessor %update-document-version-request-version-id
                         :initform
                         (common-lisp:error ":version-id is required"))
                        (document-id :initarg :document-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %update-document-version-request-document-id
                         :initform
                         (common-lisp:error ":document-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor
                         %update-document-version-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-document-version-request
                    'make-update-document-version-request))
 (common-lisp:defun make-update-document-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-status version-id document-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-document-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-status))
      (common-lisp:list
       (common-lisp:cons "VersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-folder-request common-lisp:nil
                       ((resource-state :initarg :resource-state :type
                         (common-lisp:or resource-state-type common-lisp:null)
                         :accessor %update-folder-request-resource-state
                         :initform common-lisp:nil)
                        (parent-folder-id :initarg :parent-folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %update-folder-request-parent-folder-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor %update-folder-request-name :initform
                         common-lisp:nil)
                        (folder-id :initarg :folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %update-folder-request-folder-id :initform
                         (common-lisp:error ":folder-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %update-folder-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-folder-request 'make-update-folder-request))
 (common-lisp:defun make-update-folder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-state parent-folder-id name
                     folder-id authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-folder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-folder-id))
      (common-lisp:list
       (common-lisp:cons "ParentFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-state))
      (common-lisp:list
       (common-lisp:cons "ResourceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-folder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-request common-lisp:nil
                       ((grant-poweruser-privileges :initarg
                         :grant-poweruser-privileges :type
                         (common-lisp:or boolean-enum-type common-lisp:null)
                         :accessor
                         %update-user-request-grant-poweruser-privileges
                         :initform common-lisp:nil)
                        (locale :initarg :locale :type
                         (common-lisp:or locale-type common-lisp:null)
                         :accessor %update-user-request-locale :initform
                         common-lisp:nil)
                        (time-zone-id :initarg :time-zone-id :type
                         (common-lisp:or time-zone-id-type common-lisp:null)
                         :accessor %update-user-request-time-zone-id :initform
                         common-lisp:nil)
                        (storage-rule :initarg :storage-rule :type
                         (common-lisp:or storage-rule-type common-lisp:null)
                         :accessor %update-user-request-storage-rule :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         %update-user-request-type :initform common-lisp:nil)
                        (surname :initarg :surname :type
                         (common-lisp:or user-attribute-value-type
                                         common-lisp:null)
                         :accessor %update-user-request-surname :initform
                         common-lisp:nil)
                        (given-name :initarg :given-name :type
                         (common-lisp:or user-attribute-value-type
                                         common-lisp:null)
                         :accessor %update-user-request-given-name :initform
                         common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %update-user-request-user-id :initform
                         (common-lisp:error ":user-id is required"))
                        (authentication-token :initarg :authentication-token
                         :type
                         (common-lisp:or authentication-header-type
                                         common-lisp:null)
                         :accessor %update-user-request-authentication-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defun make-update-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grant-poweruser-privileges locale
                     time-zone-id storage-rule type surname given-name user-id
                     authentication-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-token))
      (common-lisp:cons "Authentication" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-rule))
      (common-lisp:list
       (common-lisp:cons "StorageRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grant-poweruser-privileges))
      (common-lisp:list
       (common-lisp:cons "GrantPoweruserPrivileges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-response common-lisp:nil
                       ((user :initarg :user :type
                         (common-lisp:or user common-lisp:null) :accessor
                         %update-user-response-user :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defun make-update-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-metadata common-lisp:nil
                       ((signed-headers :initarg :signed-headers :type
                         (common-lisp:or signed-header-map common-lisp:null)
                         :accessor %upload-metadata-signed-headers :initform
                         common-lisp:nil)
                        (upload-url :initarg :upload-url :type
                         (common-lisp:or url-type common-lisp:null) :accessor
                         %upload-metadata-upload-url :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'upload-metadata 'make-upload-metadata))
 (common-lisp:defun make-upload-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signed-headers upload-url)
   (common-lisp:apply #'common-lisp:make-instance 'upload-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-url))
      (common-lisp:list
       (common-lisp:cons "UploadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-headers))
      (common-lisp:list
       (common-lisp:cons "SignedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-metadata))
   common-lisp:nil))
(common-lisp:deftype url-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((storage :initarg :storage :type
                         (common-lisp:or user-storage-metadata
                                         common-lisp:null)
                         :accessor %user-storage :initform common-lisp:nil)
                        (locale :initarg :locale :type
                         (common-lisp:or locale-type common-lisp:null)
                         :accessor %user-locale :initform common-lisp:nil)
                        (time-zone-id :initarg :time-zone-id :type
                         (common-lisp:or time-zone-id-type common-lisp:null)
                         :accessor %user-time-zone-id :initform
                         common-lisp:nil)
                        (modified-timestamp :initarg :modified-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %user-modified-timestamp :initform
                         common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp :type
                         (common-lisp:or timestamp-type common-lisp:null)
                         :accessor %user-created-timestamp :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         %user-type :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or user-status-type common-lisp:null)
                         :accessor %user-status :initform common-lisp:nil)
                        (recycle-bin-folder-id :initarg :recycle-bin-folder-id
                         :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %user-recycle-bin-folder-id :initform
                         common-lisp:nil)
                        (root-folder-id :initarg :root-folder-id :type
                         (common-lisp:or resource-id-type common-lisp:null)
                         :accessor %user-root-folder-id :initform
                         common-lisp:nil)
                        (organization-id :initarg :organization-id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %user-organization-id :initform common-lisp:nil)
                        (surname :initarg :surname :type
                         (common-lisp:or user-attribute-value-type
                                         common-lisp:null)
                         :accessor %user-surname :initform common-lisp:nil)
                        (given-name :initarg :given-name :type
                         (common-lisp:or user-attribute-value-type
                                         common-lisp:null)
                         :accessor %user-given-name :initform common-lisp:nil)
                        (email-address :initarg :email-address :type
                         (common-lisp:or email-address-type common-lisp:null)
                         :accessor %user-email-address :initform
                         common-lisp:nil)
                        (username :initarg :username :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor %user-username :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %user-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defun make-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage locale time-zone-id
                     modified-timestamp created-timestamp type status
                     recycle-bin-folder-id root-folder-id organization-id
                     surname given-name email-address username id)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-folder-id))
      (common-lisp:list
       (common-lisp:cons "RootFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recycle-bin-folder-id))
      (common-lisp:list
       (common-lisp:cons "RecycleBinFolderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-activities () '(trivial-types:proper-list activity))
 (common-lisp:defun |make-user-activities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-attribute-value-type () 'common-lisp:string)
(common-lisp:deftype user-filter-type () 'common-lisp:string)
(common-lisp:deftype user-ids-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-metadata common-lisp:nil
                       ((email-address :initarg :email-address :type
                         (common-lisp:or email-address-type common-lisp:null)
                         :accessor %user-metadata-email-address :initform
                         common-lisp:nil)
                        (surname :initarg :surname :type
                         (common-lisp:or user-attribute-value-type
                                         common-lisp:null)
                         :accessor %user-metadata-surname :initform
                         common-lisp:nil)
                        (given-name :initarg :given-name :type
                         (common-lisp:or user-attribute-value-type
                                         common-lisp:null)
                         :accessor %user-metadata-given-name :initform
                         common-lisp:nil)
                        (username :initarg :username :type
                         (common-lisp:or username-type common-lisp:null)
                         :accessor %user-metadata-username :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %user-metadata-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user-metadata 'make-user-metadata))
 (common-lisp:defun make-user-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key email-address surname given-name username
                     id)
   (common-lisp:apply #'common-lisp:make-instance 'user-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-metadata-list ()
   '(trivial-types:proper-list user-metadata))
 (common-lisp:defun |make-user-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-sort-type () 'common-lisp:string)
(common-lisp:deftype user-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-storage-metadata common-lisp:nil
                       ((storage-rule :initarg :storage-rule :type
                         (common-lisp:or storage-rule-type common-lisp:null)
                         :accessor %user-storage-metadata-storage-rule
                         :initform common-lisp:nil)
                        (storage-utilized-in-bytes :initarg
                         :storage-utilized-in-bytes :type
                         (common-lisp:or size-type common-lisp:null) :accessor
                         %user-storage-metadata-storage-utilized-in-bytes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'user-storage-metadata 'make-user-storage-metadata))
 (common-lisp:defun make-user-storage-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-rule storage-utilized-in-bytes)
   (common-lisp:apply #'common-lisp:make-instance 'user-storage-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-storage-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-storage-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-utilized-in-bytes))
      (common-lisp:list
       (common-lisp:cons "StorageUtilizedInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-rule))
      (common-lisp:list
       (common-lisp:cons "StorageRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-storage-metadata))
   common-lisp:nil))
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:deftype username-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun abort-document-version-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-abort-document-version-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "AbortDocumentVersionUpload"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'abort-document-version-upload))
(common-lisp:progn
 (common-lisp:defun activate-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id authentication-token)
   (common-lisp:declare (common-lisp:ignorable user-id authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/users/~A/activation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "ActivateUser"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-user))
(common-lisp:progn
 (common-lisp:defun add-resource-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     principals notification-options)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id principals
     notification-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-resource-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "AddResourcePermissions"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-resource-permissions))
(common-lisp:progn
 (common-lisp:defun create-comment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id parent-id thread-id text visibility
                     notify-collaborators)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id
     parent-id thread-id text visibility notify-collaborators))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-comment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A/comment"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "CreateComment"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-comment))
(common-lisp:progn
 (common-lisp:defun create-custom-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     version-id custom-metadata)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id version-id
     custom-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/customMetadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "CreateCustomMetadata"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-metadata))
(common-lisp:progn
 (common-lisp:defun create-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token name
                     parent-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token name parent-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/api/v1/folders"
                                                        "CreateFolder"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-folder))
(common-lisp:progn
 (common-lisp:defun create-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id labels authentication-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-id labels authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/labels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "CreateLabels"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-labels))
(common-lisp:progn
 (common-lisp:defun create-notification-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id endpoint protocol
                     subscription-type)
   (common-lisp:declare
    (common-lisp:ignorable organization-id endpoint protocol
     subscription-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-notification-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/organizations/~A/subscriptions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'organization-id))))
                                                        "CreateNotificationSubscription"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-notification-subscription))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id username email-address
                     given-name surname password time-zone-id storage-rule
                     authentication-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-id username email-address given-name
     surname password time-zone-id storage-rule authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/api/v1/users"
                                                        "CreateUser"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun deactivate-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id authentication-token)
   (common-lisp:declare (common-lisp:ignorable user-id authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/users/~A/activation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeactivateUser"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-user))
(common-lisp:progn
 (common-lisp:defun delete-comment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id comment-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id
     comment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-comment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A/comment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'comment-id))))
                                                        "DeleteComment"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-comment))
(common-lisp:progn
 (common-lisp:defun delete-custom-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     version-id keys delete-all)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id version-id keys
     delete-all))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/customMetadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "DeleteCustomMetadata"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-metadata))
(common-lisp:progn
 (common-lisp:defun delete-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "DeleteDocument"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-document))
(common-lisp:progn
 (common-lisp:defun delete-document-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id delete-prior-versions)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id
     delete-prior-versions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-document-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documentVersions/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "DeleteDocumentVersion"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-document-version))
(common-lisp:progn
 (common-lisp:defun delete-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id)
   (common-lisp:declare (common-lisp:ignorable authentication-token folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DeleteFolder"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-folder))
(common-lisp:progn
 (common-lisp:defun delete-folder-contents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id)
   (common-lisp:declare (common-lisp:ignorable authentication-token folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-folder-contents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DeleteFolderContents"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-folder-contents))
(common-lisp:progn
 (common-lisp:defun delete-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id authentication-token labels
                     delete-all)
   (common-lisp:declare
    (common-lisp:ignorable resource-id authentication-token labels delete-all))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/labels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "DeleteLabels"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-labels))
(common-lisp:progn
 (common-lisp:defun delete-notification-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-id organization-id)
   (common-lisp:declare
    (common-lisp:ignorable subscription-id organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-notification-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/organizations/~A/subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'organization-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscription-id))))
                                                        "DeleteNotificationSubscription"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-notification-subscription))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token user-id)
   (common-lisp:declare (common-lisp:ignorable authentication-token user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeleteUser"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun describe-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token start-time end-time
                     organization-id activity-types resource-id user-id
                     include-indirect-activities limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token start-time end-time
     organization-id activity-types resource-id user-id
     include-indirect-activities limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-activities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/api/v1/activities"
                                                        "DescribeActivities"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-activities))
(common-lisp:progn
 (common-lisp:defun describe-comments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id limit
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-comments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A/comments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "DescribeComments"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-comments))
(common-lisp:progn
 (common-lisp:defun describe-document-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id marker
                     limit include fields)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id marker limit
     include fields))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-document-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "DescribeDocumentVersions"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-document-versions))
(common-lisp:progn
 (common-lisp:defun describe-folder-contents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id sort order
                     limit marker type include)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token folder-id sort order limit
     marker type include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-folder-contents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "DescribeFolderContents"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-folder-contents))
(common-lisp:progn
 (common-lisp:defun describe-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token search-query
                     organization-id marker limit)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token search-query organization-id
     marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/api/v1/groups"
                                                        "DescribeGroups"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-groups))
(common-lisp:progn
 (common-lisp:defun describe-notification-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-id marker limit)
   (common-lisp:declare (common-lisp:ignorable organization-id marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-notification-subscriptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/organizations/~A/subscriptions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'organization-id))))
                                                        "DescribeNotificationSubscriptions"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-notification-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-resource-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     principal-id limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id principal-id limit
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-resource-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "DescribeResourcePermissions"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource-permissions))
(common-lisp:progn
 (common-lisp:defun describe-root-folders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-root-folders-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/api/v1/me/root"
                                                        "DescribeRootFolders"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-root-folders))
(common-lisp:progn
 (common-lisp:defun describe-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token organization-id
                     user-ids query include order sort marker limit fields)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token organization-id user-ids query
     include order sort marker limit fields))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/api/v1/users"
                                                        "DescribeUsers"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-users))
(common-lisp:progn
 (common-lisp:defun get-current-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token)
   (common-lisp:declare (common-lisp:ignorable authentication-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-current-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/api/v1/me"
                                                        "GetCurrentUser"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-current-user))
(common-lisp:progn
 (common-lisp:defun get-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     include-custom-metadata)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id
     include-custom-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "GetDocument"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document))
(common-lisp:progn
 (common-lisp:defun get-document-path
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id limit
                     fields marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id limit fields
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-document-path-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/path"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "GetDocumentPath"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document-path))
(common-lisp:progn
 (common-lisp:defun get-document-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id fields include-custom-metadata)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id fields
     include-custom-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-document-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "GetDocumentVersion"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document-version))
(common-lisp:progn
 (common-lisp:defun get-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id
                     include-custom-metadata)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token folder-id
     include-custom-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "GetFolder"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-folder))
(common-lisp:progn
 (common-lisp:defun get-folder-path
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id limit
                     fields marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token folder-id limit fields marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-folder-path-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A/path"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "GetFolderPath"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-folder-path))
(common-lisp:progn
 (common-lisp:defun get-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token user-id
                     collection-type limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token user-id collection-type limit
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/api/v1/resources"
                                                        "GetResources"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resources))
(common-lisp:progn
 (common-lisp:defun initiate-document-version-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token id name
                     content-created-timestamp content-modified-timestamp
                     content-type document-size-in-bytes parent-folder-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token id name
     content-created-timestamp content-modified-timestamp content-type
     document-size-in-bytes parent-folder-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-initiate-document-version-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/api/v1/documents"
                                                        "InitiateDocumentVersionUpload"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'initiate-document-version-upload))
(common-lisp:progn
 (common-lisp:defun remove-all-resource-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-all-resource-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/permissions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "RemoveAllResourcePermissions"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-all-resource-permissions))
(common-lisp:progn
 (common-lisp:defun remove-resource-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token resource-id
                     principal-id principal-type)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token resource-id principal-id
     principal-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-resource-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/resources/~A/permissions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'principal-id))))
                                                        "RemoveResourcePermission"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-resource-permission))
(common-lisp:progn
 (common-lisp:defun restore-document-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-document-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documentVersions/restore/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "RestoreDocumentVersions"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-document-versions))
(common-lisp:progn
 (common-lisp:defun search-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token query-text
                     query-scopes organization-id additional-response-fields
                     filters order-by limit marker)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token query-text query-scopes
     organization-id additional-response-fields filters order-by limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/api/v1/search"
                                                        "SearchResources"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-resources))
(common-lisp:progn
 (common-lisp:defun update-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id name
                     parent-folder-id resource-state)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id name
     parent-folder-id resource-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))))
                                                        "UpdateDocument"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-document))
(common-lisp:progn
 (common-lisp:defun update-document-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token document-id
                     version-id version-status)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token document-id version-id
     version-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-document-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/documents/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'document-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "UpdateDocumentVersion"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-document-version))
(common-lisp:progn
 (common-lisp:defun update-folder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token folder-id name
                     parent-folder-id resource-state)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token folder-id name parent-folder-id
     resource-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-folder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/folders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'folder-id))))
                                                        "UpdateFolder"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-folder))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-token user-id given-name
                     surname type storage-rule time-zone-id locale
                     grant-poweruser-privileges)
   (common-lisp:declare
    (common-lisp:ignorable authentication-token user-id given-name surname type
     storage-rule time-zone-id locale grant-poweruser-privileges))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workdocs-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/api/v1/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUser"
                                                        "2016-05-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
